@page

@using Microsoft.AspNetCore.Identity
@using pepeizqs_deals_web.Areas.Identity.Data

@model pepeizqs_deals_web.Pages.BundlesModel

@inject SignInManager<Usuario> SignInManager
@inject UserManager<Usuario> UserManager

@{
	#nullable disable

	string titulo = Herramientas.Idiomas.CogerCadena(Model.idioma, "Title", "Bundle");

	List<Bundles2.Bundle> bundlesActuales = new List<Bundles2.Bundle>();
	List<Bundles2.Bundle> bundles = BaseDatos.Bundles.Buscar.Actuales();

	if (bundles.Count > 0)
	{
		foreach (var bundle in bundles)
		{
			if (DateTime.Now >= bundle.FechaEmpieza && DateTime.Now <= bundle.FechaTermina)
			{
				bundlesActuales.Add(bundle);
			}
		}

		if (bundlesActuales.Count > 0)
		{
			if (bundlesActuales.Count == 1)
			{
				titulo = string.Format(Herramientas.Idiomas.CogerCadena(Model.idioma, "String16", "Bundle"), bundlesActuales.Count.ToString());
			}
			else if (bundlesActuales.Count > 1)
			{
				titulo = string.Format(Herramientas.Idiomas.CogerCadena(Model.idioma, "String17", "Bundle"), bundlesActuales.Count.ToString());
			}
		}
		else if (bundlesActuales.Count == 0)
		{
			titulo = Herramientas.Idiomas.CogerCadena(Model.idioma, "String18", "Bundle");
		}
	}

	ViewData["Title"] = titulo;
	Layout = "/Pages/Shared/_Layout.cshtml";

	bool usuarioLogeado = SignInManager.IsSignedIn(User);
	Usuario usuario = new Usuario();

	if (usuarioLogeado == true)
	{
		usuario = await UserManager.GetUserAsync(User);
	}

	string enlace = "https://pepeizqdeals.com/bundles/";

	string descripcion = Herramientas.Idiomas.CogerCadena(Model.idioma, "String19", "Bundle");

	bool seo = false;
	string userAgent = string.Empty;

	if (HttpContext != null)
	{
		userAgent = HttpContext.Request.Headers.UserAgent;

		if (string.IsNullOrEmpty(userAgent) == false)
		{
			if (userAgent.Contains("http://www.google.com/bot.html") == true || userAgent.Contains("http://www.bing.com/bingbot.htm") == true)
			{
				seo = true;
			}
		}
	}

	if (seo == true)
	{
		@(await Html.RenderComponentAsync<Componentes.Secciones.Seo>(RenderMode.ServerPrerendered, new
		{
			idioma = Model.idioma,
			titulo = titulo,
			enlace = enlace,
			canonical = enlace,
			descripcion = descripcion
		}))

		@(await Html.RenderComponentAsync<Componentes.Secciones.Bundles>(RenderMode.ServerPrerendered, new
		{
			idioma = Model.idioma
		}))
	}
	else
	{
		@(await Html.RenderComponentAsync<Componentes.Secciones.Bundles>(RenderMode.Server, new
		{
			idioma = Model.idioma,
			usuarioId = usuario?.Id
		}))
	}
}