@using APIs.Steam
@using Microsoft.AspNetCore.Identity;
@using Microsoft.Extensions.Caching.Memory;
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject SignInManager<Usuario> SignInManager
@inject UserManager<Usuario> UserManager

@{
    #nullable disable

    // Context.Response.Headers["Cache-Control"] = "no-store";

    string idioma = Context.Request.Headers["Accept-Language"].ToString().Split(";").FirstOrDefault()?.Split(",").FirstOrDefault();

    WebApplicationBuilder builder = WebApplication.CreateBuilder();
    string piscinaTiendas = builder.Configuration.GetValue<string>("PoolTiendas:Contenido");
    string piscinaUsada = Environment.GetEnvironmentVariable("APP_POOL_ID", EnvironmentVariableTarget.Process);

    string codigoFuente = builder.Configuration.GetValue<string>("Enlaces:CodigoFuente");
    string visitas = builder.Configuration.GetValue<string>("Enlaces:Visitas");

    string titulo = string.Empty;

    if (ViewData["Title"] != null)
    {
        if (ViewData["Title"].ToString() == Herramientas.Idiomas.CogerCadena(idioma, "Title", "Index"))
        {
            titulo = "pepeizq's deals • " + Herramientas.Idiomas.CogerCadena(idioma, "Subtitle", "Index");
        }
        else
        {
            titulo = ViewData["Title"].ToString() + " • pepeizq's deals";
        }
    }    

    bool usuarioLogeado = SignInManager.IsSignedIn(User);
    Usuario usuario = new Usuario();

    bool adminLogeado = false;

    if (usuarioLogeado == true)
    {
        usuario = await UserManager.GetUserAsync(User);
        
        if (usuario != null)
        {
            if (usuario != null)
            {
                if (usuario.EmailConfirmed == true && string.IsNullOrEmpty(usuario.SteamAccount) == false && string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
                {
                    bool tiempo = true;

                    if (string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
                    {
                        if (Convert.ToDateTime(usuario.SteamAccountLastCheck) + TimeSpan.FromDays(7) > DateTime.Now)
                        {
                            tiempo = false;
                        }
                    }

                    if (tiempo == true)
                    {
                        SteamUsuario datos = await APIs.Steam.Cuenta.CargarDatos(usuario.SteamAccount);

                        usuario.SteamGames = datos.Juegos;
                        usuario.SteamWishlist = datos.Deseados;
                        usuario.Avatar = datos.Avatar;
                        usuario.Nickname = datos.Nombre;
                        usuario.SteamAccountLastCheck = DateTime.Now.ToString();
                        usuario.OfficialGroup = datos.GrupoPremium;
                        usuario.OfficialGroup2 = datos.GrupoNormal;
                    }
                    else
                    {
                        if (string.IsNullOrEmpty(usuario.RewardsLastLogin) == true)
                        {
                            if (Herramientas.Listados.Generar(usuario.SteamGames).Count() > 50)
                            {
                                usuario.RewardsLastLogin = DateTime.Now.ToString();
                                usuario.RewardsCoins = 1;

                                global::BaseDatos.Recompensas.Historial.Insertar(usuario.Id, 1, "Daily", DateTime.Now);
                            }
                        }
                        else
                        {
                            if (usuario.RewardsCoins < 30)
                            {
                                if (Convert.ToDateTime(usuario.RewardsLastLogin).DayOfYear != DateTime.Now.DayOfYear)
                                {
                                    if (Herramientas.Listados.Generar(usuario.SteamGames).Count() > 50)
                                    {
                                        usuario.RewardsLastLogin = DateTime.Now.ToString();
                                        usuario.RewardsCoins = usuario.RewardsCoins + 1;

                                        global::BaseDatos.Recompensas.Historial.Insertar(usuario.Id, 1, "Daily", DateTime.Now);
                                    }
                                }
                            }
                        }
                    }
                }

                if (string.IsNullOrEmpty(idioma) == false)
                {
                    usuario.Language = idioma;
                }

                try
                {
                    await UserManager.UpdateAsync(usuario);
                }
                catch { }
            }

            if (BaseDatos.Usuarios.Buscar.RolDios(usuario.Id) == true)
            {
                adminLogeado = true;
            }
        }    
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <title>@titulo</title>

    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/maestro.css" asp-append-version="true" type="text/css" />
    <link rel="stylesheet" href="~/css/cabecera_cuerpo_pie.css" asp-append-version="true" type="text/css" />
    <link rel="stylesheet" href="~/css/resto.css" asp-append-version="true" type="text/css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" type="text/css" />
    <link rel="stylesheet" href="~/lib/font-awesome/css/all.css" type="text/css" />

    <link rel="apple-touch-icon" sizes="152x152" href="/favicons/apple-icon-152x152.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/favicons/apple-icon-180x180.png" />
    <link rel="icon" type="image/png" sizes="192x192" href="/favicons/android-icon-192x192.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicons/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="96x96" href="/favicons/favicon-96x96.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicons/favicon-16x16.png" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="msapplication-TileColor" content="#002033" />
    <meta name="msapplication-TileImage" content="/favicons/ms-icon-144x144.png" />
    <meta name="theme-color" content="#002033" />

    <component type="typeof(Radzen.Blazor.RadzenTheme)" render-mode="ServerPrerendered" param-Theme="@("material")" />

    <base href="/" />
</head>

<body class="cuerpo" id="cuerpazo">
    <header class="cabecera">
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm" style="padding: 0px;">
            <div class="cabecera-poner cuerpo-ancho">
                @(await Html.RenderComponentAsync<Componentes.Secciones.Cabecera>(RenderMode.Server, new { 
                    idioma = idioma, 
                    usuarioLogeado = usuarioLogeado,
                    adminLogeado = adminLogeado, 
                    usuarioAvatar = usuario?.Avatar,
                    usuarioNombre = usuario?.Nickname,
                    usuarioEmail = usuario?.Email,
                    usuarioCoins = usuario?.RewardsCoins,
                    ubicacionEnlace = Context.Request.Path.ToString()
                }))
            </div>
        </nav>
    </header>

    @if (Context.Request.Path.ToString().Contains("/admin") == false)
    {
        BaseDatos.Avisos.Aviso aviso = BaseDatos.Avisos.Buscar.Ejecutar(idioma);

        if (aviso != null)
        {
            if (string.IsNullOrEmpty(aviso.Mensaje.Trim()) == false)
            {
                <div style="padding: 20px; background-color: var(--fondoMinimo); font-size: 17px;">
                    <div class="cuerpo-ancho" style="display: flex; align-items: center; flex-direction: initial; gap: 30px;">
                        <label style="font-size: 14px; text-align: center;">@Herramientas.Calculadora.DiferenciaTiempo(aviso.Fecha, idioma)</label>

                        @{
                            bool hayEnlace = false;

                            if (string.IsNullOrEmpty(aviso.Enlace.Trim()) == false)
                            {
                                if (aviso.Enlace.Contains("https://") == true)
                                {
                                    hayEnlace = true;
                                }
                            }

                            if (hayEnlace == true)
                            {
                                <a href="@aviso.Enlace" target="_blank" style="text-decoration: none;">@aviso.Mensaje</a>
                            }
                            else
                            {
                                <label>@aviso.Mensaje</label>
                            }
                        }
                    </div>
                </div>
            }
        }
    }

    <main role="main" class="cuerpo-ancho cuerpo-espacio">
        @(await Html.RenderComponentAsync<Componentes.Tareas.Minimos>(RenderMode.Server))

        @if (piscinaTiendas == piscinaUsada)
        {
            @(await Html.RenderComponentAsync<Componentes.Tareas.Tiendas>(RenderMode.ServerPrerendered))
        }

        @RenderBody()
    </main>

    <footer class="pie">
        <div class="cuerpo-ancho" style="padding: 30px 10px;">
            <div style="display: flex; align-items: center; font-size: 17px;">
                <div style="width: 100%; text-align: left;">
                    <div>
                        &copy; @DateTime.Now.Year.ToString() • <a href="https://pepeizqapps.com/" style="text-decoration: none;" target="_blank">pepeizq's apps</a> • <a href="https://pepeizqdeals.com/" style="text-decoration: none;" target="_blank">pepeizq's deals</a>
                    </div>
                    
                    <div style="font-size: 16px; margin-top: 30px; display: flex; align-items: start;">
                        <div style="display: flex; flex-direction: column; gap: 5px; width: 100%;">
                            <a href="@codigoFuente" target="_blank" style="text-decoration: none;"><i class="fa-brands fa-github" style="font-size: 20px; margin-right: 10px;"></i>@Herramientas.Idiomas.CogerCadena(idioma, "SourceCode", "Footer")</a>
                            <a href="/contact" style="text-decoration: none;">@Herramientas.Idiomas.CogerCadena(idioma, "Contact", "Footer")</a>
                            <a href="/privacy" style="text-decoration: none;">@Herramientas.Idiomas.CogerCadena(idioma, "Privacy", "Footer")</a>
                            <a href="@visitas" style="text-decoration: none;" target="_blank">@Herramientas.Idiomas.CogerCadena(idioma, "Visits", "Footer")</a>
                        </div>

                        <div style="display: flex; flex-direction: column; gap: 5px; width: 100%;">
                            <a href="/rewards" style="text-decoration: none;">@Herramientas.Idiomas.CogerCadena(idioma, "Rewards", "Footer")</a>
                            <a href="/last-added" style="text-decoration: none;">@Herramientas.Idiomas.CogerCadena(idioma, "LastAdded", "Footer")</a>
                            <a href="/api" style="text-decoration: none;">@Herramientas.Idiomas.CogerCadena(idioma, "Api", "Footer")</a>
                            <a href="/cost-web" style="text-decoration: none;">@Herramientas.Idiomas.CogerCadena(idioma, "CostWeb", "Footer")</a>
                        </div>
                    </div>
                </div>

                <div style="padding: 0px 80px; display: flex; flex-direction: column; gap: 30px;">
                    @(await Html.RenderComponentAsync<Componentes.Interfaz.RedesSociales>(RenderMode.Server, new {
                        idioma = idioma,
                        tamañoFuente = "24px"
                    }))

                    <div style="text-align: center;">
                        <div>@Herramientas.Idiomas.CogerCadena(idioma, "Donations", "Footer")</div>

                        <div style="margin-top: 10px;">
                            <a href="https://paypal.me/pepeizq" style="text-decoration: none;"><i class="fa-brands fa-paypal" style="font-size: 22px;"></i></a>
                        </div>                       
                    </div>
                </div>

                <div>
                    <a onclick="moverScroll('cuerpazo')" style="color: var(--colorTextoOscuro); text-decoration: none; cursor: pointer;">
                        <i class="fa-solid fa-chevron-up subir-arriba" style="font-size: 22px;"></i>
                    </a>
                </div>
            </div>          
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    <script src="_framework/blazor.server.js" autostart="false"></script>
    <script>
        Blazor.start({
            reconnectionOptions: {
                maxRetries: 100,
                retryIntervalMilliseconds: 2000
            },
            configureSignalR: function (builder) {
                let c = builder.build();
                c.serverTimeoutInMilliseconds = 30000;
                c.keepAliveIntervalInMilliseconds = 10000;
                builder.build = () => {
                    return c;
                };
            }
        });
    </script>
    <script>
        // _reconnectCallback = function (d) {
        //     document.location.reload();
        // }
        // Blazor.defaultReconnectionHandler._reconnectCallback = function (d) { document.location.reload(); }
    </script>


   @*   <script src="_framework/blazor.server.js" autostart="false"></script>
    <script>
        async function boot() {
            await Blazor.start()

            if (document.location.href != "https://pepeizqdeals.com/admin") {
                while (Blazor.defaultReconnectionHandler === undefined) {
                    await delay(100)
                }
                Blazor.defaultReconnectionHandler._reconnectCallback = function (d) {
                    document.location.reload()
                }
            }
        }

        boot()
    </script>*@

    <script>
        function hoverTooltip(e, id) {
            var x = e.clientX,
                y = e.clientY;

            var tooltip = document.getElementById(id);

            if (screen.width / 2 > x) {
                tooltip.style.top = (y + 10) + 'px';
                tooltip.style.left = (x + 20) + 'px';
            }
            else {
                tooltip.style.top = (y - 10) + 'px';
                tooltip.style.left = (x - 20 - tooltip.getBoundingClientRect().width) + 'px';
            };
        };

        function moverScroll(id) {
            const element = document.getElementById(id);
            const y = element.getBoundingClientRect().top + window.pageYOffset;

            window.scrollTo({ top: y, behavior: 'smooth' });
        }

        function ocultar(id) {
            document.getElementById(id).style.display = 'none';
        }
    </script>

    <div id="components-reconnect-modal" style="display: none"/>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>