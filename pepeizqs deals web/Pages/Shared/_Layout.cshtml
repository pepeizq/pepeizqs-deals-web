@using APIs.Steam
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using pepeizqs_deals_web.Areas.Identity.Data

@inject SignInManager<Usuario> SignInManager
@inject UserManager<Usuario> UserManager

@{
    #nullable disable

    string idioma = Context.Request.Query["language"];

    if (string.IsNullOrEmpty(idioma) == true)
    {
        try
        {
            idioma = Context.Request.Headers["Accept-Language"].ToString().Split(";").FirstOrDefault()?.Split(",").FirstOrDefault();
        }
        catch { }
    }

    bool usuarioLogeado = SignInManager.IsSignedIn(User);
    Usuario usuario = new Usuario();

    if (usuarioLogeado == true)
    {
        usuario = await UserManager.GetUserAsync(User);

        if (usuario != null)
        {
            if (string.IsNullOrEmpty(usuario.LanguageOverride) == false)
            {
                idioma = usuario.LanguageOverride;
            }
        }
    }

    WebApplicationBuilder builder = WebApplication.CreateBuilder();
    string piscinaTiendas = builder.Configuration.GetValue<string>("PoolTiendas:Contenido");
    string piscinaUsada = Environment.GetEnvironmentVariable("APP_POOL_ID", EnvironmentVariableTarget.Process);

    string codigoFuente = builder.Configuration.GetValue<string>("Enlaces:CodigoFuente");
    string visitas = builder.Configuration.GetValue<string>("Enlaces:Visitas");

    string titulo = string.Empty;
    string descripcion = Herramientas.Idiomas.BuscarTexto(idioma, "Subtitle", "Index");

    if (ViewData["Title"] != null)
    {
        if (ViewData["Title"].ToString() == Herramientas.Idiomas.BuscarTexto(idioma, "Title", "Index"))
        {
            titulo = "pepeizq's deals • " + descripcion;
        }
        else
        {
            titulo = ViewData["Title"].ToString() + " • pepeizq's deals";
        }
    }    

    if (usuarioLogeado == true)
    {       
        if (usuario != null)
        {
            if (usuario != null)
            {
                if (usuario.EmailConfirmed == true)
                {
                    if (string.IsNullOrEmpty(usuario.SteamAccount) == false && string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
                    {
                        bool tiempo = true;

                        if (string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
                        {
                            if (Convert.ToDateTime(usuario.SteamAccountLastCheck) + TimeSpan.FromDays(7) > DateTime.Now)
                            {
                                tiempo = false;
                            }
                        }

                        if (tiempo == true)
                        {
                            SteamUsuario datos = await APIs.Steam.Cuenta.CargarDatos(usuario.SteamAccount);

                            usuario.SteamGames = datos.Juegos;
                            usuario.SteamWishlist = datos.Deseados;
                            usuario.Avatar = datos.Avatar;
                            usuario.Nickname = datos.Nombre;
                            usuario.SteamAccountLastCheck = DateTime.Now.ToString();
                            usuario.OfficialGroup = datos.GrupoPremium;
                            usuario.OfficialGroup2 = datos.GrupoNormal;
                        }
                    }

                    if (string.IsNullOrEmpty(usuario.GogAccount) == false && usuario.GogAccountLastCheck != null)
                    {
                        bool tiempo = true;

                        if (usuario.GogAccountLastCheck + TimeSpan.FromDays(7) > DateTime.Now)
                        {
                            tiempo = false;
                        }

                        if (tiempo == true)
                        {
                            usuario.GogGames = await APIs.GOG.Cuenta.BuscarJuegos(usuario.GogAccount);
                            usuario.GogWishlist = await APIs.GOG.Cuenta.BuscarDeseados(usuario.GogId);
                            usuario.GogAccountLastCheck = DateTime.Now;
                        }
                    }

                    if (usuario.PatreonLastLogin == null && Herramientas.Patreon.VerificarActivo(usuario.PatreonLastCheck) == true)
                    {
                        usuario.PatreonLastLogin = DateTime.Now;
                        usuario.PatreonCoins = 1;

                        global::BaseDatos.Recompensas.Historial.Insertar(usuario.Id, 1, "Daily", DateTime.Now);
                    }

                    if (usuario.PatreonLastLogin != null && Herramientas.Patreon.VerificarActivo(usuario.PatreonLastCheck) == true)
                    {
                        if (usuario.PatreonCoins < 30)
                        {
                            if (usuario.PatreonLastLogin?.DayOfYear != DateTime.Now.DayOfYear)
                            {
                                usuario.PatreonLastLogin = DateTime.Now;
                                usuario.PatreonCoins = usuario.PatreonCoins + 1;

                                global::BaseDatos.Recompensas.Historial.Insertar(usuario.Id, 1, "Daily", DateTime.Now);
                            }
                        }
                    }
                }

                if (string.IsNullOrEmpty(idioma) == false)
                {
                    usuario.Language = idioma;
                }

                try
                {
                    await UserManager.UpdateAsync(usuario);
                }
                catch { }
            }
        }    
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
   
    <title>@titulo</title>

    <link rel="stylesheet" href="~/css/bundle.css" type="text/css" media="print" onload="this.media='all'" />

    <link rel="apple-touch-icon" sizes="152x152" href="/favicons/apple-icon-152x152.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/favicons/apple-icon-180x180.png" />
    <link rel="icon" type="image/png" sizes="192x192" href="/favicons/android-icon-192x192.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicons/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="96x96" href="/favicons/favicon-96x96.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicons/favicon-16x16.png" />
    <link rel="manifest" href="/manifest.json" />
    <link rel="alternate" type="application/rss+xml" href="/rss-en.xml" />

    <meta name="msapplication-TileColor" content="#002033" />
    <meta name="msapplication-TileImage" content="/favicons/ms-icon-144x144.png" />
    <meta name="theme-color" content="#002033" />

    <base href="/" />

    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>

<body class="cuerpo" id="cuerpazo">
    <header class="cabecera">
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm cuerpo-ancho" style="padding: 0px;">
            <div class="cabecera-poner">
                 <component type="typeof(Componentes.Interfaz.Cabecera)" render-mode="ServerPrerendered" param-idioma="idioma" param-usuario="usuario" param-usuarioLogeado="usuarioLogeado" param-ubicacionEnlace="Context.Request.Path.ToString()"/>
            </div>
        </nav>
    </header>

    @if (Context.Request.Path.ToString().Contains("/admin") == false)
    {
        BaseDatos.Avisos.Aviso aviso = BaseDatos.Avisos.Buscar.Ejecutar(idioma);

        if (aviso != null)
        {
            if (string.IsNullOrEmpty(aviso.Mensaje.Trim()) == false)
            {
                <div style="padding: 20px; background-color: var(--fondoMinimo); font-size: 17px;">
                    <div class="cuerpo-ancho" style="display: flex; align-items: center; flex-direction: initial; gap: 30px;">
                        <label style="font-size: 14px; text-align: center; width: fit-content;">@Herramientas.Calculadora.DiferenciaTiempo(aviso.Fecha, idioma)</label>

                        @{
                            bool hayEnlace = false;

                            if (string.IsNullOrEmpty(aviso.Enlace.Trim()) == false)
                            {
                                if (aviso.Enlace.Contains("https://") == true)
                                {
                                    hayEnlace = true;
                                }
                            }

                            if (hayEnlace == true)
                            {
                                <a href="@aviso.Enlace" target="_blank" style="text-decoration: none;">@aviso.Mensaje</a>
                            }
                            else
                            {
                                <label>@aviso.Mensaje</label>
                            }
                        }
                    </div>
                </div>
            }
        }
    }

    <main role="main" class="cuerpo-ancho cuerpo-espacio">
        @RenderBody()
    </main>

    <footer class="pie">
        <div class="cuerpo-ancho" style="padding: 30px 10px;">
            <div style="display: flex; align-items: center; font-size: 17px;">
                <div style="width: 100%; text-align: left;">
                    <div>
                        &copy; @DateTime.Now.Year.ToString() • <a href="https://pepeizqapps.com/" style="text-decoration: none;" target="_blank">pepeizq's apps</a> • <a href="https://pepeizqdeals.com/" style="text-decoration: none;" target="_blank">pepeizq's deals</a>
                    </div>
                    
                    <div style="font-size: 16px; margin-top: 30px; display: flex; align-items: start;">
                        <div style="display: flex; flex-direction: column; gap: 5px; width: 100%;">
                            <a href="@codigoFuente" target="_blank" style="text-decoration: none;">
                                <div style="display: flex; align-items: center; gap: 10px;">
                                    <svg style="width: 22px; height: 22px; fill: var(--colorEnlace);" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512">
                                        <path d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3 .3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5 .3-6.2 2.3zm44.2-1.7c-2.9 .7-4.9 2.6-4.6 4.9 .3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3 .7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3 .3 2.9 2.3 3.9 1.6 1 3.6 .7 4.3-.7 .7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3 .7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3 .7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z" />
                                    </svg>
                                
                                    <div>
                                        @Herramientas.Idiomas.BuscarTexto(idioma, "SourceCode", "Footer")
                                    </div>
                                </div>
                            </a>
                            <a href="/contact" style="text-decoration: none;">@Herramientas.Idiomas.BuscarTexto(idioma, "Contact", "Footer")</a>
                            <a href="/privacy" style="text-decoration: none;">@Herramientas.Idiomas.BuscarTexto(idioma, "Privacy", "Footer")</a>
                            <a href="https://pepeizqapps.com/extension/pepeizq-deals" style="text-decoration: none;">@Herramientas.Idiomas.BuscarTexto(idioma, "Extension", "Footer")</a>
                            <a href="/compare" style="text-decoration: none;">@Herramientas.Idiomas.BuscarTexto(idioma, "Compare", "Footer")</a>
                        </div>

                        <div style="display: flex; flex-direction: column; gap: 5px; width: 100%;">
                            <a href="/patreon" style="text-decoration: none;">@Herramientas.Idiomas.BuscarTexto(idioma, "Patreon", "Footer")</a>
                            <a href="/api" style="text-decoration: none;">@Herramientas.Idiomas.BuscarTexto(idioma, "Api", "Footer")</a>
                            <a href="/last-added" style="text-decoration: none;">@Herramientas.Idiomas.BuscarTexto(idioma, "LastAdded", "Footer")</a>
                            <a href="/cost-web" style="text-decoration: none;">@Herramientas.Idiomas.BuscarTexto(idioma, "CostWeb", "Footer")</a>
                        </div>
                    </div>
                </div>

                <div style="padding: 0px 80px; display: flex; flex-direction: column; gap: 30px;">
                    <component type="typeof(Componentes.Interfaz.RedesSociales)" render-mode="ServerPrerendered" param-idioma="idioma"/>
                </div>

                <div>
                    <button onclick="moverScroll('cuerpazo')" style="text-decoration: none; cursor: pointer; background-color: transparent; border: 0px;" title="Up">
                        <div class="subir-arriba" style="max-width: 40px; max-height: 40px;">
                            <svg class="svg-icono" style="fill: var(--colorTextoOscuro);" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M233.4 105.4c12.5-12.5 32.8-12.5 45.3 0l192 192c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L256 173.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l192-192z" /></svg>
                        </div>
                    </button>
                </div>
            </div>          
        </div>
    </footer>

    <script src="_framework/blazor.server.js" autostart="false"></script>

    <script async src="~/superjs.js"></script>

    <script>
        function delay(milliseconds) {
            return new Promise(resolve => {
                setTimeout(resolve, milliseconds)
            });
        }

        async function boot() {
            await Blazor.start({
                reconnectionOptions: {
                    maxRetries: 10,
                    retryIntervalMilliseconds: 1000
                }
            })

            if (document.location.href.indexOf("https://pepeizqdeals.com/admin") == -1) {
                while (Blazor.defaultReconnectionHandler === undefined) {
                    await delay(100)
                }
                Blazor.defaultReconnectionHandler._reconnectCallback = function (d) {
                    document.location.reload()
                }
            }
        }

        boot()
    </script>

    <script>
        function hoverTooltip(e, id) {
            var x = e.clientX,
                y = e.clientY;

            var tooltip = document.getElementById(id);

            if (screen.width / 2 > x) {
                tooltip.style.top = (y + 10) + 'px';
                tooltip.style.left = (x + 20) + 'px';
            }
            else {
                tooltip.style.top = (y - 10) + 'px';
                tooltip.style.left = (x - 20 - tooltip.getBoundingClientRect().width) + 'px';
            };
        };

        function moverScroll(id) {
            const element = document.getElementById(id);
            const y = element.getBoundingClientRect().top + window.pageYOffset;

            window.scrollTo({ top: y, behavior: 'smooth' });
        }

        function ocultar(id) {
            document.getElementById(id).style.display = 'none';
        }
    </script>

    <script>
        window.clipboardCopy = {
            copyText: function(text) {
                navigator.clipboard.writeText(text).then(function () {
                    alert("Copied to clipboard");
                })
                .catch(function (error) {
                    alert(error);
                });
            }
        };
    </script>

    <script>navigator.serviceWorker.register('service-worker.js');</script>

    <div id="components-reconnect-modal" style="display: none"/>

    @await RenderSectionAsync("Scripts", required: false)

    <persist-component-state />
</body>
</html>