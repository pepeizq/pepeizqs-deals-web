@using Juegos
@using Microsoft.Data.SqlClient

@code {

	#nullable disable

	public class MinimoListado
	{
		public Juego Juego { get; set; }
		public JuegoPrecio Historico { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(1);
		WebApplicationBuilder builder = WebApplication.CreateBuilder();
		string piscinaMinimos = builder.Configuration.GetValue<string>("PoolWeb:Contenido");
		string piscinaUsada = Environment.GetEnvironmentVariable("APP_POOL_ID", EnvironmentVariableTarget.Process);

		if (piscinaMinimos == piscinaUsada)
		{
			SqlConnection conexion = new SqlConnection();

			try
			{
				conexion = Herramientas.BaseDatos.Conectar();
			}
			catch { }

			if (conexion.State == System.Data.ConnectionState.Open)
			{
				try
				{
					TimeSpan tiempoSiguiente = TimeSpan.FromMinutes(5);

					if (BaseDatos.Tiendas.Admin.ComprobarTareaUso(conexion, "minimos", tiempoSiguiente) == true)
					{
						BaseDatos.Tiendas.Admin.ActualizarTareaUso(conexion, "minimos", DateTime.Now);

						List<Juego> juegos = BaseDatos.Juegos.Buscar.Todos(conexion, "juegos", 3);

						if (juegos != null)
						{
							if (juegos.Count > 0)
							{
								List<MinimoListado> juegosConMinimos = new List<MinimoListado>();

								foreach (var juego in juegos)
								{
									if (juego != null)
									{
										if (juego.Analisis != null)
										{
											if (string.IsNullOrEmpty(juego.Analisis.Porcentaje) == false && string.IsNullOrEmpty(juego.Analisis.Cantidad) == false)
											{
												if (juego.Analisis.Cantidad.Length > 2)
												{
													if (juego.PrecioMinimosHistoricos != null)
													{
														if (juego.PrecioMinimosHistoricos.Count > 0)
														{
															List<JuegoPrecio> historicosFinales = new List<JuegoPrecio>();

															foreach (var historico in juego.PrecioMinimosHistoricos)
															{
																TimeSpan actualizado = DateTime.Now.Subtract(historico.FechaActualizacion);

																if (actualizado.Days == 0)
																{
																	bool añadir = true;

																	if (historico.DRM == JuegoDRM.NoEspecificado)
																	{
																		añadir = false;
																	}

																	if (añadir == true)
																	{
																		historicosFinales.Add(historico);
																	}
																}
															}

															if (historicosFinales.Count > 0)
															{
																foreach (var historicoFinal in historicosFinales)
																{
																	Juego nuevoJuego = new Juego();
																	nuevoJuego = juego;
																	nuevoJuego.PrecioMinimosHistoricos = null;
																	nuevoJuego.PrecioActualesTiendas = null;
																	nuevoJuego.IdMaestra = juego.Id;

																	bool añadir = true;

																	if (string.IsNullOrEmpty(nuevoJuego.FreeToPlay) == false)
																	{
																		if (nuevoJuego.FreeToPlay.ToLower() == "true")
																		{
																			añadir = false;
																		}
																	}

																	if (string.IsNullOrEmpty(nuevoJuego.MayorEdad) == false)
																	{
																		if (nuevoJuego.MayorEdad.ToLower() == "true")
																		{
																			añadir = false;
																		}
																	}

																	if (nuevoJuego.Gratis != null)
																	{
																		if (nuevoJuego.Gratis.Count > 0)
																		{
																			foreach (var gratis in nuevoJuego.Gratis)
																			{
																				if (gratis.DRM == historicoFinal.DRM)
																				{
																					añadir = false;
																				}
																			}
																		}
																	}

																	if (añadir == true)
																	{
																		MinimoListado minimoListado = new MinimoListado();
																		minimoListado.Juego = nuevoJuego;
																		minimoListado.Historico = historicoFinal;

																		juegosConMinimos.Add(minimoListado);
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}

								if (juegosConMinimos != null)
								{
									if (juegosConMinimos.Count > 0)
									{
										BaseDatos.Portada.Limpiar.Ejecutar("seccionMinimos", conexion);

										juegosConMinimos = juegosConMinimos.OrderByDescending(x => int.Parse(x.Juego.Analisis.Cantidad.Replace(",", null))).ThenBy(x => x.Juego.Nombre).ToList();

										List<MinimoListado> juegosDestacadosMostrar = new List<MinimoListado>();

										int i = 0;

										foreach (var minimo in juegosConMinimos)
										{
											try
											{
												Juego juegoMinimoFinal = minimo.Juego;
												juegoMinimoFinal.PrecioMinimosHistoricos = [minimo.Historico];

												BaseDatos.Juegos.Insertar.Ejecutar(juegoMinimoFinal, conexion, "seccionMinimos");
											}
											catch (Exception ex)
											{
												BaseDatos.Errores.Insertar.Ejecutar("Portada Destacados " + minimo.Juego.Nombre, ex);
											}

											bool añadir = true;

											if (juegosDestacadosMostrar.Count > 0)
											{
												foreach (var juegoDestacado in juegosDestacadosMostrar)
												{
													if (juegoDestacado.Juego.Id == minimo.Juego.Id)
													{
														añadir = false;
														break;
													}
												}
											}

											if (minimo.Juego.Tipo != JuegoTipo.Game)
											{
												añadir = false;
											}

											if (minimo.Historico.DRM != JuegoDRM.Steam)
											{
												añadir = false;
											}

											if (minimo.Juego.Bundles != null)
											{
												foreach (var bundle in minimo.Juego.Bundles)
												{
													if (DateTime.Now >= bundle.FechaEmpieza && DateTime.Now <= bundle.FechaTermina)
													{
														añadir = false;
														break;
													}
												}
											}

											if (minimo.Juego.Gratis != null)
											{
												foreach (var gratis in minimo.Juego.Gratis)
												{
													if (DateTime.Now >= gratis.FechaEmpieza && DateTime.Now <= gratis.FechaTermina)
													{
														añadir = false;
														break;
													}
												}
											}

											if (minimo.Juego.Suscripciones != null)
											{
												foreach (var suscripcion in minimo.Juego.Suscripciones)
												{
													if (DateTime.Now >= suscripcion.FechaEmpieza && DateTime.Now <= suscripcion.FechaTermina)
													{
														añadir = false;
														break;
													}
												}
											}

											if (añadir == true && minimo != null)
											{
												string tempCantidad = minimo.Juego.Analisis.Cantidad;
												tempCantidad = tempCantidad.Replace(".", null);
												tempCantidad = tempCantidad.Replace(",", null);

												if (Convert.ToInt32(tempCantidad) >= 5000)
												{
													if (i < 150)
													{
														juegosDestacadosMostrar.Add(minimo);
														i += 1;

														if (i == 150)
														{
															break;
														}
													}
												}
											}
										}

										if (juegosDestacadosMostrar.Count > 0)
										{
											BaseDatos.Portada.Limpiar.Ejecutar("portadaJuegosDestacados", conexion);

											foreach (var juegoDestacado in juegosDestacadosMostrar)
											{
												Juego juegoDestacadoFinal = juegoDestacado.Juego;
												juegoDestacadoFinal.PrecioMinimosHistoricos = [juegoDestacado.Historico];

												try
												{
													BaseDatos.Juegos.Insertar.Ejecutar(juegoDestacadoFinal, conexion, "portadaJuegosDestacados");
												}
												catch (Exception ex)
												{
													BaseDatos.Errores.Insertar.Ejecutar("Portada Destacados " + juegoDestacadoFinal.Nombre, ex);
												}
											}
										}
									}
								}
							}
						}
					}
				}
				catch (Exception ex)
				{
					BaseDatos.Errores.Insertar.Ejecutar("Tarea - Minimos", ex, conexion);
				}
			}
		}
    }

}
