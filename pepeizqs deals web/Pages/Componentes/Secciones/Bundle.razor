@using APIs.Steam
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor

<div class="perfil" style="margin-bottom: 40px; padding: 30px; display: flex; align-items: center; flex-direction: row; position: -webkit-sticky; position: sticky; top: 70px; z-index: 3;">
	<a href="@Herramientas.EnlaceAcortador.Generar(bundle.Enlace, bundle.Tipo)" style="text-decoration: none;" target="_blank">
		<div style="display: flex; align-items: center; flex-direction: row;">
			<div style="height: 60px; padding-left: 20px; padding-right: 20px;">
				<img src="@Bundles2.BundlesCargar.DevolverBundle(bundle.Tipo).ImagenTienda" style="height: 100%;" />
			</div>

			<div style="padding-left: 20px; padding-right: 20px;">
				<div style="font-size: 18px; margin-bottom: 5px;">
					@bundle.NombreBundle
				</div>
				<div>
					@bundle.FechaEmpieza.Day.ToString()/@bundle.FechaEmpieza.Month.ToString()/@bundle.FechaEmpieza.Year.ToString() • @bundle.FechaTermina.Day.ToString()/@bundle.FechaTermina.Month.ToString()/@bundle.FechaTermina.Year.ToString()
				</div>
			</div>
		</div>
	</a>
</div>

@if (bundle.Tiers != null)
{
	decimal totalMinimos = 0;

	if (bundle.Tiers.Count > 0)
	{
		foreach (var tier in OrdenarTiers(bundle.Tiers))
		{
			<div class="perfil" style="margin-bottom: 40px; padding: 30px;">
				@{
					List<Bundles2.BundleJuego> juegosTier = new List<Bundles2.BundleJuego>();

					foreach (var juego in bundle.Juegos)
					{
						if (juego.Tier.Posicion == tier.Posicion)
						{
							juegosTier.Add(juego);
						}
					}

					if (juegosTier.Count > 0)
					{
						juegosTier = juegosTier.OrderBy(x => x.Nombre).ToList();
					}

					if (bundle.Pick == true)
					{
						<div style="font-size: 18px; margin-bottom: 10px;">
							@((MarkupString)MostrarMensajePick(bundle.Tiers))
						</div>
					}
					else
					{
						<div style="font-size: 18px; margin-bottom: 5px;">
							@MostrarTierPrecio(tier)
						</div>

						foreach (var juego in juegosTier)
						{
							if (juego.Juego.PrecioMinimosHistoricos != null)
							{
								foreach (var historico in juego.Juego.PrecioMinimosHistoricos)
								{
									if (historico.DRM == juego.DRM)
									{
										totalMinimos = totalMinimos + historico.Precio;

										break;
									}
								}
							}
						}

						<div style="font-size: 14px; margin-bottom: 10px;">
							@Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String14"): @ArreglarPrecio(totalMinimos)
						</div>
					}

					<hr />

					foreach (var juego in juegosTier)
					{
						bool usuarioTieneJuego = ComprobarUsuarioTieneJuego(juego.Juego, juego.DRM);

						string fondoColor = string.Empty;
						string tooltip = string.Empty;

						if (usuarioTieneJuego == true)
						{
							fondoColor = "background-color: var(--fondoBien);";
							tooltip = Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String13");
						}
						else
						{
							bool usuarioTieneDeseado = Herramientas.Deseados.ComprobarSiEsta(usuario, juego.Juego, juego.DRM);

							if (usuarioTieneDeseado == true)
							{
								fondoColor = "background-color: var(--fondoAlerta);";
								tooltip = Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String16");
							}
						}

						<a href="/game/@juego.JuegoId" class="boton-pequeño" style="padding: 0px; text-align: center; background: transparent; position: relative; @fondoColor" title="@tooltip">
							<div style="display: flex; align-items: center; padding: 10px;">
								<div style="text-align: center; width: 17%;">
									<img src="@juego.Imagen" style="width: 100%; height: 100%;" />
								</div>

								<div style="padding-left: 20px; padding-right: 20px; text-align: left;">
									<div style="margin-bottom: 10px; font-size: 17px;">
										@juego.Nombre
									</div>

									<div style="display: flex; align-items: center;">
										<div>
											<img src="@Juegos.JuegoDRM2.SacarImagen(juego.DRM)" style="width: 20px; height: 20px;" />
										</div>

										@if (juego.Juego.Tipo == Juegos.JuegoTipo.DLC)
										{
											<div style="margin-left: 15px; font-size: 14px; background: var(--fondoDlc);">
												<span style="padding: 4px 6px; line-height: 24px; vertical-align: middle;">@Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String15")</span>
											</div>
										}
									</div>
								</div>

								<div style="margin-left: auto; margin-right: 0; display: flex; align-items: center;">
									@{
										if (juego.Juego.PrecioMinimosHistoricos != null)
										{
											foreach (var historico in juego.Juego.PrecioMinimosHistoricos)
											{
												if (historico.DRM == juego.DRM)
												{
													<div style="padding-left: 20px; text-align: center;">
														<div style="margin-bottom: 5px;">
															@Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String9")
														</div>

														<div>
															@ArreglarPrecio(historico.Precio)
														</div>
													</div>

													break;
												}
											}
										}

										int bundlesEstado = 0;

										if (juego.Juego.Bundles != null)
										{
											bundlesEstado = juego.Juego.Bundles.Count;

											if (bundlesEstado > 0)
											{
												bundlesEstado -= 1;
											}
										}

										<div style="padding-left: 20px; text-align: center;">
											<div style="margin-bottom: 5px;">
												@Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String10")
											</div>

											<div>
												@bundlesEstado
											</div>
										</div>

										int gratisEstado = 0;

										if (juego.Juego.Gratis != null)
										{
											gratisEstado = juego.Juego.Gratis.Count;
										}

										<div style="padding-left: 20px; text-align: center;">
											<div style="margin-bottom: 5px;">
												@Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String11")
											</div>

											<div>
												@gratisEstado
											</div>
										</div>

										int suscripcionesEstado = 0;

										if (juego.Juego.Suscripciones != null)
										{
											suscripcionesEstado = juego.Juego.Suscripciones.Count;
										}

										<div style="padding-left: 20px; text-align: center;">
											<div style="margin-bottom: 5px;">
												@Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String12")
											</div>

											<div>
												@suscripcionesEstado
											</div>
										</div>
									}
								</div>
							</div>
						</a>

						<hr />
					}
				}
			</div>

			@if (bundle.Pick == true)
			{
				break;
			}
		}
	}
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public int bundleId { get; set; }

	public Bundles2.Bundle bundle = new Bundles2.Bundle();

	private Usuario usuario = new Usuario();
	private List<string> juegosUsuario = new List<string>();

	protected override async Task OnInitializedAsync()
	{
		bundle = BaseDatos.Bundles.Buscar.UnBundle(bundleId);

		foreach (var juego in bundle.Juegos)
		{
			juego.Juego = BaseDatos.Juegos.Buscar.UnJuego(juego.JuegoId.ToString());
		}

		//------------------------------------------------------------

		usuario = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);

		if (usuario != null)
		{
			if (string.IsNullOrEmpty(usuario.SteamAccount) == false && string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
			{
				bool tiempo = true;

				if (string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
				{
					if (Convert.ToDateTime(usuario.SteamAccountLastCheck) + TimeSpan.FromDays(7) > DateTime.Now)
					{
						tiempo = false;
					}
				}

				if (tiempo == true)
				{
					SteamUsuario datos = await Cuenta.CargarDatos(usuario.SteamAccount);

					usuario.SteamGames = datos.Juegos;
					usuario.SteamWishlist = datos.Deseados;
					usuario.Avatar = datos.Avatar;
					usuario.Nickname = datos.Nombre;
					usuario.SteamAccountLastCheck = DateTime.Now.ToString();
					usuario.OfficialGroup = datos.GrupoPremium;
					usuario.OfficialGroup2 = datos.GrupoNormal;

					await UserManager.UpdateAsync(usuario);
				}
			}

			juegosUsuario = Herramientas.Listados.Generar(usuario.SteamGames);
		}
	}

	private string MostrarTierPrecio(Bundles2.BundleTier tier)
	{
		string mensaje = "Tier " + tier.Posicion.ToString() + " • ";

		string precio = tier.Precio;
		precio = precio.Replace(".", ",");
		precio = precio + "€";

		return mensaje + precio;
	}

	private List<Bundles2.BundleTier> OrdenarTiers(List<Bundles2.BundleTier> tiers)
	{
		if (tiers != null)
		{
			tiers.Sort(delegate (Bundles2.BundleTier t1, Bundles2.BundleTier t2)
			{
				return t1.Posicion.CompareTo(t2.Posicion);
			});
		}

		return tiers;
	}

	private string MostrarMensajePick(List<Bundles2.BundleTier> tiers)
	{
		string mensaje = string.Empty;

		foreach (var tier in tiers)
		{
			string precio = tier.Precio;
			precio = precio.Replace(".", ",");
			precio = precio + "€";

			mensaje = mensaje + "<div>" + tier.CantidadJuegos.ToString() + "  " + Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String8") + " • " + precio + "</div>";
		}

		return mensaje;
	}

	private bool ComprobarUsuarioTieneJuego(Juegos.Juego juego, Juegos.JuegoDRM drm)
	{
		if (juego != null)
		{
			if (usuario != null && juego.Tipo == Juegos.JuegoTipo.Game)
			{
				if (juegosUsuario.Count > 0)
				{
					foreach (var juegoUsuario in juegosUsuario)
					{
						if (juegoUsuario == juego.IdSteam.ToString())
						{
							if (drm == Juegos.JuegoDRM.Steam)
							{
								return true;
							}
						}
					}
				}
			}
		}
		
		return false;
	}

	private string ArreglarPrecio(decimal precioDecimal)
	{
		string precio = precioDecimal.ToString("#.##");

		if (precio.IndexOf(".") == 0)
		{
			precio = "0" + precio;
		}
		else if (precio.IndexOf(".") == -1)
		{
			precio = precio + ",00";
		}

		if (precio.Length == precio.IndexOf(".") + 2)
		{
			precio = precio + "0";
		}

		precio = precio.Replace(".", ",");
		precio = precio + "€";

		return precio;
	}
}
