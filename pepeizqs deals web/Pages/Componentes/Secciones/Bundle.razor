@using APIs.Steam
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JavaScript
@inject NavigationManager NavManager

<script>
	window.ChangeUrl = function (url) {
		history.pushState(null, '', url);
	}
</script>

@if (bundle != null)
{
	if (modulo == false)
	{
		<div class="perfil" style="margin-bottom: 40px; padding: 20px 40px; display: flex; align-items: center; flex-direction: row; position: -webkit-sticky; position: sticky; top: 70px; z-index: 3;">
			<div style="display: flex; align-items: center; flex-direction: row;">
				<a href="@Herramientas.EnlaceAcortador.Generar(bundle.Enlace, bundle.Tipo)" style="width: auto;" target="_blank">
					<div style="height: 60px; padding-left: 20px; padding-right: 20px;">
						<img src="@Bundles2.BundlesCargar.DevolverBundle(bundle.Tipo).ImagenTienda" style="height: 100%;" alt="@bundle.NombreBundle" />
					</div>
				</a>

				<div style="padding-left: 20px; padding-right: 20px;">
					<a href="@Herramientas.EnlaceAcortador.Generar(bundle.Enlace, bundle.Tipo)" class="boton-pequeño" style="background-color: transparent; padding: 5px; font-size: 20px; margin-bottom: 5px;" target="_blank">
						@bundle.NombreBundle
					</a>

					<div style="display: flex; align-items: center; flex-direction: row; font-size: 14px;">
						<a href="@Herramientas.EnlaceAcortador.Generar(bundle.Enlace, bundle.Tipo)" class="boton-pequeño" style="width: auto; text-align: center; padding: 4px 8px; margin-right: 20px; font-size: 14px;" target="_blank">
							@Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String3")
						</a>

						@bundle.FechaEmpieza.Day.ToString()/@bundle.FechaEmpieza.Month.ToString()/@bundle.FechaEmpieza.Year.ToString() • @bundle.FechaTermina.Day.ToString()/@bundle.FechaTermina.Month.ToString()/@bundle.FechaTermina.Year.ToString()
					</div>
				</div>
			</div>
		</div>
	}

	if (bundle.Tiers != null)
	{
		decimal totalMinimos = 0;

		if (bundle.Tiers.Count > 0)
		{
			foreach (var tier in OrdenarTiers(bundle.Tiers))
			{
				string marginFinal = string.Empty;

				if (tier.Posicion != bundle.Tiers.Count && bundle.Pick == false)
				{
					marginFinal = "margin-bottom: 40px;";
				}

				<div class="perfil" style="padding: 0px; background-color: transparent; @marginFinal">
					@{
						List<Bundles2.BundleJuego> juegosTier = new List<Bundles2.BundleJuego>();

						foreach (var juego in bundle.Juegos)
						{
							if (juego.Tier.Posicion == tier.Posicion)
							{
								juegosTier.Add(juego);
							}
						}

						if (juegosTier.Count > 0)
						{
							juegosTier = juegosTier.OrderBy(x => x.Nombre).ToList();
						}

						<div class="perfil" style="font-size: 18px; padding: 20px 40px; margin-bottom: 20px;">
							@if (bundle.Pick == true)
							{
								<div style="display: flex; align-items: center; width: 100%; flex-direction: row; font-size: 18px; padding-top: 10px;">
									@foreach (var tier2 in OrdenarTiers(bundle.Tiers))
									{
										<div style="width: 100%; text-align: center;">
											@if (tier2.CantidadJuegos == 1)
											{
												<label>@tier2.CantidadJuegos.ToString() @Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String21") • @ArreglarPrecio(decimal.Parse(tier2.Precio))</label>
											}
											else if (tier2.CantidadJuegos > 1)
											{
												<label>@tier2.CantidadJuegos.ToString() @Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String8") • @ArreglarPrecio(decimal.Parse(tier2.Precio))</label> <label>/</label> <label style="font-size: 14px;">@ArreglarPrecio(decimal.Parse(tier2.Precio) / tier2.CantidadJuegos) (@Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String20"))</label>
											}										
										</div>
									}
								</div>

								<hr/>
							}
							else
							{
								<div style="font-size: 18px; padding-top: 10px;">
									<div style="margin-bottom: 5px;">
										Tier @tier.Posicion: @ArreglarPrecio(decimal.Parse(tier.Precio))
									</div>

									@foreach (var juego in juegosTier)
									{
										if (juego.Juego.PrecioMinimosHistoricos != null)
										{
											foreach (var historico in juego.Juego.PrecioMinimosHistoricos)
											{
												if (historico.DRM == juego.DRM)
												{
													totalMinimos = totalMinimos + historico.Precio;

													break;
												}
											}
										}
									}

									<div style="font-size: 14px;">
										@Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String14"): @ArreglarPrecio(totalMinimos)
									</div>
								</div>

								<hr/>
							}

							<div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; padding-bottom: 20px; grid-gap: 30px;">
								@foreach (var juego in juegosTier)
								{
									bool usuarioTieneJuego = Herramientas.Tooltip.ComprobarUsuarioTieneJuego(usuario, juegosUsuario, juego.Juego, juego.DRM);
									bool usuarioTieneDeseado = false;

									string fondoColor = string.Empty;

									if (usuarioTieneJuego == true)
									{
										fondoColor = "background-color: var(--fondoBien);";
									}
									else
									{
										usuarioTieneDeseado = Herramientas.Deseados.ComprobarSiEsta(usuario, juego.Juego, juego.DRM);

										if (usuarioTieneDeseado == true)
										{
											fondoColor = "background-color: var(--fondoAlerta);";
										}
									}

									bool usuarioConectado = false;

									if (usuario != null)
									{
										usuarioConectado = true;
									}

									<div class="tooltip-juego" onmousemove="hoverTooltip(event, 'tooltip-@juego.JuegoId.ToString()')">
										<div id="tooltip-@juego.JuegoId.ToString()" class="tooltip-relleno" style="max-width: 460px; padding: 10px; font-size: 14px;">
											@Herramientas.Idiomas.CogerCadena(idioma, "Expanded9", "Bundle")
										</div>

										<button @onclick="(e => AbrirJuego(e, juego.Juego, Herramientas.Tooltip.Generar(idioma, juego.Juego, juego.DRM, usuarioConectado, usuarioTieneJuego, usuarioTieneDeseado)))" class="boton-pequeño" style="padding: 0px; text-align: center; position: relative; @fondoColor">
											<div style="padding: 2px;">
												<div style="text-align: center;">
													<img src="@juego.Imagen" style="width: 100%; height: 100%;" />
												</div>

												<div style="padding: 15px; text-align: left;">
													<div style="display: flex; align-items: center;">
														<div>
															<img src="@Juegos.JuegoDRM2.SacarImagen(juego.DRM)" style="width: 20px; height: 20px;" />
														</div>

														@if (juego.Juego.Tipo == Juegos.JuegoTipo.DLC)
														{
															<div style="margin-left: 15px; font-size: 14px; background: var(--fondoDlc);">
																<span style="padding: 4px 6px; line-height: 24px; vertical-align: middle;">@Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String15")</span>
															</div>
														}

														@if (juego.Juego.PrecioMinimosHistoricos != null)
														{
															foreach (var historico in juego.Juego.PrecioMinimosHistoricos)
															{
																if (historico.DRM == juego.DRM)
																{
																	<div style="margin-left: 20px; text-align: center; font-size: 14px;">
																		@Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String9"): @ArreglarPrecio(historico.Precio)
																	</div>

																	break;
																}
															}
														}
													</div>
												</div>
											</div>
										</button>
									</div>
								}
							</div>
						</div>
					}
				</div>

				@if (bundle.Pick == true)
				{
					break;
				}
			}
		}
	}
}

<style>
	.bundle-juego-panel {
		height: calc(100% - var(--alturaCabecera));
		width: 100%;
		left: 0;
		top: 0;
		overflow-x: auto;
		position: fixed;
		z-index: 1001;
		margin-top: var(--alturaCabecera);
		padding: 10px;
		backdrop-filter: blur(30px);
	}
</style>

@if (bundle != null)
{
	@if (mostrarJuegoDetalles == true)
	{
		<div class="bundle-juego-panel">
			<div style="max-width: 625px; margin: 20px auto; display: flex; align-items: center; gap: 20px;">
				<a href="@Herramientas.EnlaceAcortador.Generar(bundle.Enlace, bundle.Tipo)" class="boton-pequeño" style="width: 100%; text-align: center;" target="_blank">
					@Herramientas.Idiomas.CogerCadena(idioma, "Open", "Bundle")
				</a>

				<button class="boton-pequeño" @onclick="(e => AbrirJuegoDetalle(e))" style="width: 25%; font-size: 14px; text-align: center; padding: 7.5px 12px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "Open2", "Bundle")
				</button>

				<button class="boton-pequeño" @onclick="(e => CerrarJuego(e))" style="width: 15%; font-size: 14px; text-align: center; padding: 7.5px 12px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "Close", "Bundle")
				</button>
			</div>

			<div style="max-width: 625px; margin: 20px auto; background-color: var(--fondoBotonPequeño); position: relative; -moz-box-shadow: 0 0 3px var(--fondoBotonPequeño); -webkit-box-shadow: 0 0 3px var(--fondoBotonPequeño); box-shadow: 0 0 3px var(--fondoBotonPequeño);">

				@if (string.IsNullOrEmpty(datosExpandidos.Video) == false)
				{
					<video src="@datosExpandidos.Video" autoplay="autoplay" loop muted style="object-fit: cover; width: 100%;" />
				}

				<div style="padding: 15px;">
					<div style="text-align: left;">
						@datosExpandidos.Nombre
					</div>

					@if ((string.IsNullOrEmpty(datosExpandidos.ReviewsIcono) == false && string.IsNullOrEmpty(datosExpandidos.ReviewsCantidad) == false) || string.IsNullOrEmpty(datosExpandidos.UsuarioMensaje) == false)
					{
						<hr />

						string añadirMargin = string.Empty;

						@if (string.IsNullOrEmpty(datosExpandidos.ReviewsIcono) == false && string.IsNullOrEmpty(datosExpandidos.ReviewsCantidad) == false)
						{
							añadirMargin = "margin-top: 15px;";

							<div style="text-align: left; display: flex; align-items: center;">
								<img src="@datosExpandidos.ReviewsIcono" style="width: 20px; height: 20px; margin-right: 10px;" />
								<label>@datosExpandidos.ReviewsCantidad</label>
							</div>
						}

						@if (string.IsNullOrEmpty(datosExpandidos.UsuarioMensaje) == false)
						{
							<div style="text-align: left; @añadirMargin">
								@datosExpandidos.UsuarioMensaje
							</div>
						}
					}

					@{
						int bundlesEstado = 0;

						if (juegoExpandido.Bundles != null)
						{
							bundlesEstado = juegoExpandido.Bundles.Count;

							if (bundlesEstado > 0)
							{
								bundlesEstado -= 1;
							}
						}

						int gratisEstado = 0;

						if (juegoExpandido.Gratis != null)
						{
							gratisEstado = juegoExpandido.Gratis.Count;
						}

						int suscripcionesEstado = 0;

						if (juegoExpandido.Suscripciones != null)
						{
							suscripcionesEstado = juegoExpandido.Suscripciones.Count;
						}

						if (bundlesEstado > 0 || gratisEstado > 0 || suscripcionesEstado > 0)
						{
							<hr />

							<div style="text-align: left;">
								@string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Expanded1", "Bundle"), bundlesEstado)
							</div>

							@if (bundlesEstado == 1)
							{
								<div style="text-align: left; margin-top: 5px;">
									• @string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Expanded2", "Bundle"), bundlesEstado)
								</div>
							}
							else if (bundlesEstado > 1)
							{
								<div style="text-align: left; margin-top: 5px;">
									• @string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Expanded3", "Bundle"), bundlesEstado)
								</div>
							}

							@if (gratisEstado == 1)
							{
								<div style="text-align: left; margin-top: 5px;">
									• @string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Expanded4", "Bundle"), gratisEstado)
								</div>
							}
							else if (gratisEstado > 1)
							{
								<div style="text-align: left; margin-top: 5px;">
									• @string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Expanded5", "Bundle"), gratisEstado)
								</div>
							}

							@if (suscripcionesEstado == 1)
							{
								<div style="text-align: left; margin-top: 5px;">
									• @string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Expanded6", "Bundle"), suscripcionesEstado)
								</div>
							}
							else if (suscripcionesEstado > 1)
							{
								<div style="text-align: left; margin-top: 5px;">
									• @string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Expanded7", "Bundle"), suscripcionesEstado)
								</div>
							}
						}
						else
						{
							<hr />

							<div style="text-align: left; margin-top: 15px;">
								@Herramientas.Idiomas.CogerCadena(idioma, "Expanded8", "Bundle")
							</div>
						}
					}
				</div>
			</div>
		</div>
	}
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public int bundleId { get; set; }

	[Parameter]
	public bool modulo { get; set; }

	public Bundles2.Bundle bundle = new Bundles2.Bundle();

	private Usuario usuario = new Usuario();
	private List<string> juegosUsuario = new List<string>();

	protected override async Task OnInitializedAsync()
	{
		bundle = BaseDatos.Bundles.Buscar.UnBundle(bundleId);

		if (bundle != null)
		{
			foreach (var juego in bundle.Juegos)
			{
				juego.Juego = BaseDatos.Juegos.Buscar.UnJuego(juego.JuegoId.ToString());
				juego.Imagen = juego.Juego.Imagenes.Header_460x215;
			}
		}

		//------------------------------------------------------------

		usuario = await Herramientas.UsuarioDatos.Actualizar(HttpContextAccessor.HttpContext.User, usuario, UserManager);

		if (usuario != null)
		{
			if (string.IsNullOrEmpty(usuario.SteamGames) == false)
			{
				juegosUsuario = Herramientas.Listados.Generar(usuario.SteamGames);
			}
		}
	}

	protected override async Task OnAfterRenderAsync(bool primerRender)
	{
		if (primerRender == true && modulo == false)
		{
			if (bundle != null)
			{
				await JavaScript.InvokeVoidAsync("ChangeUrl", "/bundle/" + bundleId.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(bundle.NombreBundle) + "/");
			}			
		}
	}

	private List<Bundles2.BundleTier> OrdenarTiers(List<Bundles2.BundleTier> tiers)
	{
		if (tiers != null)
		{
			tiers.Sort(delegate (Bundles2.BundleTier t1, Bundles2.BundleTier t2)
			{
				return t1.Posicion.CompareTo(t2.Posicion);
			});
		}

		return tiers;
	}

	private string ArreglarPrecio(decimal precioDecimal)
	{
		string precio = precioDecimal.ToString("#.##");

		if (precio.IndexOf(".") == 0)
		{
			precio = "0" + precio;
		}
		else if (precio.IndexOf(".") == -1)
		{
			precio = precio + ",00";
		}

		if (precio.Length == precio.IndexOf(".") + 2)
		{
			precio = precio + "0";
		}

		precio = precio.Replace(".", ",");
		precio = precio + "€";

		return precio;
	}

	private bool mostrarJuegoDetalles = false;
	private Herramientas.ToolTipDatos datosExpandidos = new Herramientas.ToolTipDatos();
	private Juegos.Juego juegoExpandido = new Juegos.Juego();

	private void CerrarJuego(MouseEventArgs e)
	{
		mostrarJuegoDetalles = false;
	}

	private void AbrirJuego(MouseEventArgs e, Juegos.Juego juego, Herramientas.ToolTipDatos datos)
	{
		mostrarJuegoDetalles = true;

		juegoExpandido = juego;
		datosExpandidos = datos;
	}

	private void AbrirJuegoDetalle(MouseEventArgs e)
	{
		NavManager.NavigateTo("/game/" + juegoExpandido.Id + "/" + Herramientas.EnlaceAdaptador.Nombre(juegoExpandido.Nombre) + "/", true);
	}
}
