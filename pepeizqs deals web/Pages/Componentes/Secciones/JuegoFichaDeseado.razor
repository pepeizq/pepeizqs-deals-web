@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity;
@using Newtonsoft.Json;
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor

@if (SignInManager.IsSignedIn(HttpContextAccessor.HttpContext!.User) == true)
{	
	@if (mensaje.Length > 0)
	{
		<div class="perfil" style="padding: 20px 40px; background-color: var(--fondoAlerta); color: var(--colorTextoAlerta);">
			<div class="perfil-flexible-centrado">
				<i class="fa-solid fa-exclamation" style="font-size: 25px;"></i>

				<label style="text-align: left; padding-left: 25px; width: 100%;">@mensaje</label>
			</div>
		</div>
	}	
	else
	{
		@if (ComprobarSiEstaDeseado() == true)
		{
			<button @onclick="(e => CambiarEstadoDeseado(e, false))" class="boton-pequeño" style="width: auto; padding: 20px 40px;">
				<div class="perfil-flexible-centrado">
					<i class="fa-solid fa-check" style="font-size: 25px;"></i>

					<div style="text-align: left; padding-left: 25px; width: 100%;">@Herramientas.Idiomas.CogerCadena(idioma, "Game.String3")</div>
				</div>
			</button>
		}
		else
		{
			<button @onclick="(e => CambiarEstadoDeseado(e, true))" class="boton-pequeño" style="width: auto; padding: 20px 40px;">@Herramientas.Idiomas.CogerCadena(idioma, "Game.String4")</button>
		}		
	}
}

@code {

	#nullable disable

	public string mensaje = string.Empty;

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public Juegos.Juego juego { get; set; }

	[Parameter]
	public Juegos.JuegoDRM drm { get; set; }

	private Usuario usuario = new Usuario();

	protected override void OnInitialized()
	{
		usuario = UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User).Result;

		if (juego.IdSteam > 0 && drm == Juegos.JuegoDRM.Steam)
		{
			if (usuario.SteamGames != null)
			{
				List<string> juegosSteam = GenerarLista(usuario.SteamGames);

				if (juegosSteam.Count > 0)
				{
					foreach (var juegoSteam in juegosSteam)
					{
						if (int.Parse(juegoSteam) == juego.IdSteam)
						{
							if (juego.Tipo == Juegos.JuegoTipo.Game)
							{
								mensaje = Herramientas.Idiomas.CogerCadena(idioma, "Game.String5");
							}
							else if (juego.Tipo == Juegos.JuegoTipo.DLC)
							{
								mensaje = Herramientas.Idiomas.CogerCadena(idioma, "Game.String6");
							}

							break;
						}
					}
				}
			}
		}	

		if (mensaje == string.Empty)
		{
			List<string> deseadosSteam = GenerarLista(usuario.SteamWishlist);

			if (deseadosSteam.Count > 0)
			{
				foreach (var deseado in deseadosSteam)
				{
					if (juego.IdSteam > 0)
					{
						if (juego.IdSteam == int.Parse(deseado) && drm == Juegos.JuegoDRM.Steam)
						{
							if (juego.Tipo == Juegos.JuegoTipo.Game)
							{
								mensaje = Herramientas.Idiomas.CogerCadena(idioma, "Game.String7");
							}
							else if (juego.Tipo == Juegos.JuegoTipo.DLC)
							{
								mensaje = Herramientas.Idiomas.CogerCadena(idioma, "Game.String8");
							}

							break;
						}
					}			
				}
			}
		}		
	}

	private List<string> GenerarLista(string contenido)
	{
		List<string> lista = new List<string>();

		if (contenido != null)
		{
			int i = 0;
			int j = 100000;

			while (i < j)
			{
				if (contenido.Contains(",") == true)
				{
					int int1 = contenido.IndexOf(",");
					string temp1 = contenido.Remove(int1, contenido.Length - int1);
					lista.Add(temp1);

					contenido = contenido.Remove(0, int1 + 1);
				}
				else
				{
					lista.Add(contenido);
					break;
				}

				i += 1;
			}
		}

		return lista;
	}

	private bool ComprobarSiEstaDeseado()
	{
		List<Juegos.JuegoDeseado> deseados = new List<Juegos.JuegoDeseado>();

		if (usuario.Wishlist != null)
		{
			deseados = JsonConvert.DeserializeObject<List<Juegos.JuegoDeseado>>(usuario.Wishlist);
		}

		if (deseados.Count > 0)
		{
			foreach (var deseado in deseados)
			{
				if (juego.Id == int.Parse(deseado.IdBaseDatos))
				{
					if (drm == deseado.DRM)
					{
						BaseDatos.Juegos.Actualizar.UnParametro(juego, conexion, "usuariosInteresados", drm.ToString());
						return true;
					}
				}
			}
		}

		return false;
	}

	private async void CambiarEstadoDeseado(MouseEventArgs e, bool estado)
	{
		List<Juegos.JuegoDeseado> deseados = new List<Juegos.JuegoDeseado>();

		if (usuario.Wishlist != null)
		{
			deseados = JsonConvert.DeserializeObject<List<Juegos.JuegoDeseado>>(usuario.Wishlist);
		}

		if (estado == true)
		{
			bool añadir = true;

			if (deseados.Count > 0)
			{
				foreach (var deseado in deseados)
				{
					if (int.Parse(deseado.IdBaseDatos) == juego.Id && deseado.DRM == drm)
					{
						añadir = false;
					}
				}
			}

			if (añadir == true)
			{
				Juegos.JuegoDeseado deseado = new Juegos.JuegoDeseado();
				deseado.IdBaseDatos = juego.Id.ToString();
				deseado.DRM = drm;

				deseados.Add(deseado);
			}

			usuario.Wishlist = JsonConvert.SerializeObject(deseados);

			await UserManager.UpdateAsync(usuario);
		}
		else
		{
			int posicion = -1;

			if (deseados.Count > 0)
			{
				for (int i = 0; i < deseados.Count; i += 1)
				{
					if (int.Parse(deseados[i].IdBaseDatos) == juego.Id && deseados[i].DRM == drm)
					{
						posicion = i;
					}
				}
			}

			if (posicion >= 0)
			{
				deseados.RemoveAt(posicion);
			}

			usuario.Wishlist = JsonConvert.SerializeObject(deseados);

			await UserManager.UpdateAsync(usuario);
		}
	}
}
