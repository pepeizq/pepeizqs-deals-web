@using Microsoft.AspNetCore.Components.Web
@using System.Net

@inject NavigationManager NavManager

<style>
	.cargando {
		width: 48px;
		height: 48px;
		border: 5px solid var(--colorTexto);
		border-bottom-color: transparent;
		border-radius: 50%;
		display: inline-block;
		box-sizing: border-box;
		animation: rotation 1s linear infinite;
	}

	@@keyframes rotation {
		0% {
			transform: rotate(0deg);
		}

		100% {
			transform: rotate(360deg);
		}
	}
</style>

@if (cargado == false)
{
	<div class="cargando" />
}
else
{
	if (string.IsNullOrEmpty(nombre) == false)
	{
		<h1 style="font-size: 23px;">@nombre</h1>

		if (string.IsNullOrEmpty(descripcion) == false)
		{
			<div style="font-size: 14px;">@WebUtility.HtmlDecode(descripcion)</div>
		}

		<hr />
	}

	<div style="display: flex; align-items: start; gap: 20px;">
		<div style="width: 20%;">
			@if (string.IsNullOrEmpty(imagen) == false)
			{
				<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 20px; margin-bottom: 20px;">
					<img src="@imagen" style="width: 100%; height: 100%;" />
				</div>
			}

			<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 20px;">
				@if (resultadosJuegos.Count > 0)
				{
					string fondo = string.Empty;

					if (resultadosModo == 0)
					{
						fondo = "background-color: var(--fondoBotonPequeño);";
					}

					<button @onclick="(e => CambiarListado(e, 0))" style="background-color: transparent; color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondo">
						<div>
							@Herramientas.Idiomas.CogerCadena(idioma, "String1", "Publisher") (@resultadosJuegos.Count.ToString())
						</div>
					</button>
				}

				@if (resultadosDLCs.Count > 0)
				{
					string fondo = string.Empty;

					if (resultadosModo == 1)
					{
						fondo = "background-color: var(--fondoBotonPequeño);";
					}

					<button @onclick="(e => CambiarListado(e, 1))" style="background-color: transparent; color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; margin-top: 10px; @fondo">
						<div>
							@Herramientas.Idiomas.CogerCadena(idioma, "String2", "Publisher") (@resultadosDLCs.Count.ToString())
						</div>
					</button>
				}

				@if (resultadosSoftware.Count > 0)
				{
					string fondo = string.Empty;

					if (resultadosModo == 2)
					{
						fondo = "background-color: var(--fondoBotonPequeño);";
					}

					<button @onclick="(e => CambiarListado(e, 2))" style="background-color: transparent; color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; margin-top: 10px; @fondo">
						<div>
							@Herramientas.Idiomas.CogerCadena(idioma, "String3", "Publisher") (@resultadosSoftware.Count.ToString())
						</div>
					</button>
				}

				@if (resultadosBandasSonoras.Count > 0)
				{
					string fondo = string.Empty;

					if (resultadosModo == 3)
					{
						fondo = "background-color: var(--fondoBotonPequeño);";
					}

					<button @onclick="(e => CambiarListado(e, 3))" style="background-color: transparent; color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; margin-top: 10px; @fondo">
						<div>
							@Herramientas.Idiomas.CogerCadena(idioma, "String4", "Publisher") (@resultadosBandasSonoras.Count.ToString())
						</div>
					</button>
				}
			</div>
		</div>

		<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); width: 100%; padding: 20px; display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; grid-gap: 20px;">
			@{
				List<Juegos.Juego> resultadosMostrar = new List<Juegos.Juego>();

				if (resultadosModo == 0)
				{
					resultadosMostrar = resultadosJuegos;
				}
				else if (resultadosModo == 1)
				{
					resultadosMostrar = resultadosDLCs;
				}
				else if (resultadosModo == 2)
				{
					resultadosMostrar = resultadosSoftware;
				}
				else if (resultadosModo == 3)
				{
					resultadosMostrar = resultadosBandasSonoras;
				}

				if (resultadosMostrar != null)
				{
					resultadosMostrar = resultadosMostrar.OrderBy(x => x.Nombre).ToList();

					foreach (var juego in resultadosMostrar)
					{
						<button @onclick="(e => AbrirJuego(e, juego.Id, juego.Nombre))" class="boton-pequeño" style="padding: 2px;">
							<div>
								<img src="@juego.Imagenes.Header_460x215" style="width: 100%; height: 100%;" />

								<div style="font-size: 14px; text-align: right; padding: 5px 8px;">
									@Herramientas.Buscador.GenerarMensaje(idioma, juego)
								</div>
							</div>
						</button>
					}
				}
			}
		</div>
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string id { get; set; }

	[Parameter]
	public string nombre { get; set; }

	[Parameter]
	public string descripcion { get; set; }

	[Parameter]
	public string imagen { get; set; }

	[Parameter]
	public List<string> acepciones { get; set; }

	private bool cargado = false;

	private int resultadosModo = 0;

	private List<Juegos.Juego> resultadosGestor = new List<Juegos.Juego>();
	private List<Juegos.Juego> resultadosJuegos = new List<Juegos.Juego>();
	private List<Juegos.Juego> resultadosDLCs = new List<Juegos.Juego>();
	private List<Juegos.Juego> resultadosSoftware = new List<Juegos.Juego>();
	private List<Juegos.Juego> resultadosBandasSonoras = new List<Juegos.Juego>();

	#nullable enable
	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }
	#nullable disable

	protected override async Task OnInitializedAsync()
	{
		if (HttpContext == null)
		{
			await Task.Delay(10);
			resultadosGestor = BaseDatos.Publishers.Buscar.Juegos(nombre);

			if (acepciones != null)
			{
				if (acepciones.Count > 0)
				{
					foreach (var acepcion in acepciones)
					{
						if (acepcion != "acepcion")
						{
							List<Juegos.Juego> nuevosJuegos = BaseDatos.Publishers.Buscar.Juegos(acepcion);

							foreach (var nuevoJuego in nuevosJuegos)
							{
								bool añadir = true;

								if (resultadosGestor.Count > 0)
								{
									foreach (var resultadoGestor in resultadosGestor)
									{
										if (resultadoGestor.Id == nuevoJuego.Id)
										{
											añadir = false;
										}
									}
								}

								if (añadir == true)
								{
									resultadosGestor.Add(nuevoJuego);
								}								
							}
						}
					}
				}
			}

			if (resultadosGestor.Count > 0)
			{
				foreach (var resultadoGestor in resultadosGestor)
				{
					if (resultadoGestor.Tipo == Juegos.JuegoTipo.Game)
					{
						resultadosJuegos.Add(resultadoGestor);
					}
					else if (resultadoGestor.Tipo == Juegos.JuegoTipo.DLC)
					{
						resultadosDLCs.Add(resultadoGestor);
					}
					else if (resultadoGestor.Tipo == Juegos.JuegoTipo.Software)
					{
						resultadosSoftware.Add(resultadoGestor);
					}
					else if (resultadoGestor.Tipo == Juegos.JuegoTipo.Music)
					{
						resultadosBandasSonoras.Add(resultadoGestor);
					}
				}
			}

			cargado = true;
		}
	}

	private void AbrirJuego(MouseEventArgs e, int id, string nombre)
	{
		NavManager.NavigateTo("/game/" + id.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(nombre) + "/", true);
	}

	private void CambiarListado(MouseEventArgs e, int modo)
	{
		resultadosModo = modo;
	}
}
