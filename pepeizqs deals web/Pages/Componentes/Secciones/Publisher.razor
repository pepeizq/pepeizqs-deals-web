@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using System.Net
@using Microsoft.AspNetCore.Identity
@using pepeizqs_deals_web.Areas.Identity.Data

@inject UserManager<Usuario> UserManager

@if (cargado == false)
{
	<div style="text-align: center; width: 100%; padding: 40px;">
		<div class="cargando" />
	</div>	
}
else
{
	if (string.IsNullOrEmpty(nombre) == false)
	{
		<div style="display: flex; align-items: center; gap: 12px;">
			<a href="/publishers/">@Herramientas.Idiomas.CogerCadena(idioma, "String11", "Publisher")</a>
			<i class="fa-solid fa-chevron-right"></i>
			<h1 style="font-size: 22px; margin: 0px;">@nombre</h1>
		</div>

		if (string.IsNullOrEmpty(descripcion) == false)
		{
			<div style="font-size: 14px; margin-top: 10px;">@WebUtility.HtmlDecode(descripcion)</div>
		}

		<hr />
	}

	<div style="display: flex; align-items: start; gap: 20px;">
		<div style="width: 20%;">
			@if (string.IsNullOrEmpty(imagen) == false)
			{
				<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 20px; margin-bottom: 20px;">
					<img src="@imagen" style="width: 100%; height: 100%;" />
				</div>
			}

			<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 20px; display: flex; flex-direction: column; gap: 10px;">
				@if (resultadosJuegos.Count > 0)
				{
					string fondo = string.Empty;

					if (resultadosModo == 0)
					{
						fondo = "background-color: var(--fondoBotonPequeño);";
					}

					<button @onclick="(e => CambiarListado(e, 0))" style="background-color: transparent; color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondo">
						<div>
							@Herramientas.Idiomas.CogerCadena(idioma, "String1", "Publisher") (@resultadosJuegos.Count.ToString())
						</div>
					</button>
				}

				@if (resultadosDLCs.Count > 0)
				{
					string fondo = string.Empty;

					if (resultadosModo == 1)
					{
						fondo = "background-color: var(--fondoBotonPequeño);";
					}

					<button @onclick="(e => CambiarListado(e, 1))" style="background-color: transparent; color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondo">
						<div>
							@Herramientas.Idiomas.CogerCadena(idioma, "String2", "Publisher") (@resultadosDLCs.Count.ToString())
						</div>
					</button>
				}

				@if (resultadosSoftware.Count > 0)
				{
					string fondo = string.Empty;

					if (resultadosModo == 2)
					{
						fondo = "background-color: var(--fondoBotonPequeño);";
					}

					<button @onclick="(e => CambiarListado(e, 2))" style="background-color: transparent; color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondo">
						<div>
							@Herramientas.Idiomas.CogerCadena(idioma, "String3", "Publisher") (@resultadosSoftware.Count.ToString())
						</div>
					</button>
				}

				@if (resultadosBandasSonoras.Count > 0)
				{
					string fondo = string.Empty;

					if (resultadosModo == 3)
					{
						fondo = "background-color: var(--fondoBotonPequeño);";
					}

					<button @onclick="(e => CambiarListado(e, 3))" style="background-color: transparent; color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondo">
						<div>
							@Herramientas.Idiomas.CogerCadena(idioma, "String4", "Publisher") (@resultadosBandasSonoras.Count.ToString())
						</div>
					</button>
				}

				@if (resultadosBundles.Count > 0 || resultadosGratis.Count > 0 || resultadosSuscripciones.Count > 0)
				{
					<hr/>

					@if (resultadosBundles.Count > 0)
					{
						string fondo = string.Empty;

						if (resultadosModo == 4)
						{
							fondo = "background-color: var(--fondoBotonPequeño);";
						}

						<button @onclick="(e => CambiarListado(e, 4))" style="background-color: transparent; color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondo">
							<div>
								@Herramientas.Idiomas.CogerCadena(idioma, "String6", "Publisher") (@resultadosBundles.Count.ToString())
							</div>
						</button>
					}

					@if (resultadosGratis.Count > 0)
					{
						string fondo = string.Empty;

						if (resultadosModo == 5)
						{
							fondo = "background-color: var(--fondoBotonPequeño);";
						}

						<button @onclick="(e => CambiarListado(e, 5))" style="background-color: transparent; color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondo">
							<div>
								@Herramientas.Idiomas.CogerCadena(idioma, "String7", "Publisher") (@resultadosGratis.Count.ToString())
							</div>
						</button>
					}

					@if (resultadosSuscripciones.Count > 0)
					{
						string fondo = string.Empty;

						if (resultadosModo == 6)
						{
							fondo = "background-color: var(--fondoBotonPequeño);";
						}

						<button @onclick="(e => CambiarListado(e, 6))" style="background-color: transparent; color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondo">
							<div>
								@Herramientas.Idiomas.CogerCadena(idioma, "String8", "Publisher") (@resultadosSuscripciones.Count.ToString())
							</div>
						</button>
					}
				}
			</div>
		</div>

		<div style="width: 100%;">
			<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 20px; margin-bottom: 20px; display: flex; align-items: center; gap: 20px;">
				<i class="fa-solid fa-magnifying-glass"></i>
				<input type="text" @onchange="(e => TextoCambiaBuscador(e))" class="entrada-texto" style="min-width: 50%;" placeholder="@Herramientas.Idiomas.CogerCadena(idioma, "String9", "Publisher")" />
			</div>

			<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 10px; display: flex; flex-direction: column;">
				@if (resultadosMostrar.Count > 0)
				{
					foreach (var juego in resultadosMostrar)
					{
						<div style="padding: 10px;">
							<a href="/game/@juego.Id.ToString()/@Herramientas.EnlaceAdaptador.Nombre(juego.Nombre)/" class="boton-pequeño" style="padding: 2px;">
								<div style="display: flex; align-items: center;">
									<div>
										<img src="@juego.Imagenes.Header_460x215" style="width: 230px; height: 107px;" />
									</div>

									<div style="padding: 0px 20px;">
										<div>
											@juego.Nombre
										</div>

										<div style="margin-top: 10px; font-size: 15px;">
											@if (resultadosModo == 4)
											{
												@Herramientas.Buscador.GenerarMensaje(idioma, juego, true, false, false)
											}
											else if (resultadosModo == 5)
											{
												@Herramientas.Buscador.GenerarMensaje(idioma, juego, false, true, false)
											}
											else if (resultadosModo == 6)
											{
												@Herramientas.Buscador.GenerarMensaje(idioma, juego, false, false, true)
											}
											else
											{
												@Herramientas.Buscador.GenerarMensaje(idioma, juego, true, true, true)
											}
										</div>
									</div>
								</div>
							</a>
						</div>
					}
				}
				else
				{
					<div style="padding: 10px;">
						@Herramientas.Idiomas.CogerCadena(idioma, "String10", "Publisher")
					</div>					
				}
			</div>
		</div>
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string usuarioId { get; set; }

	private Usuario usuario = new Usuario();

	[Parameter]
	public string id { get; set; }

	[Parameter]
	public string nombre { get; set; }

	[Parameter]
	public string descripcion { get; set; }

	[Parameter]
	public string imagen { get; set; }

	[Parameter]
	public List<string> acepciones { get; set; }

	private bool cargado = false;

	private int resultadosModo = 0;

	private List<Juegos.Juego> resultadosGestor = new List<Juegos.Juego>();
	private List<Juegos.Juego> resultadosMostrar = new List<Juegos.Juego>();
	private List<Juegos.Juego> resultadosJuegos = new List<Juegos.Juego>();
	private List<Juegos.Juego> resultadosDLCs = new List<Juegos.Juego>();
	private List<Juegos.Juego> resultadosSoftware = new List<Juegos.Juego>();
	private List<Juegos.Juego> resultadosBandasSonoras = new List<Juegos.Juego>();
	private List<Juegos.Juego> resultadosBundles = new List<Juegos.Juego>();
	private List<Juegos.Juego> resultadosGratis = new List<Juegos.Juego>();
	private List<Juegos.Juego> resultadosSuscripciones = new List<Juegos.Juego>();

	protected override async Task OnInitializedAsync()
	{
		usuario = await UserManager.FindByIdAsync(usuarioId);

		resultadosGestor = BaseDatos.Publishers.Buscar.Juegos(nombre);

		if (acepciones != null)
		{
			if (acepciones.Count > 0)
			{
				foreach (var acepcion in acepciones)
				{
					if (acepcion != "acepcion")
					{
						List<Juegos.Juego> nuevosJuegos = BaseDatos.Publishers.Buscar.Juegos(acepcion);

						foreach (var nuevoJuego in nuevosJuegos)
						{
							bool añadir = true;

							if (resultadosGestor.Count > 0)
							{
								foreach (var resultadoGestor in resultadosGestor)
								{
									if (resultadoGestor.Id == nuevoJuego.Id)
									{
										añadir = false;
									}
								}
							}

							if (añadir == true)
							{
								resultadosGestor.Add(nuevoJuego);
							}
						}
					}
				}
			}
		}

		if (resultadosGestor.Count > 0)
		{
			foreach (var resultadoGestor in resultadosGestor)
			{
				if (resultadoGestor.Tipo == Juegos.JuegoTipo.Game)
				{
					resultadosJuegos.Add(resultadoGestor);
				}
				else if (resultadoGestor.Tipo == Juegos.JuegoTipo.DLC)
				{
					resultadosDLCs.Add(resultadoGestor);
				}
				else if (resultadoGestor.Tipo == Juegos.JuegoTipo.Software)
				{
					resultadosSoftware.Add(resultadoGestor);
				}
				else if (resultadoGestor.Tipo == Juegos.JuegoTipo.Music)
				{
					resultadosBandasSonoras.Add(resultadoGestor);
				}

				if (Herramientas.Buscador.ComprobarBundles(resultadoGestor) == true)
				{
					resultadosBundles.Add(resultadoGestor);
				}

				if (Herramientas.Buscador.ComprobarGratis(resultadoGestor) == true)
				{
					resultadosGratis.Add(resultadoGestor);
				}

				if (Herramientas.Buscador.ComprobarSuscripcion(resultadoGestor) == true)
				{
					resultadosSuscripciones.Add(resultadoGestor);
				}
			}

			if (resultadosJuegos.Count == 0)
			{
				resultadosModo = 1;

				if (resultadosDLCs.Count == 0)
				{
					resultadosModo = 2;

					if (resultadosSoftware.Count == 0)
					{
						resultadosModo = 3;
					}
				}
			}

			CargarListado();
		}

		cargado = true;
	}

	private void CargarListado()
	{
		resultadosMostrar.Clear();

		if (string.IsNullOrEmpty(textoBuscador) == false)
		{
			List<Juegos.Juego> resultadosBuscador = new List<Juegos.Juego>();

			if (resultadosModo == 0)
			{
				resultadosBuscador = resultadosJuegos;
			}
			else if (resultadosModo == 1)
			{
				resultadosBuscador = resultadosDLCs;
			}
			else if (resultadosModo == 2)
			{
				resultadosBuscador = resultadosSoftware;
			}
			else if (resultadosModo == 3)
			{
				resultadosBuscador = resultadosBandasSonoras;
			}
			else if (resultadosModo == 4)
			{
				resultadosBuscador = resultadosBundles;
			}
			else if (resultadosModo == 5)
			{
				resultadosBuscador = resultadosGratis;
			}
			else if (resultadosModo == 6)
			{
				resultadosBuscador = resultadosSuscripciones;
			}

			foreach (var resultadoBuscador in resultadosBuscador)
			{
				if (Herramientas.Buscador.LimpiarNombre(resultadoBuscador.Nombre).Contains(Herramientas.Buscador.LimpiarNombre(textoBuscador)) == true)
				{
					resultadosMostrar.Add(resultadoBuscador);
				}
			}			
		}
		else
		{
			if (resultadosModo == 0)
			{
				resultadosMostrar = resultadosJuegos;
			}
			else if (resultadosModo == 1)
			{
				resultadosMostrar = resultadosDLCs;
			}
			else if (resultadosModo == 2)
			{
				resultadosMostrar = resultadosSoftware;
			}
			else if (resultadosModo == 3)
			{
				resultadosMostrar = resultadosBandasSonoras;
			}
			else if (resultadosModo == 4)
			{
				resultadosMostrar = resultadosBundles;
			}
			else if (resultadosModo == 5)
			{
				resultadosMostrar = resultadosGratis;
			}
			else if (resultadosModo == 6)
			{
				resultadosMostrar = resultadosSuscripciones;
			}
		}

		resultadosMostrar = resultadosMostrar.OrderBy(x => x.Nombre).ToList();
	}

	private void CambiarListado(MouseEventArgs e, int modo)
	{
		resultadosModo = modo;

		CargarListado();
	}

	private string textoBuscador = string.Empty;

	private void TextoCambiaBuscador(ChangeEventArgs texto)
	{
		textoBuscador = texto.Value.ToString().Trim();

		CargarListado();
	}
}
