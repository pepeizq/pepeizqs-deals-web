@using APIs.Steam
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor

<script>
	function moverScroll(id) {
		const yOffset = -30;
		const element = document.getElementById(id);
		const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

		window.scrollTo({ top: y, behavior: 'smooth' });
	}
</script>

@if (bundlesActuales.Count > 0)
{
	<div style="font-size: 23px;">
		@Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String1")
	</div>

	<hr>

	<div style="margin-top: 40px; margin-bottom: 40px;">
		@if (mostrarBundleSeleccionado == false)
		{
			<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; justify-items: center;">
				@foreach (var bundle in bundlesActuales)
				{
					<button @onclick="@(e => SeleccionarBundleActual(e, bundle))" class="boton-pequeño" style="background-color: transparent; padding: 0px;">
						@if (bundle.Tipo == Bundles2.BundleTipo.HumbleBundle)
						{
							<div class="perfil" style="display: flex; align-items: center; padding: 20px;">
								<div style="width: 30%;">
									<img src="@Bundles2.BundlesCargar.DevolverBundle(bundle.Tipo).ImagenesExtra[0]" style="max-width: 100%;" />
								</div>
								<div style="width: 40%; padding-left: 15px; padding-right: 15px;">
									<img src="@bundle.ImagenBundle" style="max-width: 100%;" />
								</div>
								<div style="width: 30%;">
									<img src="@Bundles2.BundlesCargar.DevolverBundle(bundle.Tipo).ImagenesExtra[1]" style="max-width: 100%;" />
								</div>
							</div>
						}
						else
						{
							<div class="perfil" style="width: 100%; text-align: center; padding: 5px;">
								<img src="@bundle.ImagenBundle" style="max-width: 100%;" />
							</div>
						}

						<div style="margin-top: 20px; text-align: center; font-size: 14px;">
							@MostrarFechaTermina(bundle.FechaTermina)
						</div>
					</button>

					<hr />
				}
			</div>
		}
		else
		{
			<div>
				@if (bundleSeleccionado != null)
				{
					@if (bundleSeleccionado.Pick == false)
					{
						@if (bundleSeleccionado.Tiers.Count > 0)
						{
							@foreach (var tier in OrdenarTiers(bundleSeleccionado.Tiers))
							{
								<div class="perfil" style="margin-top: 10px; margin-bottom: 10px; padding: 30px;">
									<div style="text-align: center; margin-bottom: 20px;">
										@MostrarPrecio(tier)
									</div>

									<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; justify-items: center;">
										@foreach (var juego in bundleSeleccionado.Juegos)
										{
											@if (juego.Tier.Posicion == tier.Posicion)
											{
												<div style="text-align: center; max-width: 231px;">
													<a href="/game/@juego.JuegoId" class="boton-pequeño" style="padding: 0px; text-align: center; background: transparent; position: relative;">
														<img src="@juego.Imagen" style="max-width: 100%; max-height: 100%;" />

														@if (usuario != null)
														{
															@if (ComprobarUsuarioJuego(juego.Juego, juego.DRM) != null)
															{
																@if (ComprobarUsuarioJuego(juego.Juego, juego.DRM) == "3" || ComprobarUsuarioJuego(juego.Juego, juego.DRM) == "5")
																{
																	<div style="padding: 6px 12px; background-color: var(--fondoBien); color: var(--colorTextoBien); position: absolute; bottom: -5px; right: -5px;">
																		<i class="fa-solid fa-check" style="font-size: 16px;"></i>
																	</div>
																}
																else
																{
																	<div style="padding: 6px 12px; background-color: var(--fondoAlerta); color: var(--colorTextoAlerta); position: absolute; bottom: -5px; right: -5px;">
																		<i class="fa-solid fa-xmark" style="font-size: 16px;"></i>
																	</div>
																}
															}
														}
													</a>
												</div>
											}
										}
									</div>
								</div>
							}
						}
					}
					else
					{
						<div class="perfil" style="margin-top: 10px; margin-bottom: 10px; padding: 30px;">
							<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; justify-items: center;">
								@foreach (var juego in bundleSeleccionado.Juegos)
								{
									<div style="text-align: center; max-width: 231px;">
										<a href="/game/@juego.JuegoId" class="boton-pequeño" style="padding: 0px; text-align: center; background: transparent; position: relative;">
											<img src="@juego.Imagen" style="max-width: 100%; max-height: 100%;" />

											@if (usuario != null)
											{
												@if (ComprobarUsuarioJuego(juego.Juego, juego.DRM) != null)
												{
													@if (ComprobarUsuarioJuego(juego.Juego, juego.DRM) == "3" || ComprobarUsuarioJuego(juego.Juego, juego.DRM) == "5")
													{
														<div style="padding: 6px 12px; background-color: var(--fondoBien); color: var(--colorTextoBien); position: absolute; bottom: -5px; right: -5px;">
															<i class="fa-solid fa-check" style="font-size: 16px;"></i>
														</div>
													}
													else
													{
														<div style="padding: 6px 12px; background-color: var(--fondoAlerta); color: var(--colorTextoAlerta); position: absolute; bottom: -5px; right: -5px;">
															<i class="fa-solid fa-xmark" style="font-size: 16px;"></i>
														</div>
													}
												}
											}
										</a>
									</div>
								}
							</div>
						</div>
					}
				}
			</div>
		}
	</div>
}

<div style="font-size: 23px;">
	@Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String2")
</div>

<div style="display: flex; align-items: start; margin-top: 10px;">
	@foreach (var año in años)
	{
		<div style="margin-right: 15px;">
			<button @onclick="@(e => CambiarAño(e, año))" class="boton-pequeño" style="padding: 6px 10px; width: auto;">
				@año
			</button>

			@if (añoSeleccionado == año)
			{
				<div style="margin-top: 10px; background: var(--colorTexto); padding: 1px;">
				</div>

				<div style="position: absolute; margin-top: 15px; display: flex; align-items: center;">
					@foreach (var bundleTipo in Bundles2.BundlesCargar.CargarBundles())
					{
						List<Bundles2.Bundle> bundlesAño = new List<Bundles2.Bundle>();

						foreach (var bundlePasado in bundlesPasados)
						{
							if (bundlePasado.FechaEmpieza.Year.ToString() == añoSeleccionado && bundleTipo == bundlePasado.Tipo)
							{
								bundlesAño.Add(bundlePasado);
							}
						}

						if (bundlesAño.Count > 0)
						{
							<div style="margin-right: 15px; font-size: 14px;">
								<a onclick="moverScroll('pasado-@bundleTipo.ToString()')" style="color: var(--colorTexto); text-decoration: none; cursor: pointer;"><img src="@Bundles2.BundlesCargar.DevolverBundle(bundleTipo).ImagenIcono" style="width: 22px; height: 22px;" /> (@bundlesAño.Count.ToString())</a>
							</div>
						}
					}
				</div>				
			}
		</div>
	}
</div>

<div style="margin-top: 55px;">
	@foreach (var bundleTipo in Bundles2.BundlesCargar.CargarBundles())
	{
		List<Bundles2.Bundle> bundlesAño = new List<Bundles2.Bundle>();

		foreach (var bundlePasado in bundlesPasados)
		{
			if (bundlePasado.FechaEmpieza.Year.ToString() == añoSeleccionado && bundleTipo == bundlePasado.Tipo)
			{
				bundlesAño.Add(bundlePasado);
			}
		}

		if (bundlesAño.Count > 0)
		{
			<hr>

			<div id="pasado-@bundleTipo.ToString()" style="display: flex; align-items: start;">
				<div class="perfil" style="width: 20%;">
					<img src="@Bundles2.BundlesCargar.DevolverBundle(bundleTipo).ImagenTienda" />
				</div>

				<div class="perfil" style="width: 80%;">
					@{
						int i = 1;
						while (i < 13)
						{
							List<Bundles2.Bundle> bundlesMensual = new List<Bundles2.Bundle>();

							foreach (var bundle in bundlesAño)
							{
								if (bundle.FechaEmpieza.Month == i)
								{
									bundlesMensual.Add(bundle);
								}
							}

							if (bundlesMensual.Count > 0)
							{
								<label>@Herramientas.Idiomas.CogerCadena(idioma, "Month." + i.ToString())</label>

								<ul>
									@foreach (var bundleMensual in bundlesMensual)
									{
										<li>
											<a href="/bundle/@bundleMensual.Id">
												@bundleMensual.NombreBundle
											</a>
										</li>
									}
								</ul>
							}

							i += 1;
						}
					}
				</div>
			</div>
		}
	}
</div>

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string dominio { get; set; }

	List<Bundles2.Bundle> bundlesActuales = new List<Bundles2.Bundle>();
	List<Bundles2.Bundle> bundlesPasados = new List<Bundles2.Bundle>();
	Bundles2.Bundle bundleSeleccionado = new Bundles2.Bundle();
	private bool mostrarBundleSeleccionado = false;

	private Usuario usuario = new Usuario();
	private List<string> juegosUsuario = new List<string>();

	private List<string> años = new List<string>();
	private string añoSeleccionado = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		usuario = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);

		if (usuario != null)
		{
			if (string.IsNullOrEmpty(usuario.SteamAccount) == false && string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
			{
				bool tiempo = true;

				if (string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
				{
					if (Convert.ToDateTime(usuario.SteamAccountLastCheck) + TimeSpan.FromDays(7) > DateTime.Now)
					{
						tiempo = false;
					}
				}

				if (tiempo == true)
				{
					SteamUsuario datos = await Cuenta.CargarDatos(usuario.SteamAccount);

					usuario.SteamGames = datos.Juegos;
					usuario.SteamWishlist = datos.Deseados;
					usuario.Avatar = datos.Avatar;
					usuario.Nickname = datos.Nombre;
					usuario.SteamAccountLastCheck = DateTime.Now.ToString();
					usuario.OfficialGroup = datos.GrupoPremium;
					usuario.OfficialGroup2 = datos.GrupoNormal;

					await UserManager.UpdateAsync(usuario);
				}
			}

			juegosUsuario = Herramientas.Listados.Generar(usuario.SteamGames);
		}

		//--------------------------------------------------------------------

		DateTime arranque = new DateTime(2010, 1, 1);

		int i = 0;
		while (i < 100)
		{
			if (arranque.Year != DateTime.Now.Year)
			{
				años.Add(arranque.Year.ToString());
				arranque = arranque.AddYears(1);
			}
			i += 1;
		}

		años.Add(DateTime.Now.Year.ToString());
		años.Reverse();

		añoSeleccionado = DateTime.Now.Year.ToString();

		//--------------------------------------------------------------------

		List<Bundles2.Bundle> bundles = BaseDatos.Bundles.Buscar.Todos();

		if (bundles.Count > 0)
		{
			foreach (var bundle in bundles)
			{
				if (DateTime.Now >= bundle.FechaEmpieza && DateTime.Now <= bundle.FechaTermina)
				{
					foreach (var juego in bundle.Juegos)
					{
						Juegos.Juego juego2 = BaseDatos.Juegos.Buscar.UnJuego(juego.JuegoId.ToString());
						juego.Imagen = await Herramientas.Imagenes.DescargarYGuardar(juego2.Imagenes.Capsule_231x87, "juegos", juego2.Id.ToString(), "capsule_231x87", dominio);
						juego.Juego = juego2;
					}

					bundle.ImagenBundle = await Herramientas.Imagenes.DescargarYGuardar(bundle.ImagenBundle, "bundles", bundle.Id.ToString(), "header", dominio);

					bundlesActuales.Add(bundle);
				}
				else
				{
					bundlesPasados.Add(bundle);
				}
			}

			if (bundlesActuales.Count > 0)
			{
				bundlesActuales = bundlesActuales.OrderBy(x => x.FechaTermina).ToList();

				bundleSeleccionado = bundlesActuales[0];
			}
		}
	}

	private void CambiarAño(MouseEventArgs e, string nuevoAño)
	{
		añoSeleccionado = nuevoAño;
	}

	private string MostrarFechaTermina(DateTime fecha)
	{
		if (fecha.Year > 2022)
		{
			TimeSpan diferenciaTiempo = fecha.Subtract(DateTime.Now);

			if (diferenciaTiempo.Days > 1)
			{
				return string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String4"), diferenciaTiempo.Days);
			}
			else if (diferenciaTiempo.Days == 1)
			{
				return string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String5"), diferenciaTiempo.Days);
			}
			else if (diferenciaTiempo.Days == 0 && diferenciaTiempo.Minutes > 0)
			{
				return string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String6"), diferenciaTiempo.Days);
			}
			else
			{
				return string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String7"), diferenciaTiempo.Days);
			}
		}

		return null;
	}

	private string MostrarPrecio(Bundles2.BundleTier tier)
	{
		string mensaje = "Tier " + tier.Posicion.ToString() + " • ";

		string precio = tier.Precio;
		precio = precio.Replace(".", ",");
		precio = precio + "€";

		return mensaje + precio;
	}

	private List<Bundles2.BundleTier> OrdenarTiers(List<Bundles2.BundleTier> tiers)
	{
		if (tiers != null)
		{
			tiers.Sort(delegate (Bundles2.BundleTier t1, Bundles2.BundleTier t2)
			{
				return t1.Posicion.CompareTo(t2.Posicion);
			});
		}

		return tiers;
	}

	private string MostrarMensajePick(List<Bundles2.BundleTier> tiers)
	{
		string mensaje = string.Empty;

		foreach (var tier in tiers)
		{
			string precio = tier.Precio;
			precio = precio.Replace(".", ",");
			precio = precio + "€";

			mensaje = mensaje + "<div>" + tier.CantidadJuegos.ToString() + "  " + Herramientas.Idiomas.CogerCadena(idioma, "Bundles.String8") + " • " + precio + "</div>";
		}

		return mensaje;
	}

	private string ComprobarUsuarioJuego(Juegos.Juego juego, Juegos.JuegoDRM drm)
	{
		if (usuario != null && juego.Tipo == Juegos.JuegoTipo.Game)
		{
			if (juegosUsuario.Count > 0)
			{
				foreach (var juegoUsuario in juegosUsuario)
				{
					if (juegoUsuario == juego.IdSteam.ToString())
					{
						if (drm == Juegos.JuegoDRM.Steam)
						{
							return "3";
						}
						else
						{
							return "5";
						}
					}
				}

				if (drm == Juegos.JuegoDRM.Steam)
				{
					return "4";
				}
				else
				{
					return "6";
				}
			}
		}

		return null;
	}

	private void SeleccionarBundleActual(MouseEventArgs e, Bundles2.Bundle nuevoBundle)
	{
		bundleSeleccionado = nuevoBundle;

		mostrarBundleSeleccionado = true;
	}
}
