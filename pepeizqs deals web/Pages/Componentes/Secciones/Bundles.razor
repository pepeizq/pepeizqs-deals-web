@using APIs.Steam
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JavaScript

<script>
	function moverScroll(id) {
		const yOffset = -30;
		const element = document.getElementById(id);
		const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

		window.scrollTo({ top: y, behavior: 'smooth' });
	}
</script>

@if (bundlesActuales.Count > 0)
{
	@if (mostrarBundleSeleccionado == false)
	{
		<h1 style="font-size: 23px;">
			@Herramientas.Idiomas.CogerCadena(idioma, "String1", "Bundle")
		</h1>

		<hr>

		<div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 40px; justify-items: center; margin-top: 40px; margin-bottom: 70px;">
			@foreach (var bundle in bundlesActuales)
			{
				<button @onclick="@(e => SeleccionarBundle(e, bundle))" class="boton-pequeño" style="padding: 0px;">
					<div style="width: 100%; text-align: center; padding: 5px;">
						@if (bundle.Tipo == Bundles2.BundleTipo.HumbleBundle)
						{
							<img src="@bundle.ImagenNoticia" style="max-width: 100%;" alt="@bundle.NombreBundle" />
						}
						else
						{
							<img src="@bundle.ImagenBundle" style="max-width: 100%;" alt="@bundle.NombreBundle" />
						}

						<div style="margin-top: 10px; margin-bottom: 5px; text-align: center; font-size: 14px;">
							@MostrarFecha(bundle.FechaEmpieza, bundle.FechaTermina)
						</div>
					</div>
				</button>
			}
		</div>
	}
	else
	{
		@if (bundleSeleccionado != null)
		{
			<div style="margin-bottom: 40px; position: -webkit-sticky; position: sticky; top: 70px; z-index: 3; overflow: hidden;">
				<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 20px 30px; display: flex; align-items: center; flex-direction: row;">
					<button @onclick="@(e => CerrarBundle(e))" class="boton-pequeño" style="width: auto; text-align: center; font-size: 23px; padding: 10px 20px;">
						<i class="fa-solid fa-arrow-left"></i>
					</button>

					<div style="display: flex; align-items: center; flex-direction: row;">
						<a href="@Herramientas.EnlaceAcortador.Generar(bundleSeleccionado.Enlace, bundleSeleccionado.Tipo)" style="width: auto;" target="_blank">
							<div style="height: 60px; padding-left: 40px; padding-right: 20px;">
								<img src="@Bundles2.BundlesCargar.DevolverBundle(bundleSeleccionado.Tipo).ImagenTienda" style="height: 100%;" alt="@bundleSeleccionado.NombreBundle" />
							</div>
						</a>

						<div style="padding-left: 20px; padding-right: 20px;">
							<a href="@Herramientas.EnlaceAcortador.Generar(bundleSeleccionado.Enlace, bundleSeleccionado.Tipo)" class="boton-pequeño" style="background-color: transparent; padding: 0px; font-size: 20px; margin-bottom: 10px;" target="_blank">
								@bundleSeleccionado.NombreBundle
							</a>

							<div style="display: flex; align-items: center; flex-direction: row; font-size: 14px;">
								<a href="/bundle/@bundleSeleccionado.Id/@Herramientas.EnlaceAdaptador.Nombre(bundleSeleccionado.NombreBundle)/" class="boton-pequeño" style="width: auto; text-align: center; padding: 4px 8px; margin-right: 20px; font-size: 14px;">
									<i class="fa-solid fa-link"></i>
								</a>

								@MostrarFecha(bundleSeleccionado.FechaEmpieza, bundleSeleccionado.FechaTermina)
							</div>
						</div>
					</div>
				</div>

				<a href="@Herramientas.EnlaceAcortador.Generar(bundleSeleccionado.Enlace, bundleSeleccionado.Tipo)" class="boton-pequeño" style="text-align: center; padding: 10px 15px;" target="_blank">
					@Herramientas.Idiomas.CogerCadena(idioma, "String3", "Bundle")
				</a>
			</div>		

			<Bundle bundleId="@bundleSeleccionado.Id" idioma="@idioma" usuario="@usuario" tipo="@Bundle.Tipo.Bundles" />
		}
	}
}

@if (mostrarBundleSeleccionado == false)
{
	<div id="bundles-archivo" style="font-size: 23px;">
		@Herramientas.Idiomas.CogerCadena(idioma, "String2", "Bundle")
	</div>

	<div style="display: flex; align-items: start; margin-top: 10px;">
		@foreach (var año in años)
		{
			<div style="margin-right: 15px;">
				<button @onclick="@(e => CambiarAño(e, año))" class="boton-pequeño" style="padding: 6px 10px; width: auto;">
					@año
				</button>

				@if (añoSeleccionado == año)
				{
					<div style="margin-top: 10px; background: var(--colorTexto); padding: 1px;">
					</div>

					<div style="position: absolute; margin-top: 15px; display: flex; align-items: center;">
						@foreach (var bundleTipo in Bundles2.BundlesCargar.CargarBundles())
						{
							List<Bundles2.Bundle> bundlesAño = new List<Bundles2.Bundle>();

							foreach (var bundlePasado in bundlesPasados)
							{
								if (bundlePasado.FechaEmpieza.Year.ToString() == añoSeleccionado && bundleTipo == bundlePasado.Tipo)
								{
									bundlesAño.Add(bundlePasado);
								}
							}

							if (bundlesAño.Count > 0)
							{
								<div style="margin-right: 15px; font-size: 14px;">
									<a onclick="moverScroll('pasado-@bundleTipo.ToString()')" style="color: var(--colorTexto); text-decoration: none; cursor: pointer;">
										<img src="@Bundles2.BundlesCargar.DevolverBundle(bundleTipo).ImagenIcono" style="width: 22px; height: 22px;" alt="Store"/> (@bundlesAño.Count.ToString())
									</a>
								</div>
							}
						}
					</div>
				}
			</div>
		}
	</div>

	<div style="margin-top: 55px;">
		@foreach (var bundleTipo in Bundles2.BundlesCargar.CargarBundles())
		{
			List<Bundles2.Bundle> bundlesAño = new List<Bundles2.Bundle>();

			foreach (var bundlePasado in bundlesPasados)
			{
				if (bundlePasado.FechaEmpieza.Year.ToString() == añoSeleccionado && bundleTipo == bundlePasado.Tipo)
				{
					bundlesAño.Add(bundlePasado);
				}
			}

			if (bundlesAño.Count > 0)
			{
				<hr>

				<div id="pasado-@bundleTipo.ToString()" style="display: flex; align-items: start;">
					<div class="perfil" style="width: 20%;">
						<img src="@Bundles2.BundlesCargar.DevolverBundle(bundleTipo).ImagenTienda" alt="Store"/>
					</div>

					<div class="perfil" style="width: 80%;">
						@{
							int i = 1;
							while (i < 13)
							{
								List<Bundles2.Bundle> bundlesMensual = new List<Bundles2.Bundle>();

								foreach (var bundle in bundlesAño)
								{
									if (bundle.FechaEmpieza.Month == i)
									{
										bundlesMensual.Add(bundle);
									}
								}

								if (bundlesMensual.Count > 0)
								{
									bundlesMensual = bundlesMensual.OrderBy(x => x.NombreBundle).ToList();

									<label>@Herramientas.Idiomas.CogerCadena(idioma, "Month." + i.ToString())</label>

									<ul>
										@foreach (var bundleMensual in bundlesMensual)
										{
											<li>
												<a @onclick="@(e => SeleccionarBundle(e, bundleMensual))" class="enlace-falso">
													@bundleMensual.NombreBundle
												</a>
											</li>
										}
									</ul>
								}

								i += 1;
							}
						}
					</div>
				</div>
			}
		}
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public Usuario usuario { get; set; }

	private List<Bundles2.Bundle> bundlesActuales = new List<Bundles2.Bundle>();
	private List<Bundles2.Bundle> bundlesPasados = new List<Bundles2.Bundle>();
	private Bundles2.Bundle bundleSeleccionado = new Bundles2.Bundle();
	private bool mostrarBundleSeleccionado = false;

	private List<string> juegosUsuario = new List<string>();

	private List<string> años = new List<string>();
	private string añoSeleccionado = string.Empty;

	protected override void OnInitialized()
	{
		if (usuario != null)
		{
			if (string.IsNullOrEmpty(usuario.SteamGames) == false)
			{
				juegosUsuario = Herramientas.Listados.Generar(usuario.SteamGames);
			}
		}

		//--------------------------------------------------------------------

		DateTime arranque = new DateTime(2010, 1, 1);

		int i = 0;
		while (i < 100)
		{
			if (arranque.Year != DateTime.Now.Year)
			{
				años.Add(arranque.Year.ToString());
				arranque = arranque.AddYears(1);
			}
			i += 1;
		}

		años.Add(DateTime.Now.Year.ToString());
		años.Reverse();

		//--------------------------------------------------------------------

		bundlesActuales = BaseDatos.Bundles.Buscar.Actuales();

		if (bundlesActuales.Count > 0)
		{
			bundleSeleccionado = bundlesActuales[0];

			bundlesActuales = bundlesActuales.OrderBy(x => x.FechaTermina).ToList();
		}
	}

	private void CambiarAño(MouseEventArgs e, string nuevoAño)
	{
		añoSeleccionado = nuevoAño;

		bundlesPasados = BaseDatos.Bundles.Buscar.Año(añoSeleccionado);
	}

	private string MostrarFecha(DateTime fechaEmpieza, DateTime fechaTermina)
	{
		if (fechaTermina.Year > 2022)
		{
			TimeSpan diferenciaTiempo = fechaTermina.Subtract(DateTime.Now);

			if (diferenciaTiempo.Days > 1)
			{
				return string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String4", "Bundle"), diferenciaTiempo.Days);
			}
			else if (diferenciaTiempo.Days == 1)
			{
				return string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String5", "Bundle"), diferenciaTiempo.Days);
			}
			else if (diferenciaTiempo.Days == 0 && diferenciaTiempo.Minutes > 0)
			{
				return string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String6", "Bundle"), diferenciaTiempo.Days);
			}
		}

		return Herramientas.Idiomas.CogerCadena(idioma, "String7", "Bundle") + " • " + fechaEmpieza.Day.ToString() + "/" + fechaEmpieza.Month.ToString() + "/" + fechaEmpieza.Year.ToString() + " • " + fechaTermina.Day.ToString() + "/" + fechaTermina.Month.ToString() + "/" + fechaTermina.Year.ToString();
	}

	private async void SeleccionarBundle(MouseEventArgs e, Bundles2.Bundle nuevoBundle)
	{
		bundleSeleccionado = nuevoBundle;

		foreach (var juego in bundleSeleccionado.Juegos)
		{
			juego.Juego = BaseDatos.Juegos.Buscar.UnJuego(juego.JuegoId.ToString());		
		}

		mostrarBundleSeleccionado = true;

		await JavaScript.InvokeVoidAsync("moverScroll", "cuerpazo");
	}

	private async void CerrarBundle(MouseEventArgs e)
	{
		mostrarBundleSeleccionado = false;

		await JavaScript.InvokeVoidAsync("moverScroll", "cuerpazo");
	}
}
