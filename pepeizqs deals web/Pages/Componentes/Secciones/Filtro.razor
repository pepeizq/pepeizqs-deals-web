@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using pepeizqs_deals_web.Areas.Identity.Data

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JavaScript
@inject NavigationManager NavManager

<script>
	window.ChangeUrl = function (url) {
		history.pushState(null, '', url);
	}
</script>

<style>
	.boton-expandir {
		transition: transform .2s;
		filter: brightness(100%);
		background-color: var(--fondoOscuro);
	}

		.boton-expandir:hover {
			transform: scale(1.01);
			filter: brightness(120%);
		}
</style>

@if (cargado == false)
{
	<div style="text-align: center; width: 100%;">
		<div class="cargando" />
	</div>	
}
else
{
	<h1 style="font-size: 23px;">
		@Herramientas.Idiomas.CogerCadena(idioma, "Title", "Filter")
	</h1>

	<hr>

	@if (idsLista != null)
	{
		if (idsLista.Count > 0)
		{
			<div style="display: flex; align-items: center; flex-flow: wrap; grid-gap: 10px; margin-bottom: 20px;">
				@foreach (var id in idsLista)
				{
					if (id.Contains("d") == true)
					{
						string letra = "d";
						string cadena = id.Replace(letra, null);
						string deck = Herramientas.Idiomas.CogerCadena(idioma, "Deck4", "Filter") + " • " + Herramientas.Idiomas.CogerCadena(idioma, "Deck" + cadena, "Filter");

						if (string.IsNullOrEmpty(deck) == false)
						{
							<button @onclick="(e => CambiarIDs(e, cadena, letra))" class="boton-expandir" style="color: var(--colorTexto); text-decoration: none; border: 0px; background-color: var(--fondoBotonPequeño);">
								<div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px; height: 100%;">
									<div style="font-size: 14px;">@deck</div>
									<i class="fa-solid fa-xmark"></i>
								</div>
							</button>
						}
					}

					if (id.Contains("i") == true)
					{
						string letra = "i";
						string cadena = id.Replace(letra, null);
						string tipo = Herramientas.Idiomas.CogerCadena(idioma, "String9", "Filter") + " • " + Herramientas.Idiomas.CogerCadena(idioma, "Type" + cadena, "Filter");

						if (string.IsNullOrEmpty(tipo) == false)
						{
							<button @onclick="(e => CambiarIDs(e, cadena, letra))" class="boton-expandir" style="color: var(--colorTexto); text-decoration: none; border: 0px; background-color: var(--fondoBotonPequeño);">
								<div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px; height: 100%;">
									<div style="font-size: 14px;">@tipo</div>
									<i class="fa-solid fa-xmark"></i>
								</div>
							</button>
						}
					}

					if (id.Contains("s") == true)
					{
						string letra = "s";
						string cadena = id.Replace(letra, null);
						string sistema = Herramientas.Idiomas.CogerCadena(idioma, "String8", "Filter") + " • " + Herramientas.Idiomas.CogerCadena(idioma, "System" + cadena, "Filter");

						if (string.IsNullOrEmpty(sistema) == false)
						{
							<button @onclick="(e => CambiarIDs(e, cadena, letra))" class="boton-expandir" style="color: var(--colorTexto); text-decoration: none; border: 0px; background-color: var(--fondoBotonPequeño);">
								<div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px; height: 100%;">
									<div style="font-size: 14px;">@sistema</div>
									<i class="fa-solid fa-xmark"></i>
								</div>
							</button>
						}
					}

					if (id.Contains("t") == true)
					{
						string letra = "t";
						string cadena = id.Replace(letra, null);
						string etiqueta = Herramientas.Idiomas.CogerCadena(idioma, "String6", "Filter") + " • " + Herramientas.Idiomas.CogerCadena(idioma, cadena, "Tags");

						if (string.IsNullOrEmpty(etiqueta) == false)
						{
							<button @onclick="(e => CambiarIDs(e, cadena, letra))" class="boton-expandir" style="color: var(--colorTexto); text-decoration: none; border: 0px; background-color: var(--fondoBotonPequeño);">
								<div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px; height: 100%;">
									<div style="font-size: 14px;">@etiqueta</div>
									<i class="fa-solid fa-xmark"></i>
								</div>
							</button>
						}
					}

					if (id.Contains("c") == true)
					{
						string letra = "c";
						string cadena = id.Replace(letra, null);
						string categoria = Herramientas.Idiomas.CogerCadena(idioma, "String5", "Filter") + " • " + Herramientas.Idiomas.CogerCadena(idioma, cadena, "Categories");

						if (string.IsNullOrEmpty(categoria) == false)
						{
							<button @onclick="(e => CambiarIDs(e, cadena, letra))" class="boton-expandir" style="color: var(--colorTexto); text-decoration: none; border: 0px; background-color: var(--fondoBotonPequeño);">
								<div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px; height: 100%;">
									<div style="font-size: 14px;">@categoria</div>
									<i class="fa-solid fa-xmark"></i>
								</div>
							</button>
						}
					}

					if (id.Contains("g") == true)
					{
						string letra = "g";
						string cadena = id.Replace(letra, null);
						string generos = Herramientas.Idiomas.CogerCadena(idioma, "String4", "Filter") + " • " + Herramientas.Idiomas.CogerCadena(idioma, cadena, "Genres");

						if (string.IsNullOrEmpty(generos) == false)
						{
							<button @onclick="(e => CambiarIDs(e, cadena, letra))" class="boton-expandir" style="color: var(--colorTexto); text-decoration: none; border: 0px; background-color: var(--fondoBotonPequeño);">
								<div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px; height: 100%;">
									<div style="font-size: 14px;">@generos</div>
									<i class="fa-solid fa-xmark"></i>
								</div>
							</button>
						}
					}
				}
			</div>
		}
	}

	<div style="display: flex; align-items: start; gap: 40px;">
		<div style="width: 30%; display: flex; flex-direction: column; gap: 20px;">
			@if (decks.Count > 0)
			{
				string letra = "d";

				<div>
					<button @onclick="(e => AbrirDeck(e))" style="color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; background-color: var(--fondoBotonPequeño);">
						<div style="display: flex; align-items: center;">
							<div style="width: 100%;">
								@Herramientas.Idiomas.CogerCadena(idioma, "Deck4", "Filter") (@CantidadIDs(letra))
							</div>

							<div>
								@if (enseñarDeck == true)
								{
									<i class="fa-solid fa-chevron-up"></i>
								}
								else
								{
									<i class="fa-solid fa-chevron-down"></i>
								}
							</div>
						</div>
					</button>

					@if (enseñarDeck == true)
					{
						<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 10px; display: flex; flex-direction: column; gap: 10px;">
							@foreach (var deck in decks)
							{
								string fondo = string.Empty;

								if (idsLista != null)
								{
									if (idsLista.Count > 0)
									{
										foreach (var id2 in idsLista)
										{
											if (letra + deck.Id == id2)
											{
												fondo = "background-color: var(--fondoBotonPequeño);";
												break;
											}
										}
									}
								}

								<button @onclick="(e => CambiarIDs(e, deck.Id, letra))" class="boton-expandir" style="color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondo">
									<div style="font-size: 14px;">
										@deck.Contenido
									</div>
								</button>
							}
						</div>
					}
				</div>
			}

			@if (tipos.Count > 0)
			{
				string letra = "i";

				<div>
					<button @onclick="(e => AbrirTipos(e))" style="color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; background-color: var(--fondoBotonPequeño);">
						<div style="display: flex; align-items: center;">
							<div style="width: 100%;">
								@Herramientas.Idiomas.CogerCadena(idioma, "String9", "Filter") (@CantidadIDs(letra))
							</div>

							<div>
								@if (enseñarSistemas == true)
								{
									<i class="fa-solid fa-chevron-up"></i>
								}
								else
								{
									<i class="fa-solid fa-chevron-down"></i>
								}
							</div>
						</div>
					</button>

					@if (enseñarTipos == true)
					{
						<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 10px; display: flex; flex-direction: column; gap: 10px;">
							@foreach (var tipo in tipos)
							{
								string fondo = string.Empty;

								if (idsLista != null)
								{
									if (idsLista.Count > 0)
									{
										foreach (var id2 in idsLista)
										{
											if (letra + tipo.Id == id2)
											{
												fondo = "background-color: var(--fondoBotonPequeño);";
												break;
											}
										}
									}
								}

								<button @onclick="(e => CambiarIDs(e, tipo.Id, letra))" class="boton-expandir" style="color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondo">
									<div style="font-size: 14px;">
										@tipo.Contenido
									</div>
								</button>
							}
						</div>
					}
				</div>
			}

			@if (sistemas.Count > 0)
			{
				string letra = "s";

				<div>
					<button @onclick="(e => AbrirSistemas(e))" style="color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; background-color: var(--fondoBotonPequeño);">
						<div style="display: flex; align-items: center;">
							<div style="width: 100%;">
								@Herramientas.Idiomas.CogerCadena(idioma, "String7", "Filter") (@CantidadIDs(letra))
							</div>

							<div>
								@if (enseñarSistemas == true)
								{
									<i class="fa-solid fa-chevron-up"></i>
								}
								else
								{
									<i class="fa-solid fa-chevron-down"></i>
								}
							</div>
						</div>
					</button>

					@if (enseñarSistemas == true)
					{
						<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 10px; display: flex; flex-direction: column; gap: 10px;">
							@foreach (var sistema in sistemas)
							{
								string fondo = string.Empty;

								if (idsLista != null)
								{
									if (idsLista.Count > 0)
									{
										foreach (var id2 in idsLista)
										{
											if (letra + sistema.Id == id2)
											{
												fondo = "background-color: var(--fondoBotonPequeño);";
												break;
											}
										}
									}
								}

								<button @onclick="(e => CambiarIDs(e, sistema.Id, letra))" class="boton-expandir" style="color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondo">
									<div style="font-size: 14px;">
										@sistema.Contenido
									</div>
								</button>
							}
						</div>
					}
				</div>
			}

			@if (etiquetas.Count > 0)
			{
				string letra = "t";

				<div>
					<button @onclick="(e => AbrirEtiquetas(e))" style="color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; background-color: var(--fondoBotonPequeño);">
						<div style="display: flex; align-items: center;">
							<div style="width: 100%;">
								@Herramientas.Idiomas.CogerCadena(idioma, "String3", "Filter") (@CantidadIDs(letra))
							</div>

							<div>
								@if (enseñarEtiquetas == true)
								{
									<i class="fa-solid fa-chevron-up"></i>
								}
								else
								{
									<i class="fa-solid fa-chevron-down"></i>
								}
							</div>
						</div>
					</button>

					@if (enseñarEtiquetas == true)
					{
						<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 10px; display: flex; flex-direction: column; gap: 10px;">
							@foreach (var etiqueta in etiquetas)
							{
								string fondo = string.Empty;

								if (idsLista != null)
								{
									if (idsLista.Count > 0)
									{
										foreach (var id2 in idsLista)
										{
											if (letra + etiqueta.Id == id2)
											{
												fondo = "background-color: var(--fondoBotonPequeño);";
												break;
											}
										}
									}
								}

								<button @onclick="(e => CambiarIDs(e, etiqueta.Id, letra))" class="boton-expandir" style="color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondo">
									<div style="font-size: 14px;">
										@etiqueta.Contenido
									</div>
								</button>
							}
						</div>
					}
				</div>
			}

			@if (categorias.Count > 0)
			{
				string letra = "c";

				<div>
					<button @onclick="(e => AbrirCategorias(e))" style="background-color: transparent; color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; background-color: var(--fondoBotonPequeño);">
						<div style="display: flex; align-items: center;">
							<div style="width: 100%;">
								@Herramientas.Idiomas.CogerCadena(idioma, "String2", "Filter") (@CantidadIDs(letra))
							</div>
							
							<div>
								@if (enseñarCategorias == true)
								{
									<i class="fa-solid fa-chevron-up"></i>
								}
								else
								{
									<i class="fa-solid fa-chevron-down"></i>
								}
							</div>
						</div>
					</button>

					@if (enseñarCategorias == true)
					{
						<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 10px; display: flex; flex-direction: column; gap: 10px;">
							@foreach (var categoria in categorias)
							{
								string fondo = string.Empty;

								if (idsLista != null)
								{
									if (idsLista.Count > 0)
									{
										foreach (var id2 in idsLista)
										{
											if (letra + categoria.Id == id2)
											{
												fondo = "background-color: var(--fondoBotonPequeño);";
												break;
											}
										}
									}
								}

								<button @onclick="(e => CambiarIDs(e, categoria.Id, letra))" class="boton-expandir" style="color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondo">
									<div style="display: flex; align-items: center; gap: 10px;">
										<div style="max-width: 30px;">
											@{
												string imagen = "/imagenes/categorias/" + @categoria.Id + ".webp";
											}

											<img src="@imagen" style="width: 100%; height: 100%;"/>
										</div>

										<div style="width: 100%; font-size: 14px;">
											@categoria.Contenido
										</div>
									</div>
								</button>
							}
						</div>
					}
				</div>
			}

			@if (generos.Count > 0)
			{
				string letra = "g";

				<div>
					<button @onclick="(e => AbrirGeneros(e))" style="color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; background-color: var(--fondoBotonPequeño);">
						<div style="display: flex; align-items: center;">
							<div style="width: 100%;">
								@Herramientas.Idiomas.CogerCadena(idioma, "String1", "Filter") (@CantidadIDs(letra))
							</div>

							<div>
								@if (enseñarGeneros == true)
								{
									<i class="fa-solid fa-chevron-up"></i>
								}
								else
								{
									<i class="fa-solid fa-chevron-down"></i>
								}
							</div>
						</div>
					</button>

					@if (enseñarGeneros == true)
					{
						<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 10px; display: flex; flex-direction: column; gap: 10px;">
							@foreach (var genero in generos)
							{
								string fondo = string.Empty;

								if (idsLista != null)
								{
									if (idsLista.Count > 0)
									{
										foreach (var id2 in idsLista)
										{
											if (letra + genero.Id == id2)
											{
												fondo = "background-color: var(--fondoBotonPequeño);";
												break;
											}
										}
									}
								}

								<button @onclick="(e => CambiarIDs(e, genero.Id, letra))" class="boton-expandir" style="color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondo">
									<div style="font-size: 14px;">
										@genero.Contenido
									</div>
								</button>
							}
						</div>
					}
				</div>
			}
		</div>

		<div style="width: 100%;">
			<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 0px 20px; display: flex; flex-direction: column; gap: 20px;">
				<Virtualize Context="juego" Items="resultadosGestor" ItemSize="334" OverscanCount="6">
					<ItemContent>
						@{
							bool usuarioTieneJuego = Herramientas.Tooltip.ComprobarUsuarioTieneJuego(usuario, usuarioJuegosSteam, juego, juego.PrecioMinimosHistoricos[0].DRM);
							bool usuarioTieneDeseado = false;

							string fondoColor = string.Empty;

							if (usuarioTieneJuego == true)
							{
								fondoColor = "background-color: var(--fondoBien);";
							}
							else
							{
								usuarioTieneDeseado = Herramientas.Deseados.ComprobarSiEsta(usuario, juego, juego.PrecioMinimosHistoricos[0].DRM, true);

								if (usuarioTieneDeseado == true)
								{
									fondoColor = "background-color: var(--fondoAlerta);";
								}
							}

							<a href="/game/@juego.Id.ToString()/@Herramientas.EnlaceAdaptador.Nombre(juego.Nombre)/" class="boton-pequeño" style="padding: 2px; @fondoColor">
								<div style="display: flex; align-items: center;">
									<div>
										<img src="@juego.Imagenes.Header_460x215" style="width: 230px; height: 107px;" />
									</div>

									<div style="padding: 0px 20px;">
										<div>
											@juego.Nombre
										</div>

										<div style="margin-top: 10px; font-size: 15px;">
											@Herramientas.Buscador.GenerarMensaje(idioma, juego, true, true, true)
										</div>
									</div>
								</div>
							</a>
						}
					</ItemContent>
				</Virtualize>
			</div>
		</div>
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	#nullable enable
	[Parameter]
	public string? ids { get; set; }
	#nullable disable

	private Usuario usuario = new Usuario();
	private List<string> usuarioJuegosSteam = new List<string>();

	private bool cargado = false;

	private List<string> idsLista = new List<string>();

	private List<Juegos.Juego> resultadosGestor = new List<Juegos.Juego>();

	#nullable enable
	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }
	#nullable disable

	protected override async Task OnInitializedAsync()
	{
		if (HttpContext == null)
		{
			cargado = false;

			usuario = await Herramientas.UsuarioDatos.Actualizar(HttpContextAccessor.HttpContext.User, usuario, UserManager, idioma);

			if (usuario != null)
			{
				if (string.IsNullOrEmpty(usuario.SteamGames) == false)
				{
					usuarioJuegosSteam = Herramientas.Listados.Generar(usuario.SteamGames);
				}
			}

			CargarDeck();
			CargarTipos();
			CargarSistemas();
			CargarEtiquetas();
			CargarCategorias();
			CargarGeneros();

			idsLista = Herramientas.Listados.Generar(ids);

			resultadosGestor = BaseDatos.Juegos.Buscar.Filtro(idsLista, 250);

			cargado = true;
		}
	}

	private class FiltroItem
	{
		public string Id { get; set; }
		public string Contenido { get; set; }
	}

	private async void CambiarIDs(MouseEventArgs e, string nuevaId, string letra)
	{
		nuevaId = letra + nuevaId;

		bool encontrado = false;

		int i = 0;
		if (idsLista != null)
		{
			if (idsLista.Count > 0)
			{
				foreach (var id in idsLista)
				{
					if (id == nuevaId)
					{
						encontrado = true;
						break;
					}

					i += 1;
				}
			}
		}

		if (encontrado == false)
		{
			if (idsLista == null)
			{
				idsLista = new List<string>();
			}

			idsLista.Add(nuevaId);
		}
		else
		{
			idsLista.RemoveAt(i);
		}

		ids = null;

		foreach (var id in idsLista)
		{
			ids = ids + "," + id;
		}

		if (string.IsNullOrEmpty(ids) == false)
		{
			ids = ids.Remove(0, 1);
		}

		resultadosGestor = BaseDatos.Juegos.Buscar.Filtro(idsLista, 250);

		if (string.IsNullOrEmpty(ids) == false)
		{
			await JavaScript.InvokeVoidAsync("ChangeUrl", "/filter/" + ids + "/");
		}
		else
		{
			await JavaScript.InvokeVoidAsync("ChangeUrl", "/filter/");
		}
	}

	private int CantidadIDs(string letra)
	{
		int i = 0;

		if (idsLista != null)
		{
			if (idsLista.Count > 0)
			{
				foreach (var id in idsLista)
				{
					if (id.Contains(letra) == true)
					{
						i += 1;
					}
				}
			}
		}

		return i;
	}

	#region Deck

	private List<FiltroItem> decks = new List<FiltroItem>();

	private void CargarDeck()
	{
		List<string> cadenas = new List<string>();
		cadenas.Add("2");
		cadenas.Add("3");

		foreach (var cadena in cadenas)
		{
			FiltroItem nuevoDeck = new FiltroItem();
			nuevoDeck.Id = cadena;
			nuevoDeck.Contenido = Herramientas.Idiomas.CogerCadena(idioma, "Deck" + cadena, "Filter");

			decks.Add(nuevoDeck);
		}
	}

	private bool enseñarDeck = true;

	private void AbrirDeck(MouseEventArgs e)
	{
		if (enseñarDeck == true)
		{
			enseñarDeck = false;
		}
		else
		{
			enseñarDeck = true;
		}
	}

	#endregion

	#region Tipos

	private List<FiltroItem> tipos = new List<FiltroItem>();

	private void CargarTipos()
	{
		List<string> cadenas = new List<string>();
		cadenas.Add("0");
		cadenas.Add("1");
		cadenas.Add("3");
		cadenas.Add("4");

		foreach (var cadena in cadenas)
		{
			FiltroItem nuevoTipo = new FiltroItem();
			nuevoTipo.Id = cadena;
			nuevoTipo.Contenido = Herramientas.Idiomas.CogerCadena(idioma, "Type" + cadena, "Filter");

			tipos.Add(nuevoTipo);
		}
	}

	private bool enseñarTipos = true;

	private void AbrirTipos(MouseEventArgs e)
	{
		if (enseñarTipos == true)
		{
			enseñarTipos = false;
		}
		else
		{
			enseñarTipos = true;
		}
	}

	#endregion

	#region Sistemas

	private List<FiltroItem> sistemas = new List<FiltroItem>();

	private void CargarSistemas()
	{
		List<string> cadenas = new List<string>();
		cadenas.Add("1");
		cadenas.Add("2");
		cadenas.Add("3");

		foreach (var cadena in cadenas)
		{
			FiltroItem nuevoSistema = new FiltroItem();
			nuevoSistema.Id = cadena;
			nuevoSistema.Contenido = Herramientas.Idiomas.CogerCadena(idioma, "System" + cadena, "Filter");

			sistemas.Add(nuevoSistema);
		}
	}

	private bool enseñarSistemas = false;

	private void AbrirSistemas(MouseEventArgs e)
	{
		if (enseñarSistemas == true)
		{
			enseñarSistemas = false;
		}
		else
		{
			enseñarSistemas = true;
		}
	}

	#endregion

	#region Etiquetas

	private List<FiltroItem> etiquetas = new List<FiltroItem>();

	private void CargarEtiquetas()
	{
		List<Herramientas.IdiomaCadena> cadenas = new List<Herramientas.IdiomaCadena>();

		cadenas = Herramientas.Idiomas.CogerTodasCadenas(idioma, "Tags");

		if (cadenas != null)
		{
			if (cadenas.Count > 0)
			{
				foreach (var cadena in cadenas)
				{
					FiltroItem nuevaEtiqueta = new FiltroItem();
					nuevaEtiqueta.Id = cadena.Id;
					nuevaEtiqueta.Contenido = cadena.Valor;

					etiquetas.Add(nuevaEtiqueta);
				}
			}
		}
	}

	private bool enseñarEtiquetas = false;

	private void AbrirEtiquetas(MouseEventArgs e)
	{
		if (enseñarEtiquetas == true)
		{
			enseñarEtiquetas = false;
		}
		else
		{
			enseñarEtiquetas = true;
		}
	}

	#endregion

	#region Categorias

	private List<FiltroItem> categorias = new List<FiltroItem>();

	private void CargarCategorias()
	{
		List<Herramientas.IdiomaCadena> cadenas = new List<Herramientas.IdiomaCadena>();

		cadenas = Herramientas.Idiomas.CogerTodasCadenas(idioma, "Categories");

		if (cadenas != null)
		{
			if (cadenas.Count > 0)
			{
				foreach (var cadena in cadenas)
				{
					FiltroItem nuevaCategoria = new FiltroItem();
					nuevaCategoria.Id = cadena.Id;
					nuevaCategoria.Contenido = cadena.Valor;

					categorias.Add(nuevaCategoria);
				}
			}
		}
	}

	private bool enseñarCategorias = false;

	private void AbrirCategorias(MouseEventArgs e)
	{
		if (enseñarCategorias == true)
		{
			enseñarCategorias = false;
		}
		else
		{
			enseñarCategorias = true;
		}
	}

	#endregion

	#region Generos

	private List<FiltroItem> generos = new List<FiltroItem>();

	private void CargarGeneros()
	{
		List<Herramientas.IdiomaCadena> cadenas = new List<Herramientas.IdiomaCadena>();

		cadenas = Herramientas.Idiomas.CogerTodasCadenas(idioma, "Genres");

		if (cadenas != null)
		{
			if (cadenas.Count > 0)
			{
				foreach (var cadena in cadenas)
				{
					FiltroItem nuevoGenero = new FiltroItem();
					nuevoGenero.Id = cadena.Id;
					nuevoGenero.Contenido = cadena.Valor;

					generos.Add(nuevoGenero);
				}
			}
		}
	}

	private bool enseñarGeneros = false;

	private void AbrirGeneros(MouseEventArgs e)
	{
		if (enseñarGeneros == true)
		{
			enseñarGeneros = false;
		}
		else
		{
			enseñarGeneros = true;
		}
	}

	#endregion
}
