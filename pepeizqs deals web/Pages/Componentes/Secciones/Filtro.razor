@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop

@inject IJSRuntime JavaScript
@inject NavigationManager NavManager

<script>
	window.ChangeUrl = function (url) {
		history.pushState(null, '', url);
	}
</script>

@if (cargado == false)
{
	<div style="text-align: center; width: 100%;">
		<div class="cargando" />
	</div>	
}
else
{
	<h1 style="font-size: 23px;">
		@Herramientas.Idiomas.CogerCadena(idioma, "Title", "Filter")
	</h1>

	<hr>

	<div style="display: flex; align-items: start; gap: 20px;">
		<div style="width: 30%; display: flex; flex-direction: column; gap: 20px;">
			@if (categorias.Count > 0)
			{
				<div>
					<button @onclick="(e => AbrirCategorias(e))" style="background-color: transparent; color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; background-color: var(--fondoBotonPequeño);">
						<div>
							@Herramientas.Idiomas.CogerCadena(idioma, "String2", "Filter")
						</div>
					</button>

					@if (enseñarCategorias == true)
					{
						<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 20px; display: flex; flex-direction: column; gap: 10px;">
							@foreach (var categoria in categorias)
							{
								string fondo = string.Empty;

								foreach (var id2 in idsLista)
								{
									if ("c" + categoria.Id == id2)
									{
										fondo = "background-color: var(--fondoBotonPequeño);";
										break;
									}
								}

								<button @onclick="(e => CambiarCategoria(e, categoria.Id))" style="background-color: transparent; color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondo">
									<div>
										@{
											string imagen = "/imagenes/categorias/" + @categoria.Id + ".webp";
										}

										<img src="@imagen" />

										@categoria.Contenido
									</div>
								</button>
							}
						</div>
					}
				</div>
			}

			@if (generos.Count > 0)
			{
				<div>
					<button @onclick="(e => AbrirGeneros(e))" style="background-color: transparent; color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; background-color: var(--fondoBotonPequeño);">
						<div>
							@Herramientas.Idiomas.CogerCadena(idioma, "String1", "Filter")
						</div>
					</button>

					@if (enseñarGeneros == true)
					{
						<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 20px; display: flex; flex-direction: column; gap: 10px;">
							@foreach (var genero in generos)
							{
								string fondo = string.Empty;

								foreach (var id2 in idsLista)
								{
									if ("g" + genero.Id == id2)
									{
										fondo = "background-color: var(--fondoBotonPequeño);";
										break;
									}
								}

								<button @onclick="(e => CambiarGenero(e, genero.Id))" style="background-color: transparent; color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondo">
									<div>
										@genero.Contenido
									</div>
								</button>
							}
						</div>
					}
				</div>
			}
		</div>

		<div style="width: 100%;">
			<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 10px; display: flex; flex-direction: column;">
				<Virtualize Context="juego" Items="resultadosGestor" ItemSize="334" OverscanCount="6">
					<ItemContent>
						<div style="padding: 10px;">
							<a href="/game/@juego.Id.ToString()/@Herramientas.EnlaceAdaptador.Nombre(juego.Nombre)/" class="boton-pequeño" style="padding: 2px;">
								<div style="display: flex; align-items: center;">
									<div>
										<img src="@juego.Imagenes.Header_460x215" style="width: 230px; height: 107px;" />
									</div>

									<div style="padding: 0px 20px;">
										<div>
											@juego.Nombre
										</div>

										<div style="margin-top: 10px; font-size: 15px;">
											@Herramientas.Buscador.GenerarMensaje(idioma, juego, true, true, true)
										</div>
									</div>
								</div>
							</a>
						</div>
					</ItemContent>
				</Virtualize>
			</div>
		</div>
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string ids { get; set; }

	private bool cargado = false;

	private List<string> idsLista = new List<string>();

	private List<Juegos.Juego> resultadosGestor = new List<Juegos.Juego>();

	#nullable enable
	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }
	#nullable disable

	protected override async Task OnInitializedAsync()
	{
		if (HttpContext == null)
		{
			cargado = false;

			await Task.Delay(1);

			CargarCategorias();
			CargarGeneros();

			idsLista = Herramientas.Listados.Generar(ids);

			foreach (var id in idsLista)
			{
				if (id.Contains("g") == true)
				{
					enseñarGeneros = true;
				}
			}

			resultadosGestor = BaseDatos.Juegos.Buscar.Filtro(idsLista, 250);

			cargado = true;
		}
	}

	private class CategoriaGenero
	{
		public string Id { get; set; }
		public string Contenido { get; set; }
	}

	#region Categorias

	private List<CategoriaGenero> categorias = new List<CategoriaGenero>();

	private void CargarCategorias()
	{
		int i = 0;

		while (i < 100)
		{
			string comprobacion = Herramientas.Idiomas.CogerCadena(idioma, i.ToString(), "Categories");

			if (string.IsNullOrEmpty(comprobacion) == false)
			{
				CategoriaGenero nuevoGenero = new CategoriaGenero();
				nuevoGenero.Id = i.ToString();
				nuevoGenero.Contenido = comprobacion;

				categorias.Add(nuevoGenero);
			}

			i += 1;
		}
	}

	private bool enseñarCategorias = false;

	private void AbrirCategorias(MouseEventArgs e)
	{
		if (enseñarCategorias == true)
		{
			enseñarCategorias = false;
		}
		else
		{
			enseñarCategorias = true;
		}
	}

	private async void CambiarCategoria(MouseEventArgs e, string nuevaCategoria)
	{
		
	}

	#endregion

	#region Generos

	private List<CategoriaGenero> generos = new List<CategoriaGenero>();

	private void CargarGeneros()
	{
		int i = 0;

		while (i < 100)
		{
			string comprobacion = Herramientas.Idiomas.CogerCadena(idioma, i.ToString(), "Genres");

			if (string.IsNullOrEmpty(comprobacion) == false)
			{
				CategoriaGenero nuevoGenero = new CategoriaGenero();
				nuevoGenero.Id = i.ToString();
				nuevoGenero.Contenido = comprobacion;

				generos.Add(nuevoGenero);
			}

			i += 1;
		}
	}

	private bool enseñarGeneros = false;

	private void AbrirGeneros(MouseEventArgs e)
	{
		if (enseñarGeneros == true)
		{
			enseñarGeneros = false;
		}
		else
		{
			enseñarGeneros = true;
		}
	}

	private async void CambiarGenero(MouseEventArgs e, string nuevoGenero)
	{
		nuevoGenero = "g" + nuevoGenero;

		bool encontrado = false;

		int i = 0;
		foreach (var id in idsLista)
		{
			if (id == nuevoGenero)
			{
				encontrado = true;
				break;
			}

			i += 1;
		}

		if (encontrado == false)
		{
			idsLista.Add(nuevoGenero);
		}
		else
		{
			idsLista.RemoveAt(i);
		}

		ids = null;

		foreach (var id in idsLista)
		{
			ids = ids + "," + id;
		}

		if (string.IsNullOrEmpty(ids) == false)
		{
			ids = ids.Remove(0, 1);
		}
		
		resultadosGestor = BaseDatos.Juegos.Buscar.Filtro(idsLista, 250);
		await JavaScript.InvokeVoidAsync("ChangeUrl", "/filter/" + ids + "/");
	}

	#endregion
}
