@using APIs.Steam
@using BaseDatos.Juegos;
@using Juegos
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient
@using Microsoft.JSInterop
@using Newtonsoft.Json
@using Tiendas2
@using pepeizqs_deals_web.Areas.Identity.Data

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JavaScript

<div style="max-width: 1000px; margin: auto;">
	<div style="background-color: var(--fondoCuerpo);">
		<div style="display: flex; align-items: center; width: 100%;">
			<div style="width: 100%; font-size: 23px; text-align: left;">
				@Herramientas.Idiomas.CogerCadena(idioma, "String1", "HistoricalLows")
			</div>

			<div style="display: flex; align-items: center; width: 30%; justify-content: right;">
				<div style="font-size: 14px; text-align: right;">
					@juegosMostrar.Count.ToString() @Herramientas.Idiomas.CogerCadena(idioma, "String16", "HistoricalLows")
				</div>
			</div>
		</div>

		<div style="display: flex; align-items: center; width: 100%; margin: 15px 0px;">
			<input type="text" @onchange="(e => TextoCambiaBusqueda(e))" class="entrada-texto" style="flex: 1; margin-right: 30px; min-width: 150px;" placeholder="@Herramientas.Idiomas.CogerCadena(idioma, "String9", "HistoricalLows")" />

			<button class="boton-pequeño" @onclick="EnseñarFiltrado" style="width: auto; padding: 10px 15px; margin-right: 30px; border: 0px; color: var(--colorTextoVisitado);">
				@Herramientas.Idiomas.CogerCadena(idioma, "String10", "HistoricalLows")
			</button>

			<div class="menu-dropdown" style="width: auto;">
				<button class="boton-pequeño" style="display: flex; align-items: center; width: 100%; padding: 10px 15px; margin: 0; border: 0px; color: var(--colorTextoVisitado);">
					<div style="padding-right: 5px;">
						@Herramientas.Idiomas.CogerCadena(idioma, "String2", "HistoricalLows"):
					</div>

					<div style="color: var(--colorEnlace); padding-right: 15px;">
						@ordenamientoElegido
					</div>

					<div>
						<i class="fa-solid fa-caret-down"></i>
					</div>
				</button>

				<div class="menu-dropdown-contenido" style="right: 0; width: 100%; background-color: var(--fondoBotonPequeño);">
					<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarReseñasPorcentaje">
						@Herramientas.Idiomas.CogerCadena(idioma, "String3", "HistoricalLows")
					</button>
					<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarReseñasCantidad">
						@Herramientas.Idiomas.CogerCadena(idioma, "String4", "HistoricalLows")
					</button>
					<hr />
					<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarNombreAZ">
						@Herramientas.Idiomas.CogerCadena(idioma, "String5", "HistoricalLows")
					</button>
					<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarNombreZA">
						@Herramientas.Idiomas.CogerCadena(idioma, "String6", "HistoricalLows")
					</button>
					<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarPrecio">
						@Herramientas.Idiomas.CogerCadena(idioma, "String7", "HistoricalLows")
					</button>
					<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarDescuento">
						@Herramientas.Idiomas.CogerCadena(idioma, "String8", "HistoricalLows")
					</button>
				</div>
			</div>
		</div>
	</div>

	<hr />

	@if (juegosMostrar.Count > 0)
	{
		<div>
			<Virtualize Context="juego" Items="juegosMostrar" ItemSize="107" OverscanCount="6">
				<ItemContent>
					<div style="margin-top: 25px; margin-bottom: 25px;">
						@{
							bool usuarioTieneJuego = Herramientas.Tooltip.ComprobarUsuarioTieneJuego(usuario, usuarioJuegosSteam, juego, juego.PrecioMinimosHistoricos[0].DRM);
							bool usuarioTieneDeseado = false;

							string fondoColor = string.Empty;

							if (usuarioTieneJuego == true)
							{
								fondoColor = "background-color: var(--fondoBien);";
							}
							else
							{
								usuarioTieneDeseado = Herramientas.Deseados.ComprobarSiEsta(usuario, juego, juego.PrecioMinimosHistoricos[0].DRM, true);

								if (usuarioTieneDeseado == true)
								{
									fondoColor = "background-color: var(--fondoAlerta);";
								}
							}

							bool usuarioConectado = false;

							if (usuario != null)
							{
								usuarioConectado = true;
							}

							Herramientas.ToolTipDatos tooltipDatos = Herramientas.Tooltip.Generar(idioma, juego, juego.PrecioMinimosHistoricos[0].DRM, usuarioConectado, usuarioTieneJuego, usuarioTieneDeseado);

							<div class="tooltip-juego" onmousemove="hoverTooltip(event, 'tooltip-@juego.IdMaestra.ToString()-@juego.PrecioMinimosHistoricos[0].DRM.ToString()')">
								<div id="tooltip-@juego.IdMaestra.ToString()-@juego.PrecioMinimosHistoricos[0].DRM.ToString()" class="tooltip-relleno">
									@if (string.IsNullOrEmpty(tooltipDatos.Video) == false)
									{
										<video src="@tooltipDatos.Video" autoplay="autoplay" loop muted style="width: 460px; height: 215px; object-fit: cover;" />
									}

									<div style="padding: 15px; text-align: center;">
										<div style="text-align: center;">
											@tooltipDatos.Nombre
										</div>

										@if (string.IsNullOrEmpty(tooltipDatos.ReviewsIcono) == false && string.IsNullOrEmpty(tooltipDatos.ReviewsCantidad) == false)
										{
											<div style="display: flex; align-items: center; margin-top: 5px; margin-bottom: 5px; padding: 5px; text-align: center; justify-content: center;">
												<img src="@tooltipDatos.ReviewsIcono" style="width: 20px; height: 20px; margin-right: 15px;" />
												<label style="font-size: 14px;">@tooltipDatos.ReviewsCantidad</label>
											</div>
										}

										@if (string.IsNullOrEmpty(tooltipDatos.UsuarioMensaje) == false)
										{
											<div style="text-align: center;">
												@tooltipDatos.UsuarioMensaje
											</div>
										}
									</div>
								</div>

								<a class="boton-pequeño" style="padding: 0px; @fondoColor" href="@CargarEnlace(juego)" target="_blank">
									<div class="perfil-flexible-centrado">
										<div style="max-width: 230px;">
											<img src="@juego.Imagenes.Header_460x215" style="width: 100%; height: 100%;" />
										</div>

										<div style="padding: 5px 20px; text-align: left; width: 100%;">
											<div>@juego.Nombre</div>

											<div class="perfil-flexible-centrado" style="justify-content: left; margin-top: 10px;">
												<div style="width: 20px; height: 20px;">
													<img src="@JuegoDRM2.SacarImagen(juego.PrecioMinimosHistoricos[0].DRM)" style="width: 100%; height: 100%;" />
												</div>

												<div style="width: 20px; height: 20px; margin-left: 10px;">
													<img src="@CargarImagenTienda(juego)" style="width: 100%; height: 100%;" />
												</div>

												@if (juego.Analisis != null)
												{
													if (string.IsNullOrEmpty(juego.Analisis.Porcentaje) == false)
													{
														if (int.Parse(juego.Analisis.Porcentaje) > 74)
														{
															<div style="width: 20px; height: 20px; margin-left: 10px;">
																<img src="/imagenes/analisis/positive.webp" style="width: 100%; height: 100%;" />
															</div>
														}

														if (int.Parse(juego.Analisis.Porcentaje) > 49 && int.Parse(juego.Analisis.Porcentaje) < 75)
														{
															<div style="width: 20px; height: 20px; margin-left: 10px;">
																<img src="/imagenes/analisis/mixed.webp" style="width: 100%; height: 100%;" />
															</div>
														}

														if (int.Parse(juego.Analisis.Porcentaje) < 50)
														{
															<div style="width: 20px; height: 20px; margin-left: 10px;">
																<img src="/imagenes/analisis/negative.webp" style="width: 100%; height: 100%;" />
															</div>
														}
													}
												}
											</div>
										</div>

										<div style="display: flex; align-items: center;">
											<div style="text-align: center; padding: 10px 15px; margin: 0px; min-width: 65px;" class="juego-descuento">
												@CargarDescuento(juego)
											</div>

											<div style="padding: 5px 15px; min-width: 110px; text-align: center; font-size: 18px;">
												@CargarPrecio(juego)
											</div>
										</div>
									</div>
								</a>
							</div>
						}
					</div>
				</ItemContent>
			</Virtualize>
		</div>
	}
</div>	

@if (mostrarFiltrado == true)
{
	<div class="opciones-panel">
		<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); max-width: 800px; padding: 30px; margin: 20px auto;">
			<div style="display: flex; align-items: center;">
				<button class="boton-pequeño" @onclick="OcultarFiltrado" style="width: auto; padding: 5px 15px; margin-right: 20px; border: 0px; color: var(--colorTextoVisitado); font-size: 22px;">
					<i class="fa-solid fa-caret-left"></i>
				</button>

				<div style="font-size: 20px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "String10", "HistoricalLows")
				</div>
			</div>

			<hr style="margin-top: 30px;">

			@if (usuario != null)
			{
				<div style="display: flex; align-items: center; margin-top: 30px;">
					<div class="checkbox-caja">
						<input type="checkbox" class="checkbox-interior" checked="@estadoOcultarJuegosUsuario" @onchange="OcultarJuegosUsuario">
					</div>

					<div style="margin-left: 20px; padding-bottom: 5px;">
						@Herramientas.Idiomas.CogerCadena(idioma, "String11", "HistoricalLows")
					</div>
				</div>

				<hr style="margin-top: 30px;">
			}

			<div style="margin-top: 30px;">
				<div style="padding-bottom: 15px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "String12", "HistoricalLows")
				</div>
		
				<div style="display: flex; align-items: center;">
					<input type="range" min="1" max="91" value="@minimoDescuento" step="5" @onchange="@(e => CambiarMinimoDescuento(e))" class="deslizador">

					<label style="padding-left: 30px; min-width: 65px; text-align: center;">@minimoDescuento%</label>
				</div>
			</div>

			<div style="margin-top: 30px;">
				<div style="padding-bottom: 15px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "String13", "HistoricalLows")
				</div>

				<div style="display: flex; align-items: center;">
					<input type="range" min="5" max="90" value="@maximoPrecio" step="1" @onchange="@(e => CambiarMaximoPrecio(e))" class="deslizador">

					<label style="padding-left: 30px; min-width: 65px; text-align: center;">@maximoPrecio€</label>
				</div>
			</div>

			<hr style="margin-top: 30px;">

			<div style="margin-top: 30px;">
				<div style="padding-bottom: 15px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "String14", "HistoricalLows")
				</div>

				<div style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 20px;">
					@foreach (var drm in drms)
					{
						string iconoDRM = string.Empty;
						string nombreDRM = string.Empty;

						foreach (var drm2 in JuegoDRM2.GenerarListado())
						{
							if (drm2.Id == drm.DRMId)
							{
								iconoDRM = drm2.Imagen;
								nombreDRM = drm2.Nombre;
							}
						}

						<div style="display: flex; align-items: center;" title="@nombreDRM">
							<div class="checkbox-caja">
								<input type="checkbox" class="checkbox-interior" checked="@drm.Checkbox" @onchange="@(e => EnseñarJuegosDRM(e, drm.DRMId))">
							</div>

							@if (drm.DRMId != JuegoDRM.DRMFree)
							{
								<div style="margin-left: 20px; padding-bottom: 10px;">
									<img src="@iconoDRM" style="max-width: 24px; max-height: 24px;" title="@nombreDRM" />
								</div>
							}
							else
							{
								<div style="margin-left: 20px; padding-bottom: 5px;">
									<label style="font-size: 10px; max-width: 24px; text-align: center;">@nombreDRM</label>
								</div>
							}
						</div>
					}
				</div>
			</div>

			<hr style="margin-top: 30px;">

			<div style="margin-top: 30px;">
				<div style="padding-bottom: 15px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "String15", "HistoricalLows")
				</div>

				<div style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 20px;">
					@foreach (var tienda in tiendas)
					{
						string iconoTienda = string.Empty;
						string nombreTienda = string.Empty;

						foreach (var tienda2 in Tiendas2.TiendasCargar.GenerarListado())
						{
							if (tienda2.Id == tienda.TiendaId)
							{
								iconoTienda = tienda2.ImagenIcono;
								nombreTienda = tienda2.Nombre;
							}
						}

						<div style="display: flex; align-items: center;" title="@nombreTienda">
							<div class="checkbox-caja">
								<input type="checkbox" class="checkbox-interior" checked="@tienda.Checkbox" @onchange="@(e => EnseñarJuegosTienda(e, tienda.TiendaId))">
							</div>

							<div style="margin-left: 20px; padding-bottom: 10px;">
								<img src="@iconoTienda" style="width: 24px; height: 24px;" title="@nombreTienda" />
							</div>
						</div>
					}
				</div>
			</div>

			<hr style="margin-top: 30px;">

			<div style="margin-top: 30px;">
				<div style="padding-bottom: 15px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "String17", "HistoricalLows")
				</div>

				<div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 20px;">
					@foreach (var categoria in categorias)
					{
						string nombreCategoria = string.Empty;

						if (categoria.Categoria == JuegoTipo.Game)
						{
							nombreCategoria = Herramientas.Idiomas.CogerCadena(idioma, "String18", "HistoricalLows");
						}
						else if (categoria.Categoria == JuegoTipo.DLC)
						{
							nombreCategoria = Herramientas.Idiomas.CogerCadena(idioma, "String19", "HistoricalLows");
						}
						else if (categoria.Categoria == JuegoTipo.Music)
						{
							nombreCategoria = Herramientas.Idiomas.CogerCadena(idioma, "String20", "HistoricalLows");
						}
						else if (categoria.Categoria == JuegoTipo.Software)
						{
							nombreCategoria = Herramientas.Idiomas.CogerCadena(idioma, "String21", "HistoricalLows");
						}

						<div style="display: flex; align-items: center;" title="@nombreCategoria">
							<div class="checkbox-caja">
								<input type="checkbox" class="checkbox-interior" checked="@categoria.Checkbox" @onchange="@(e => EnseñarJuegosCategoria(e, categoria.Categoria))">
							</div>

							<div style="margin-left: 15px; padding-bottom: 8px;">
								<label style="font-size: 14px;">@nombreCategoria</label>
							</div>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	private List<Juegos.Juego> juegosGestor = new List<Juegos.Juego>();
	private List<Juegos.Juego> juegosMostrar = new List<Juegos.Juego>();

	private string ordenamientoElegido = string.Empty;

	private string textoBuscador { get; set; }

	private Usuario usuario = new Usuario();
	private List<string> usuarioJuegosSteam = new List<string>();

	#nullable enable
	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }
	#nullable disable

	protected override async Task OnInitializedAsync()
	{
		if (HttpContext == null)
		{
			usuario = await Herramientas.UsuarioDatos.Actualizar(HttpContextAccessor.HttpContext.User, usuario, UserManager, idioma);

			if (usuario != null)
			{
				if (string.IsNullOrEmpty(usuario.SteamGames) == false)
				{
					usuarioJuegosSteam = Herramientas.Listados.Generar(usuario.SteamGames);
				}

				#region Filtrado

				if (usuario.HistoricalLowsOption1 == true)
				{
					estadoOcultarJuegosUsuario = "checked";
				}
				else
				{
					estadoOcultarJuegosUsuario = null;
				}

				if (usuario.HistoricalLowsOption2 == null)
				{
					minimoDescuento = 1;
				}
				else
				{
					if (usuario.HistoricalLowsOption2 == 0 || usuario.HistoricalLowsOption2 == null)
					{
						minimoDescuento = 1;
					}
					else if (usuario.HistoricalLowsOption2 > 0)
					{
						minimoDescuento = usuario.HistoricalLowsOption2;
					}
				}

				if (usuario.HistoricalLowsOption3 == null)
				{
					maximoPrecio = 90;
				}
				else
				{
					if (usuario.HistoricalLowsOption3 == 0 || usuario.HistoricalLowsOption3 == null)
					{
						maximoPrecio = 90;
					}
					else if (usuario.HistoricalLowsOption3 > 0)
					{
						maximoPrecio = usuario.HistoricalLowsOption3;
					}
				}

				if (string.IsNullOrEmpty(usuario.HistoricalLowsDRMs) == false)
				{
					drms = JsonConvert.DeserializeObject<List<MostrarJuegoDRM>>(usuario.HistoricalLowsDRMs);
				}

				if (string.IsNullOrEmpty(usuario.HistoricalLowsStores) == false)
				{
					tiendas = JsonConvert.DeserializeObject<List<MostrarJuegoTienda>>(usuario.HistoricalLowsStores);
				}

				if (string.IsNullOrEmpty(usuario.HistoricalLowsCategories) == false)
				{
					categorias = JsonConvert.DeserializeObject<List<MostrarJuegoCategoria>>(usuario.HistoricalLowsCategories);
				}

				#endregion
			}

			//--------------------------------------------------------------------

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				juegosGestor = BaseDatos.Juegos.Buscar.Todos(conexion, "seccionMinimos");
			}

			if (juegosGestor.Count > 0)
			{
				if (usuario == null)
				{
					OrdenarReseñasCantidad();
				}
				else
				{
					if (usuario.HistoricalLowsSort == null)
					{
						usuario.HistoricalLowsSort = 1;
					}

					if (usuario.HistoricalLowsSort == 0)
					{
						OrdenarReseñasPorcentaje();
					}
					else if (usuario.HistoricalLowsSort == 1)
					{
						OrdenarReseñasCantidad();
					}
					else if (usuario.HistoricalLowsSort == 2)
					{
						OrdenarNombreAZ();
					}
					else if (usuario.HistoricalLowsSort == 3)
					{
						OrdenarNombreZA();
					}
					else if (usuario.HistoricalLowsSort == 4)
					{
						OrdenarPrecio();
					}
					else if (usuario.HistoricalLowsSort == 5)
					{
						OrdenarDescuento();
					}
				}
			}
		}
	}

	private string CargarImagenDRM(global::Juegos.Juego juego)
	{
		JuegoPrecio oferta = juego.PrecioMinimosHistoricos[0];

		if (oferta != null)
		{
			return JuegoDRM2.SacarImagen(oferta.DRM.ToString());
		}

		return null;
	}

	private string CargarImagenTienda(global::Juegos.Juego juego)
	{
		JuegoPrecio oferta = juego.PrecioMinimosHistoricos[0];

		if (oferta != null)
		{
			List<Tiendas2.Tienda> tiendas = Tiendas2.TiendasCargar.GenerarListado();

			foreach (var tienda in tiendas)
			{
				if (tienda.Id == oferta.Tienda)
				{
					return tienda.ImagenIcono;
				}
			}
		}

		return null;	
	}

	private string CargarDescuento(global::Juegos.Juego juego)
	{
		JuegoPrecio oferta = juego.PrecioMinimosHistoricos[0];

		if (oferta != null)
		{
			return oferta.Descuento.ToString() + "%";
		}
		else
		{
			return null;
		}
	}

	private static string CargarPrecio(global::Juegos.Juego juego)
	{
		JuegoPrecio oferta = juego.PrecioMinimosHistoricos[0];

		if (oferta != null)
		{
			string precioMensaje = oferta.Precio.ToString();
			precioMensaje = precioMensaje.Replace(".", ",");

			int int1 = precioMensaje.IndexOf(",");

			if (int1 == precioMensaje.Length - 2)
			{
				precioMensaje = precioMensaje + "0";
			}

			if (precioMensaje.Length > int1 + 3)
			{
				precioMensaje = precioMensaje.Remove(int1 + 3, precioMensaje.Length - int1 - 3);
			}

			precioMensaje = precioMensaje + "€";

			return precioMensaje;
		}
		else
		{
			return null;
		}
	}

	private string CargarEnlace(global::Juegos.Juego juego)
	{
		JuegoPrecio oferta = juego.PrecioMinimosHistoricos[0];

		if (oferta != null)
		{
			return Herramientas.EnlaceAcortador.Generar(oferta.Enlace, oferta.Tienda);
		}
		else
		{
			return null;
		}
	}

	#region Ordenar

	private async void OrdenarReseñasPorcentaje()
	{
		if (juegosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "String3", "HistoricalLows");

			if (juegosGestor.Count > 0)
			{
				juegosMostrar.Clear();
				juegosMostrar = Filtros();
				juegosMostrar = juegosMostrar.AsParallel().OrderByDescending(x => int.Parse(x.Analisis.Porcentaje.Replace("%", null))).ThenBy(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.HistoricalLowsSort = 0;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	private async void OrdenarReseñasCantidad()
	{
		if (juegosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "String4", "HistoricalLows");

			if (juegosGestor.Count > 0)
			{
				juegosMostrar.Clear();
				juegosMostrar = Filtros();
				juegosMostrar = juegosMostrar.AsParallel().OrderByDescending(x => int.Parse(x.Analisis.Cantidad.Replace(",", null))).ThenBy(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.HistoricalLowsSort = 1;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	private async void OrdenarNombreAZ()
	{
		if (juegosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "String5", "HistoricalLows");

			if (juegosGestor.Count > 0)
			{
				juegosMostrar.Clear();
				juegosMostrar = Filtros();
				juegosMostrar = juegosMostrar.AsParallel().OrderBy(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.HistoricalLowsSort = 2;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	private async void OrdenarNombreZA()
	{
		if (juegosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "String6", "HistoricalLows");

			if (juegosGestor.Count > 0)
			{
				juegosMostrar.Clear();
				juegosMostrar = Filtros();
				juegosMostrar = juegosMostrar.AsParallel().OrderByDescending(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.HistoricalLowsSort = 3;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	private async void OrdenarPrecio()
	{
		if (juegosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "String7", "HistoricalLows");

			if (juegosGestor.Count > 0)
			{
				juegosMostrar.Clear();
				juegosMostrar = Filtros();
				juegosMostrar = juegosMostrar.AsParallel().OrderBy(x => x.PrecioMinimosHistoricos[0].Precio).ThenBy(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.HistoricalLowsSort = 4;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	private async void OrdenarDescuento()
	{
		if (juegosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "String8", "HistoricalLows");

			if (juegosGestor.Count > 0)
			{
				juegosMostrar.Clear();
				juegosMostrar = Filtros();
				juegosMostrar = juegosMostrar.AsParallel().OrderByDescending(x => x.PrecioMinimosHistoricos[0].Descuento).ThenBy(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.HistoricalLowsSort = 5;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	#endregion

	#region Filtrado

	private List<Juegos.Juego> Filtros()
	{
		List<Juegos.Juego> juegosFiltrados = new List<Juegos.Juego>();

		foreach (var juego in juegosGestor)
		{
			bool buscador = false;

			if (string.IsNullOrEmpty(textoBuscador) == false)
			{
				if (Herramientas.Buscador.LimpiarNombre(juego.Nombre, true).Contains(Herramientas.Buscador.LimpiarNombre(textoBuscador, true)))
				{
					buscador = true;
				}
				else
				{
					buscador = false;
				}
			}
			else
			{
				buscador = true;
			}

			bool ocultar = false;

			if (string.IsNullOrEmpty(estadoOcultarJuegosUsuario) == false)
			{
				if (estadoOcultarJuegosUsuario == "checked" && juego.PrecioMinimosHistoricos[0].DRM == JuegoDRM.Steam)
				{
					if (usuarioJuegosSteam != null)
					{
						if (usuarioJuegosSteam.Count > 0)
						{
							foreach (var juegoUsuario in usuarioJuegosSteam)
							{
								if (juego.IdSteam.ToString() == juegoUsuario)
								{
									ocultar = true;
									break;
								}
							}
						}
					}					
				}
			}

			bool minimoDescuento2 = false;

			if (juego.PrecioMinimosHistoricos != null)
			{
				if (juego.PrecioMinimosHistoricos[0].Descuento >= minimoDescuento)
				{
					minimoDescuento2 = true;
				}
			}

			bool maximoPrecio2 = false;

			if (juego.PrecioMinimosHistoricos[0].Precio <= maximoPrecio)
			{
				maximoPrecio2 = true;
			}

			bool drm2 = false;

			foreach (var drm in drms)
			{
				if (juego.PrecioMinimosHistoricos[0].DRM == drm.DRMId && drm.Estado == true)
				{
					drm2 = true;
				}
			}

			bool tienda2 = false;

			foreach (var tienda in tiendas)
			{
				if (juego.PrecioMinimosHistoricos[0].Tienda == tienda.TiendaId && tienda.Estado == true)
				{
					tienda2 = true;
					break;
				}
			}

			bool categoria2 = false;

			foreach (var categoria in categorias)
			{
				if (juego.Tipo == categoria.Categoria && categoria.Estado == true)
				{
					categoria2 = true;
				}
			}

			if (buscador == true && ocultar == false && minimoDescuento2 == true && maximoPrecio2 == true && 
				drm2 == true && tienda2 == true && categoria2 == true)
			{
				juegosFiltrados.Add(juego);
			}
		}

		return juegosFiltrados;
	}

	private void ElegirOrdenamiento()
	{
		if (ordenamientoElegido == Herramientas.Idiomas.CogerCadena(idioma, "String3", "HistoricalLows"))
		{
			OrdenarReseñasPorcentaje();
		}

		if (ordenamientoElegido == Herramientas.Idiomas.CogerCadena(idioma, "String4", "HistoricalLows"))
		{
			OrdenarReseñasCantidad();
		}

		if (ordenamientoElegido == Herramientas.Idiomas.CogerCadena(idioma, "String5", "HistoricalLows"))
		{
			OrdenarNombreAZ();
		}

		if (ordenamientoElegido == Herramientas.Idiomas.CogerCadena(idioma, "String6", "HistoricalLows"))
		{
			OrdenarNombreZA();
		}

		if (ordenamientoElegido == Herramientas.Idiomas.CogerCadena(idioma, "String7", "HistoricalLows"))
		{
			OrdenarPrecio();
		}

		if (ordenamientoElegido == Herramientas.Idiomas.CogerCadena(idioma, "String8", "HistoricalLows"))
		{
			OrdenarDescuento();
		}
	}

	private void TextoCambiaBusqueda(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			textoBuscador = texto.Value.ToString().Trim();
		}
		else
		{
			textoBuscador = null;
		}

		ElegirOrdenamiento();
	}

	private bool mostrarFiltrado = false;

	private void EnseñarFiltrado()
	{
		mostrarFiltrado = true;
	}

	private void OcultarFiltrado()
	{
		mostrarFiltrado = false;
	}

	private string estadoOcultarJuegosUsuario = null;

	private async void OcultarJuegosUsuario()
	{
		if (usuario != null)
		{
			if (usuario.HistoricalLowsOption1 == true)
			{
				usuario.HistoricalLowsOption1 = false;
				estadoOcultarJuegosUsuario = null;
			}
			else
			{
				usuario.HistoricalLowsOption1 = true;
				estadoOcultarJuegosUsuario = "checked";
			}

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }

			ElegirOrdenamiento();
		}
	}

	private int? minimoDescuento = 1;

	private async void CambiarMinimoDescuento(ChangeEventArgs e)
	{
		minimoDescuento = int.Parse(e.Value.ToString());

		if (minimoDescuento != 1)
		{
			minimoDescuento = minimoDescuento - 1;
		}

		if (usuario != null)
		{
			usuario.HistoricalLowsOption2 = minimoDescuento;

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }
		}

		ElegirOrdenamiento();
	}

	private decimal? maximoPrecio = 90;

	private async void CambiarMaximoPrecio(ChangeEventArgs e)
	{
		maximoPrecio = decimal.Parse(e.Value.ToString());

		if (usuario != null)
		{
			usuario.HistoricalLowsOption3 = maximoPrecio;

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }
		}

		ElegirOrdenamiento();
	}

	private async void EnseñarJuegosDRM(ChangeEventArgs e, JuegoDRM drmElegido)
	{
		foreach (var drm in drms)
		{
			if (drm.DRMId == drmElegido)
			{
				if (drm.Checkbox == null)
				{
					drm.Checkbox = "checked";
					drm.Estado = true;
				}
				else
				{
					drm.Checkbox = null;
					drm.Estado = false;
				}
			}
		}

		if (usuario != null)
		{
			usuario.HistoricalLowsDRMs = JsonConvert.SerializeObject(drms);

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }
		}

		ElegirOrdenamiento();
	}

	private List<MostrarJuegoDRM> drms = CrearListaDRMs();

	public class MostrarJuegoDRM
	{
		public bool Estado { get; set; }
		public string Checkbox { get; set; }
		public JuegoDRM DRMId { get; set; }
	}

	private static List<MostrarJuegoDRM> CrearListaDRMs()
	{
		List<MostrarJuegoDRM> nuevaLista = new List<MostrarJuegoDRM>();

		foreach (var drm in JuegoDRM2.GenerarListado())
		{
			MostrarJuegoDRM nuevoDRM = new MostrarJuegoDRM();
			nuevoDRM.Estado = false;
			nuevoDRM.Checkbox = null;
			nuevoDRM.DRMId = drm.Id;

			if (nuevoDRM.DRMId == JuegoDRM.Steam || nuevoDRM.DRMId == JuegoDRM.GOG || nuevoDRM.DRMId == JuegoDRM.Ubisoft || nuevoDRM.DRMId == JuegoDRM.EA)
			{
				nuevoDRM.Estado = true;
				nuevoDRM.Checkbox = "checked";
			}

			nuevaLista.Add(nuevoDRM);
		}

		return nuevaLista;
	}

	private async void EnseñarJuegosTienda(ChangeEventArgs e, string tiendaElegida)
	{
		foreach (var tienda in tiendas)
		{
			if (tienda.TiendaId == tiendaElegida)
			{
				if (tienda.Checkbox == null)
				{
					tienda.Checkbox = "checked";
					tienda.Estado = true;
				}
				else
				{
					tienda.Checkbox = null;
					tienda.Estado = false;
				}
			}
		}

		if (usuario != null)
		{
			usuario.HistoricalLowsStores = JsonConvert.SerializeObject(tiendas);

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }
		}

		ElegirOrdenamiento();
	}

	private List<MostrarJuegoTienda> tiendas = CrearListaTiendas();

	public class MostrarJuegoTienda
	{
		public bool Estado { get; set; }
		public string Checkbox { get; set; }
		public string TiendaId { get; set; }
	}

	private static List<MostrarJuegoTienda> CrearListaTiendas()
	{
		List<MostrarJuegoTienda> nuevaLista = new List<MostrarJuegoTienda>();

		foreach (var tienda in Tiendas2.TiendasCargar.GenerarListado())
		{
			MostrarJuegoTienda nuevaTienda = new MostrarJuegoTienda();
			nuevaTienda.Estado = true;
			nuevaTienda.Checkbox = "checked";
			nuevaTienda.TiendaId = tienda.Id;

			nuevaLista.Add(nuevaTienda);
		}

		return nuevaLista;
	}

	private async void EnseñarJuegosCategoria(ChangeEventArgs e, JuegoTipo categoriaElegida)
	{
		foreach (var categoria in categorias)
		{
			if (categoria.Categoria == categoriaElegida)
			{
				if (categoria.Checkbox == null)
				{
					categoria.Checkbox = "checked";
					categoria.Estado = true;
				}
				else
				{
					categoria.Checkbox = null;
					categoria.Estado = false;
				}
			}
		}

		if (usuario != null)
		{
			usuario.HistoricalLowsCategories = JsonConvert.SerializeObject(categorias);

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }
		}

		ElegirOrdenamiento();
	}

	private List<MostrarJuegoCategoria> categorias = CrearListaCategorias();

	public class MostrarJuegoCategoria
	{
		public bool Estado { get; set; }
		public string Checkbox { get; set; }
		public JuegoTipo Categoria { get; set; }
	}

	private static List<MostrarJuegoCategoria> CrearListaCategorias()
	{
		List<MostrarJuegoCategoria> nuevaLista = new List<MostrarJuegoCategoria>();

		foreach (var categoria in JuegoTipos.CargarListado())
		{
			if (categoria != JuegoTipo.Bundle)
			{
				MostrarJuegoCategoria nuevaTienda = new MostrarJuegoCategoria();
				nuevaTienda.Estado = true;
				nuevaTienda.Checkbox = "checked";
				nuevaTienda.Categoria = categoria;

				nuevaLista.Add(nuevaTienda);
			}
		}

		return nuevaLista;
	}

	#endregion
}