@using BaseDatos.Juegos;
@using Juegos;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.Data.SqlClient;
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

@if (juegosMostrar.Count > 0)
{
	<div style="background-color: var(--fondoCuerpo); position: sticky; position: -webkit-sticky; top: 70px; z-index: 1; margin: -10px; padding: 10px;">
		<div style="display: flex; align-items: center; width: 100%;">
			<div style="width: 70%; font-size: 23px; text-align: left;">
				@Herramientas.Idiomas.CogerCadena(idioma, "HistoricalLow.String1")
			</div>

			<div style="display: flex; align-items: center; width: 30%; justify-content: right;">
				<div class="menu-dropdown" style="margin-right: 30px;">
					<button class="boton-pequeño" style="padding: 9px 12px; margin: 0; border: 0px; color: var(--colorTextoVisitado);"><i class="fa-solid fa-sort" style="margin-right: 10px; font-size: 19px;"></i>@Herramientas.Idiomas.CogerCadena(idioma, "HistoricalLow.String2")</button>
					<div class="menu-dropdown-contenido" style="right: 0;">
						<button class="texto-cabecera menu-dropdown-item" style="text-align: right; width: 100%; border: 0px;" @onclick="OrdenarUltimosAñadidos">@Herramientas.Idiomas.CogerCadena(idioma, "HistoricalLow.String3")</button>
						<button class="texto-cabecera menu-dropdown-item" style="text-align: right; width: 100%; border: 0px;" @onclick="OrdenarReseñas">@Herramientas.Idiomas.CogerCadena(idioma, "HistoricalLow.String4")</button>
						<button class="texto-cabecera menu-dropdown-item" style="text-align: right; width: 100%; border: 0px;" @onclick="OrdenarPrecio">@Herramientas.Idiomas.CogerCadena(idioma, "HistoricalLow.String5")</button>
						<button class="texto-cabecera menu-dropdown-item" style="text-align: right; width: 100%; border: 0px;" @onclick="OrdenarDescuento">@Herramientas.Idiomas.CogerCadena(idioma, "HistoricalLow.String6")</button>
					</div>
				</div>

				<div style="font-size: 16px; text-align: right;">
					@minimo.ToString()/@juegosConMinimos.Count.ToString()
				</div>
				
				@if (minimo >= 50)
				{
					<a @onclick="ClickearAtras" class="boton-pequeño" href="@enlace#top" target="_top" style="width: 50px; font-size: 20px; text-align: center; margin-left: 20px;"><i class="fa-solid fa-chevron-left"></i></a>
				}

				<a @onclick="ClickearAdelante" class="boton-pequeño" href="@enlace#top" target="_top" style="width: 50px; font-size: 20px; text-align: center; margin-left: 20px;"><i class="fa-solid fa-chevron-right"></i></a>
			</div>
		</div>
	</div>

	<hr />

	<div>
		@foreach (var juego in juegosMostrar)
		{
			<div class="perfil-flexible-centrado" style="margin-top: 25px; margin-bottom: 25px;">
				<a class="boton-pequeño" style="padding: 0px;" href="@CargarEnlace(juego)" target="_blank">
					<div class="perfil-flexible-centrado">
						<div style="width: 18%;">
							<img src="@juego.Imagenes.Capsule_231x87" style="min-height: 100%; min-width: 100%; margin: 3px;" />
						</div>

						<div style="width: 56%; padding: 5px 20px;">
							<div>@juego.Nombre</div>

							<div class="perfil-flexible-centrado" style="justify-content: left; margin-top: 10px;">
								<img src="@CargarImagenDRM(juego)" style="width: 20px; height: 20px;" />

								@if (juego.Analisis != null)
								{
									if (string.IsNullOrEmpty(juego.Analisis.Porcentaje) == false)
									{
										if (int.Parse(@juego.Analisis.Porcentaje) > 74)
										{
											<img src="/imagenes/analisis/positive.webp" style="width: 20px; height: 20px; margin-left: 10px;" />
										}

										if (int.Parse(@juego.Analisis.Porcentaje) > 49 && int.Parse(@juego.Analisis.Porcentaje) < 75)
										{
											<img src="/imagenes/analisis/mixed.webp" style="width: 20px; height: 20px; margin-left: 10px;" />
										}

										if (int.Parse(@juego.Analisis.Porcentaje) < 50)
										{
											<img src="/imagenes/analisis/negative.webp" style="width: 20px; height: 20px; margin-left: 10px;" />
										}
									}
								}

								<div style="margin-left: 20px; font-size: 13px;">@CargarDetectado(juego)</div>

								@if (BaseDatos.Usuarios.Buscar.RolDios(UserManager.GetUserName(HttpContextAccessor.HttpContext!.User)) == true)
								{
									<div style="margin-left: 20px; font-size: 13px;">@juego.IdMaestra</div>

									@if (juego.Analisis != null)
									{
										if (string.IsNullOrEmpty(juego.Analisis.Porcentaje) == false)
										{
											<div style="margin-left: 20px; font-size: 13px;">@int.Parse(juego.Analisis.Cantidad.Replace(",", null))</div>
										}
									}									
								}
							</div>						
						</div>

						<div style="width: 10%; padding: 4px 25px 4px 0px; text-align: right;">
							<img src="@CargarImagenTienda(juego)" style="max-width: 100%; max-height: 100%;" />
						</div>

						<div style="width: 6%; text-align: center;" class="juego-descuento">
							@CargarDescuento(juego)
						</div>

						<div style="width: 10%; padding: 4px 15px 4px 15px; text-align: center; font-size: 18px;">
							@CargarPrecio(juego)
						</div>
					</div>
				</a>
			</div>
		}
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string dominio { get; set; }

	[Parameter]
	public string enlace { get; set; }

	[Parameter]
	public string modo { get; set; }

	private List<global::Juegos.Juego> juegosConMinimos = new List<global::Juegos.Juego>();
	private List<global::Juegos.Juego> juegosMostrar = new List<global::Juegos.Juego>();

	private int minimo = 0;
	private int maximo = 0;

	protected override async Task OnInitializedAsync()
	{
		minimo = 0;
		maximo = 50;

		SqlConnection conexion = Herramientas.BaseDatos.Conectar();

		using (conexion)
		{
			juegosConMinimos = BaseDatos.Juegos.Buscar.Todos(conexion, "seccionMinimos");
		}

		if (juegosConMinimos.Count > 0)
		{
			foreach (var juego in juegosConMinimos)
			{
				juego.Imagenes.Capsule_231x87 = await Herramientas.Imagenes.DescargarYGuardar(juego.Imagenes.Capsule_231x87, "juegos", juego.IdMaestra.ToString(), "capsule_231x87", dominio);
			}

			if (modo == "last")
			{
				OrdenarUltimosAñadidos();
			}
			else
			{
				OrdenarReseñas();
			}
		}		

		CargarJuegos(minimo, maximo);
	}

	private void CargarJuegos(int minimo2, int maximo2)
	{
		if (juegosConMinimos != null)
		{
			if (juegosConMinimos.Count > 0)
			{
				juegosMostrar.Clear();	

				for (int i = minimo2; i < maximo2; i += 1)
				{
					juegosMostrar.Add(juegosConMinimos[i]);
				}
			}
		}
	}

	private void ClickearAdelante()
	{
		if (minimo + 50 <= juegosConMinimos.Count && maximo + 50 <= juegosConMinimos.Count)
		{
			minimo = minimo + 50;
			maximo = maximo + 50;
		}

		CargarJuegos(minimo, maximo);
	}

	private void ClickearAtras()
	{
		if (minimo - 50 >= 0 && maximo - 50 >= 0)
		{
			minimo = minimo - 50;
			maximo = maximo - 50;
		}

		CargarJuegos(minimo, maximo);
	}

	private string CargarImagenDRM(global::Juegos.Juego juego)
	{
		JuegoPrecio oferta = juego.PrecioActualesTiendas[0];

		if (oferta != null)
		{
			return JuegoDRM2.SacarImagen(oferta.DRM.ToString());
		}

		return null;
	}

	private string CargarImagenTienda(global::Juegos.Juego juego)
	{
		JuegoPrecio oferta = juego.PrecioActualesTiendas[0];

		if (oferta != null)
		{
			List<Tiendas2.Tienda> tiendas = Tiendas2.TiendasCargar.GenerarListado();

			foreach (var tienda in tiendas)
			{
				if (tienda.Id == oferta.Tienda)
				{
					return tienda.Imagen300x80;
				}
			}
		}

		return null;	
	}

	private string CargarDescuento(global::Juegos.Juego juego)
	{
		JuegoPrecio oferta = juego.PrecioActualesTiendas[0];

		if (oferta != null)
		{
			return oferta.Descuento.ToString() + "%";
		}
		else
		{
			return null;
		}
	}

	private static string CargarPrecio(global::Juegos.Juego juego)
	{
		JuegoPrecio oferta = juego.PrecioActualesTiendas[0];

		if (oferta != null)
		{
			string precioMensaje = oferta.Precio.ToString();
			precioMensaje = precioMensaje.Replace(".", ",");

			int int1 = precioMensaje.IndexOf(",");

			if (int1 == precioMensaje.Length - 2)
			{
				precioMensaje = precioMensaje + "0";
			}

			precioMensaje = precioMensaje + "€";

			return precioMensaje;
		}
		else
		{
			return null;
		}
	}

	private string CargarDetectado(global::Juegos.Juego juego)
	{
		JuegoPrecio oferta = juego.PrecioActualesTiendas[0];

		if (oferta != null)
		{
			return Herramientas.Calculadora.HaceTiempo(oferta.FechaDetectado, idioma); 
		}
		else
		{
			return null;
		}
	}

	private string CargarEnlace(global::Juegos.Juego juego)
	{
		JuegoPrecio oferta = juego.PrecioActualesTiendas[0];

		if (oferta != null)
		{
			return Herramientas.EnlaceAcortador.Generar(oferta.Enlace, oferta.Tienda);
		}
		else
		{
			return null;
		}
	}

	#region Ordenar

	private void OrdenarUltimosAñadidos()
	{
		minimo = 0;
		maximo = 50;

		if (juegosConMinimos != null)
		{
			if (juegosConMinimos.Count > 0)
			{
				juegosConMinimos.Sort(delegate (global::Juegos.Juego j1, global::Juegos.Juego j2)
				{
					List<JuegoPrecio> j1Ofertas = new List<JuegoPrecio>();

					if (j1.PrecioMinimosHistoricos.Count > 0)
					{
						decimal precio = 10000000;
						JuegoPrecio minimo = null;

						foreach (var minimo2 in j1.PrecioMinimosHistoricos)
						{
							if (minimo2.Precio < precio)
							{
								if (minimo2.DRM != JuegoDRM.NoEspecificado)
								{
									precio = minimo2.Precio;

									minimo = minimo2;
								}
							}
						}

						if (minimo != null)
						{
							j1Ofertas.Add(minimo);
						}
					}

					List<JuegoPrecio> j2Ofertas = new List<JuegoPrecio>();

					if (j2.PrecioMinimosHistoricos.Count > 0)
					{
						decimal precio = 10000000;
						JuegoPrecio minimo = null;

						foreach (var minimo2 in j2.PrecioMinimosHistoricos)
						{
							if (minimo2.Precio < precio)
							{
								if (minimo2.DRM != JuegoDRM.NoEspecificado)
								{
									precio = minimo2.Precio;

									minimo = minimo2;
								}
							}
						}

						if (minimo != null)
						{
							j2Ofertas.Add(minimo);
						}
					}

					if (j1Ofertas.Count > 0 && j2Ofertas.Count > 0)
					{
						return j2Ofertas[0].FechaDetectado.CompareTo(j1Ofertas[0].FechaDetectado);
					}
					else
					{
						if (j1Ofertas.Count == 0 && j2Ofertas.Count > 0)
						{
							return 1;
						}
						else if (j1Ofertas.Count > 0 && j2Ofertas.Count == 0)
						{
							return -1;
						}
					}

					return 0;
				});
			}
		}

		CargarJuegos(minimo, maximo);
	}

	private void OrdenarReseñas()
	{
		minimo = 0;
		maximo = 50;

		if (juegosConMinimos != null)
		{
			if (juegosConMinimos.Count > 0)
			{
				juegosConMinimos.Sort(delegate (global::Juegos.Juego j1, global::Juegos.Juego j2)
				{
					if (j1.Analisis != null && j2.Analisis != null)
					{
						if (string.IsNullOrEmpty(j1.Analisis.Cantidad) == false && string.IsNullOrEmpty(j2.Analisis.Cantidad) == false)
						{
							int j1Analisis = int.Parse(j1.Analisis.Cantidad.Replace(",", null));
							int j2Analisis = int.Parse(j2.Analisis.Cantidad.Replace(",", null));

							return j2Analisis.CompareTo(j1Analisis);
						}
					}

					if (j1.Analisis != null)
					{
						return 0;
					}

					if (j2.Analisis != null)
					{
						return 1;
					}

					return 0;
				});
			}
		}

		CargarJuegos(minimo, maximo);
	}

	private void OrdenarPrecio()
	{
		minimo = 0;
		maximo = 50;

		if (juegosConMinimos != null)
		{
			if (juegosConMinimos.Count > 0)
			{
				juegosConMinimos.Sort(delegate (global::Juegos.Juego j1, global::Juegos.Juego j2)
				{
					List<JuegoPrecio> j1Ofertas = new List<JuegoPrecio>();

					if (j1.PrecioMinimosHistoricos.Count > 0)
					{
						decimal precio = 10000000;
						JuegoPrecio minimo = null;

						foreach (var minimo2 in j1.PrecioMinimosHistoricos)
						{
							if (minimo2.Precio < precio)
							{
								if (minimo2.DRM != JuegoDRM.NoEspecificado)
								{
									precio = minimo2.Precio;

									minimo = minimo2;
								}
							}
						}

						if (minimo != null)
						{
							j1Ofertas.Add(minimo);
						}
					}

					List<JuegoPrecio> j2Ofertas = new List<JuegoPrecio>();

					if (j2.PrecioMinimosHistoricos.Count > 0)
					{
						decimal precio = 10000000;
						JuegoPrecio minimo = null;

						foreach (var minimo2 in j2.PrecioMinimosHistoricos)
						{
							if (minimo2.Precio < precio)
							{
								if (minimo2.DRM != JuegoDRM.NoEspecificado)
								{
									precio = minimo2.Precio;

									minimo = minimo2;
								}
							}
						}

						if (minimo != null)
						{
							j2Ofertas.Add(minimo);
						}
					}

					if (j1Ofertas.Count > 0 && j2Ofertas.Count > 0)
					{
						return j1Ofertas[0].Precio.CompareTo(j2Ofertas[0].Precio);
					}
					else
					{
						if (j1Ofertas.Count == 0 && j2Ofertas.Count > 0)
						{
							return 1;
						}
						else if (j1Ofertas.Count > 0 && j2Ofertas.Count == 0)
						{
							return -1;
						}
					}

					return 0;
				});
			}
		}

		CargarJuegos(minimo, maximo);
	}

	private void OrdenarDescuento()
	{
		minimo = 0;
		maximo = 50;

		if (juegosConMinimos != null)
		{
			if (juegosConMinimos.Count > 0)
			{
				juegosConMinimos.Sort(delegate (global::Juegos.Juego j1, global::Juegos.Juego j2)
				{
					List<JuegoPrecio> j1Ofertas = new List<JuegoPrecio>();

					if (j1.PrecioMinimosHistoricos.Count > 0)
					{
						decimal precio = 10000000;
						JuegoPrecio minimo = null;

						foreach (var minimo2 in j1.PrecioMinimosHistoricos)
						{
							if (minimo2.Precio < precio)
							{
								if (minimo2.DRM != JuegoDRM.NoEspecificado)
								{
									precio = minimo2.Precio;

									minimo = minimo2;
								}
							}
						}

						if (minimo != null)
						{
							j1Ofertas.Add(minimo);
						}
					}

					List<JuegoPrecio> j2Ofertas = new List<JuegoPrecio>();

					if (j2.PrecioMinimosHistoricos.Count > 0)
					{
						decimal precio = 10000000;
						JuegoPrecio minimo = null;

						foreach (var minimo2 in j2.PrecioMinimosHistoricos)
						{
							if (minimo2.Precio < precio)
							{
								if (minimo2.DRM != JuegoDRM.NoEspecificado)
								{
									precio = minimo2.Precio;

									minimo = minimo2;
								}
							}
						}

						if (minimo != null)
						{
							j2Ofertas.Add(minimo);
						}
					}

					if (j1Ofertas.Count > 0 && j2Ofertas.Count > 0)
					{
						return j2Ofertas[0].Descuento.CompareTo(j1Ofertas[0].Descuento);
					}
					else
					{
						if (j1Ofertas.Count == 0 && j2Ofertas.Count > 0)
						{
							return 1;
						}
						else if (j1Ofertas.Count > 0 && j2Ofertas.Count == 0)
						{
							return -1;
						}
					}

					return 0;
				});
			}
		}

		CargarJuegos(minimo, maximo);
	}

	#endregion
}
