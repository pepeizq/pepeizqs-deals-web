@using APIs.Steam
@using BaseDatos.Juegos
@using Juegos
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient
@using Microsoft.JSInterop
@using pepeizqs_deals_web.Areas.Identity.Data
@using pepeizqs_deals_web.Pages.Componentes.Interfaz
@using System.Text.Json
@using Tiendas2

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JavaScript

@{
	string titulo = Herramientas.Idiomas.BuscarTexto(idioma, "Title", "HistoricalLows") + " • pepeizq's deals";
	string descripcion = Herramientas.Idiomas.BuscarTexto(idioma, "String22", "HistoricalLows");
	string enlace = "https://pepeizqdeals.com/historical-lows/";
	string imagen = "https://pepeizqdeals.com/logo/logoentrada.webp";

	<HeadContent>
		<meta name="og:title" content="@titulo" />
		<meta name="description" content="@descripcion" />
		<meta name="og:description" content="@descripcion" />
		<meta name="og:url" content="@enlace" />
		<meta name="og:image" content="@imagen" />
		<meta name="og:site_name" content="pepeizq's deals" />
		<meta name="og:type" content="website" />
		<meta name="robots" content="index, follow" />
		<meta name="keywords" content="deals, games, offers, historical, lows" />

		<link rel="canonical" href="@enlace" />
	</HeadContent>
}

<style>
    .caja-diseño {
        background: linear-gradient(180deg, var(--fondoOscuro) 0%, var(--fondoMinimo) 211.07%);
        border: 2px solid var(--fondoOscuro);
        box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24);
        border-radius: 5px;
    }
</style>

<style>
	.cargando {
		width: 48px;
		height: 48px;
		border: 5px solid var(--colorTexto);
		border-bottom-color: transparent;
		border-radius: 50%;
		display: inline-block;
		box-sizing: border-box;
		animation: rotation 1s linear infinite;
	}

	@@keyframes rotation {
	0% {
	transform: rotate(0deg);
	}

	100% {
	transform: rotate(360deg);
	}
	}
</style>

@if (cargado == false)
{
	<div style="text-align: center; width: 100%;">
		<div class="cargando" />
	</div>
}
else
{
	<div style="max-width: 1000px; margin: auto;">
		<div style="background-color: var(--fondoCuerpo);">
			<div style="display: flex; align-items: center; width: 100%; justify-content: space-between;">
				<div style="font-size: 23px; text-align: left;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "String1", "HistoricalLows")
				</div>

				<div style="display: flex; align-items: center; justify-content: right;">
					<div class="menu-dropdown" style="width: auto;">
						<button class="boton-pequeño" style="display: flex; align-items: center; width: 100%; padding: 10px 15px; margin: 0; border: 0px; color: var(--colorTextoVisitado);">
							<div style="font-size: 14px; padding-right: 5px;">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String2", "HistoricalLows"):
							</div>

							<div style="font-size: 14px; color: var(--colorEnlace); padding-right: 15px;">
								@ordenamientoElegido
							</div>

							<div style="max-width: 9px;">
								<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
									<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
								</svg>
							</div>
						</button>

						<div class="menu-dropdown-contenido" style="right: 0; width: 100%; background-color: var(--fondoBotonPequeño);">
							<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="OrdenarReseñasPorcentaje">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String3", "HistoricalLows")
							</button>
							<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="OrdenarReseñasCantidad">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String4", "HistoricalLows")
							</button>
							<hr />
							<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="OrdenarNombreAZ">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String5", "HistoricalLows")
							</button>
							<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="OrdenarNombreZA">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String6", "HistoricalLows")
							</button>
							<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="OrdenarPrecio">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String7", "HistoricalLows")
							</button>
							<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="OrdenarDescuento">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String8", "HistoricalLows")
							</button>
						</div>
					</div>
				</div>
			</div>

			@if (juegosGestor.Count > 0)
			{
				<div class="caja-diseño" style="padding: 20px; width: 100%; margin: 15px 0px 25px 0px; display: flex; flex-direction: column; gap: 30px;">
					<div style="display: flex; align-items: center; gap: 20px;">
						<div style="max-width: 20px;">
							<svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
								<path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z" />
							</svg>
						</div>

						<input type="text" @onchange="(e => TextoCambiaBusqueda(e))" class="entrada-texto" style="flex: 1; min-width: 150px;" placeholder="@Herramientas.Idiomas.BuscarTexto(idioma, "String9", "HistoricalLows")" />

						<div style="font-size: 14px; text-align: right; padding-left: 20px;">
							@if (juegosMostrar.Count == 1)
							{
								@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String23", "HistoricalLows"), juegosMostrar.Count)
							}
							else
							{
								@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String16", "HistoricalLows"), juegosMostrar.Count)
							}
						</div>
					</div>

					<div style="display: flex; flex-direction: column; gap: 10px;">
						<div style="display: flex; align-items: center; gap: 15px; flex-flow: wrap;">
							@if (usuarioLogeado == true)
							{
								<button class="boton-pequeño" @onclick="OpcionesOcultar" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
									<div style="display: flex; align-items: center; gap: 10px;">
										@Herramientas.Idiomas.BuscarTexto(idioma, "String11", "HistoricalLows")

										@if (enseñarOcultar == false)
										{
											<div style="max-width: 9px;">
												<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
													<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
												</svg>
											</div>
										}
										else
										{
											<div style="max-width: 9px;">
												<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
													<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
												</svg>
											</div>
										}
									</div>
								</button>
							}

							<button class="boton-pequeño" @onclick="OpcionesDescuentoMinimo" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
								<div style="display: flex; align-items: center; gap: 10px;">
									@Herramientas.Idiomas.BuscarTexto(idioma, "String12", "HistoricalLows")

									@if (enseñarDescuentoMinimo == false)
									{
										<div style="max-width: 9px;">
											<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
												<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
											</svg>
										</div>
									}
									else
									{
										<div style="max-width: 9px;">
											<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
												<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
											</svg>
										</div>
									}
								</div>
							</button>

							<button class="boton-pequeño" @onclick="OpcionesPrecioMaximo" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
								<div style="display: flex; align-items: center; gap: 10px;">
									@Herramientas.Idiomas.BuscarTexto(idioma, "String13", "HistoricalLows")

									@if (enseñarPrecioMaximo == false)
									{
										<div style="max-width: 9px;">
											<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
												<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
											</svg>
										</div>
									}
									else
									{
										<div style="max-width: 9px;">
											<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
												<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
											</svg>
										</div>
									}
								</div>
							</button>

							<button class="boton-pequeño" @onclick="OpcionesDRMs" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
								<div style="display: flex; align-items: center; gap: 10px;">
									@Herramientas.Idiomas.BuscarTexto(idioma, "String14", "HistoricalLows")

									@if (enseñarDRMs == false)
									{
										<div style="max-width: 9px;">
											<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
												<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
											</svg>
										</div>
									}
									else
									{
										<div style="max-width: 9px;">
											<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
												<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
											</svg>
										</div>
									}
								</div>
							</button>

							<button class="boton-pequeño" @onclick="OpcionesTiendas" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
								<div style="display: flex; align-items: center; gap: 10px;">
									@Herramientas.Idiomas.BuscarTexto(idioma, "String15", "HistoricalLows")

									@if (enseñarTiendas == false)
									{
										<div style="max-width: 9px;">
											<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
												<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
											</svg>
										</div>
									}
									else
									{
										<div style="max-width: 9px;">
											<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
												<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
											</svg>
										</div>
									}
								</div>
							</button>

							<button class="boton-pequeño" @onclick="OpcionesCategorias" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
								<div style="display: flex; align-items: center; gap: 10px;">
									@Herramientas.Idiomas.BuscarTexto(idioma, "String17", "HistoricalLows")

									@if (enseñarCategorias == false)
									{
										<div style="max-width: 9px;">
											<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
												<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
											</svg>
										</div>
									}
									else
									{
										<div style="max-width: 9px;">
											<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
												<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
											</svg>
										</div>
									}
								</div>
							</button>

							<button class="boton-pequeño" @onclick="OpcionesSteamDeck" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
								<div style="display: flex; align-items: center; gap: 10px;">
									@Herramientas.Idiomas.BuscarTexto(idioma, "String24", "HistoricalLows")

									@if (enseñarSteamDeck == false)
									{
										<div style="max-width: 9px;">
											<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
												<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
											</svg>
										</div>
									}
									else
									{
										<div style="max-width: 9px;">
											<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
												<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
											</svg>
										</div>
									}
								</div>
							</button>
						</div>

						@if (enseñarOcultar == true)
						{
							<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px; display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 20px; width: 100%;">
								<div style="display: flex; align-items: center; gap: 20px;">
									<div class="checkbox-caja">
										<input type="checkbox" class="checkbox-interior" checked="@ocultarJuegosUsuarioSteam" @onchange="OcultarJuegosUsuarioSteam">
									</div>

									<div style="padding-bottom: 5px;">
										Steam
									</div>
								</div>

								<div style="display: flex; align-items: center; gap: 20px;">
									<div class="checkbox-caja">
										<input type="checkbox" class="checkbox-interior" checked="@ocultarJuegosUsuarioGog" @onchange="OcultarJuegosUsuarioGog">
									</div>

									<div style="padding-bottom: 5px;">
										GOG
									</div>
								</div>
							</div>
						}

						@if (enseñarDescuentoMinimo == true)
						{
							<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px;">
								<div style="display: flex; align-items: center; gap: 30px;">
									<input type="range" min="1" max="91" value="@minimoDescuento" step="5" @onchange="@(e => CambiarMinimoDescuento(e))" class="deslizador">

									<label style="min-width: 65px; text-align: center;">@minimoDescuento%</label>
								</div>
							</div>
						}

						@if (enseñarPrecioMaximo == true)
						{
							<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px;">
								<div style="display: flex; align-items: center; gap: 30px;">
									<input type="range" min="5" max="90" value="@maximoPrecio" step="1" @onchange="@(e => CambiarMaximoPrecio(e))" class="deslizador">

									<label style="min-width: 65px; text-align: center;">@maximoPrecio€</label>
								</div>
							</div>
						}

						@if (enseñarDRMs == true)
						{
							<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px;">
								<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); gap: 20px;">
									@foreach (var drm in drms)
									{
										string iconoDRM = string.Empty;
										string nombreDRM = string.Empty;

										foreach (var drm2 in JuegoDRM2.GenerarListado())
										{
											if (drm2.Id == drm.DRMId)
											{
												iconoDRM = drm2.Imagen;
												nombreDRM = drm2.Nombre;
											}
										}

										<div style="display: flex; align-items: center;" title="@nombreDRM">
											<div class="checkbox-caja">
												<input type="checkbox" class="checkbox-interior" checked="@drm.Checkbox" @onchange="@(e => EnseñarJuegosDRM(e, drm.DRMId))">
											</div>

											@if (drm.DRMId != JuegoDRM.DRMFree)
											{
												<div style="margin-left: 20px; padding-bottom: 10px;">
													<img src="@iconoDRM" style="max-width: 24px; max-height: 24px;" title="@nombreDRM" />
												</div>
											}
											else
											{
												<div style="margin-left: 20px; padding-bottom: 5px;">
													<label style="font-size: 10px; max-width: 24px; text-align: center;">@nombreDRM</label>
												</div>
											}
										</div>
									}
								</div>
							</div>
						}

						@if (enseñarTiendas == true)
						{
							<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px;">
								<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); gap: 20px;">
									@foreach (var tienda in tiendas)
									{
										string iconoTienda = string.Empty;
										string nombreTienda = string.Empty;

										foreach (var tienda2 in Tiendas2.TiendasCargar.GenerarListado())
										{
											if (tienda2.Id == tienda.TiendaId)
											{
												iconoTienda = tienda2.ImagenIcono;
												nombreTienda = tienda2.Nombre;
											}
										}

										<div style="display: flex; align-items: center; gap: 20px;" title="@nombreTienda">
											<div class="checkbox-caja">
												<input type="checkbox" class="checkbox-interior" checked="@tienda.Checkbox" @onchange="@(e => EnseñarJuegosTienda(e, tienda.TiendaId))">
											</div>

											<div style="padding-bottom: 10px;">
												<img src="@iconoTienda" style="width: 24px; height: 24px;" title="@nombreTienda" />
											</div>
										</div>
									}
								</div>
							</div>
						}

						@if (enseñarCategorias == true)
						{
							<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px;">
								<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: 20px;">
									@foreach (var categoria in categorias)
									{
										string nombreCategoria = string.Empty;

										if (categoria.Categoria == JuegoTipo.Game)
										{
											nombreCategoria = Herramientas.Idiomas.BuscarTexto(idioma, "String18", "HistoricalLows");
										}
										else if (categoria.Categoria == JuegoTipo.DLC)
										{
											nombreCategoria = Herramientas.Idiomas.BuscarTexto(idioma, "String19", "HistoricalLows");
										}
										else if (categoria.Categoria == JuegoTipo.Music)
										{
											nombreCategoria = Herramientas.Idiomas.BuscarTexto(idioma, "String20", "HistoricalLows");
										}
										else if (categoria.Categoria == JuegoTipo.Software)
										{
											nombreCategoria = Herramientas.Idiomas.BuscarTexto(idioma, "String21", "HistoricalLows");
										}

										<div style="display: flex; align-items: center;" title="@nombreCategoria">
											<div class="checkbox-caja">
												<input type="checkbox" class="checkbox-interior" checked="@categoria.Checkbox" @onchange="@(e => EnseñarJuegosCategoria(e, categoria.Categoria))">
											</div>

											<div style="margin-left: 15px; padding-bottom: 8px;">
												<label style="font-size: 14px;">@nombreCategoria</label>
											</div>
										</div>
									}
								</div>
							</div>
						}

						@if (enseñarSteamDeck == true)
						{
							<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px;">
								<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: 20px;">
									@foreach (var steamdeck in deck)
									{
										string nombreTipo = string.Empty;

										if (steamdeck.Tipo == JuegoDeck.Verificado)
										{
											nombreTipo = Herramientas.Idiomas.BuscarTexto(idioma, "String25", "HistoricalLows");
										}
										else if (steamdeck.Tipo == JuegoDeck.Jugable)
										{
											nombreTipo = Herramientas.Idiomas.BuscarTexto(idioma, "String26", "HistoricalLows");
										}
										else if (steamdeck.Tipo == JuegoDeck.NoSoportado)
										{
											nombreTipo = Herramientas.Idiomas.BuscarTexto(idioma, "String27", "HistoricalLows");
										}
										else if (steamdeck.Tipo == JuegoDeck.Desconocido)
										{
											nombreTipo = Herramientas.Idiomas.BuscarTexto(idioma, "String28", "HistoricalLows");
										}

										<div style="display: flex; align-items: center;" title="@nombreTipo">
											<div class="checkbox-caja">
												<input type="checkbox" class="checkbox-interior" checked="@steamdeck.Checkbox" @onchange="@(e => EnseñarJuegosSteamDeck(e, steamdeck.Tipo))">
											</div>

											<div style="margin-left: 15px; padding-bottom: 8px;">
												<label style="font-size: 14px;">@nombreTipo</label>
											</div>
										</div>
									}
								</div>
							</div>
						}
					</div>
				</div>
			}
		</div>

		@if (juegosMostrar.Count > 0)
		{
			<div style="display: flex; flex-direction: column; gap: 25px; margin-top: -25px;">
				<Virtualize Context="juego" Items="juegosMostrar" ItemSize="107">
					<ItemContent>
						<CajaJuego idioma="@idioma" juego="@juego" juegosUsuario="@juegosUsuario" usuarioDeseadosSteam="@usuario?.SteamWishlist" usuarioDeseadosWeb="@usuario?.Wishlist" usuarioDeseadosGog="@usuario?.GogWishlist" tipo="CajaJuego.Tipo.MinimosHistoricos" usuarioPatreon="@usuarioPatreon" />
					</ItemContent>
				</Virtualize>
			</div>
		}
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string usuarioId { get; set; }

	[Parameter]
	public bool usuarioLogeado { get; set; }

	[Parameter]
	public string drmEscrito { get; set; }

	[Parameter]
	public string tiendaEscrita { get; set; }

	private Usuario usuario = new Usuario();
	private bool usuarioPatreon = false;
	private Herramientas.UsuarioListadosJuegos juegosUsuario = new Herramientas.UsuarioListadosJuegos();

	private List<Juegos.Juego> juegosGestor = new List<Juegos.Juego>();
	private List<Juegos.Juego> juegosMostrar = new List<Juegos.Juego>();

	private string ordenamientoElegido = string.Empty;

	private string textoBuscador { get; set; }

	private bool cargado = false;

	protected override async Task OnInitializedAsync()
	{
		usuario = await UserManager.FindByIdAsync(usuarioId);

		if (usuario != null && usuarioLogeado == true)
		{
			usuarioPatreon = Herramientas.Patreon.VerificarActivo(usuario.PatreonLastCheck);
			juegosUsuario = Herramientas.UsuarioJuegos.Cargar(usuario);

			#region Filtrado

			if (usuario.HistoricalLowsOption1 == true)
			{
				ocultarJuegosUsuarioSteam = "checked";
			}
			else
			{
				ocultarJuegosUsuarioSteam = null;
			}

			if (usuario.HistoricalLowsOption4 == true)
			{
				ocultarJuegosUsuarioGog = "checked";
			}
			else
			{
				ocultarJuegosUsuarioGog = null;
			}

			if (usuario.HistoricalLowsOption2 == null)
			{
				minimoDescuento = 1;
			}
			else
			{
				if (usuario.HistoricalLowsOption2 == 0 || usuario.HistoricalLowsOption2 == null)
				{
					minimoDescuento = 1;
				}
				else if (usuario.HistoricalLowsOption2 > 0)
				{
					minimoDescuento = usuario.HistoricalLowsOption2;
				}
			}

			if (usuario.HistoricalLowsOption3 == null)
			{
				maximoPrecio = 90;
			}
			else
			{
				if (usuario.HistoricalLowsOption3 == 0 || usuario.HistoricalLowsOption3 == null)
				{
					maximoPrecio = 90;
				}
				else if (usuario.HistoricalLowsOption3 > 0)
				{
					maximoPrecio = usuario.HistoricalLowsOption3;
				}
			}

			if (string.IsNullOrEmpty(usuario.HistoricalLowsDRMs) == false)
			{
				drms = JsonSerializer.Deserialize<List<MostrarJuegoDRM>>(usuario.HistoricalLowsDRMs);
			}

			if (string.IsNullOrEmpty(usuario.HistoricalLowsStores) == false)
			{
				tiendas = JsonSerializer.Deserialize<List<MostrarJuegoTienda>>(usuario.HistoricalLowsStores);
				tiendas = GenerarListaTiendas(tiendas);
			}

			if (string.IsNullOrEmpty(usuario.HistoricalLowsCategories) == false)
			{
				categorias = JsonSerializer.Deserialize<List<MostrarJuegoCategoria>>(usuario.HistoricalLowsCategories);
			}

			#endregion
		}

		//--------------------------------------------------------------------

		SqlConnection conexion = Herramientas.BaseDatos.Conectar();

		using (conexion)
		{
			juegosGestor = BaseDatos.Juegos.Buscar.Minimos(conexion);
		}

		if (juegosGestor.Count > 0)
		{
			if (usuario == null)
			{
				OrdenarReseñasCantidad();
			}
			else
			{
				if (usuario.HistoricalLowsSort == null)
				{
					usuario.HistoricalLowsSort = 1;
				}

				if (usuario.HistoricalLowsSort == 0)
				{
					OrdenarReseñasPorcentaje();
				}
				else if (usuario.HistoricalLowsSort == 1)
				{
					OrdenarReseñasCantidad();
				}
				else if (usuario.HistoricalLowsSort == 2)
				{
					OrdenarNombreAZ();
				}
				else if (usuario.HistoricalLowsSort == 3)
				{
					OrdenarNombreZA();
				}
				else if (usuario.HistoricalLowsSort == 4)
				{
					OrdenarPrecio();
				}
				else if (usuario.HistoricalLowsSort == 5)
				{
					OrdenarDescuento();
				}
			}
		}
	}

	#region Ordenar

	private async void OrdenarReseñasPorcentaje()
	{
		if (juegosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String3", "HistoricalLows");

			if (juegosGestor.Count > 0)
			{
				juegosMostrar.Clear();
				juegosMostrar = Filtros();
				juegosMostrar = juegosMostrar.AsParallel().OrderByDescending(x => int.Parse(x.Analisis.Porcentaje.Replace("%", null))).ThenBy(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.HistoricalLowsSort = 0;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	private async void OrdenarReseñasCantidad()
	{
		if (juegosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String4", "HistoricalLows");

			if (juegosGestor.Count > 0)
			{
				juegosMostrar.Clear();
				juegosMostrar = Filtros();
				juegosMostrar = juegosMostrar.AsParallel().OrderByDescending(x => int.Parse(x.Analisis.Cantidad.Replace(",", null))).ThenBy(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.HistoricalLowsSort = 1;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	private async void OrdenarNombreAZ()
	{
		if (juegosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String5", "HistoricalLows");

			if (juegosGestor.Count > 0)
			{
				juegosMostrar.Clear();
				juegosMostrar = Filtros();
				juegosMostrar = juegosMostrar.AsParallel().OrderBy(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.HistoricalLowsSort = 2;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	private async void OrdenarNombreZA()
	{
		if (juegosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String6", "HistoricalLows");

			if (juegosGestor.Count > 0)
			{
				juegosMostrar.Clear();
				juegosMostrar = Filtros();
				juegosMostrar = juegosMostrar.AsParallel().OrderByDescending(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.HistoricalLowsSort = 3;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	private async void OrdenarPrecio()
	{
		if (juegosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String7", "HistoricalLows");

			if (juegosGestor.Count > 0)
			{
				juegosMostrar.Clear();
				juegosMostrar = Filtros();
				juegosMostrar = juegosMostrar.AsParallel().OrderBy(x => x.PrecioMinimosHistoricos[0].Precio).ThenBy(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.HistoricalLowsSort = 4;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	private async void OrdenarDescuento()
	{
		if (juegosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String8", "HistoricalLows");

			if (juegosGestor.Count > 0)
			{
				juegosMostrar.Clear();
				juegosMostrar = Filtros();
				juegosMostrar = juegosMostrar.AsParallel().OrderByDescending(x => x.PrecioMinimosHistoricos[0].Descuento).ThenBy(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.HistoricalLowsSort = 5;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	#endregion

	#region Filtrado

	private List<Juegos.Juego> Filtros()
	{
		List<Juegos.Juego> juegosFiltrados = new List<Juegos.Juego>();

		foreach (var juego in juegosGestor)
		{
			bool buscador = false;

			if (string.IsNullOrEmpty(textoBuscador) == false)
			{
				if (Herramientas.Buscador.LimpiarNombre(juego.Nombre, true).Contains(Herramientas.Buscador.LimpiarNombre(textoBuscador, true)))
				{
					buscador = true;
				}
				else
				{
					buscador = false;
				}
			}
			else
			{
				buscador = true;
			}

			bool ocultar = false;

			if (string.IsNullOrEmpty(ocultarJuegosUsuarioSteam) == false)
			{
				if (ocultarJuegosUsuarioSteam == "checked" && juego.PrecioMinimosHistoricos[0].DRM == JuegoDRM.Steam)
				{
					if (juegosUsuario.Steam != null)
					{
						if (juegosUsuario.Steam.Count > 0)
						{
							foreach (var juegoUsuario in juegosUsuario.Steam)
							{
								if (juego.IdSteam.ToString() == juegoUsuario)
								{
									ocultar = true;
									break;
								}
							}
						}
					}					
				}
			}

			if (string.IsNullOrEmpty(ocultarJuegosUsuarioGog) == false)
			{
				if (ocultarJuegosUsuarioGog == "checked" && juego.PrecioMinimosHistoricos[0].DRM == JuegoDRM.GOG)
				{
					if (juegosUsuario.Gog != null)
					{
						if (juegosUsuario.Gog.Count > 0)
						{
							foreach (var juegoUsuario in juegosUsuario.Gog)
							{
								if (juego.IdGog.ToString() == juegoUsuario)
								{
									ocultar = true;
									break;
								}
							}
						}
					}
				}
			}

			bool minimoDescuento2 = false;

			if (juego.PrecioMinimosHistoricos != null)
			{
				if (juego.PrecioMinimosHistoricos[0].Descuento >= minimoDescuento)
				{
					minimoDescuento2 = true;
				}
			}

			bool maximoPrecio2 = false;

			if (juego.PrecioMinimosHistoricos[0].Precio <= maximoPrecio)
			{
				maximoPrecio2 = true;
			}

			bool drm2 = false;

			#region Usuario añade DRM en enlace

			if (string.IsNullOrEmpty(drmEscrito) == false)
			{
				foreach (var drm3 in JuegoDRM2.GenerarListado())
				{
					bool añadir = false;

					if (Herramientas.Buscador.LimpiarNombre(drmEscrito, true) == Herramientas.Buscador.LimpiarNombre(drm3.Nombre, true))
					{
						añadir = true;
					}

					foreach (var drm4 in drm3.Acepciones)
					{
						if (Herramientas.Buscador.LimpiarNombre(drmEscrito, true) == Herramientas.Buscador.LimpiarNombre(drm4, true))
						{
							añadir = true;
						}
					}

					if (añadir == true)
					{
						MostrarJuegoDRM nuevoDrm = new MostrarJuegoDRM();
						nuevoDrm.DRMId = drm3.Id;
						nuevoDrm.Estado = true;

						drms.Clear();
						drms.Add(nuevoDrm);
						break;
					}
				}
			}

			#endregion

			foreach (var drm in drms)
			{
				if (juego.PrecioMinimosHistoricos[0].DRM == drm.DRMId && drm.Estado == true)
				{
					drm2 = true;
				}
			}

			bool tienda2 = false;

			#region Usuario añade Tienda en enlace

			if (string.IsNullOrEmpty(tiendaEscrita) == false)
			{
				foreach (var tienda3 in Tiendas2.TiendasCargar.GenerarListado())
				{
					bool añadir = false;

					if (Herramientas.Buscador.LimpiarNombre(tiendaEscrita, true) == Herramientas.Buscador.LimpiarNombre(tienda3.Nombre, true))
					{
						añadir = true;
					}

					if (añadir == true)
					{
						MostrarJuegoTienda nuevaTienda = new MostrarJuegoTienda();
						nuevaTienda.TiendaId = tienda3.Id;
						nuevaTienda.Estado = true;

						tiendas.Clear();
						tiendas.Add(nuevaTienda);
						break;
					}
				}
			}

			#endregion

			foreach (var tienda in tiendas)
			{
				if (juego.PrecioMinimosHistoricos[0].Tienda == tienda.TiendaId && tienda.Estado == true)
				{
					tienda2 = true;
					break;
				}
			}

			bool categoria2 = false;

			foreach (var categoria in categorias)
			{
				if (juego.Tipo == categoria.Categoria && categoria.Estado == true)
				{
					categoria2 = true;
				}
			}

			bool steamdeck2 = false;

			foreach (var steamdeck in deck)
			{
				if (juego.Deck == steamdeck.Tipo && steamdeck.Estado == true)
				{
					steamdeck2 = true;
				}
			}

			if (buscador == true && ocultar == false && minimoDescuento2 == true && maximoPrecio2 == true && 
				drm2 == true && tienda2 == true && categoria2 == true && steamdeck2 == true)
			{
				juegosFiltrados.Add(juego);
			}

			cargado = true;
		}

		return juegosFiltrados;
	}

	private async void ElegirOrdenamiento()
	{
		if (ordenamientoElegido == Herramientas.Idiomas.BuscarTexto(idioma, "String3", "HistoricalLows"))
		{
			OrdenarReseñasPorcentaje();
		}

		if (ordenamientoElegido == Herramientas.Idiomas.BuscarTexto(idioma, "String4", "HistoricalLows"))
		{
			OrdenarReseñasCantidad();
		}

		if (ordenamientoElegido == Herramientas.Idiomas.BuscarTexto(idioma, "String5", "HistoricalLows"))
		{
			OrdenarNombreAZ();
		}

		if (ordenamientoElegido == Herramientas.Idiomas.BuscarTexto(idioma, "String6", "HistoricalLows"))
		{
			OrdenarNombreZA();
		}

		if (ordenamientoElegido == Herramientas.Idiomas.BuscarTexto(idioma, "String7", "HistoricalLows"))
		{
			OrdenarPrecio();
		}

		if (ordenamientoElegido == Herramientas.Idiomas.BuscarTexto(idioma, "String8", "HistoricalLows"))
		{
			OrdenarDescuento();
		}

		await InvokeAsync(StateHasChanged);
	}

	private void TextoCambiaBusqueda(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			textoBuscador = texto.Value.ToString().Trim();
		}
		else
		{
			textoBuscador = null;
		}

		ElegirOrdenamiento();
	}

	private string ocultarJuegosUsuarioSteam = null;

	private async void OcultarJuegosUsuarioSteam()
	{
		if (usuario != null)
		{
			if (usuario.HistoricalLowsOption1 == true)
			{
				usuario.HistoricalLowsOption1 = false;
				ocultarJuegosUsuarioSteam = null;
			}
			else
			{
				usuario.HistoricalLowsOption1 = true;
				ocultarJuegosUsuarioSteam = "checked";
			}

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }

			ElegirOrdenamiento();
		}
	}

	private string ocultarJuegosUsuarioGog = null;

	private async void OcultarJuegosUsuarioGog()
	{
		if (usuario != null)
		{
			if (usuario.HistoricalLowsOption4 == true)
			{
				usuario.HistoricalLowsOption4 = false;
				ocultarJuegosUsuarioGog = null;
			}
			else
			{
				usuario.HistoricalLowsOption4 = true;
				ocultarJuegosUsuarioGog = "checked";
			}

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }

			ElegirOrdenamiento();
		}
	}

	private int? minimoDescuento = 1;

	private async void CambiarMinimoDescuento(ChangeEventArgs e)
	{
		minimoDescuento = int.Parse(e.Value.ToString());

		if (minimoDescuento != 1)
		{
			minimoDescuento = minimoDescuento - 1;
		}

		if (usuario != null)
		{
			usuario.HistoricalLowsOption2 = minimoDescuento;

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }
		}

		ElegirOrdenamiento();
	}

	private decimal? maximoPrecio = 90;

	private async void CambiarMaximoPrecio(ChangeEventArgs e)
	{
		maximoPrecio = decimal.Parse(e.Value.ToString());

		if (usuario != null)
		{
			usuario.HistoricalLowsOption3 = maximoPrecio;

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }
		}

		ElegirOrdenamiento();
	}

	private async void EnseñarJuegosDRM(ChangeEventArgs e, JuegoDRM drmElegido)
	{
		foreach (var drm in drms)
		{
			if (drm.DRMId == drmElegido)
			{
				if (drm.Checkbox == null)
				{
					drm.Checkbox = "checked";
					drm.Estado = true;
				}
				else
				{
					drm.Checkbox = null;
					drm.Estado = false;
				}
			}
		}

		if (usuario != null)
		{
			usuario.HistoricalLowsDRMs = JsonSerializer.Serialize(drms);

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }
		}

		ElegirOrdenamiento();
	}

	private List<MostrarJuegoDRM> drms = CrearListaDRMs();

	public class MostrarJuegoDRM
	{
		public bool Estado { get; set; }
		public string Checkbox { get; set; }
		public JuegoDRM DRMId { get; set; }
	}

	private static List<MostrarJuegoDRM> CrearListaDRMs()
	{
		List<MostrarJuegoDRM> nuevaLista = new List<MostrarJuegoDRM>();

		foreach (var drm in JuegoDRM2.GenerarListado())
		{
			MostrarJuegoDRM nuevoDRM = new MostrarJuegoDRM();
			nuevoDRM.Estado = false;
			nuevoDRM.Checkbox = null;
			nuevoDRM.DRMId = drm.Id;

			if (nuevoDRM.DRMId == JuegoDRM.Steam || nuevoDRM.DRMId == JuegoDRM.GOG || nuevoDRM.DRMId == JuegoDRM.Ubisoft || nuevoDRM.DRMId == JuegoDRM.EA)
			{
				nuevoDRM.Estado = true;
				nuevoDRM.Checkbox = "checked";
			}

			nuevaLista.Add(nuevoDRM);
		}

		return nuevaLista;
	}

	private async void EnseñarJuegosTienda(ChangeEventArgs e, string tiendaElegida)
	{
		foreach (var tienda in tiendas)
		{
			if (tienda.TiendaId == tiendaElegida)
			{
				if (tienda.Checkbox == null)
				{
					tienda.Checkbox = "checked";
					tienda.Estado = true;
				}
				else
				{
					tienda.Checkbox = null;
					tienda.Estado = false;
				}
			}
		}

		if (usuario != null)
		{
			usuario.HistoricalLowsStores = JsonSerializer.Serialize(tiendas);

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }
		}

		ElegirOrdenamiento();
	}

	private List<MostrarJuegoTienda> tiendas = GenerarListaTiendas();

	public class MostrarJuegoTienda
	{
		public bool Estado { get; set; }
		public string Checkbox { get; set; }
		public string TiendaId { get; set; }
	}

	private static List<MostrarJuegoTienda> GenerarListaTiendas(List<MostrarJuegoTienda> viejaLista = null)
	{
		List<MostrarJuegoTienda> nuevaLista = new List<MostrarJuegoTienda>();

		foreach (var tienda in Tiendas2.TiendasCargar.GenerarListado())
		{
			MostrarJuegoTienda nuevaTienda = new MostrarJuegoTienda();
			nuevaTienda.Estado = true;
			nuevaTienda.Checkbox = "checked";
			nuevaTienda.TiendaId = tienda.Id;

			if (viejaLista != null)
			{
				foreach (var viejaTienda in viejaLista)
				{
					if (viejaTienda.TiendaId == tienda.Id)
					{
						nuevaTienda.Estado = viejaTienda.Estado;
						nuevaTienda.Checkbox = viejaTienda.Checkbox;
					}
				}
			}

			nuevaLista.Add(nuevaTienda);
		}

		return nuevaLista;
	}

	private async void EnseñarJuegosCategoria(ChangeEventArgs e, JuegoTipo categoriaElegida)
	{
		foreach (var categoria in categorias)
		{
			if (categoria.Categoria == categoriaElegida)
			{
				if (categoria.Checkbox == null)
				{
					categoria.Checkbox = "checked";
					categoria.Estado = true;
				}
				else
				{
					categoria.Checkbox = null;
					categoria.Estado = false;
				}
			}
		}

		if (usuario != null)
		{
			usuario.HistoricalLowsCategories = JsonSerializer.Serialize(categorias);

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }
		}

		ElegirOrdenamiento();
	}

	private List<MostrarJuegoCategoria> categorias = CrearListaCategorias();

	public class MostrarJuegoCategoria
	{
		public bool Estado { get; set; }
		public string Checkbox { get; set; }
		public JuegoTipo Categoria { get; set; }
	}

	private static List<MostrarJuegoCategoria> CrearListaCategorias()
	{
		List<MostrarJuegoCategoria> nuevaLista = new List<MostrarJuegoCategoria>();

		foreach (var categoria in JuegoTipos.CargarListado())
		{
			if (categoria != JuegoTipo.Bundle)
			{
				MostrarJuegoCategoria nuevaCategoria = new MostrarJuegoCategoria();
				nuevaCategoria.Estado = true;
				nuevaCategoria.Checkbox = "checked";
				nuevaCategoria.Categoria = categoria;

				nuevaLista.Add(nuevaCategoria);
			}
		}

		return nuevaLista;
	}

	private async void EnseñarJuegosSteamDeck(ChangeEventArgs e, JuegoDeck tipoElegido)
	{
		foreach (var steamdeck in deck)
		{
			if (steamdeck.Tipo == tipoElegido)
			{
				if (steamdeck.Checkbox == null)
				{
					steamdeck.Checkbox = "checked";
					steamdeck.Estado = true;
				}
				else
				{
					steamdeck.Checkbox = null;
					steamdeck.Estado = false;
				}
			}
		}

		if (usuario != null)
		{
			usuario.HistoricalLowsSteamDeck = JsonSerializer.Serialize(deck);

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch (Exception ex)
			{
				BaseDatos.Errores.Insertar.Mensaje("Guardar Usuario Minimos", ex);
			}
		}

		ElegirOrdenamiento();
	}

	private List<MostrarJuegoSteamDeck> deck = CrearListaSteamDeck();

	public class MostrarJuegoSteamDeck
	{
		public bool Estado { get; set; }
		public string Checkbox { get; set; }
		public JuegoDeck Tipo { get; set; }
	}

	private static List<MostrarJuegoSteamDeck> CrearListaSteamDeck()
	{
		List<MostrarJuegoSteamDeck> nuevaLista = new List<MostrarJuegoSteamDeck>();

		MostrarJuegoSteamDeck nuevoTipo1 = new MostrarJuegoSteamDeck();
		nuevoTipo1.Estado = true;
		nuevoTipo1.Checkbox = "checked";
		nuevoTipo1.Tipo = JuegoDeck.Verificado;

		nuevaLista.Add(nuevoTipo1);

		MostrarJuegoSteamDeck nuevoTipo2 = new MostrarJuegoSteamDeck();
		nuevoTipo2.Estado = true;
		nuevoTipo2.Checkbox = "checked";
		nuevoTipo2.Tipo = JuegoDeck.Jugable;

		nuevaLista.Add(nuevoTipo2);

		MostrarJuegoSteamDeck nuevoTipo3 = new MostrarJuegoSteamDeck();
		nuevoTipo3.Estado = true;
		nuevoTipo3.Checkbox = "checked";
		nuevoTipo3.Tipo = JuegoDeck.NoSoportado;

		nuevaLista.Add(nuevoTipo3);

		MostrarJuegoSteamDeck nuevoTipo4 = new MostrarJuegoSteamDeck();
		nuevoTipo4.Estado = true;
		nuevoTipo4.Checkbox = "checked";
		nuevoTipo4.Tipo = JuegoDeck.Desconocido;

		nuevaLista.Add(nuevoTipo4);

		return nuevaLista;
	}

	#endregion

	#region Opciones

	private void OpcionesPestañas()
	{
		enseñarOcultar = false;
		enseñarDescuentoMinimo = false;
		enseñarPrecioMaximo = false;
		enseñarDRMs = false;
		enseñarTiendas = false;
		enseñarCategorias = false;
		enseñarSteamDeck = false;
	}

	private bool enseñarOcultar = false;

	private void OpcionesOcultar()
	{
		if (enseñarOcultar == false)
		{
			OpcionesPestañas();

			enseñarOcultar = true;
		}
		else
		{
			enseñarOcultar = false;
		}
	}

	private bool enseñarDescuentoMinimo = false;

	private void OpcionesDescuentoMinimo()
	{
		if (enseñarDescuentoMinimo == false)
		{
			OpcionesPestañas();

			enseñarDescuentoMinimo = true;
		}
		else
		{
			enseñarDescuentoMinimo = false;
		}
	}

	private bool enseñarPrecioMaximo = false;

	private void OpcionesPrecioMaximo()
	{
		if (enseñarPrecioMaximo == false)
		{
			OpcionesPestañas();

			enseñarPrecioMaximo = true;
		}
		else
		{
			enseñarPrecioMaximo = false;
		}
	}

	private bool enseñarDRMs = false;

	private void OpcionesDRMs()
	{
		if (enseñarDRMs == false)
		{
			OpcionesPestañas();

			enseñarDRMs = true;
		}
		else
		{
			enseñarDRMs = false;
		}
	}

	private bool enseñarTiendas = false;

	private void OpcionesTiendas()
	{
		if (enseñarTiendas == false)
		{
			OpcionesPestañas();

			enseñarTiendas = true;
		}
		else
		{
			enseñarTiendas = false;
		}
	}

	private bool enseñarCategorias = false;

	private void OpcionesCategorias()
	{
		if (enseñarCategorias == false)
		{
			OpcionesPestañas();

			enseñarCategorias = true;
		}
		else
		{
			enseñarCategorias = false;
		}
	}

	private bool enseñarSteamDeck = false;

	private void OpcionesSteamDeck()
	{
		if (enseñarSteamDeck == false)
		{
			OpcionesPestañas();

			enseñarSteamDeck = true;
		}
		else
		{
			enseñarSteamDeck = false;
		}
	}

	#endregion
}