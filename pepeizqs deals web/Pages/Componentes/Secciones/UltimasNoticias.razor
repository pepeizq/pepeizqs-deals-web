@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.VisualBasic;

@if (noticiasMostrar.Count > 0)
{
	<div style="background-color: var(--fondoCuerpo); position: sticky; position: -webkit-sticky; top: 70px; z-index: 1; margin: -10px; padding: 10px;">
		<div style="display: flex; align-items: center; width: 100%;">
			<div style="width: 100%; font-size: 23px; text-align: left;">
				@Herramientas.Idiomas.CogerCadena(idioma, "Title", "LastNews")
			</div>

			<pepeizqs_deals_web.Pages.Componentes.Interfaz.RedesSociales idioma="@idioma" tamañoFuente="20px" />
		</div>
	</div>

	<div style="display: flex; flex-direction: column; gap: 30px; margin-top: 20px;">
		@foreach (var noticiaMostrar in noticiasMostrar)
		{
			<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 30px; display: flex; align-items: center; gap: 30px;">
				<div style="width: 50%;">
					<img src="@noticiaMostrar.Imagen" style="width: 100%; height: 100%; border: 1px solid var(--fondoBotonPequeño);" />
				</div>

				<div style="width: 100%; display: flex; flex-direction: column; gap: 20px;">
					<div style="font-size: 20px;">
						@Herramientas.Idiomas.MirarTexto(idioma, noticiaMostrar.TituloEn, noticiaMostrar.TituloEs)
					</div>

					<div style="font-size: 18px;">
						@noticiaMostrar.FechaEmpieza.Day.ToString()/@noticiaMostrar.FechaEmpieza.Month.ToString()/@noticiaMostrar.FechaEmpieza.Year.ToString()
					</div>

					<div>
						@{
							string texto = Herramientas.Idiomas.MirarTexto(idioma, noticiaMostrar.ContenidoEn, noticiaMostrar.ContenidoEs);

							if (noticiaMostrar.Tipo == Noticias.NoticiaTipo.Bundles)
							{
								if (string.IsNullOrEmpty(texto) == false)
								{
									if (texto.Contains("</div>") == true)
									{
										int int1 = texto.IndexOf("</div>");
										texto = texto.Remove(int1, texto.Length - int1);

										if (texto.Contains("<div") == true)
										{
											int int2 = texto.IndexOf(">");
											texto = texto.Remove(0, int2 + 1);
										}
									}
									else
									{
										if (texto.Contains("<") == true)
										{
											int int1 = texto.IndexOf("<");
											texto = texto.Remove(int1, texto.Length - int1);
										}
									}
								}

								<div>
									@texto
								</div>

								<button @onclick="(e => BundleAbrir(e, noticiaMostrar.BundleId))" class="boton-pequeño" style="width: auto; margin-top: 20px; padding: 10px 15px;">
									@Herramientas.Idiomas.CogerCadena(idioma, "String2", "LastNews")
								</button>
							}
							else
							{
								<div>
									@((MarkupString)texto)
								</div>
							}
						}
					</div>
				</div>
			</div>
		}
	</div>
}

<div style="font-size: 23px; margin-top: 40px;">
	@Herramientas.Idiomas.CogerCadena(idioma, "String1", "LastNews")
</div>

<div style="display: flex; align-items: start; gap: 15px; margin: 10px 0px 20px 0px;">
	@foreach (var año in años)
	{
		<div>
			<button @onclick="@(e => CambiarAño(e, año))" class="boton-pequeño" style="padding: 6px 10px; width: auto;">
				@año
			</button>

			@if (añoSeleccionado == año)
			{
				<div style="margin-top: 10px; background: var(--colorTexto); padding: 1px;"/>
			}
		</div>
	}
</div>

@if (noticiasAntiguas.Count > 0)
{
	List<Noticias.Noticia> noticiasAño = new List<Noticias.Noticia>();

	foreach (var noticiaAntigua in noticiasAntiguas)
	{
		if (noticiaAntigua.FechaEmpieza.Year.ToString() == añoSeleccionado)
		{
			noticiasAño.Add(noticiaAntigua);
		}
	}

	if (noticiasAño.Count > 0)
	{
		<div style="display: flex; flex-direction: column; gap: 30px;">
			@{
				int i = 1;
				while (i < 13)
				{
					List<Noticias.Noticia> noticiasMensual = new List<Noticias.Noticia>();

					foreach (var noticia in noticiasAño)
					{
						if (noticia.FechaEmpieza.Month == i)
						{
							noticiasMensual.Add(noticia);
						}
					}

					if (noticiasMensual.Count > 0)
					{
						noticiasMensual.Reverse();

						<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 30px;">
							<label>@Herramientas.Idiomas.CogerCadena(idioma, "Month." + i.ToString())</label>
							<hr />

							<ul>
								@foreach (var noticiaMensual in noticiasMensual)
								{
									<li>
										<a href="/news/@noticiaMensual.Id">@Herramientas.Idiomas.MirarTexto(idioma, noticiaMensual.TituloEn, noticiaMensual.TituloEs)</a> (@noticiaMensual.FechaEmpieza.Day/@noticiaMensual.FechaEmpieza.Month/@noticiaMensual.FechaEmpieza.Year)
									</li>
								}
							</ul>
						</div>
					}

					i += 1;
				}
			}
		</div>
	}
}

@if (bundleId > 0)
{
	<div class="opciones-panel">
		<div style="max-width: 1320px; margin: 20px auto; overflow-y: scroll; padding-right: 20px; scrollbar-color: var(--fondoCodigo) var(--fondoOscuro);">
			@{
				Bundles2.Bundle bundleSeleccionado = global::BaseDatos.Bundles.Buscar.UnBundle(bundleId);
			}

			<div style="margin-bottom: 20px;">
				<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 20px 30px; display: flex; align-items: center; flex-direction: row;">
					<button @onclick="@(e => BundleCerrar(e))" class="boton-pequeño" style="width: auto; text-align: center; font-size: 23px; padding: 10px 20px;">
						<i class="fa-solid fa-arrow-left"></i>
					</button>

					<div style="display: flex; align-items: center; flex-direction: row;">
						<a href="@Herramientas.EnlaceAcortador.Generar(bundleSeleccionado.Enlace, bundleSeleccionado.Tipo)" style="width: auto;" target="_blank">
							<div style="height: 60px; padding-left: 40px; padding-right: 20px;">
								<img src="@Bundles2.BundlesCargar.DevolverBundle(bundleSeleccionado.Tipo).ImagenTienda" style="height: 100%;" alt="@bundleSeleccionado.NombreBundle" />
							</div>
						</a>

						<div style="padding-left: 20px; padding-right: 20px;">
							<a href="@Herramientas.EnlaceAcortador.Generar(bundleSeleccionado.Enlace, bundleSeleccionado.Tipo)" class="boton-pequeño" style="background-color: transparent; padding: 0px; font-size: 20px; margin-bottom: 10px;" target="_blank">
								@bundleSeleccionado.NombreBundle
							</a>

							<div style="display: flex; align-items: center; flex-direction: row; font-size: 14px;">
								<a href="/bundle/@bundleSeleccionado.Id/@Herramientas.EnlaceAdaptador.Nombre(bundleSeleccionado.NombreBundle)/" class="boton-pequeño" style="width: auto; text-align: center; padding: 4px 8px; margin-right: 20px; font-size: 14px;">
									<i class="fa-solid fa-link"></i>
								</a>

								@bundleSeleccionado.FechaEmpieza.Day.ToString()/@bundleSeleccionado.FechaEmpieza.Month.ToString()/@bundleSeleccionado.FechaEmpieza.Year.ToString() • @bundleSeleccionado.FechaTermina.Day.ToString()/@bundleSeleccionado.FechaTermina.Month.ToString()/@bundleSeleccionado.FechaTermina.Year.ToString()
							</div>
						</div>
					</div>
				</div>

				@if (DateTime.Today < bundleSeleccionado.FechaTermina)
				{
					<a href="@Herramientas.EnlaceAcortador.Generar(bundleSeleccionado.Enlace, bundleSeleccionado.Tipo)" class="boton-pequeño" style="text-align: center; padding: 10px 15px;" target="_blank">
						@Herramientas.Idiomas.CogerCadena(idioma, "String3", "Bundle")
					</a>
				}
			</div>

			<Bundle bundleId="@bundleId" idioma="@idioma" tipo="@Bundle.Tipo.Juego" />
		</div>
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	private List<string> fechas = new List<string>();
	private List<Noticias.Noticia> noticiasMostrar = new List<Noticias.Noticia>();
	private List<Noticias.Noticia> noticiasAntiguas = new List<Noticias.Noticia>();

	private List<string> años = new List<string>();
	private string añoSeleccionado = string.Empty;

	protected override void OnInitialized()
	{
		noticiasMostrar = BaseDatos.Noticias.Buscar.Actuales();

		//--------------------------------------------------------------------

		DateTime arranque = new DateTime(2023, 9, 1);

		int i = 0;
		while (i < 100)
		{
			if (arranque.Year != DateTime.Now.Year)
			{
				años.Add(arranque.Year.ToString());
				arranque = arranque.AddYears(1);
			}
			i += 1;
		}

		años.Add(DateTime.Now.Year.ToString());
		años.Reverse();
	}

	private void CambiarAño(MouseEventArgs e, string nuevoAño)
	{
		añoSeleccionado = nuevoAño;

		noticiasAntiguas = BaseDatos.Noticias.Buscar.Año(añoSeleccionado);
	}

	private int bundleId = 0;

	private void BundleAbrir(MouseEventArgs e, int nuevoBundleId)
	{
		bundleId = nuevoBundleId;
	}

	private void BundleCerrar(MouseEventArgs e)
	{
		bundleId = 0;
	}
}
