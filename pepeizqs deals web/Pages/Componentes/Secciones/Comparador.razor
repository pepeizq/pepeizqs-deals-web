@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient
@using Microsoft.JSInterop
@using pepeizqs_deals_web.Areas.Identity.Data

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IJSRuntime JavaScript
@inject NavigationManager NavManager

<script>
    window.ChangeUrl = function (url) {
		history.pushState(null, '', url);
    }
</script>

<style>
	.boton-expandir {
		transition: transform .2s;
		filter: brightness(100%);
		background-color: var(--fondoOscuro);
	}

		.boton-expandir:hover {
			transform: scale(1.01);
			filter: brightness(120%);
		}
</style>

<div style="display: flex; flex-direction: column;">
	@if (id1 == 0 || id2 == 0 || id3 == 0 || id4 == 0)
	{
		int posicion = 0;
		string marginAbajo = string.Empty;

		if (id1 == 0)
		{
			posicion = 1;
			marginAbajo = string.Empty;
		}
        else if (id2 == 0)
        {
            posicion = 2;
            marginAbajo = "margin-bottom: 50px;";
        }
        else if (id3 == 0)
        {
            posicion = 3;
			marginAbajo = "margin-bottom: 50px;";
        }
        else if (id4 == 0)
        {
            posicion = 4;
			marginAbajo = "margin-bottom: 50px;";
        }

		<h1 style="font-size: 23px;">@Herramientas.Idiomas.BuscarTexto(idioma, "String6", "Compare")</h1>
		<hr />

		<div style="background-color: var(--fondoMinimo); border: 2px solid var(--fondoBotonPequeño); padding: 20px 30px; @marginAbajo">
			<div style="width: 100%; margin-bottom: 15px;">
				@Herramientas.Idiomas.BuscarTexto(idioma, "String" + (posicion + 1).ToString(), "Compare")
			</div>

			<div style="display: flex; align-items: center; gap: 20px;">
				<div style="width: 16px; height: 16px;">
					<svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
						<path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z" />
					</svg>
				</div>

				<input type="text" @oninput="(e => TextoCambiarBuscadorJuego(e))" class="entrada-texto" placeholder="@Herramientas.Idiomas.BuscarTexto(idioma, "String1", "Compare")" style="min-width: 10%;" />
			</div>

			@if (resultadosBuscador != null)
			{
				if (resultadosBuscador.Count > 0)
				{
					<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 20px; margin-top: 20px;">
						@foreach (var juego in resultadosBuscador)
						{
							<button @onclick="@(e => ClickearIdJuego(e, juego.Id.ToString(), posicion))" class="boton-pequeño" style="text-align: center;">
								<div style="display: flex; align-items: center; gap: 20px;">
									<img src="@juego.Imagenes.Library_600x900" alt="@juego.Nombre" style="max-width: 100%; max-height: 100%;"/>
								</div>
							</button>
						}
					</div>
				}
			}
		</div>
	}

	@if (id1 > 0 || id2 > 0 || id3 > 0 || id4 > 0)
	{
		<div style="display: flex; align-items: center; gap: 20px;">
			<div style="width: 100%; font-size: 22px;"></div>

			<div style="background-color: var(--fondoOscuro); border: 2px solid var(--fondoBotonPequeño); padding: 10px; display: flex; align-items: center; gap: 20px;">
				@if (id1 > 0)
				{
					<div style="width: 33%; border: 1px solid var(--fondoBotonPequeño);" class="boton-expandir">
						<a href="/game/@juego1.Id.ToString()/@Herramientas.EnlaceAdaptador.Nombre(juego1.Nombre)/">
							<img src="@juego1.Imagenes.Header_460x215" alt="@juego1.Nombre" style="max-width: 100%; max-height: 100%;" />
						</a>
					</div>
				}

				@if (id2 > 0)
				{
					<div style="width: 33%; border: 1px solid var(--fondoBotonPequeño);" class="boton-expandir">
						<a href="/game/@juego2.Id.ToString()/@Herramientas.EnlaceAdaptador.Nombre(juego2.Nombre)/">
							<img src="@juego2.Imagenes.Header_460x215" alt="@juego2.Nombre" style="max-width: 100%; max-height: 100%;" />
						</a>
					</div>
				}

				@if (id3 > 0)
				{
					<div style="width: 33%; border: 1px solid var(--fondoBotonPequeño);" class="boton-expandir">
						<a href="/game/@juego3.Id.ToString()/@Herramientas.EnlaceAdaptador.Nombre(juego3.Nombre)/">
							<img src="@juego3.Imagenes.Header_460x215" alt="@juego3.Nombre" style="max-width: 100%; max-height: 100%;" />
						</a>
					</div>
				}

				@if (id4 > 0)
				{
					<div style="width: 33%; border: 1px solid var(--fondoBotonPequeño);" class="boton-expandir">
						<a href="/game/@juego4.Id.ToString()/@Herramientas.EnlaceAdaptador.Nombre(juego4.Nombre)/">
							<img src="@juego4.Imagenes.Header_460x215" alt="@juego4.Nombre" style="max-width: 100%; max-height: 100%;" />
						</a>
					</div>
				}
			</div>
		</div>
			
		<hr />

	    <div style="background-color: var(--fondoMinimo); border: 2px solid var(--fondoBotonPequeño);"> 
			<div style="display: flex; align-items: center; gap: 20px; padding: 20px; width: 100%;">
				<div style="display: flex; align-items: center; gap: 15px; width: 100%;">
					<img src="@Juegos.JuegoDRM2.SacarImagen(Juegos.JuegoDRM.Steam)" style="max-width: 24px; max-height: 24px;"/>

					@Herramientas.Idiomas.BuscarTexto(idioma, "String8", "Compare")
				</div>

				@if (id1 > 0)
				{
					<div style="width: 33%; display: flex; align-items: center; gap: 10px; justify-content: center;">
						@if (juego1.Analisis != null)
						{
							if (int.Parse(juego1.Analisis.Porcentaje) > 74)
							{
								<img src="/imagenes/analisis/positivo3.svg" style="width: 24px; height: 24px;" alt="Reviews" loading="lazy" />
							}

							if (int.Parse(juego1.Analisis.Porcentaje) > 49 && int.Parse(juego1.Analisis.Porcentaje) < 75)
							{
								<img src="/imagenes/analisis/meh3.svg" style="width: 24px; height: 24px;" alt="Reviews" loading="lazy" />
							}

							if (int.Parse(juego1.Analisis.Porcentaje) < 50)
							{
								<img src="/imagenes/analisis/negativo3.svg" style="width: 24px; height: 24px;" alt="Reviews" loading="lazy" />
							}

							<div>
								@juego1.Analisis.Porcentaje%
							</div>	
						}
					</div>
				}

				@if (id2 > 0)
				{
					<div style="width: 33%; display: flex; align-items: center; gap: 10px; justify-content: center;">
						@if (juego2.Analisis != null)
						{
							if (int.Parse(juego2.Analisis.Porcentaje) > 74)
							{
								<img src="/imagenes/analisis/positivo3.svg" style="width: 24px; height: 24px;" alt="Reviews" loading="lazy" />
							}

							if (int.Parse(juego2.Analisis.Porcentaje) > 49 && int.Parse(juego2.Analisis.Porcentaje) < 75)
							{
								<img src="/imagenes/analisis/meh3.svg" style="width: 24px; height: 24px;" alt="Reviews" loading="lazy" />
							}

							if (int.Parse(juego2.Analisis.Porcentaje) < 50)
							{
								<img src="/imagenes/analisis/negativo3.svg" style="width: 24px; height: 24px;" alt="Reviews" loading="lazy" />
							}

							<div>
								@juego2.Analisis.Porcentaje%
							</div>	
						}
					</div>
				}

				@if (id3 > 0)
				{
					<div style="width: 33%; display: flex; align-items: center; gap: 10px; justify-content: center;">
						@if (juego3.Analisis != null)
						{
							if (int.Parse(juego3.Analisis.Porcentaje) > 74)
							{
								<img src="/imagenes/analisis/positivo3.svg" style="width: 24px; height: 24px;" alt="Reviews" loading="lazy" />
							}

							if (int.Parse(juego3.Analisis.Porcentaje) > 49 && int.Parse(juego3.Analisis.Porcentaje) < 75)
							{
								<img src="/imagenes/analisis/meh3.svg" style="width: 24px; height: 24px;" alt="Reviews" loading="lazy" />
							}

							if (int.Parse(juego3.Analisis.Porcentaje) < 50)
							{
								<img src="/imagenes/analisis/negativo3.svg" style="width: 24px; height: 24px;" alt="Reviews" loading="lazy" />
							}

							<div>
								@juego3.Analisis.Porcentaje%
							</div>	
						}
					</div>
				}

				@if (id4 > 0)
				{
					<div style="width: 33%; display: flex; align-items: center; gap: 10px; justify-content: center;">
						@if (juego4.Analisis != null)
						{
							if (int.Parse(juego4.Analisis.Porcentaje) > 74)
							{
								<img src="/imagenes/analisis/positivo3.svg" style="width: 24px; height: 24px;" alt="Reviews" loading="lazy" />
							}

							if (int.Parse(juego4.Analisis.Porcentaje) > 49 && int.Parse(juego4.Analisis.Porcentaje) < 75)
							{
								<img src="/imagenes/analisis/meh3.svg" style="width: 24px; height: 24px;" alt="Reviews" loading="lazy" />
							}

							if (int.Parse(juego4.Analisis.Porcentaje) < 50)
							{
								<img src="/imagenes/analisis/negativo3.svg" style="width: 24px; height: 24px;" alt="Reviews" loading="lazy" />
							}

							<div>
								@juego4.Analisis.Porcentaje%
							</div>	
						}
					</div>
				}
			</div>

			<div style="display: flex; align-items: center; gap: 20px; padding: 20px; width: 100%;">
				<div style="display: flex; align-items: center; gap: 15px; width: 100%;">
					<img src="@Juegos.JuegoDRM2.SacarImagen(Juegos.JuegoDRM.Steam)" style="max-width: 24px; max-height: 24px;"/>

					@Herramientas.Idiomas.BuscarTexto(idioma, "String7", "Compare")
				</div>

				@if (id1 > 0)
				{
					<div style="width: 33%; text-align: center;">
						@Herramientas.Calculadora.RedondearAnalisis(idioma, juego1.Analisis.Cantidad, false)
					</div>
				}

				@if (id2 > 0)
				{
					<div style="width: 33%; text-align: center;">
						@Herramientas.Calculadora.RedondearAnalisis(idioma, juego2.Analisis.Cantidad, false)
					</div>
				}

				@if (id3 > 0)
				{
					<div style="width: 33%; text-align: center;">
						@Herramientas.Calculadora.RedondearAnalisis(idioma, juego3.Analisis.Cantidad, false)
					</div>
				}

				@if (id4 > 0)
				{
					<div style="width: 33%; text-align: center;">
						@Herramientas.Calculadora.RedondearAnalisis(idioma, juego4.Analisis.Cantidad, false)
					</div>
				}
			</div>

			<div style="display: flex; align-items: center; gap: 20px; padding: 20px; width: 100%;">
				<div style="display: flex; align-items: center; gap: 15px; width: 100%;">
					<img src="@Juegos.JuegoDRM2.SacarImagen(Juegos.JuegoDRM.Steam)" style="max-width: 24px; max-height: 24px;"/>

					@Herramientas.Idiomas.BuscarTexto(idioma, "String9", "Compare")
				</div>

				@if (id1 > 0)
				{
					<div style="width: 33%; text-align: center;">
						@juego1.CantidadJugadores.Cantidad
					</div>
				}

				@if (id2 > 0)
				{
					<div style="width: 33%; text-align: center;">
						@juego2.CantidadJugadores.Cantidad
					</div>
				}

				@if (id3 > 0)
				{
					<div style="width: 33%; text-align: center;">
						@juego3.CantidadJugadores.Cantidad
					</div>
				}

				@if (id4 > 0)
				{
					<div style="width: 33%; text-align: center;">
						@juego4.CantidadJugadores.Cantidad
					</div>
				}
			</div>

			<div style="display: flex; align-items: center; gap: 20px; padding: 20px; width: 100%;">
				<div style="display: flex; align-items: center; gap: 15px; width: 100%; height: 24px;">
					<svg style="display: block; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.84" fill-rule="evenodd" clip-rule="evenodd" d="M7.77715 4.30197C10.9241 4.30197 13.4752 6.85305 13.4752 9.99997C13.4752 13.1469 10.9241 15.698 7.77715 15.698V18.8889C12.6864 18.8889 16.666 14.9092 16.666 9.99997C16.666 5.09078 12.6864 1.11108 7.77715 1.11108V4.30197ZM7.77756 13.8889C9.92533 13.8889 11.6664 12.1477 11.6664 9.99997C11.6664 7.8522 9.92533 6.11108 7.77756 6.11108C5.62979 6.11108 3.88867 7.8522 3.88867 9.99997C3.88867 12.1477 5.62979 13.8889 7.77756 13.8889Z" fill="var(--colorTexto)"></path></svg>

					@Herramientas.Idiomas.BuscarTexto(idioma, "String10", "Compare")
				</div>

				@if (id1 > 0)
				{
					<div style="width: 33%; text-align: center; height: 24px;">
						@if (juego1.Deck == Juegos.JuegoDeck.Verificado)
		                {
			                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.33342 11.9222L14.4945 5.76667L16.4556 7.72779L8.33342 15.8556L3.26675 10.7833L5.22786 8.82223L8.33342 11.9222Z" fill="var(--deckVerificado)"></path></svg>
		                }

		                @if (juego1.Deck == Juegos.JuegoDeck.Jugable)
		                {
			                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.61079 9.44444V15H11.3886V9.44444H8.61079ZM9.07372 8.05245C9.34781 8.23558 9.67004 8.33333 9.99967 8.33333C10.4417 8.33333 10.8656 8.15774 11.1782 7.84518C11.4907 7.53262 11.6663 7.10869 11.6663 6.66667C11.6663 6.33703 11.5686 6.0148 11.3855 5.74072C11.2023 5.46663 10.942 5.25301 10.6375 5.12687C10.3329 5.00072 9.99783 4.96771 9.67452 5.03202C9.35122 5.09633 9.05425 5.25507 8.82116 5.48815C8.58808 5.72124 8.42934 6.01821 8.36503 6.34152C8.30072 6.66482 8.33373 6.99993 8.45988 7.30447C8.58602 7.60902 8.79964 7.86931 9.07372 8.05245Z" fill="var(--deckJugable)"></path></svg>
		                }

				        @if (juego1.Deck == Juegos.JuegoDeck.NoSoportado)
		                {
			                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M14.193 15.606a7 7 0 0 1-9.799-9.799l9.8 9.8Zm1.414-1.414a7 7 0 0 0-9.799-9.799l9.8 9.8ZM19.001 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" fill="var(--colorTexto)"></path></svg>
		                }
					</div>
				}

				@if (id2 > 0)
				{
							<div style="width: 33%; text-align: center; height: 20px;">
						@if (juego2.Deck == Juegos.JuegoDeck.Verificado)
		                {
			                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.33342 11.9222L14.4945 5.76667L16.4556 7.72779L8.33342 15.8556L3.26675 10.7833L5.22786 8.82223L8.33342 11.9222Z" fill="var(--deckVerificado)"></path></svg>
		                }

		                @if (juego2.Deck == Juegos.JuegoDeck.Jugable)
		                {
			                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.61079 9.44444V15H11.3886V9.44444H8.61079ZM9.07372 8.05245C9.34781 8.23558 9.67004 8.33333 9.99967 8.33333C10.4417 8.33333 10.8656 8.15774 11.1782 7.84518C11.4907 7.53262 11.6663 7.10869 11.6663 6.66667C11.6663 6.33703 11.5686 6.0148 11.3855 5.74072C11.2023 5.46663 10.942 5.25301 10.6375 5.12687C10.3329 5.00072 9.99783 4.96771 9.67452 5.03202C9.35122 5.09633 9.05425 5.25507 8.82116 5.48815C8.58808 5.72124 8.42934 6.01821 8.36503 6.34152C8.30072 6.66482 8.33373 6.99993 8.45988 7.30447C8.58602 7.60902 8.79964 7.86931 9.07372 8.05245Z" fill="var(--deckJugable)"></path></svg>
		                }

		                @if (juego2.Deck == Juegos.JuegoDeck.NoSoportado)
		                {
			                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M14.193 15.606a7 7 0 0 1-9.799-9.799l9.8 9.8Zm1.414-1.414a7 7 0 0 0-9.799-9.799l9.8 9.8ZM19.001 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" fill="var(--colorTexto)"></path></svg>
		                }
					</div>
				}

				@if (id3 > 0)
				{
							<div style="width: 33%; text-align: center; height: 20px;">
						@if (juego3.Deck == Juegos.JuegoDeck.Verificado)
		                {
			                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.33342 11.9222L14.4945 5.76667L16.4556 7.72779L8.33342 15.8556L3.26675 10.7833L5.22786 8.82223L8.33342 11.9222Z" fill="var(--deckVerificado)"></path></svg>
		                }

		                @if (juego3.Deck == Juegos.JuegoDeck.Jugable)
		                {
			                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.61079 9.44444V15H11.3886V9.44444H8.61079ZM9.07372 8.05245C9.34781 8.23558 9.67004 8.33333 9.99967 8.33333C10.4417 8.33333 10.8656 8.15774 11.1782 7.84518C11.4907 7.53262 11.6663 7.10869 11.6663 6.66667C11.6663 6.33703 11.5686 6.0148 11.3855 5.74072C11.2023 5.46663 10.942 5.25301 10.6375 5.12687C10.3329 5.00072 9.99783 4.96771 9.67452 5.03202C9.35122 5.09633 9.05425 5.25507 8.82116 5.48815C8.58808 5.72124 8.42934 6.01821 8.36503 6.34152C8.30072 6.66482 8.33373 6.99993 8.45988 7.30447C8.58602 7.60902 8.79964 7.86931 9.07372 8.05245Z" fill="var(--deckJugable)"></path></svg>
		                }

		                @if (juego3.Deck == Juegos.JuegoDeck.NoSoportado)
		                {
			                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M14.193 15.606a7 7 0 0 1-9.799-9.799l9.8 9.8Zm1.414-1.414a7 7 0 0 0-9.799-9.799l9.8 9.8ZM19.001 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" fill="var(--colorTexto)"></path></svg>
		                }
					</div>
				}

				@if (id4 > 0)
				{
							<div style="width: 33%; text-align: center; height: 20px;">
						@if (juego4.Deck == Juegos.JuegoDeck.Verificado)
		                {
			                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.33342 11.9222L14.4945 5.76667L16.4556 7.72779L8.33342 15.8556L3.26675 10.7833L5.22786 8.82223L8.33342 11.9222Z" fill="var(--deckVerificado)"></path></svg>
		                }

		                @if (juego4.Deck == Juegos.JuegoDeck.Jugable)
		                {
			                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.61079 9.44444V15H11.3886V9.44444H8.61079ZM9.07372 8.05245C9.34781 8.23558 9.67004 8.33333 9.99967 8.33333C10.4417 8.33333 10.8656 8.15774 11.1782 7.84518C11.4907 7.53262 11.6663 7.10869 11.6663 6.66667C11.6663 6.33703 11.5686 6.0148 11.3855 5.74072C11.2023 5.46663 10.942 5.25301 10.6375 5.12687C10.3329 5.00072 9.99783 4.96771 9.67452 5.03202C9.35122 5.09633 9.05425 5.25507 8.82116 5.48815C8.58808 5.72124 8.42934 6.01821 8.36503 6.34152C8.30072 6.66482 8.33373 6.99993 8.45988 7.30447C8.58602 7.60902 8.79964 7.86931 9.07372 8.05245Z" fill="var(--deckJugable)"></path></svg>
		                }

				        @if (juego4.Deck == Juegos.JuegoDeck.NoSoportado)
		                {
			                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M14.193 15.606a7 7 0 0 1-9.799-9.799l9.8 9.8Zm1.414-1.414a7 7 0 0 0-9.799-9.799l9.8 9.8ZM19.001 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" fill="var(--colorTexto)"></path></svg>
		                }
					</div>
				}
			</div>
		</div>
		

	}
</div>

@code {

    #nullable disable

    [Parameter]
    public string idioma { get; set; }

	#nullable enable
    [Parameter]
    public string? ids { get; set; }
	#nullable disable

    [Parameter]
    public string usuarioId { get; set; }

    [Parameter]
    public bool usuarioLogeado { get; set; }

    public int id1 = 0;
    public int id2 = 0;
    public int id3 = 0;
    public int id4 = 0;

    public Juegos.Juego juego1 = null;
    public Juegos.Juego juego2 = null;
    public Juegos.Juego juego3 = null;
    public Juegos.Juego juego4 = null;

    public List<Juegos.Juego> resultadosBuscador = new List<Juegos.Juego>();

    private Usuario usuario = new Usuario();

    private SqlConnection conexion = new SqlConnection();

    protected override async Task OnInitializedAsync()
    {
        usuario = await UserManager.FindByIdAsync(usuarioId);		

        if (string.IsNullOrEmpty(ids) == false)
        {
            string[] ids2 = ids.Split(',');

            if (ids2.Length == 1)
            {
                id1 = int.Parse(ids2[0]);
            }
            else if (ids2.Length == 2)
            {
                id1 = int.Parse(ids2[0]);
                id2 = int.Parse(ids2[1]);
            }
            else if (ids2.Length == 3)
            {
                id1 = int.Parse(ids2[0]);
                id2 = int.Parse(ids2[1]);
                id3 = int.Parse(ids2[2]);
            }
            else if (ids2.Length > 3)
            {
                id1 = int.Parse(ids2[0]);
                id2 = int.Parse(ids2[1]);
                id3 = int.Parse(ids2[2]);
                id4 = int.Parse(ids2[3]);
            }

            if (id1 > 0)
            {
                juego1 = BaseDatos.Juegos.Buscar.UnJuego(id1);
                ActualizarCantidadJugadores(juego1);
            }

            if (id2 > 0)
            {
                juego2 = BaseDatos.Juegos.Buscar.UnJuego(id2);
				ActualizarCantidadJugadores(juego2);
            }

            if (id3 > 0)
            {
                juego3 = BaseDatos.Juegos.Buscar.UnJuego(id3);
				ActualizarCantidadJugadores(juego3);
            }

            if (id4 > 0)
            {
                juego4 = BaseDatos.Juegos.Buscar.UnJuego(id4);
				ActualizarCantidadJugadores(juego4);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool primerRender)
    {
        if (primerRender == true)
        {
            if (id1 > 0 && id2 == 0 && id3 == 0 && id4 == 0)
            {
                await JavaScript.InvokeVoidAsync("ChangeUrl", "/compare/" + id1.ToString() + "/");
            }
            else if (id1 > 0 && id2 > 0 && id3 == 0 && id4 == 0)
            {
                await JavaScript.InvokeVoidAsync("ChangeUrl", "/compare/" + id1.ToString() + "," + id2.ToString() + "/");
            }
            else if (id1 > 0 && id2 > 0 && id3 > 0 && id4 == 0)
            {
                await JavaScript.InvokeVoidAsync("ChangeUrl", "/compare/" + id1.ToString() + "," + id2.ToString() + "," + id3.ToString() + "/");
            }
            else if (id1 > 0 && id2 > 0 && id3 > 0 && id4 > 0)
            {
                await JavaScript.InvokeVoidAsync("ChangeUrl", "/compare/" + id1.ToString() + "," + id2.ToString() + "," + id3.ToString() + "," + id4.ToString() + "/");
            }
        }
    }

    private async void ActualizarCantidadJugadores(Juegos.Juego juego)
    {
        if (juego != null)
        {
            bool actualizarCantidadJugadores = false;

            if (juego.CantidadJugadores == null)
            {
                actualizarCantidadJugadores = true;
            }
            else
            {
                if (juego.CantidadJugadores.Fecha.AddMinutes(5) < DateTime.Now)
                {
                    actualizarCantidadJugadores = true;
                }
            }

            if (actualizarCantidadJugadores == true)
            {
				Juegos.JuegoCantidadJugadoresSteam cantidadNueva = new Juegos.JuegoCantidadJugadoresSteam();
                cantidadNueva.Cantidad = await APIs.Steam.Juego.CargarCantidadJugadores(juego.IdSteam.ToString());
				cantidadNueva.Fecha = DateTime.Now;

				juego.CantidadJugadores = cantidadNueva;

				global::BaseDatos.Juegos.Actualizar.CantidadJugadoresSteam(juego);
			}
        }
    }

	private void TextoCambiarBuscadorJuego(ChangeEventArgs texto)
	{
		if (texto.Value.ToString().Trim().Length > 2)
		{
			if (conexion == null)
			{
				conexion = Herramientas.BaseDatos.Conectar();
			}
			else
			{
				if (conexion.State != System.Data.ConnectionState.Open)
				{
					conexion = Herramientas.BaseDatos.Conectar();
				}
			}

			string cadenaBusqueda = texto.Value.ToString().Trim();
			resultadosBuscador = BaseDatos.Juegos.Buscar.Nombre(cadenaBusqueda, conexion, 50, false, 0, usuarioLogeado);

			if (resultadosBuscador.Count > 0)
			{
				if (id1 > 0 || id2 > 0 || id3 > 0)
				{
                    resultadosBuscador.RemoveAll(x => x.Id == id1 || x.Id == id2 || x.Id == id3);
				}
			}
		}
	}

	private async void ClickearIdJuego(MouseEventArgs e, string id, int posicion)
	{
		resultadosBuscador.Clear();

		if (posicion == 1)
		{
			id1 = int.Parse(id);
			juego1 = BaseDatos.Juegos.Buscar.UnJuego(id1);
		}
		else if (posicion == 2)
		{
			id2 = int.Parse(id);
			juego2 = BaseDatos.Juegos.Buscar.UnJuego(id2);
		}
		else if (posicion == 3)
		{
			id3 = int.Parse(id);
			juego3 = BaseDatos.Juegos.Buscar.UnJuego(id3);
		}
		else if (posicion == 4)
		{
			id4 = int.Parse(id);
			juego4 = BaseDatos.Juegos.Buscar.UnJuego(id4);
		}

		if (id1 > 0 && id2 == 0 && id3 == 0 && id4 == 0)
		{
			await JavaScript.InvokeVoidAsync("ChangeUrl", "/compare/" + id1.ToString() + "/");
		}
		else if (id1 > 0 && id2 > 0 && id3 == 0 && id4 == 0)
		{
			await JavaScript.InvokeVoidAsync("ChangeUrl", "/compare/" + id1.ToString() + "," + id2.ToString() + "/");
		}
		else if (id1 > 0 && id2 > 0 && id3 > 0 && id4 == 0)
		{
			await JavaScript.InvokeVoidAsync("ChangeUrl", "/compare/" + id1.ToString() + "," + id2.ToString() + "," + id3.ToString() + "/");
		}
		else if (id1 > 0 && id2 > 0 && id3 > 0 && id4 > 0)
		{
			await JavaScript.InvokeVoidAsync("ChangeUrl", "/compare/" + id1.ToString() + "," + id2.ToString() + "," + id3.ToString() + "," + id4.ToString() + "/");
		}
	}

	private void ClickearAbrirJuego(MouseEventArgs e, int id)
	{
		NavManager.NavigateTo("/game/" + id.ToString() + "/", true);
	}
}
