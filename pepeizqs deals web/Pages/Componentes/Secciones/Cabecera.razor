@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.Razor;
@using Microsoft.Data.SqlClient;
@using pepeizqs_deals_web.Areas.Identity.Data

@inherits Juegos.Juego

@inject NavigationManager NavManager

<style>
    .buscador-panel {
        height: calc(100% - var(--alturaCabecera));
        width: 100%;
        left: 0;
        top: 0;
        overflow-x: auto;
        position: fixed;
        z-index: 1000;
        margin-top: var(--alturaCabecera);
        padding: 10px;
        backdrop-filter: blur(20px);
    }
</style>

<div class="menu-dropdown">
    <button class="texto-cabecera" style="border: 0px; margin-left: 0px; margin-right: 30px;">
        <i class="fa-solid fa-bars" style="font-size: 20px; line-height: 40px;"></i>
    </button>
    
    @if (resultados.Count == 0)
    {
        <div class="menu-dropdown-contenido">
            @if (usuarioLogeado == true)
            {
                <button class="texto-cabecera menu-dropdown-item" @onclick="@(e => AbrirCuenta(e))" style="text-align: left; border: 0; width: 100%;">
                    <div style="display: flex; align-items: center;">
                        @if (string.IsNullOrEmpty(usuarioAvatar) == true)
                        {
                            <div>@usuarioEmail</div>
                        }
                        else
                        {
                            @if (usuarioAvatar.ToLower().Contains(".jpg") == true || usuarioAvatar.ToLower().Contains(".jpeg") == true || usuarioAvatar.ToLower().Contains(".png") == true || usuarioAvatar.ToLower().Contains(".webp") == true)
                            {
                                <img src="@usuarioAvatar" style="max-height: 32px; max-width: 32px;" />
                                <div style="margin-left: 15px;">@Herramientas.Idiomas.CogerCadena(idioma, "Account", "Header")</div>
                            }
                            else
                            {
                                <div>@usuarioEmail</div>
                            }
                        }
                    </div>
                </button>

                <a class="texto-cabecera menu-dropdown-item" href="/wishlist">
                    @Herramientas.Idiomas.CogerCadena(idioma, "Wishlist", "Header")
                </a>

                <button @onclick="@(e => Desconectar(e))" class="texto-cabecera menu-dropdown-item" style="text-align: left; border: 0; width: 100%;">
                    @Herramientas.Idiomas.CogerCadena(idioma, "Logout", "Header")
                </button>
            }
            else
            {
                <button class="texto-cabecera menu-dropdown-item" @onclick="@(e => AbrirLogin(e))" style="text-align: left; border: 0; width: 100%;">
                    @Herramientas.Idiomas.CogerCadena(idioma, "Login", "Header")
                </button>

                <button class="texto-cabecera menu-dropdown-item" @onclick="@(e => AbrirRegistro(e))" style="text-align: left; border: 0; width: 100%;">
                    @Herramientas.Idiomas.CogerCadena(idioma, "Register", "Header")
                </button>
            }

            <hr>

            <a class="texto-cabecera menu-dropdown-item" href="/historical-lows">
                @Herramientas.Idiomas.CogerCadena(idioma, "HistoricalLows", "Header")
            </a>
            <a class="texto-cabecera menu-dropdown-item" href="/bundles">
                @Herramientas.Idiomas.CogerCadena(idioma, "Bundles", "Header")
            </a>
            <a class="texto-cabecera menu-dropdown-item" href="/free">
                @Herramientas.Idiomas.CogerCadena(idioma, "Free", "Header")
            </a>
            <a class="texto-cabecera menu-dropdown-item" href="/subscriptions">
                @Herramientas.Idiomas.CogerCadena(idioma, "Subscriptions", "Header")
            </a>
            <hr>
            <a class="texto-cabecera menu-dropdown-item" href="/giveaways">
                @Herramientas.Idiomas.CogerCadena(idioma, "Giveaways", "Header")
            </a>
            <hr>
            <a class="texto-cabecera menu-dropdown-item" href="/last-news">
                @Herramientas.Idiomas.CogerCadena(idioma, "LastNews", "Header")
            </a>
            <a class="texto-cabecera menu-dropdown-item" href="/last-added">
                @Herramientas.Idiomas.CogerCadena(idioma, "LastAdded", "Header")
            </a>
        </div>
    }   
</div>

<a href="/" class="texto-logo" style="background-color: transparent; border: 0;">
    pepeizq's deals
</a>

<div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
    <ul class="navbar-nav flex-grow-1" style="align-items: center; margin-top: 0px;">
        @if (adminLogeado == true && resultados.Count == 0)
        {
            <pepeizqs_deals_web.Pages.Componentes.Admin.Maestro />
        }

        <li class="nav-item">
            <div style="display: flex; flex-direction: row; align-items: center;">
                <i class="fa-solid fa-magnifying-glass" style="margin-right: 20px;"></i>
                <input type="text" @oninput="TextoCambiaBuscador" class="entrada-texto" style="min-width: 50px;" placeholder="@Herramientas.Idiomas.CogerCadena(idioma, "SearchPlaceholder", "Header")" />

                @if (resultados != null)
                {
                    if (resultados.Count > 0)
                    {
                        <div class="buscador-panel" style="display: flex; align-items: start;">
                            <div style="width: 20%; padding-right: 20px;">
                                @if (resultadosJuegos.Count > 0)
                                {
                                    <button @onclick="@(e => CambiarPestaña(e, Juegos.JuegoTipo.Game))" class="boton-pequeño" style="padding: 12px 15px; font-size: 16px; margin-top: 10px;">
                                        @Herramientas.Idiomas.CogerCadena(idioma, "SearchFilter1", "Header") (@resultadosJuegos.Count)
                                    </button>
                                }

                                @if (resultadosDLCs.Count > 0)
                                {
                                    <button @onclick="@(e => CambiarPestaña(e, Juegos.JuegoTipo.DLC))" class="boton-pequeño" style="padding: 12px 15px; font-size: 16px; margin-top: 10px;">
                                        @Herramientas.Idiomas.CogerCadena(idioma, "SearchFilter2", "Header") (@resultadosDLCs.Count)
                                    </button>
                                }

                                @if (resultadosBandasSonoras.Count > 0)
                                {
                                    <button @onclick="@(e => CambiarPestaña(e, Juegos.JuegoTipo.Music))" class="boton-pequeño" style="padding: 12px 15px; font-size: 16px; margin-top: 10px;">
                                        @Herramientas.Idiomas.CogerCadena(idioma, "SearchFilter3", "Header") (@resultadosBandasSonoras.Count)
                                    </button>
                                }

                                @if (resultadosSoftware.Count > 0)
                                {
                                    <button @onclick="@(e => CambiarPestaña(e, Juegos.JuegoTipo.Software))" class="boton-pequeño" style="padding: 12px 15px; font-size: 16px; margin-top: 10px;">
                                        @Herramientas.Idiomas.CogerCadena(idioma, "SearchFilter4", "Header") (@resultadosSoftware.Count)
                                    </button>
                                }
                            </div>

                            <div style="width: 80%; padding-right: 10px;">
                                @{
                                    List<Juegos.Juego> resultadosFinal = new List<Juegos.Juego>();

                                    if (pestañaSeleccionada == Juegos.JuegoTipo.Game && resultadosJuegos.Count > 0)
                                    {
                                        resultadosFinal = resultadosJuegos;
                                    }
                                    else if (pestañaSeleccionada == Juegos.JuegoTipo.DLC && resultadosDLCs.Count > 0)
                                    {
                                        resultadosFinal = resultadosDLCs;
                                    }
                                    else if (pestañaSeleccionada == Juegos.JuegoTipo.Music && resultadosBandasSonoras.Count > 0)
                                    {
                                        resultadosFinal = resultadosBandasSonoras;
                                    }
                                    else if (pestañaSeleccionada == Juegos.JuegoTipo.Software && resultadosSoftware.Count > 0)
                                    {
                                        resultadosFinal = resultadosSoftware;
                                    }

                                    <Virtualize Context="juego" Items="resultadosFinal" ItemSize="117" OverscanCount="6">
				                        <ItemContent>
                                            <div class="perfil-flexible-centrado" style="padding-top: 10px;">
                                                <a class="boton-pequeño" href="/game/@juego.Id/@Herramientas.EnlaceAdaptador.Nombre(juego.Nombre)/" style="padding: 0px;">
                                                    <div class="perfil-flexible-centrado">
                                                        <div>
                                                            <img src="@juego.Imagenes.Header_460x215" style="width: 230px; height: 107px;" />
                                                        </div>

                                                        <div style="width: 100%; padding-left: 15px; padding-right: 15px;">
                                                            @juego.Nombre
                                                        </div>

                                                        <div style="padding: 20px; min-width: 200px; text-align: center;">
                                                            @GenerarMensaje(juego)
                                                        </div>
                                                    </div>
                                                </a>
                                            </div>
					                    </ItemContent>
					                </Virtualize>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
        </li>
    </ul>
</div>

<div class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse">
   
</div>

@code {

    #nullable disable

    [Parameter]
    public string idioma { get; set; }

    [Parameter]
    public bool usuarioLogeado { get; set; }

    [Parameter]
    public bool adminLogeado { get; set; }

    [Parameter]
    public string usuarioAvatar { get; set; }

    [Parameter]
    public string usuarioEmail { get; set; }

    private SqlConnection conexion = new SqlConnection();

    private List<Juegos.Juego> resultados = new List<Juegos.Juego>();
    private List<Juegos.Juego> resultadosJuegos = new List<Juegos.Juego>();
    private List<Juegos.Juego> resultadosDLCs = new List<Juegos.Juego>();
    private List<Juegos.Juego> resultadosBandasSonoras = new List<Juegos.Juego>();
    private List<Juegos.Juego> resultadosSoftware = new List<Juegos.Juego>();

    private Task<List<Juegos.Juego>> tarea;

    private void Inicio(MouseEventArgs e)
    {
        NavManager.NavigateTo("/", true);
    }

    private void Desconectar(MouseEventArgs e)
    {
        NavManager.NavigateTo("/account/logout", true, false);
    }

    #region Buscador

    private string buscando = string.Empty;

    private void TextoCambiaBuscador(ChangeEventArgs texto)
    {
        List<Juegos.Juego> resultadosBuscador = new List<Juegos.Juego>();

        if (texto.Value.ToString().Trim().Length > 1)
        {
            if (conexion.State != System.Data.ConnectionState.Open)
            {
                conexion = Herramientas.BaseDatos.Conectar();
            }

            using (conexion)
            {
                if ((tarea != null) && (tarea.IsCompleted == false ||
                                               tarea.Status == TaskStatus.Running ||
                                               tarea.Status == TaskStatus.WaitingToRun ||
                                               tarea.Status == TaskStatus.WaitingForActivation))
                {
                    tarea.Dispose();
                    resultadosBuscador = new List<Juegos.Juego>();
                }
                else
                {
                    tarea = Task.Factory.StartNew(() =>
                    {
                        List<Juegos.Juego> resultados2 = new List<Juegos.Juego>();

                        resultados2 = BaseDatos.Juegos.Buscar.Nombre(texto.Value.ToString().Trim(), conexion, 100);

                        return resultados2;
                    });

                    resultadosBuscador = tarea.Result;
                }
            }

            if (resultadosBuscador != null)
            {
                pestañaSeleccionada = Juegos.JuegoTipo.Game;

                resultados.Clear();
                resultadosJuegos.Clear();
                resultadosDLCs.Clear();
                resultadosBandasSonoras.Clear();
                resultadosSoftware.Clear();

                resultados = resultadosBuscador;

                if (resultadosBuscador.Count > 0)
                {
                    foreach (var resultado in resultadosBuscador)
                    {
                        if (resultado.Tipo == Juegos.JuegoTipo.Game)
                        {
                            resultadosJuegos.Add(resultado);
                        }
                        else if (resultado.Tipo == Juegos.JuegoTipo.DLC)
                        {
                            resultadosDLCs.Add(resultado);
                        }
                        else if (resultado.Tipo == Juegos.JuegoTipo.Music)
                        {
                            resultadosBandasSonoras.Add(resultado);
                        }
                        else if (resultado.Tipo == Juegos.JuegoTipo.Software)
                        {
                            resultadosSoftware.Add(resultado);
                        }
                    }

                    if (resultadosJuegos.Count > 0)
                    {
                        pestañaSeleccionada = Juegos.JuegoTipo.Game;

                        resultadosJuegos = resultadosJuegos.Where(x => x.Analisis != null).Where(x => x.Analisis.Cantidad != null).OrderByDescending(x => int.Parse(x.Analisis.Cantidad.Replace(",", null))).ThenBy(x => x.NombreCodigo.IndexOf(Herramientas.Buscador.LimpiarNombre(texto.Value.ToString().Trim())) > 0).Concat(resultadosJuegos.Where(x => x.Analisis == null)).ToList();
                    }

                    if (resultadosDLCs.Count > 0)
                    {
                        if (resultadosJuegos.Count == 0)
                        {
                            pestañaSeleccionada = Juegos.JuegoTipo.DLC;
                        }

                        resultadosDLCs = resultadosDLCs.Where(x => x.Analisis != null).Where(x => x.Analisis.Cantidad != null).OrderByDescending(x => int.Parse(x.Analisis.Cantidad.Replace(",", null))).ThenBy(x => x.NombreCodigo.IndexOf(Herramientas.Buscador.LimpiarNombre(texto.Value.ToString().Trim())) > 0).Concat(resultadosDLCs.Where(x => x.Analisis == null)).ToList();
                    }

                    if (resultadosBandasSonoras.Count > 0)
                    {
                        if (resultadosJuegos.Count == 0 && resultadosDLCs.Count == 0)
                        {
                            pestañaSeleccionada = Juegos.JuegoTipo.Music;
                        }

                        resultadosBandasSonoras = resultadosBandasSonoras.Where(x => x.Analisis != null).Where(x => x.Analisis.Cantidad != null).OrderByDescending(x => int.Parse(x.Analisis.Cantidad.Replace(",", null))).ThenBy(x => x.NombreCodigo.IndexOf(Herramientas.Buscador.LimpiarNombre(texto.Value.ToString().Trim())) > 0).Concat(resultadosBandasSonoras.Where(x => x.Analisis == null)).ToList();
                    }

                    if (resultadosSoftware.Count > 0)
                    {
                        if (resultadosJuegos.Count == 0 && resultadosDLCs.Count == 0 && resultadosBandasSonoras.Count == 0)
                        {
                            pestañaSeleccionada = Juegos.JuegoTipo.Software;
                        }

                        resultadosSoftware = resultadosSoftware.Where(x => x.Analisis != null).Where(x => x.Analisis.Cantidad != null).OrderByDescending(x => int.Parse(x.Analisis.Cantidad.Replace(",", null))).ThenBy(x => x.NombreCodigo.IndexOf(Herramientas.Buscador.LimpiarNombre(texto.Value.ToString().Trim())) > 0).Concat(resultadosSoftware.Where(x => x.Analisis == null)).ToList();
                    }
                }
            }
        }
        else
        {
            resultadosBuscador = new List<Juegos.Juego>();
            resultados = new List<Juegos.Juego>();
        }   
    }

    private string GenerarMensaje(Juegos.Juego juego)
    {
        string mensaje = string.Empty;

        if (string.IsNullOrEmpty(juego.FreeToPlay) == false)
        {
            if (juego.FreeToPlay.ToLower() == "true")
            {
                return Herramientas.Idiomas.CogerCadena(idioma, "SearchMessage6", "Header");
            }
        }

        if (juego.Gratis != null)
        {
            if (juego.Gratis.Count > 0)
            {
                foreach (var gratis in juego.Gratis)
                {
                    if (DateTime.Now >= gratis.FechaEmpieza && DateTime.Now <= gratis.FechaTermina)
                    {
                        return Herramientas.Idiomas.CogerCadena(idioma, "SearchMessage5", "Header");
                    }
                }
            }
        }

        if (juego.Bundles != null)
        {
            if (juego.Bundles.Count > 0)
            {
                foreach (var bundle in juego.Bundles)
                {
                    if (DateTime.Now >= bundle.FechaEmpieza && DateTime.Now <= bundle.FechaTermina)
                    {
                        return Herramientas.Idiomas.CogerCadena(idioma, "SearchMessage4", "Header");
                    }
                }
            }
        }

        if (juego.Suscripciones != null)
        {
            if (juego.Suscripciones.Count > 0)
            {
                foreach (var suscripcion in juego.Suscripciones)
                {
                    if (DateTime.Now >= suscripcion.FechaEmpieza && DateTime.Now <= suscripcion.FechaTermina)
                    {
                        return Herramientas.Idiomas.CogerCadena(idioma, "SearchMessage3", "Header");
                    }
                }
            }
        }

        decimal minimoCantidad = 10000000;
        Juegos.JuegoPrecio minimoFinal = new Juegos.JuegoPrecio();

        if (juego.PrecioActualesTiendas != null)
        {
            foreach (var oferta in juego.PrecioActualesTiendas)
            {
                bool drmAdecuado = true;

                if (oferta.DRM == Juegos.JuegoDRM.NoEspecificado)
                {
                    drmAdecuado = false;
                }
                else if (oferta.DRM == Juegos.JuegoDRM.Microsoft)
                {
                    drmAdecuado = false;
                }

                if (drmAdecuado == true)
                {
                    TimeSpan actualizado = DateTime.Now.Subtract(oferta.FechaActualizacion);

                    if (actualizado.Days == 0)
                    {
                        decimal tempPrecio = oferta.Precio;

                        if (oferta.Moneda != Herramientas.JuegoMoneda.Euro)
                        {
                            tempPrecio = Herramientas.Divisas.Cambio(tempPrecio, oferta.Moneda);
                        }

                        if (tempPrecio < minimoCantidad)
                        {
                            minimoCantidad = tempPrecio;
                        }
                    }
                }
            }
        }      

        if (minimoCantidad > 0 && minimoCantidad < 10000000)
        {
            string precioTexto = string.Empty;

            precioTexto = minimoCantidad.ToString();
            precioTexto = precioTexto.Replace(".", ",");

            int int1 = precioTexto.IndexOf(",");

            if (int1 == precioTexto.Length - 2)
            {
                precioTexto = precioTexto + "0";
            }

            precioTexto = precioTexto + "€";

            return string.Format(Herramientas.Idiomas.CogerCadena(idioma, "SearchMessage1", "Header"), precioTexto);
        }
        else
        {
            return Herramientas.Idiomas.CogerCadena(idioma, "SearchMessage2", "Header");
        }
    }

    Juegos.JuegoTipo pestañaSeleccionada = Juegos.JuegoTipo.Game;

    private void CambiarPestaña(MouseEventArgs e, Juegos.JuegoTipo pestaña)
    {
        pestañaSeleccionada = pestaña;
    }

    #endregion

    private void AbrirLogin(MouseEventArgs e)
    {
        NavManager.NavigateTo("/account/login", true);
    }

    private void AbrirRegistro(MouseEventArgs e)
    {
        NavManager.NavigateTo("/account/register", true);
    }

    private void AbrirCuenta(MouseEventArgs e)
    {
        NavManager.NavigateTo("/account", true);
    }
}

