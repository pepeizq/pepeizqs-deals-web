@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.Razor;
@using Microsoft.Data.SqlClient;
@using pepeizqs_deals_web.Areas.Identity.Data

@inherits Juegos.Juego

@inject NavigationManager NavManager

<style>
    .buscador-panel {
        height: calc(100% - var(--alturaCabecera));
        width: 100%;
        left: 0;
        top: 0;
        overflow-x: auto;
        position: fixed;
        z-index: 1000;
        margin-top: var(--alturaCabecera);
        padding: 10px;
        backdrop-filter: blur(50px);
    }

    .boton-superior {
        display: block;
        padding: 6px 12px;
        margin: 0px;
        transition: transform .2s;
    }

        .boton-superior:hover {
            transform: scale(1.01);
        }

    @@media (max-width: 800px) {
        .boton-superior {
            float: none;
        }
    }

    .botones-superiores {
        display: flex;
    }

    @@media (max-width: 1000px) {
        .botones-superiores {
            display: none;
        }
    }

    .botones-superiores2 {
        display: none;
    }

    @@media (max-width: 1000px) {
        .botones-superiores2 {
            display: flex;
        }
    }
</style>

<a href="/" class="texto-logo" style="background-color: transparent; border: 0; flex: 1 auto 1;">
    pepeizq's deals
</a>

<div style="display: flex; align-items: center; gap: 10px; flex: 1 1 auto;">

    @if (adminLogeado == true && ubicacionEnlace.Contains("/admin") == false)
    {
        <a class="texto-cabecera boton-superior" href="/admin" style="font-size: 15px;">
            @adminMensaje
        </a>
    }

    @if (enseñarBuscador == false)
    {
        <button class="texto-cabecera boton-superior" @onclick="@(e => MostrarBuscador(e))" style="cursor: pointer; border: 0px;">
            <i class="fa-solid fa-magnifying-glass"></i>
        </button>

        <div class="botones-superiores">
            @if (usuarioLogeado == true)
            {
                if (ubicacionEnlace.Contains("/wishlist") == false)
                {
                    <a class="texto-cabecera boton-superior" href="/wishlist" style="font-size: 15px;">
                        @Herramientas.Idiomas.CogerCadena(idioma, "Wishlist", "Header")
                    </a>
                }
            }

            @if (ubicacionEnlace.Contains("/historical-lows") == false)
            {
                <a class="texto-cabecera boton-superior" href="/historical-lows" style="font-size: 15px;">
                    @Herramientas.Idiomas.CogerCadena(idioma, "HistoricalLows", "Header")
                </a>
            }

            @if (ubicacionEnlace.Contains("/bundles") == false)
            {
                <a class="texto-cabecera boton-superior" href="/bundles" style="font-size: 15px;">
                    @Herramientas.Idiomas.CogerCadena(idioma, "Bundles", "Header")
                </a>
            }

            @if (ubicacionEnlace.Contains("/free") == false)
            {
                <a class="texto-cabecera boton-superior" href="/free" style="font-size: 15px;">
                    @Herramientas.Idiomas.CogerCadena(idioma, "Free", "Header")
                </a>
            }

            @if (ubicacionEnlace.Contains("/subscriptions") == false)
            {
                <a class="texto-cabecera boton-superior" href="/subscriptions" style="font-size: 15px;">
                    @Herramientas.Idiomas.CogerCadena(idioma, "Subscriptions", "Header")
                </a>
            }
        </div>

        <div class="botones-superiores2" style="cursor: pointer;">
            <div class="menu-dropdown">
                <i class="fa-solid fa-bars"></i>

                <div class="menu-dropdown-contenido">
                    @if (usuarioLogeado == true)
                    {
                        if (ubicacionEnlace.Contains("/wishlist") == false)
                        {
                            <a class="texto-cabecera boton-superior" href="/wishlist" style="font-size: 15px;">
                                @Herramientas.Idiomas.CogerCadena(idioma, "Wishlist", "Header")
                            </a>
                        }
                    }

                    @if (ubicacionEnlace.Contains("/historical-lows") == false)
                    {
                        <a class="texto-cabecera boton-superior" href="/historical-lows" style="font-size: 15px;">
                            @Herramientas.Idiomas.CogerCadena(idioma, "HistoricalLows", "Header")
                        </a>
                    }

                    @if (ubicacionEnlace.Contains("/bundles") == false)
                    {
                        <a class="texto-cabecera boton-superior" href="/bundles" style="font-size: 15px;">
                            @Herramientas.Idiomas.CogerCadena(idioma, "Bundles", "Header")
                        </a>
                    }

                    @if (ubicacionEnlace.Contains("/free") == false)
                    {
                        <a class="texto-cabecera boton-superior" href="/free" style="font-size: 15px;">
                            @Herramientas.Idiomas.CogerCadena(idioma, "Free", "Header")
                        </a>
                    }

                    @if (ubicacionEnlace.Contains("/subscriptions") == false)
                    {
                        <a class="texto-cabecera boton-superior" href="/subscriptions" style="font-size: 15px;">
                            @Herramientas.Idiomas.CogerCadena(idioma, "Subscriptions", "Header")
                        </a>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <button class="texto-cabecera boton-superior" @onclick="@(e => MostrarBuscador(e))" style="cursor: pointer; border: 0px;">
            <i class="fa-solid fa-magnifying-glass"></i>
        </button>

        <input type="text" @oninput="TextoCambiaBuscador" class="entrada-texto" style="min-width: 50px; max-width: 400px;" placeholder="@Herramientas.Idiomas.CogerCadena(idioma, "SearchPlaceholder", "Header")" />

        @if (resultados != null)
        {
            if (resultados.Count > 0)
            {
                <div class="buscador-panel" style="display: flex; align-items: start;">
                    <div style="width: 20%; padding-right: 20px;">
                        @if (resultadosJuegos.Count > 0)
                        {
                            <button @onclick="@(e => CambiarPestaña(e, Juegos.JuegoTipo.Game))" class="boton-pequeño" style="padding: 12px 15px; font-size: 16px; margin-top: 10px;">
                                @Herramientas.Idiomas.CogerCadena(idioma, "SearchFilter1", "Header") (@resultadosJuegos.Count)
                            </button>
                        }

                        @if (resultadosDLCs.Count > 0)
                        {
                            <button @onclick="@(e => CambiarPestaña(e, Juegos.JuegoTipo.DLC))" class="boton-pequeño" style="padding: 12px 15px; font-size: 16px; margin-top: 10px;">
                                @Herramientas.Idiomas.CogerCadena(idioma, "SearchFilter2", "Header") (@resultadosDLCs.Count)
                            </button>
                        }

                        @if (resultadosBandasSonoras.Count > 0)
                        {
                            <button @onclick="@(e => CambiarPestaña(e, Juegos.JuegoTipo.Music))" class="boton-pequeño" style="padding: 12px 15px; font-size: 16px; margin-top: 10px;">
                                @Herramientas.Idiomas.CogerCadena(idioma, "SearchFilter3", "Header") (@resultadosBandasSonoras.Count)
                            </button>
                        }

                        @if (resultadosSoftware.Count > 0)
                        {
                            <button @onclick="@(e => CambiarPestaña(e, Juegos.JuegoTipo.Software))" class="boton-pequeño" style="padding: 12px 15px; font-size: 16px; margin-top: 10px;">
                                @Herramientas.Idiomas.CogerCadena(idioma, "SearchFilter4", "Header") (@resultadosSoftware.Count)
                            </button>
                        }
                    </div>

                    <div style="width: 80%; padding-right: 10px;">
                        @{
                            List<Juegos.Juego> resultadosFinal = new List<Juegos.Juego>();

                            if (pestañaSeleccionada == Juegos.JuegoTipo.Game && resultadosJuegos.Count > 0)
                            {
                                resultadosFinal = resultadosJuegos;
                            }
                            else if (pestañaSeleccionada == Juegos.JuegoTipo.DLC && resultadosDLCs.Count > 0)
                            {
                                resultadosFinal = resultadosDLCs;
                            }
                            else if (pestañaSeleccionada == Juegos.JuegoTipo.Music && resultadosBandasSonoras.Count > 0)
                            {
                                resultadosFinal = resultadosBandasSonoras;
                            }
                            else if (pestañaSeleccionada == Juegos.JuegoTipo.Software && resultadosSoftware.Count > 0)
                            {
                                resultadosFinal = resultadosSoftware;
                            }

                            <Virtualize Context="juego" Items="resultadosFinal" ItemSize="117" OverscanCount="6">
                                <ItemContent>
                                    <div class="perfil-flexible-centrado" style="padding-top: 10px;">
                                        <a class="boton-pequeño" href="/game/@juego.Id/@Herramientas.EnlaceAdaptador.Nombre(juego.Nombre)/" style="padding: 0px;">
                                            <div class="perfil-flexible-centrado">
                                                <div>
                                                    <img src="@juego.Imagenes.Header_460x215" style="width: 230px; height: 107px;" />
                                                </div>

                                                <div style="width: 100%; padding-left: 15px; padding-right: 15px;">
                                                    @juego.Nombre
                                                </div>

                                                <div style="padding: 20px; min-width: 200px; text-align: center;">
                                                    @Herramientas.Buscador.GenerarMensaje(idioma, juego)
                                                </div>
                                            </div>
                                        </a>
                                    </div>
                                </ItemContent>
                            </Virtualize>
                        }
                    </div>
                </div>
            }
        }
    }
</div>

@if (usuarioLogeado == true)
{
    <div style="display: flex; align-items: center; flex: 1 auto 1;">
        <div class="menu-dropdown">
            <div style="display: flex; align-items: center; font-size: 14px; cursor: pointer;">
                @if (string.IsNullOrEmpty(usuarioAvatar) == true)
                {
                    <div>@usuarioEmail</div>
                }
                else
                {
                    @if (usuarioAvatar.ToLower().Contains(".jpg") == true || usuarioAvatar.ToLower().Contains(".jpeg") == true || usuarioAvatar.ToLower().Contains(".png") == true || usuarioAvatar.ToLower().Contains(".webp") == true)
                    {
                        <img src="@usuarioAvatar" style="max-height: 32px; max-width: 32px;" />

                        @if (usuarioNombre.Length > 30)
                        {
                            usuarioNombre = usuarioNombre.Remove(30, usuarioNombre.Length - 30);
                            usuarioNombre = usuarioNombre + "...";
                        }

                        <div style="margin-left: 15px;">@usuarioNombre (@usuarioCoins.ToString())</div>
                    }
                    else
                    {
                        <div>@usuarioEmail</div>
                    }
                }

                <i class="fa-solid fa-caret-down" style="margin-left: 15px;"></i>
            </div>

            <div class="menu-dropdown-contenido" style="right: -10px;">
                <button @onclick="@(e => AbrirCuenta(e))" class="texto-cabecera menu-dropdown-item" style="text-align: left; border: 0; width: 100%; font-size: 14px;">
                    @Herramientas.Idiomas.CogerCadena(idioma, "Account", "Header")
                </button>

                <button @onclick="@(e => AbrirRecompensas(e))" class="texto-cabecera menu-dropdown-item" style="text-align: left; border: 0; width: 100%; font-size: 14px;">
                    @Herramientas.Idiomas.CogerCadena(idioma, "Rewards", "Header")
                </button>

                <button @onclick="@(e => Desconectar(e))" class="texto-cabecera menu-dropdown-item" style="text-align: left; border: 0; width: 100%; font-size: 14px;">
                    @Herramientas.Idiomas.CogerCadena(idioma, "Logout", "Header")
                </button>
            </div>
        </div>
    </div>
}
else
{
    <div style="display: flex; align-items: center; flex: 1 auto 1;">
        <button class="texto-cabecera" @onclick="@(e => AbrirLogin(e))" style="text-align: left; border: 0; padding: 8px 15px; margin: 0px; font-size: 14px;">
            @Herramientas.Idiomas.CogerCadena(idioma, "Login", "Header")
        </button>

        <button class="texto-cabecera" @onclick="@(e => AbrirRegistro(e))" style="text-align: left; border: 0; padding: 8px 15px; margin: 0px; font-size: 14px;">
            @Herramientas.Idiomas.CogerCadena(idioma, "Register", "Header")
        </button>
    </div>
}

@code {

    #nullable disable

    [Parameter]
    public string idioma { get; set; }

    [Parameter]
    public bool usuarioLogeado { get; set; }

    [Parameter]
    public bool adminLogeado { get; set; }

    [Parameter]
    public string usuarioAvatar { get; set; }

    [Parameter]
    public string usuarioNombre { get; set; }

    [Parameter]
    public string usuarioEmail { get; set; }

    [Parameter]
    public int usuarioCoins { get; set; }

    [Parameter]
    public string ubicacionEnlace { get; set; }

    private SqlConnection conexion = new SqlConnection();

    private string adminMensaje = string.Empty;

    protected override void OnInitialized()
    {
        if (adminLogeado == true)
        {
            if (conexion.State != System.Data.ConnectionState.Open)
            {
                conexion = Herramientas.BaseDatos.Conectar();
            }

            using (conexion)
            {
                adminMensaje = "Admin";

                int nuevosCorreosDeals = int.Parse(BaseDatos.Tiendas.Admin.LeerDato(conexion, "correos"));
                int nuevosCorreosApps = int.Parse(BaseDatos.Tiendas.Admin.LeerDato(conexion, "correos2"));

                if (nuevosCorreosDeals > 0 || nuevosCorreosApps > 0)
                {
                    adminMensaje = adminMensaje + " - Correo Nuevo";
                }
            }
        }
    }

    private void Inicio(MouseEventArgs e)
    {
        NavManager.NavigateTo("/", true);
    }

    private void Desconectar(MouseEventArgs e)
    {
        NavManager.NavigateTo("/account/logout", true, false);
    }

    #region Buscador

    private List<Juegos.Juego> resultados = new List<Juegos.Juego>();
    private List<Juegos.Juego> resultadosJuegos = new List<Juegos.Juego>();
    private List<Juegos.Juego> resultadosDLCs = new List<Juegos.Juego>();
    private List<Juegos.Juego> resultadosBandasSonoras = new List<Juegos.Juego>();
    private List<Juegos.Juego> resultadosSoftware = new List<Juegos.Juego>();

    private bool enseñarBuscador = false;

    private void MostrarBuscador(MouseEventArgs e)
    {
        if (enseñarBuscador == false)
        {
            enseñarBuscador = true;
        }
        else
        {
            enseñarBuscador = false;
        }
    }

    private string buscando = string.Empty;

    private void TextoCambiaBuscador(ChangeEventArgs texto)
    {
        List<Juegos.Juego> resultadosBuscador = new List<Juegos.Juego>();

        if (texto.Value.ToString().Trim().Length > 1)
        {
            if (conexion.State != System.Data.ConnectionState.Open)
            {
                conexion = Herramientas.BaseDatos.Conectar();
            }

            using (conexion)
            {
                resultadosBuscador = BaseDatos.Juegos.Buscar.Nombre(texto.Value.ToString().Trim(), conexion, 200);
            }

            if (resultadosBuscador != null)
            {
                pestañaSeleccionada = Juegos.JuegoTipo.Game;

                resultados.Clear();
                resultadosJuegos.Clear();
                resultadosDLCs.Clear();
                resultadosBandasSonoras.Clear();
                resultadosSoftware.Clear();

                resultados = resultadosBuscador;

                if (resultadosBuscador.Count > 0)
                {
                    foreach (var resultado in resultadosBuscador)
                    {
                        if (resultado.Tipo == Juegos.JuegoTipo.Game)
                        {
                            resultadosJuegos.Add(resultado);
                        }
                        else if (resultado.Tipo == Juegos.JuegoTipo.DLC)
                        {
                            resultadosDLCs.Add(resultado);
                        }
                        else if (resultado.Tipo == Juegos.JuegoTipo.Music)
                        {
                            resultadosBandasSonoras.Add(resultado);
                        }
                        else if (resultado.Tipo == Juegos.JuegoTipo.Software)
                        {
                            resultadosSoftware.Add(resultado);
                        }
                    }

                    if (resultadosJuegos.Count > 0)
                    {
                        pestañaSeleccionada = Juegos.JuegoTipo.Game;

                        resultadosJuegos = resultadosJuegos.Where(x => x.Analisis != null).Where(x => x.Analisis.Cantidad != null).OrderByDescending(x => int.Parse(x.Analisis.Cantidad.Replace(",", null))).
                            ThenBy(x => x.NombreCodigo.IndexOf(Herramientas.Buscador.LimpiarNombre(texto.Value.ToString().Trim())) > 0).Concat(resultadosJuegos.Where(x => x.Analisis != null && x.Analisis.Porcentaje == null && x.Analisis.Cantidad == null)).Concat(resultadosJuegos.Where(x => x.Analisis == null)).ToList();
                    }

                    if (resultadosDLCs.Count > 0)
                    {
                        if (resultadosJuegos.Count == 0)
                        {
                            pestañaSeleccionada = Juegos.JuegoTipo.DLC;
                        }

                        resultadosDLCs = resultadosDLCs.Where(x => x.Analisis != null).Where(x => x.Analisis.Cantidad != null).OrderByDescending(x => int.Parse(x.Analisis.Cantidad.Replace(",", null))).
                            ThenBy(x => x.NombreCodigo.IndexOf(Herramientas.Buscador.LimpiarNombre(texto.Value.ToString().Trim())) > 0).Concat(resultadosDLCs.Where(x => x.Analisis != null && x.Analisis.Porcentaje == null && x.Analisis.Cantidad == null)).Concat(resultadosDLCs.Where(x => x.Analisis == null)).ToList();
                    }

                    if (resultadosBandasSonoras.Count > 0)
                    {
                        if (resultadosJuegos.Count == 0 && resultadosDLCs.Count == 0)
                        {
                            pestañaSeleccionada = Juegos.JuegoTipo.Music;
                        }

                        resultadosBandasSonoras = resultadosBandasSonoras.Where(x => x.Analisis != null).Where(x => x.Analisis.Cantidad != null).OrderByDescending(x => int.Parse(x.Analisis.Cantidad.Replace(",", null))).
                            ThenBy(x => x.NombreCodigo.IndexOf(Herramientas.Buscador.LimpiarNombre(texto.Value.ToString().Trim())) > 0).Concat(resultadosBandasSonoras.Where(x => x.Analisis != null && x.Analisis.Porcentaje == null && x.Analisis.Cantidad == null)).Concat(resultadosBandasSonoras.Where(x => x.Analisis == null)).ToList();
                    }

                    if (resultadosSoftware.Count > 0)
                    {
                        if (resultadosJuegos.Count == 0 && resultadosDLCs.Count == 0 && resultadosBandasSonoras.Count == 0)
                        {
                            pestañaSeleccionada = Juegos.JuegoTipo.Software;
                        }

                        resultadosSoftware = resultadosSoftware.Where(x => x.Analisis != null).Where(x => x.Analisis.Cantidad != null).OrderByDescending(x => int.Parse(x.Analisis.Cantidad.Replace(",", null))).
                            ThenBy(x => x.NombreCodigo.IndexOf(Herramientas.Buscador.LimpiarNombre(texto.Value.ToString().Trim())) > 0).Concat(resultadosSoftware.Where(x => x.Analisis != null && x.Analisis.Porcentaje == null && x.Analisis.Cantidad == null)).Concat(resultadosSoftware.Where(x => x.Analisis == null)).ToList();
                    }
                }
            }
        }
        else
        {
            resultadosBuscador = new List<Juegos.Juego>();
            resultados = new List<Juegos.Juego>();
        }   
    }

    Juegos.JuegoTipo pestañaSeleccionada = Juegos.JuegoTipo.Game;

    private void CambiarPestaña(MouseEventArgs e, Juegos.JuegoTipo pestaña)
    {
        pestañaSeleccionada = pestaña;
    }

    #endregion

    private void AbrirLogin(MouseEventArgs e)
    {
        NavManager.NavigateTo("/account/login", true);
    }

    private void AbrirRegistro(MouseEventArgs e)
    {
        NavManager.NavigateTo("/account/register", true);
    }

    private void AbrirCuenta(MouseEventArgs e)
    {
        NavManager.NavigateTo("/account/", true);
    }

    private void AbrirRecompensas(MouseEventArgs e)
    {
        NavManager.NavigateTo("/account/rewards/", true);
    }
}

