@using APIs.Steam
@using Juegos
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using System.Text.Json
@using pepeizqs_deals_web.Areas.Identity.Data

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor

<script>
    function moverScroll(id) {
        const yOffset = -30;
        const element = document.getElementById(id);
        const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

        window.scrollTo({ top: y, behavior: 'smooth' });
    }
</script>

<style>
    .suscripciones-grid {
        gap: 30px;
    }

    .suscripcion-grid {
        padding: 30px;
        gap: 30px;
    }

    @@media (max-width: 800px) {
        .suscripciones-grid {
            gap: 15px;
        }

        .suscripcion-grid {
            padding: 15px;
            gap: 15px;
        }
    }
</style>

@if (suscripcionSeleccionada == false)
{
    if (suscripcionesActuales != null)
    {
        if (suscripcionesActuales.Count > 0)
        {
            <h1 style="font-size: 23px;">
                @Herramientas.Idiomas.BuscarTexto(idioma, "Title", "Subscriptions")
            </h1>

            <hr />

            <div style="display: flex; align-items: center; background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 20px; gap: 20px;">
                <div>
                    <i class="fa-solid fa-circle-info" style="font-size: 25px;"></i>
                </div>
                <div>
                    @Herramientas.Idiomas.BuscarTexto(idioma, "String7", "Subscriptions")
                </div>
            </div>

            <div class="suscripciones-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 40px; margin-top: 30px;">
                @foreach (var suscripcionActual in suscripcionesActuales)
                {
                    <button @onclick="@(e => SuscripcionAbrir(e, suscripcionActual))" class="boton-pequeño suscripcion-grid" style="display: flex; flex-direction: column; align-items: center;">
                        <div style="max-width: 200px; height: 70px;">
                            <img src="@suscripcionActual.Tipo.ImagenLogo" alt="@suscripcionActual.Tipo.Nombre" style="width: 100%; height: 100%; object-fit: contain;" />
                        </div>

                        @if (suscripcionActual.Juegos != null)
                        {
                            if (suscripcionActual.Juegos.Count > 0)
                            {
                                List<JuegoDRM> drms = new List<JuegoDRM>();

                                foreach (var juego in suscripcionActual.Juegos)
                                {
                                    bool añadirDRM = true;

                                    if (drms.Count > 0)
                                    {
                                        foreach (var drm in drms)
                                        {
                                            if (drm == juego.DRM)
                                            {
                                                añadirDRM = false;
                                            }
                                        }
                                    }

                                    if (añadirDRM == true)
                                    {
                                        drms.Add(juego.DRM);
                                    }
                                }

                                <div style="display: flex; align-items: center; gap: 20px;">
                                    @if (suscripcionActual.Tipo.Precio > 0)
                                    {
                                        string precioTexto = suscripcionActual.Tipo.Precio.ToString();
                                        precioTexto = precioTexto.Replace(".", ",");
                                        precioTexto = precioTexto + "€";

                                        <div>
                                            @precioTexto
                                        </div>
                                    }

                                    <div>
                                        @string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String4", "Subscriptions"), suscripcionActual.Juegos.Count)
                                    </div>

                                    <div style="display: flex; align-items: center; gap: 10px;">
                                        @foreach (var drm in drms)
                                        {
                                            <img src="@JuegoDRM2.SacarImagen(drm)" style="max-width: 20px; max-height: 20px;" />
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </button>
                }
            </div>
        }
    }

    <div style="font-size: 23px; margin-top: 60px">
        @Herramientas.Idiomas.BuscarTexto(idioma, "String1", "Subscriptions")
    </div>

    <div style="display: flex; align-items: start; margin-top: 10px;">
        @foreach (var año in años)
        {
            <div style="margin-right: 15px;">
                <button @onclick="@(e => CambiarAño(e, año))" class="boton-pequeño" style="padding: 6px 10px; width: auto;">
                    @año
                </button>

                @if (añoSeleccionado == año)
                {
                    <div style="margin-top: 10px; background: var(--colorTexto); padding: 1px;">
                    </div>

                    <div style="position: absolute; margin-top: 15px; display: flex; align-items: center;">
                        @foreach (var suscripcionPasada in suscripcionesPasadas)
                        {
                            List<Juegos.JuegoSuscripcion> suscripcionAño = new List<Juegos.JuegoSuscripcion>();

                            foreach (var juego in suscripcionPasada.Juegos)
                            {
                                if (juego.FechaEmpieza.Year.ToString() == añoSeleccionado)
                                {
                                    suscripcionAño.Add(juego);
                                }
                            }

                            if (suscripcionAño.Count > 0)
                            {
                                <div style="margin-right: 15px; font-size: 14px;">
                                    <a onclick="moverScroll('pasado-@suscripcionPasada.Tipo.Id.ToString()')" style="color: var(--colorTexto); text-decoration: none; cursor: pointer;">
                                        <img src="@suscripcionPasada.Tipo.ImagenIcono" style="width: 22px; height: 22px;" alt="Store" /> (@suscripcionAño.Count.ToString())
                                    </a>
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        }
    </div>

    <div style="margin-top: 55px;">
        @foreach (var suscripcionPasada in suscripcionesPasadas)
        {
            List<Juegos.JuegoSuscripcion> suscripcionesAño = new List<Juegos.JuegoSuscripcion>();

            foreach (var juego in suscripcionPasada.Juegos)
            {
                if (juego.FechaEmpieza.Year.ToString() == añoSeleccionado)
                {
                    suscripcionesAño.Add(juego);
                }
            }

            if (suscripcionesAño.Count > 0)
            {
                <hr>

                <div id="pasado-@suscripcionPasada.Tipo.Id.ToString()" style="display: flex; align-items: start;">
                    <div style="width: 20%; background-color: var(--fondoOscuro); padding: 40px;">
                        <div style="height: 50px; display: flex; align-items: center; justify-content: center;">
                            <img src="@suscripcionPasada.Tipo.ImagenLogo" style="max-width: 100%; max-height: 100%;" alt="@suscripcionPasada.Tipo.Nombre" />
                        </div>
                    </div>

                    <div class="perfil" style="width: 80%;">
                        @{
                            int i = 1;
                            while (i < 13)
                            {
                                List<Juegos.JuegoSuscripcion> suscripcionesMensual = new List<Juegos.JuegoSuscripcion>();

                                foreach (var juego in suscripcionesAño)
                                {
                                    if (juego.FechaEmpieza.Month == i)
                                    {
                                        suscripcionesMensual.Add(juego);
                                    }
                                }

                                if (suscripcionesMensual.Count > 0)
                                {
                                    <label>@Herramientas.Idiomas.BuscarTexto(idioma, "Month." + i.ToString(), "Months")</label>

                                    <ul>
                                        @foreach (var juegoMensual in suscripcionesMensual)
                                        {
                                            <li>
                                                <a href="/game/@juegoMensual.JuegoId/@Herramientas.EnlaceAdaptador.Nombre(juegoMensual.Nombre)/" style="text-decoration: none;">
                                                    @juegoMensual.Nombre (@Juegos.JuegoDRM2.DevolverDRM(juegoMensual.DRM))
                                                </a>
                                            </li>
                                        }
                                    </ul>
                                }

                                i += 1;
                            }
                        }
                    </div>
                </div>
            }
        }
    </div>
}
else
{
    <div style="display: flex; flex-direction: column; gap: 30px;">
        <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 20px 30px; display: flex; align-items: center; flex-direction: row; gap: 30px;">
            <button @onclick="@(e => SuscripcionCerrar(e))" class="boton-pequeño" style="width: auto; text-align: center; font-size: 23px; padding: 10px 20px;">
                <i class="fa-solid fa-arrow-left"></i>
            </button>

            <div style="display: flex; align-items: center; gap: 30px; width: 100%;">
                <div style="max-width: 150px;">
                    <img src="@suscripcionSeleccionadaTipo.ImagenLogo" alt="@suscripcionSeleccionadaTipo.Nombre" style="width: 100%; height: 100%; object-fit: contain; object-position: 0 50%;" />
                </div>

                <div style="display: flex; flex-direction: column; gap: 10px;">
                    @if (suscripcionSeleccionadaTipo.Precio > 0)
                    {
                        string precioTexto = suscripcionSeleccionadaTipo.Precio.ToString();
                        precioTexto = precioTexto.Replace(".", ",");
                        precioTexto = precioTexto + "€";

                        <div>
                            @string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String8", "Subscriptions"), precioTexto)
                        </div>
                    }

                    @if (suscripcionSeleccionadaTipo.ParaSiempre == true)
                    {
                        <div>
                            @Herramientas.Idiomas.BuscarTexto(idioma, "String2", "Subscriptions")
                        </div>
                    }
                    else
                    {
                        <div>
                            @Herramientas.Idiomas.BuscarTexto(idioma, "String3", "Subscriptions")
                        </div>
                    }

                    @if (suscripcionSeleccionadaTipo.IncluyeSuscripcion != null)
                    {
                        Suscripciones2.SuscripcionComponente componenteBuscado = new Suscripciones2.SuscripcionComponente();

                        foreach (var suscripcionActual in suscripcionesActuales)
                        {
                            if (suscripcionActual.Tipo.Id == suscripcionSeleccionadaTipo.IncluyeSuscripcion)
                            {
                                componenteBuscado = suscripcionActual;
                            }
                        }

                        <button @onclick="@(e => SuscripcionAbrir(e, componenteBuscado))" class="boton-pequeño" style="padding: 10px 15px; width: fit-content;">
                            @string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String6", "Subscriptions"), componenteBuscado.Tipo.Nombre)
                        </button>
                    }
                </div>
            </div>

            @if (suscripcionSeleccionadaDRMs.Count > 1)
            {
                <div class="menu-dropdown" style="width: auto; flex: 0 0 auto;">
                    <button class="boton-pequeño" style="display: flex; align-items: center; width: 100%; padding: 10px 15px; margin: 0; border: 0px; color: var(--colorTextoVisitado);">
                        <div style="padding-right: 15px;">
                            @Herramientas.Idiomas.BuscarTexto(idioma, "String10", "Subscriptions")
                        </div>

                        <div>
                            <i class="fa-solid fa-caret-down"></i>
                        </div>
                    </button>

                    <div class="menu-dropdown-contenido" style="right: 0; width: 100%; background-color: var(--fondoBotonPequeño);">
                        <button @onclick="@(e => FiltrarDRM(e))" class="texto-cabecera menu-dropdown-item" style="text-align: right; width: 100%; border: 0px;">
                            @Herramientas.Idiomas.BuscarTexto(idioma, "String9", "Subscriptions")
                        </button>
                        <hr/>
                        @foreach (var drm in suscripcionSeleccionadaDRMs)
                        {
                            <button @onclick="@(e => FiltrarDRM(e, drm))" class="texto-cabecera menu-dropdown-item" style="text-align: right; width: 100%; border: 0px;">
                                <div style="display: flex; align-items: center; gap: 10px; justify-content: right;">
                                    @Juegos.JuegoDRM2.DevolverDRM(drm)
                                    <img src="@Juegos.JuegoDRM2.SacarImagen(drm)" style="max-width: 22px; max-height: 22px" />
                                </div>
                            </button>
                        }
                    </div>
                </div>
            }
        </div>

        @if (suscripcionSeleccionadaTipo.UsuarioEnlacesEspecificos == false)
        {
            <a href="@Herramientas.EnlaceAcortador.Generar(suscripcionSeleccionadaTipo.Enlace, suscripcionSeleccionadaTipo.Id, usuarioPatreon)" class="boton-pequeño" style="text-align: center; padding: 15px 20px; font-size: 18px;" target="_blank">
                @Herramientas.Idiomas.BuscarTexto(idioma, "String5", "Subscriptions")
            </a>
        }

        <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 20px; display: flex; align-items: center; gap: 20px;">
            <i class="fa-solid fa-magnifying-glass"></i>
            <input type="text" @onchange="(e => TextoCambiaBuscador(e))" class="entrada-texto" style="min-width: 50%;" placeholder="@Herramientas.Idiomas.BuscarTexto(idioma, "String9", "Publisher")" />
        </div>

        <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 30px; display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 30px;">
            @foreach (var juego in suscripcionSeleccionadaJuegosMostrar)
            {
                string enlace = Herramientas.EnlaceAcortador.Generar(juego.Enlace, juego.Tipo, usuarioPatreon);

                if (suscripcionSeleccionadaTipo.UsuarioEnlacesEspecificos == false)
                {
                    enlace = Herramientas.EnlaceAcortador.Generar(suscripcionSeleccionadaTipo.Enlace, suscripcionSeleccionadaTipo.Id, usuarioPatreon);
                }

                <a href="@enlace" class="boton-pequeño" target="_blank" style="font-size: 16px; cursor: pointer; color: var(--colorTexto); text-decoration: none; padding: 0px; max-width: 235px;">
                    <div class="boton-expandir" style="display: flex; flex-direction: column;">
                        <div>
                            <img src="@juego.Juego.Imagenes.Library_600x900" style="max-width: 100%; max-height: 100%;" alt="@juego.Nombre" />
                        </div>

                        <div style="width: 100%; text-align: right; padding: 10px;">
                            <img src="@JuegoDRM2.SacarImagen(juego.DRM)" style="max-width: 20px; max-height: 20px;" />
                        </div>
                    </div>
                </a>
            }
        </div>       
    </div>
}

@code {

    #nullable disable

    [Parameter]
    public string idioma { get; set; }

    [Parameter]
    public string usuarioId { get; set; }

    private Usuario usuario = new Usuario();
    private bool usuarioPatreon = false;

    private List<Suscripciones2.SuscripcionComponente> suscripcionesActuales = new List<Suscripciones2.SuscripcionComponente>();
    private List<Suscripciones2.SuscripcionComponente> suscripcionesPasadas = new List<Suscripciones2.SuscripcionComponente>();

    private List<string> juegosUsuario = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        usuario = await UserManager.FindByIdAsync(usuarioId);

        if (usuario != null)
        {
            if (string.IsNullOrEmpty(usuario.SteamGames) == false)
            {
                juegosUsuario = Herramientas.Listados.Generar(usuario.SteamGames);
            }

            usuarioPatreon = Herramientas.Patreon.VerificarComprobacion(usuario.PatreonLastCheck);
        }

        //--------------------------------------------------------------------

        DateTime arranque = new DateTime(2015, 1, 1);

        int i = 0;
        while (i < 100)
        {
            if (arranque.Year != DateTime.Now.Year)
            {
                años.Add(arranque.Year.ToString());
                arranque = arranque.AddYears(1);
            }
            i += 1;
        }

        años.Add(DateTime.Now.Year.ToString());
        años.Reverse();

        //--------------------------------------------------------------------

        List<Juegos.JuegoSuscripcion> juegosActuales = BaseDatos.Suscripciones.Buscar.Actuales();

        if (juegosActuales.Count > 0)
        {
            foreach (var suscripcion in Suscripciones2.SuscripcionesCargar.GenerarListado())
            {
                List<Juegos.JuegoSuscripcion> juegos2 = new List<Juegos.JuegoSuscripcion>();

                foreach (var juego in juegosActuales)
                {
                    if (juego.Tipo == suscripcion.Id)
                    {
                        juegos2.Add(juego);
                    }
                }

                if (juegos2.Count > 0)
                {
                    Suscripciones2.SuscripcionComponente componente = new Suscripciones2.SuscripcionComponente();
                    componente.Juegos = juegos2;
                    componente.Tipo = suscripcion;

                    suscripcionesActuales.Add(componente);
                }
            }
        }
    }

    private bool suscripcionSeleccionada = false;
    private Suscripciones2.Suscripcion suscripcionSeleccionadaTipo = new Suscripciones2.Suscripcion();
    private List<Juegos.JuegoSuscripcion> suscripcionSeleccionadaJuegosGestor = new List<Juegos.JuegoSuscripcion>();
    private List<Juegos.JuegoSuscripcion> suscripcionSeleccionadaJuegosMostrar = new List<Juegos.JuegoSuscripcion>();
    private List<JuegoDRM> suscripcionSeleccionadaDRMs = new List<JuegoDRM>();

    private void SuscripcionAbrir(MouseEventArgs e, Suscripciones2.SuscripcionComponente componente)
    {
        if (componente != null)
        {
            suscripcionSeleccionada = true;

            suscripcionSeleccionadaTipo = componente.Tipo;
            suscripcionSeleccionadaJuegosGestor.Clear();
            suscripcionSeleccionadaDRMs.Clear();

            foreach (var juegoActual in componente.Juegos)
            {
                Juegos.Juego juego2 = BaseDatos.Juegos.Buscar.UnJuego(juegoActual.JuegoId.ToString());

                bool añadir = true;

                if (suscripcionSeleccionadaTipo.IncluyeSuscripcion != null)
                {
                    if (juego2.Suscripciones != null)
                    {
                        foreach (var suscripcion in juego2.Suscripciones)
                        {
                            if (suscripcion.Tipo == suscripcionSeleccionadaTipo.IncluyeSuscripcion)
                            {
                                añadir = false;
                            }
                        }
                    }
                }

                if (juego2.Tipo != JuegoTipo.Game)
                {
                    añadir = false;
                }

                if (añadir == true)
                {
                    bool añadirVacioAnalisis = false;

                    if (juego2.Analisis == null)
                    {
                        añadirVacioAnalisis = true;
                    }
                    else
                    {
                        if (JsonSerializer.Serialize(juego2.Analisis) == "null" || JsonSerializer.Serialize(juego2.Analisis) == "[]")
                        {
                            añadirVacioAnalisis = true;
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(juego2.Analisis.Cantidad) == true)
                            {
                                añadirVacioAnalisis = true;
                            }
                        }
                    }

                    if (añadirVacioAnalisis == true)
                    {
                        JuegoAnalisis analisis = new JuegoAnalisis();
                        analisis.Cantidad = "0";
                        analisis.Porcentaje = "0%";
                        juego2.Analisis = analisis;
                    }

                    juegoActual.Juego = juego2;
                    suscripcionSeleccionadaJuegosGestor.Add(juegoActual);
                }  

                //------------------------------------

                bool añadirDRM = true;

                if (suscripcionSeleccionadaDRMs.Count > 0)
                {
                    foreach (var drm in suscripcionSeleccionadaDRMs)
                    {
                        if (drm == juegoActual.DRM)
                        {
                            añadirDRM = false;
                        }
                    }
                }

                if (añadirDRM == true)
                {
                    suscripcionSeleccionadaDRMs.Add(juegoActual.DRM);
                }
            }

            suscripcionSeleccionadaJuegosMostrar = suscripcionSeleccionadaJuegosGestor;
            suscripcionSeleccionadaJuegosMostrar = suscripcionSeleccionadaJuegosMostrar.AsParallel().OrderByDescending(x => int.Parse(x.Juego.Analisis.Cantidad.Replace(",", null))).ThenBy(x => x.Juego.Nombre).ToList();
        }
    }

    private void SuscripcionCerrar(MouseEventArgs e)
    {
        suscripcionSeleccionada = false;
    }

    private string textoBuscador = string.Empty;

    private void TextoCambiaBuscador(ChangeEventArgs texto)
    {
        textoBuscador = texto.Value.ToString().Trim();

        suscripcionSeleccionadaJuegosMostrar.Clear();

        if (string.IsNullOrEmpty(textoBuscador) == false)
        {
            if (string.IsNullOrEmpty(textoBuscador) == false)
            {
                foreach (var resultadoBuscador in suscripcionSeleccionadaJuegosGestor)
                {
                    if (Herramientas.Buscador.LimpiarNombre(resultadoBuscador.Nombre).Contains(Herramientas.Buscador.LimpiarNombre(textoBuscador)) == true)
                    {
                        suscripcionSeleccionadaJuegosMostrar.Add(resultadoBuscador);
                    }
                }
            }
        }
        else
        {
            suscripcionSeleccionadaJuegosMostrar = suscripcionSeleccionadaJuegosGestor;
        }

        suscripcionSeleccionadaJuegosMostrar = suscripcionSeleccionadaJuegosMostrar.AsParallel().OrderByDescending(x => int.Parse(x.Juego.Analisis.Cantidad.Replace(",", null))).ThenBy(x => x.Juego.Nombre).ToList();
    }

    private void FiltrarDRM(MouseEventArgs e)
    {
        suscripcionSeleccionadaJuegosMostrar.Clear();

        foreach (var resultadoBuscador in suscripcionSeleccionadaJuegosGestor)
        {
            suscripcionSeleccionadaJuegosMostrar.Add(resultadoBuscador);
        }

        suscripcionSeleccionadaJuegosMostrar = suscripcionSeleccionadaJuegosMostrar.AsParallel().OrderByDescending(x => int.Parse(x.Juego.Analisis.Cantidad.Replace(",", null))).ThenBy(x => x.Juego.Nombre).ToList();
    }

    private void FiltrarDRM(MouseEventArgs e, Juegos.JuegoDRM drm)
    {
        suscripcionSeleccionadaJuegosMostrar.Clear();

        foreach (var resultadoBuscador in suscripcionSeleccionadaJuegosGestor)
        {
            if (resultadoBuscador.DRM == drm)
            {
                suscripcionSeleccionadaJuegosMostrar.Add(resultadoBuscador);
            }
        }

         suscripcionSeleccionadaJuegosMostrar = suscripcionSeleccionadaJuegosMostrar.AsParallel().OrderByDescending(x => int.Parse(x.Juego.Analisis.Cantidad.Replace(",", null))).ThenBy(x => x.Juego.Nombre).ToList();
    }

    #region Archivo

    private List<string> años = new List<string>();
    private string añoSeleccionado = string.Empty;

    private void CambiarAño(MouseEventArgs e, string nuevoAño)
    {
        añoSeleccionado = nuevoAño;

        List<Juegos.JuegoSuscripcion> juegosPasados = BaseDatos.Suscripciones.Buscar.Año(añoSeleccionado);

        if (juegosPasados.Count > 0)
        {
            suscripcionesPasadas.Clear();

            foreach (var suscripcion in Suscripciones2.SuscripcionesCargar.GenerarListado())
            {
                List<Juegos.JuegoSuscripcion> juegos2 = new List<Juegos.JuegoSuscripcion>();

                foreach (var juego in juegosPasados)
                {
                    if (juego.Tipo == suscripcion.Id)
                    {
                        juegos2.Add(juego);
                    }
                }

                if (juegos2.Count > 0)
                {
                    Suscripciones2.SuscripcionComponente componente = new Suscripciones2.SuscripcionComponente();
                    componente.Juegos = juegos2;
                    componente.Tipo = suscripcion;

                    suscripcionesPasadas.Add(componente);
                }
            }
        }
    }

    #endregion
}
