@using APIs.Steam
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity
@using pepeizqs_deals_web.Areas.Identity.Data

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor

<script>
    function moverScroll(id) {
        const yOffset = -30;
        const element = document.getElementById(id);
        const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

        window.scrollTo({ top: y, behavior: 'smooth' });
    }
</script>

@if (suscripcionesActuales != null)
{
    if (suscripcionesActuales.Count > 0)
    {
        <h1 style="font-size: 23px;">
            @Herramientas.Idiomas.CogerCadena(idioma, "Title", "Subscriptions")
        </h1>

        <div>
            @foreach (var suscripcionActual in suscripcionesActuales)
            {
                <hr>

                <div style="display: flex; align-items: start;">
                    <div class="perfil" style="width: 20%;">
                        <img src="@suscripcionActual.Tipo.ImagenLogo" alt="@suscripcionActual.Tipo.Nombre" />
                    </div>

                    <div class="perfil" style="width: 80%; display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 20px;">
                        @if (suscripcionActual.Juegos != null)
                        {
                            if (suscripcionActual.Juegos.Count > 0)
                            {
                                foreach (var juego in suscripcionActual.Juegos)
                                {
                                    bool usuarioTieneJuego = Herramientas.Tooltip.ComprobarUsuarioTieneJuego(juegosUsuario, juego.Juego, juego.DRM);
                                    bool usuarioTieneDeseado = false;

                                    string fondoColor = string.Empty;

                                    if (usuarioTieneJuego == true)
                                    {
                                        fondoColor = "background-color: var(--fondoBien);";
                                    }
                                    else
                                    {
                                        usuarioTieneDeseado = Herramientas.Deseados.ComprobarSiEsta(usuario?.SteamWishlist, usuario?.Wishlist, juego.Juego, juego.DRM);

                                        if (usuarioTieneDeseado == true)
                                        {
                                            fondoColor = "background-color: var(--fondoAlerta);";
                                        }
                                    }

                                    bool usuarioConectado = false;

                                    if (usuario != null)
                                    {
                                        usuarioConectado = true;
                                    }

                                    Herramientas.ToolTipDatos tooltipDatos = Herramientas.Tooltip.Generar(idioma, juego.Juego, juego.DRM, usuarioConectado, usuarioTieneJuego, usuarioTieneDeseado);

                                    <div class="tooltip-juego" onmousemove="hoverTooltip(event, 'tooltip-@juego.JuegoId.ToString()')">
                                        <div id="tooltip-@juego.JuegoId.ToString()" class="tooltip-relleno">
                                            @if (string.IsNullOrEmpty(tooltipDatos.Video) == false)
                                            {
                                                <video src="@tooltipDatos.Video" autoplay="autoplay" loop muted style="width: 460px; height: 215px; object-fit: cover;" />
                                            }

                                            <div style="padding: 15px; text-align: center;">
                                                <div style="text-align: center;">
                                                    @tooltipDatos.Nombre
                                                </div>

                                                @if (string.IsNullOrEmpty(tooltipDatos.ReviewsIcono) == false && string.IsNullOrEmpty(tooltipDatos.ReviewsCantidad) == false)
                                                {
                                                    <div style="display: flex; align-items: center; margin-top: 5px; margin-bottom: 5px; padding: 5px; text-align: center; justify-content: center;">
                                                        <img src="@tooltipDatos.ReviewsIcono" style="width: 20px; height: 20px; margin-right: 15px;" alt="Reviews" />
                                                        <label style="font-size: 14px;">@tooltipDatos.ReviewsCantidad</label>
                                                    </div>
                                                }

                                                @if (string.IsNullOrEmpty(tooltipDatos.UsuarioMensaje) == false)
                                                {
                                                    <div style="text-align: center;">
                                                        @tooltipDatos.UsuarioMensaje
                                                    </div>
                                                }
                                            </div>
                                        </div>

                                        <a href="@Herramientas.EnlaceAcortador.Generar(juego.Enlace, juego.Tipo)" class="boton-pequeño" style="padding: 2px; @fondoColor" target="_blank">
                                            <div>
                                                <img src="@juego.Imagen" style="max-width: 100%; max-height: 100%;" alt="@juego.Nombre" />
                                            </div>

                                            <div style="display: flex; align-items: center; justify-content: right; height: 40px;">
                                                <img src="@Juegos.JuegoDRM2.SacarImagen(juego.DRM)" style="max-width: 24px; max-height: 24px; margin: 10px;" alt="DRM" />
                                            </div>
                                        </a>
                                    </div>
                                }
                            }
                        }
                    </div>
                </div>
            }
        </div>
    }
}

<div style="font-size: 23px; margin-top: 60px">
	@Herramientas.Idiomas.CogerCadena(idioma, "Subscriptions.String2")
</div>

<div style="display: flex; align-items: start; margin-top: 10px;">
    @foreach (var año in años)
    {
        <div style="margin-right: 15px;">
            <button @onclick="@(e => CambiarAño(e, año))" class="boton-pequeño" style=" padding: 6px 10px; width: auto;">
                @año
            </button>

            @if (añoSeleccionado == año)
            {
                <div style="margin-top: 10px; background: var(--colorTexto); padding: 1px;">
                </div>

                <div style="position: absolute; margin-top: 15px; display: flex; align-items: center;">
                    @foreach (var suscripcionPasada in suscripcionesPasadas)
                    {
                        List<Juegos.JuegoSuscripcion> suscripcionAño = new List<Juegos.JuegoSuscripcion>();

                        foreach (var juego in suscripcionPasada.Juegos)
                        {
                            if (juego.FechaEmpieza.Year.ToString() == añoSeleccionado)
                            {
                                suscripcionAño.Add(juego);
                            }
                        }

                        if (suscripcionAño.Count > 0)
                        {
                            <div style="margin-right: 15px; font-size: 14px;">
                                <a onclick="moverScroll('pasado-@suscripcionPasada.Tipo.Id.ToString()')" style="color: var(--colorTexto); text-decoration: none; cursor: pointer;">
                                    <img src="@suscripcionPasada.Tipo.ImagenIcono" style="width: 22px; height: 22px;" alt="Store"/> (@suscripcionAño.Count.ToString())
                                </a>
                            </div>
                        }
                    }
                </div>
            }
        </div>
    }
</div>

<div style="margin-top: 55px;">
    @foreach (var suscripcionPasada in suscripcionesPasadas)
    {
        List<Juegos.JuegoSuscripcion> suscripcionesAño = new List<Juegos.JuegoSuscripcion>();

        foreach (var juego in suscripcionPasada.Juegos)
        {
            if (juego.FechaEmpieza.Year.ToString() == añoSeleccionado)
            {
                suscripcionesAño.Add(juego);
            }
        }

        if (suscripcionesAño.Count > 0)
        {
            <hr>

            <div id="pasado-@suscripcionPasada.Tipo.Id.ToString()" style="display: flex; align-items: start;">
                <div class="perfil" style="width: 20%;">
                    <img src="@suscripcionPasada.Tipo.ImagenLogo" alt="@suscripcionPasada.Tipo.Nombre"/>
                </div>

                <div class="perfil" style="width: 80%;">
                    @{
                        int i = 1;
                        while (i < 13)
                        {
                            List<Juegos.JuegoSuscripcion> suscripcionesMensual = new List<Juegos.JuegoSuscripcion>();

                            foreach (var juego in suscripcionesAño)
                            {
                                if (juego.FechaEmpieza.Month == i)
                                {
                                    suscripcionesMensual.Add(juego);
                                }
                            }

                            if (suscripcionesMensual.Count > 0)
                            {
                                <label>@Herramientas.Idiomas.CogerCadena(idioma, "Month." + i.ToString(), "Months")</label>

                                <ul>
                                    @foreach (var juegoMensual in suscripcionesMensual)
                                    {
                                        <li>
                                            <a href="/game/@juegoMensual.JuegoId/@Herramientas.EnlaceAdaptador.Nombre(juegoMensual.Nombre)/" style="text-decoration: none;">
                                                @juegoMensual.Nombre (@Juegos.JuegoDRM2.DevolverDRM(juegoMensual.DRM))
                                            </a>
                                        </li>
                                    }
                                </ul>
                            }

                            i += 1;
                        }
                    }
                </div>
            </div>
        }
    }
</div>

@code {

    #nullable disable

    [Parameter]
    public string idioma { get; set; }

    [Parameter]
    public string usuarioId { get; set; }

    private Usuario usuario = new Usuario();

    List<Juegos.JuegoSuscripcion> juegos = new List<Juegos.JuegoSuscripcion>();

    List<Suscripciones2.SuscripcionComponente> suscripcionesActuales = new List<Suscripciones2.SuscripcionComponente>();
    List<Suscripciones2.SuscripcionComponente> suscripcionesPasadas = new List<Suscripciones2.SuscripcionComponente>();

    private List<string> juegosUsuario = new List<string>();

    private List<string> años = new List<string>();
    private string añoSeleccionado = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        usuario = await UserManager.FindByIdAsync(usuarioId);

        if (usuario != null)
        {
            if (string.IsNullOrEmpty(usuario.SteamGames) == false)
            {
                juegosUsuario = Herramientas.Listados.Generar(usuario.SteamGames);
            }
        }

        //--------------------------------------------------------------------

        DateTime arranque = new DateTime(2015, 1, 1);

        int i = 0;
        while (i < 100)
        {
            if (arranque.Year != DateTime.Now.Year)
            {
                años.Add(arranque.Year.ToString());
                arranque = arranque.AddYears(1);
            }
            i += 1;
        }

        años.Add(DateTime.Now.Year.ToString());
        años.Reverse();

        //--------------------------------------------------------------------

        List<Juegos.JuegoSuscripcion> juegosActuales = BaseDatos.Suscripciones.Buscar.Actuales();

        if (juegosActuales.Count > 0)
        {
            foreach (var juegoActual in juegosActuales)
            {
                Juegos.Juego juego2 = BaseDatos.Juegos.Buscar.UnJuego(juegoActual.JuegoId.ToString());

                if (juego2.Tipo == Juegos.JuegoTipo.Game)
                {
                    juegoActual.Imagen = juego2.Imagenes.Library_600x900;
                }
                else if (juego2.Tipo == Juegos.JuegoTipo.DLC)
                {
                    juegoActual.Imagen = juego2.Imagenes.Capsule_231x87;
                }

                juegoActual.Juego = juego2;
            }

            juegosActuales = juegosActuales.OrderBy(x => x.Nombre).ToList();

            foreach (var suscripcion in Suscripciones2.SuscripcionesCargar.GenerarListado())
            {
                List<Juegos.JuegoSuscripcion> juegos2 = new List<Juegos.JuegoSuscripcion>();

                foreach (var juego in juegosActuales)
                {
                    if (juego.Tipo == suscripcion.Id)
                    {
                        juegos2.Add(juego);
                    }
                }

                if (juegos2.Count > 0)
                {
                    Suscripciones2.SuscripcionComponente componente = new Suscripciones2.SuscripcionComponente();
                    componente.Juegos = juegos2;
                    componente.Tipo = suscripcion;

                    suscripcionesActuales.Add(componente);
                }
            }
        }
    }

    private void CambiarAño(MouseEventArgs e, string nuevoAño)
    {
        añoSeleccionado = nuevoAño;

        List<Juegos.JuegoSuscripcion> juegosPasados = BaseDatos.Suscripciones.Buscar.Año(añoSeleccionado);

        if (juegosPasados.Count > 0)
        {
            suscripcionesPasadas.Clear();

            foreach (var suscripcion in Suscripciones2.SuscripcionesCargar.GenerarListado())
            {
                List<Juegos.JuegoSuscripcion> juegos2 = new List<Juegos.JuegoSuscripcion>();

                foreach (var juego in juegosPasados)
                {
                    if (juego.Tipo == suscripcion.Id)
                    {
                        juegos2.Add(juego);
                    }
                }

                if (juegos2.Count > 0)
                {
                    Suscripciones2.SuscripcionComponente componente = new Suscripciones2.SuscripcionComponente();
                    componente.Juegos = juegos2;
                    componente.Tipo = suscripcion;

                    suscripcionesPasadas.Add(componente);
                }
            }
        }
    }
}
