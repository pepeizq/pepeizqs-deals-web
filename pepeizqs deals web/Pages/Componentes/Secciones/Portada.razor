@using APIs.Steam
@using BaseDatos.Juegos;
@using Juegos;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient;
@using Microsoft.Extensions.Caching.Distributed;
@using Microsoft.JSInterop
@using Microsoft.VisualBasic;
@using Noticias;
@using pepeizqs_deals_web.Areas.Identity.Data

@* @rendermode @(new InteractiveServerRenderMode(prerender: true)) *@

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JavaScript

<style>
	.noticia-fuente {
		font-size: 18px;
	}

	.noticia-categoria {
		font-size: 15px;
	}

	.noticia-fecha {
		font-size: 15px;
	}

	.minimo-fuente {
		font-size: 17px;
	}

	.minimo-fuentefecha {
		font-size: 14px;
	}

	.minimo-espacio1 {
		width: 100px;
		padding: 20px;
	}

	.minimo-espacio2 {
		padding: 10px 15px;
		margin-right: 15px;
	}

	@@media (max-width: 800px) {
		.noticia-fuente {
			font-size: 13px;
		}

		.noticia-categoria {
			font-size: 11px;
		}

		.noticia-fecha {
			font-size: 11px;
		}

		.minimo-fuente {
			font-size: 12px;
		}

		.minimo-fuentefecha {
			font-size: 10px;
		}

		.minimo-espacio1 {
			width: 60px;
			padding: 5px;
		}

		.minimo-espacio2 {
			padding: 5px 10px;
			margin-right: 0px;
		}
	}
</style>

<style>
	.tooltip4 {
		text-decoration: none;
		position: relative;
	}

		.tooltip4 .tooltip-relleno {
			display: none;
		}

		.tooltip4:hover .tooltip-relleno {
			display: block;
			position: fixed;
			overflow: hidden;
			z-index: 1;
		}

	.tooltip-relleno {
		background-color: var(--fondoBotonPequeño);
		color: var(--colorTexto);
		border: 1px solid var(--fondoBoton);
		border-radius: 2px;
		z-index: 1;
	}
</style>

<style>
	.destacado-fondo {
		display: block;
	}

	.destacado-video {
		display: none;
	}

	.destacado-mostrar:hover .destacado-fondo{
		display: none;
	}

	.destacado-mostrar:hover .destacado-video {
		display: block;
	}

	.destacados-galeria-cursor {
		cursor: pointer;
	}

	.destacados-galeria-fila {
		display: flex;
		overflow: auto;
	}

		.destacados-galeria-fila:after {
			content: "";
			display: table;
			clear: both;
		}

	.destacados-galeria-columna {
		float: left;
		width: 16.66%;
		flex: 0 0 auto;
		padding: 3px 3px 0px 3px;
		aspect-ratio: 92/43;
	}

	.destacados-galeria-captura {
		opacity: 0.3;
		object-fit: cover;
		overflow: hidden;
		transition: transform .2s;
	}

	.destacados-galeria-captura:hover {
		opacity: 1;
		transform: scale(1.01);
	}

	.destacado-hueco {
		padding: 80px 60px 30px 60px;
	}

	.destacado-logo-ancho {
		max-width: 250px;
	}

	.destacado-logo-alto {
		height: 150px;
	}

	.destacado-precio-descuento {
		padding: 12px 15px;
		font-size: 22px;
	}

	.destacado-icono {
		width: 40px;
		height: 40px;
	}

	@@media (max-width: 800px) {
		.destacado-hueco {
			padding: 40px 30px 15px 30px;
		}

		.destacado-logo-ancho {
			max-width: 150px;
		}

		.destacado-logo-alto {
			height: 100px;
		}

		.destacado-precio-descuento {
			padding: 6px 8px;
			font-size: 15px;
		}

		.destacado-icono {
			width: 24px;
			height: 24px;
		}
	}

	.noticia-expandir {
		transition: transform .2s;
	}

		.noticia-expandir:hover {
			transform: scale(1.01);
		}

	.noticia-ancho {
		width: calc(33% - 16px);
	}

	@@media (max-width: 800px) {
		.noticia-ancho {
			width: calc(50% - 16px);
		}
	}
</style>

@if (aviso != null)
{
	if (string.IsNullOrEmpty(aviso.Mensaje.Trim()) == false)
	{
		<div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); font-size: 17px; display: flex; align-items: center; margin-bottom: 40px; flex-direction: initial;">
			<label style="padding-right: 20px;">@aviso.Fecha.Day.ToString()/@aviso.Fecha.Month.ToString()</label>
			
			@{
				bool hayEnlace = false;

				if (string.IsNullOrEmpty(aviso.Enlace.Trim()) == false)
				{
					if (aviso.Enlace.Contains("https://") == true)
					{
						hayEnlace = true;
					}
				}

				if (hayEnlace == true)
				{
					<a href="@aviso.Enlace" target="_blank" style="text-decoration: none;">@aviso.Mensaje</a>
				}
				else
				{
					<label>@aviso.Mensaje</label>
				}
			}	
		</div>
	}
}

@if (juegosDestacadosMostrar.Count > 0)
{
	<div style="margin-bottom: 60px; position: relative;">
		@if (juegoSeleccionado != null)
		{
			string colorSeleccionado = "var(--fondoOscuro)";

			if (Herramientas.Deseados.ComprobarSiEsta(usuario, juegoSeleccionado, juegoSeleccionado.PrecioMinimosHistoricos[0].DRM, true) == true)
			{
				colorSeleccionado = "var(--fondoAlerta)";
			}

			<a href="game/@juegoSeleccionado.IdMaestra/@Herramientas.EnlaceAdaptador.Nombre(juegoSeleccionado.Nombre)/">
				<div style="position: relative; padding: 3px; background-color: @colorSeleccionado;">
					<div class="destacado-mostrar">
						@if (string.IsNullOrEmpty(CargarVideo(juegoSeleccionado)) == false)
						{
							<div class="destacado-fondo">
								<img src="@juegoSeleccionado.Imagenes.Library_1920x620" style="width: 100%;" alt="@juegoSeleccionado.Nombre">
							</div>

							<div class="destacado-video">
								<video src="@CargarVideo(juegoSeleccionado)" autoplay="autoplay" loop muted style="height: 100%; width: 100%; overflow: hidden; aspect-ratio: 3.14/1; object-fit: cover;" />
							</div>
						}
						else
						{
							<img src="@juegoSeleccionado.Imagenes.Library_1920x620" style="width: 100%; aspect-ratio: 96/31;" alt="@juegoSeleccionado.Nombre">
						}

						<div style="position: absolute; left: 0; bottom: 0; width: 100%; background-image: linear-gradient(to bottom, rgba(255,0,0,0), @colorSeleccionado);
								display: flex; align-items: end;" class="destacado-hueco">

							<div class="destacado-logo-alto" style="width: 100%; height: 100%; display: flex; align-items: center;">
								<img src="@juegoSeleccionado.Imagenes.Logo" class="destacado-logo-ancho" alt="@juegoSeleccionado.Nombre">
							</div>

							<div style="display: flex; align-items: center; margin-bottom: 30px; color: var(--colorTexto);">
								<img class="destacado-icono" src="@CargarDRM(juegoSeleccionado)" style="margin-right: 20px;" alt="DRM" />
								<img class="destacado-icono" src="@CargarIconoTienda(juegoSeleccionado)" style="margin-right: 40px;" alt="Store" />

								<div class="destacado-precio-descuento" style="background-color: darkgreen;">
									@CargarDescuento(juegoSeleccionado)
								</div>
								<div class="destacado-precio-descuento" style="background-color: var(--fondoOscuro);">
									@CargarPrecio(juegoSeleccionado)
								</div>
							</div>
						</div>
					</div>
				</div>
			</a>
		}

		<div class="destacados-galeria-fila">
			@foreach (var destacado in juegosDestacadosMostrar)
			{
				bool mostrarBarra = false;
				string opacidad = string.Empty;

				if (juegoSeleccionado != null)
				{
					if (destacado.IdMaestra == juegoSeleccionado.IdMaestra)
					{
						opacidad = "opacity: 1;";
						mostrarBarra = true;
					}
				}

				string fondoDestacado = "background-color: var(--fondoOscuro);";

				if (Herramientas.Deseados.ComprobarSiEsta(usuario, destacado, destacado.PrecioMinimosHistoricos[0].DRM, true) == true)
				{
					fondoDestacado = "background-color: var(--fondoAlerta);";
				}

				<div class="destacados-galeria-columna" @onclick="@(e => CambiarJuegoDestacado(e, destacado))" style="@fondoDestacado">
					<img class="destacados-galeria-captura destacados-galeria-cursor" src="@destacado.Imagenes.Header_460x215" style="width: 100%; @opacidad" alt="@destacado.Nombre">

					@if (mostrarBarra == true)
					{
						int porcentaje = (cronometroContador * 100) / cronometroLimite;

						<div style="height: 3px; width: 100%; background-color: transparent;">
							<div style="height: 3px; background-color: var(--fondoCodigo); width: @porcentaje%;" />
						</div>
					}
				</div>
			}
		</div>
	</div>
}

@if (noticiasMostrar.Count > 0)
{
	<div style="display: flex; overflow: auto; padding-bottom: 20px; gap: 30px; scrollbar-color: var(--fondoCodigo) var(--fondoOscuro);">
		@foreach (var noticia in noticiasMostrar)
		{
			string marginExtra = string.Empty;

			if (noticiasMostrar.Count == 1 || noticiasMostrar.Count == 2)
			{
				marginExtra = "margin-left: auto; margin-right: auto;";
			}

			<div class="tooltip-juego noticia-ancho" style="float: left; flex: 0 0 auto; @marginExtra" onmousemove="hoverTooltip(event, 'tooltip-@noticia.Id.ToString()')">
				<div id="tooltip-@noticia.Id.ToString()" class="tooltip-relleno" style="padding: 15px; max-width: 400px;">
					@Herramientas.Idiomas.MirarTexto(idioma, @noticia.TituloEn, @noticia.TituloEs)
				</div>

				<div @onclick="(e => GestionarNoticia(e, noticia.Enlace, noticia.Id, noticia.Tipo))" style="height: 100%; cursor: pointer;">
					<div class="noticia-expandir" style="display: flex; flex-direction: column; color: var(--colorTexto); font-size: 14px; height: 100%; margin: 0 auto;">
						<div style="display: flex; align-items: center;">
							<div style="background-color: var(--fondoBotonPequeño); padding: 8px 12px; margin-left: auto;">
								@if (noticia.Tipo == NoticiaTipo.Bundles)
								{
									@Herramientas.Idiomas.CogerCadena(idioma, "News1", "Index")
								}
								else if (noticia.Tipo == NoticiaTipo.Gratis)
								{
									@Herramientas.Idiomas.CogerCadena(idioma, "News2", "Index")
								}
								else if (noticia.Tipo == NoticiaTipo.Suscripciones)
								{
									@Herramientas.Idiomas.CogerCadena(idioma, "News3", "Index")
								}
								else
								{
									@noticia.Tipo
								}
							</div>
						</div>

						<div style="background-color: var(--fondoBotonPequeño); padding: 1px; flex: 1;">
							<img src="@noticia.Imagen" style="width: 100%; height: 100%; object-fit: contain;" alt="@noticia.TituloEn" />
						</div>

						<div style="background-color: var(--fondoBotonPequeño); padding: 10px 12px; display: flex; align-items: center;">
							@{
								string icono = string.Empty;

								if (noticia.Tipo == NoticiaTipo.Bundles)
								{
									icono = Bundles2.BundlesCargar.DevolverBundle(noticia.BundleTipo).ImagenIcono;
								}
								else if (noticia.Tipo == NoticiaTipo.Gratis)
								{
									icono = Gratis2.GratisCargar.DevolverGratis(noticia.GratisTipo).ImagenIcono;
								}
								else if (noticia.Tipo == NoticiaTipo.Suscripciones)
								{
									icono = Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(noticia.SuscripcionTipo).ImagenIcono;
								}

								if (string.IsNullOrEmpty(icono) == false)
								{
									<div>
										<img src="@icono" style="width: 18px; height: 18px; margin-right: 20px;" alt="Store" />
									</div>
								}
							}

							<div style="margin-left: auto;">
								@Herramientas.Calculadora.DiferenciaTiempo(noticia.FechaEmpieza, idioma)
							</div>
						</div>
					</div>
				</div>
			</div>
		}
	</div>

	<div style="margin-bottom: 60px; margin-top: 20px; text-align: center;">
		<a class="boton-pequeño" style="padding: 15px 20px; font-size: 17px; text-align: center; min-width: 300px; width: auto;" href="/last-news">
			@Herramientas.Idiomas.CogerCadena(idioma, "LastNewsMore", "Index")
		</a>
	</div>
}
else
{
	<div style="margin-bottom: 60px; margin-left: auto; margin-right: auto; width: 700px;">
		<a class="boton-pequeño" style="width: 100%; padding: 15px 20px; font-size: 17px; text-align: center;" href="/last-news">
			@Herramientas.Idiomas.CogerCadena(idioma, "LastNewsNo", "Index")
		</a>
	</div>
}

<style>
	.noticia-panel {
		height: calc(100% - var(--alturaCabecera));
		width: 100%;
		left: 0;
		top: 0;
		overflow-x: auto;
		position: fixed;
		z-index: 1001;
		margin-top: var(--alturaCabecera);
		padding: 10px;
		backdrop-filter: blur(10px);
	}
</style>

@if (noticiaMostrarId > 0)
{
	<div class="noticia-panel">
		<div style="max-width: @noticiaMostrarAncho; margin: 20px auto; position: relative; -moz-box-shadow: 0 0 3px var(--fondoBotonPequeño); -webkit-box-shadow: 0 0 3px var(--fondoBotonPequeño); box-shadow: 0 0 3px var(--fondoBotonPequeño);">
			<div style="position: absolute; top: 0; right: -80px;">
				<button style="color: var(--colorTextoVisitado); background-color: var(--fondoBotonPequeño); border: 0px; padding: 8px 15px;" @onclick="(e => CerrarNoticia(e))">
					<i class="fa-solid fa-xmark" style="font-size: 30px;"></i>
				</button>
			</div>
			
			<Noticia idioma="@idioma" noticiaId="@noticiaMostrarId" cambiarEnlace="false"/>
		</div>		
	</div>
}

@* @if (sorteosActivos.Count > 2)
{
	<div style="margin-bottom: 50px; height: 200px;">
		<a href="/giveaways" class="boton-pequeño" style="text-decoration: none; padding: 1px;">
			<div style="overflow: hidden; position: relative; height: 150px; display: flex; align-items: center;">
				<div style="position: absolute; right: 0; top: 0;">
					@{
						int i = 0;
						while (i < 3)
						{
							if (sorteosActivos[i] != null)
							{
								Juegos.Juego sorteoJuego = BaseDatos.Juegos.Buscar.UnJuego(sorteosActivos[i].JuegoId.ToString());

								if (sorteoJuego != null)
								{
									<img src="@sorteoJuego.Imagenes.Library_600x900" style="opacity: 0.3; width: 200px; height: 300px; margin-left: 20px; margin-top: 20px; margin-right: 20px;" alt="@sorteoJuego.Nombre">
								}
							}

							i += 1;
						}
					}
				</div>

				<div style="position: relative; left: 15%; transform: translateX(-50%);">
					<div style="font-size: 24px;">
						@Herramientas.Idiomas.CogerCadena(idioma, "Index.Giveaways")
					</div>
				</div>
			</div>
		</a>
	</div>
} *@

@if (juegosMinimosMostrar.Count > 0)
{
	<div style="max-width: 1000px; margin: auto;">
		<div style="display: flex; font-size: 20px; align-items: center; justify-content: center;">
			<a href="/historical-lows" style="text-decoration: none; color: var(--colorEnlace);">@Herramientas.Idiomas.CogerCadena(idioma, "LastLows", "Index")</a>

			<div class="tooltip2" style="margin-left: 20px;">
				<i class="fa-solid fa-circle-info" style="font-size: 15px;"></i>
				<div class="tooltip-abrir tooltip-derecha" style="padding: 20px; min-width: 400px; max-width: 600px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "LastLowsInfo", "Index")
				</div>
			</div>
		</div>

		<div class="tooltip4" onmousemove="hover(event, 'tooltip-minimos')" style="margin-bottom: 25px;">
			<Virtualize Context="juego" Items="juegosMinimosMostrar" ItemSize="117" OverscanCount="6">
				<ItemContent>
					@{
						bool usuarioTieneJuego = Herramientas.Tooltip.ComprobarUsuarioTieneJuego(usuario, juegosUsuario, juego, juego.PrecioMinimosHistoricos[0].DRM);
						bool usuarioTieneDeseado = false;

						string fondoColor = string.Empty;
						string fondoDescuento = "background-color: darkgreen;";

						if (usuarioTieneJuego == true)
						{
							fondoColor = "background-color: var(--fondoBien);";
							fondoDescuento = "backdrop-filter: brightness(70%);";
						}
						else
						{
							usuarioTieneDeseado = Herramientas.Deseados.ComprobarSiEsta(usuario, juego, juego.PrecioMinimosHistoricos[0].DRM, true);

							if (usuarioTieneDeseado == true)
							{
								fondoColor = "background-color: var(--fondoAlerta);";
								fondoDescuento = "backdrop-filter: brightness(70%);";
							}
						}
					}
					
					<div class="perfil-flexible-centrado" style="margin-top: 20px;" @onmouseover="@(e => CargarTooltip(e, juego))">
						<a class="boton-pequeño" style="padding: 2px; @fondoColor" href="/game/@juego.IdMaestra/@Herramientas.EnlaceAdaptador.Nombre(juego.Nombre)/">
							<div class="perfil-flexible-centrado">
								<div style="max-width: 230px;">
									<img src="@juego.Imagenes.Header_460x215" style="height: 100%; width: 100%;" alt="@juego.Nombre" />
								</div>

								<div style="width: 100%; display: flex; flex-flow: column wrap; padding: 15px 20px;">
									<div class="minimo-fuente">@juego.Nombre</div>
									<div style="margin-top: 15px; display: flex; align-items: center;">
										<img src="@CargarDRM(juego)" style="width: 16px; height: 16px; margin-right: 10px;" alt="DRM" />
										<img src="@CargarIconoTienda(juego)" style="width: 16px; height: 16px; margin-right: 10px;" alt="Store" />
										<div class="minimo-fuentefecha">@CargarFechaDetectado(juego)</div>
									</div>
								</div>

								<div style="display: flex; align-items: center;">
									<div style="text-align: center; padding: 10px 15px; margin: 0px; min-width: 65px; @fondoDescuento">
										@CargarDescuento(juego)
									</div>

									<div style="padding: 5px 15px; min-width: 110px; text-align: center; font-size: 18px;">
										@CargarPrecio(juego)
									</div>
								</div>
							</div>
						</a>
					</div>
				</ItemContent>
			</Virtualize>

			<div id="tooltip-minimos" class="tooltip-relleno">
				@if (string.IsNullOrEmpty(tooltipVideo) == false)
				{
					<video src="@tooltipVideo" autoplay="autoplay" loop muted style="width: 460px; height: 215px; object-fit: cover;" />
				}

				<div style="padding: 12px; max-width: 430px;">
					<label style="padding-left: 5px; padding-right: 5px;">@tooltipNombre</label>
					<div style="display: flex; align-items: center; margin-top: 5px; padding: 5px; text-align: left; justify-content: left;">
						<div style="margin-right: 20px;">
							<img src="@tooltipDRM" style="max-width: 20px; max-height: 20px;" alt="DRM" />
						</div>
						<div style="margin-right: 20px;">
							<img src="@tooltipTienda" style="width: 20px; height: 20px;" alt="Store" />
						</div>

						@if (string.IsNullOrEmpty(tooltipReviews) == false)
						{
							<div style="margin-right: 20px;">
								<img src="@tooltipReviews" style="width: 20px; height: 20px;" alt="Reviews" />
							</div>
						}

						<div style="margin-right: 15px; background-color: darkgreen; padding: 5px 10px;">
							@tooltipDescuento
						</div>
						<div>
							@tooltipPrecio
						</div>
					</div>

					@if (string.IsNullOrEmpty(tooltipBundles) == false || string.IsNullOrEmpty(tooltipGratis) == false || string.IsNullOrEmpty(tooltipSuscripciones) == false)
					{
						<div style="font-size: 14px; margin-top: 5px; padding: 5px;">
							<div>
								@Herramientas.Idiomas.CogerCadena(idioma, "Tooltip1", "Index")
							</div>

							@if (string.IsNullOrEmpty(tooltipBundles) == false)
							{
								<div>
									• @tooltipBundles
								</div>
							}

							@if (string.IsNullOrEmpty(tooltipGratis) == false)
							{
								<div>
									• @tooltipGratis
								</div>
							}

							@if (string.IsNullOrEmpty(tooltipSuscripciones) == false)
							{
								<div>
									• @tooltipSuscripciones
								</div>
							}
						</div>
					}
				</div>
			</div>
		</div>

		<div style="margin-bottom: 20px; margin-left: auto; margin-right: auto; width: 400px;">
			<a class="boton-pequeño" style="width: 100%; padding: 15px 20px; font-size: 17px; text-align: center;" href="/historical-lows?mode=last">
				@Herramientas.Idiomas.CogerCadena(idioma, "LastLowsMore", "Index")
			</a>
		</div>
	</div>	
}

<script>
	function hover(e, id) {
		var x = e.clientX,
			y = e.clientY;

		var tooltip = document.getElementById(id);

		if (screen.width / 2 > x) {
			tooltip.style.top = (y + 10) + 'px';
			tooltip.style.left = (x + 20) + 'px';
		}
		else {
			tooltip.style.top = (y - 10) + 'px';
			tooltip.style.left = (x - 20 - tooltip.getBoundingClientRect().width) + 'px';
		};
	};
</script>

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	private Usuario usuario = new Usuario();
	private List<string> juegosUsuario = new List<string>();

	private BaseDatos.Avisos.Aviso aviso = null;

	private List<Juegos.Juego> juegosMinimosMostrar = new List<Juegos.Juego>();

	private List<Sorteos2.Sorteo> sorteosActivos = new List<Sorteos2.Sorteo>();

	protected override async Task OnInitializedAsync()
	{
		usuario = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);

		if (usuario != null)
		{
			if (string.IsNullOrEmpty(usuario.SteamAccount) == false && string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
			{
				bool tiempo = true;

				if (string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
				{
					if (Convert.ToDateTime(usuario.SteamAccountLastCheck) + TimeSpan.FromDays(7) > DateTime.Now)
					{
						tiempo = false;
					}
				}

				if (tiempo == true)
				{
					SteamUsuario datos = await APIs.Steam.Cuenta.CargarDatos(usuario.SteamAccount);

					usuario.SteamGames = datos.Juegos;
					usuario.SteamWishlist = datos.Deseados;
					usuario.Avatar = datos.Avatar;
					usuario.Nickname = datos.Nombre;
					usuario.SteamAccountLastCheck = DateTime.Now.ToString();
					usuario.OfficialGroup = datos.GrupoPremium;
					usuario.OfficialGroup2 = datos.GrupoNormal;

					await UserManager.UpdateAsync(usuario);
				}
			}

			juegosUsuario = Herramientas.Listados.Generar(usuario.SteamGames);
		}

		//------------------------------------------------

		SqlConnection conexion = Herramientas.BaseDatos.Conectar();

		using (conexion)
		{
			#region Aviso

			aviso = BaseDatos.Avisos.Buscar.Ejecutar(idioma, conexion);

			#endregion

			#region Minimos

			try
			{
				juegosMinimosMostrar = BaseDatos.Juegos.Buscar.Todos(conexion, "portadaJuegosMinimos");
			}
			catch { }

			if (juegosMinimosMostrar != null)
			{
				if (juegosMinimosMostrar.Count > 0)
				{
					juegosMinimosMostrar = juegosMinimosMostrar.OrderBy(j => j.PrecioMinimosHistoricos[0].FechaDetectado).Reverse().ToList();
				}
			}			

			#endregion

			#region Noticias

			try
			{
				noticiasGestor = BaseDatos.Noticias.Buscar.Ultimas(conexion, "30");
			}
			catch { }

			if (noticiasGestor != null)
			{
				if (noticiasGestor.Count > 0)
				{
					noticiasGestor = noticiasGestor.OrderBy(x => x.FechaEmpieza).Reverse().ToList();

					foreach (Noticias.Noticia noticia in noticiasGestor)
					{
						DateTime fechaTemporal = noticia.FechaEmpieza;
						fechaTemporal = fechaTemporal.AddDays(3);

						if (fechaTemporal > DateTime.Now)
						{
							bool añadir = true;

							if (DateTime.Now > noticia.FechaTermina)
							{
								añadir = false;
							}

							if (noticiasMostrar.Count > 0)
							{
								foreach (var noticiaMostrar in noticiasMostrar)
								{
									if (noticiaMostrar.Id == noticia.Id)
									{
										añadir = false;
									}
								}
							}

							if (añadir == true)
							{
								noticiasMostrar.Add(noticia);
							}							
						}
					}
				}
			}

			#endregion

			#region Sorteos

			sorteosActivos = BaseDatos.Sorteos.Buscar.Activos(conexion);

			#endregion
		}
	}

	protected override void OnAfterRender(bool primerRender)
	{
		if (primerRender == true)
		{
			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				#region Destacados

				try
				{
					juegosDestacadosGestor = BaseDatos.Juegos.Buscar.Todos(conexion, "portadaJuegosDestacados");
				}
				catch (Exception ex)
				{
					BaseDatos.Errores.Insertar.Ejecutar("Portada", ex, conexion);
				}

				CargarJuegosDestacados();

				#endregion
			}

			CronometroDestacados();
		}
	}

	private List<Juegos.Juego> juegosDestacadosGestor = new List<Juegos.Juego>();
	private List<Juegos.Juego> juegosDestacadosMostrar = new List<Juegos.Juego>();
	private Juegos.Juego juegoSeleccionado = new Juegos.Juego();
	private PeriodicTimer cronometro = null;
	private int cronometroContador = 0;
	private int cronometroLimite = 30;

	private void CambiarJuegoDestacado(MouseEventArgs args, Juegos.Juego nuevoJuego)
	{
		juegoSeleccionado = nuevoJuego;

		cronometroContador = 0;
		cronometro.Dispose();
		CronometroDestacados();
	}

	private void CargarJuegosDestacados()
	{
		if (juegosDestacadosGestor != null)
		{
			if (juegosDestacadosGestor.Count > 0)
			{
				juegosDestacadosMostrar.Clear();

				juegosDestacadosGestor = juegosDestacadosGestor.OrderBy(x => Random.Shared.Next()).ToList();

				foreach (var destacadoGestor in juegosDestacadosGestor)
				{
					bool usuarioTieneJuego = Herramientas.Tooltip.ComprobarUsuarioTieneJuego(usuario, juegosUsuario, destacadoGestor, destacadoGestor.PrecioMinimosHistoricos[0].DRM);

					if (usuarioTieneJuego == false)
					{
						juegosDestacadosMostrar.Add(destacadoGestor);
					}

					if (juegosDestacadosMostrar.Count == 6)
					{
						break;
					}
				}

				juegoSeleccionado = juegosDestacadosMostrar[0];
			}
		}
	}

	private async void CronometroDestacados()
	{
		cronometro = new PeriodicTimer(TimeSpan.FromSeconds(1));
		while (await cronometro.WaitForNextTickAsync())
		{
			cronometroContador += 1;

			if (cronometroContador == cronometroLimite)
			{
				bool tomarSiguiente = false;

				int i = 0;
				foreach (var destacado in juegosDestacadosMostrar)
				{
					if (tomarSiguiente == true)
					{
						juegoSeleccionado = destacado;
						break;
					}

					if (destacado.IdMaestra == juegoSeleccionado.IdMaestra)
					{
						tomarSiguiente = true;
					}

					i += 1;
				}

				if (i == juegosDestacadosMostrar.Count)
				{
					CargarJuegosDestacados();
				}

				cronometroContador = 0;
			}

			await InvokeAsync(StateHasChanged);
		}
	}

	private string tooltipNombre = string.Empty;
	private string tooltipDescuento = string.Empty;
	private string tooltipPrecio = string.Empty;
	private string tooltipDRM = string.Empty;
	private string tooltipTienda = string.Empty;
	private string tooltipTiempo = string.Empty;
	private string tooltipVideo = string.Empty;
	private string tooltipReviews = string.Empty;
	private string tooltipBundles = string.Empty;
	private string tooltipGratis = string.Empty;
	private string tooltipSuscripciones = string.Empty;

	private void CargarTooltip(MouseEventArgs args, Juegos.Juego juego)
	{
		tooltipNombre = juego.Nombre;
		tooltipDescuento = CargarDescuento(juego);
		tooltipPrecio = CargarPrecio(juego);
		tooltipDRM = CargarDRM(juego);
		tooltipTienda = CargarIconoTienda(juego);
		tooltipTiempo = CargarFechaDetectado(juego);
		tooltipVideo = CargarVideo(juego);
		tooltipReviews = null;
		tooltipBundles = null;
		tooltipGratis = null;
		tooltipSuscripciones = null;

		if (juego.Analisis != null)
		{
			if (int.Parse(juego.Analisis.Porcentaje) > 74)
			{
				tooltipReviews = "/imagenes/analisis/positive.webp";
			}
			else if (int.Parse(juego.Analisis.Porcentaje) > 49 && int.Parse(juego.Analisis.Porcentaje) < 75)
			{
				tooltipReviews = "/imagenes/analisis/mixed.webp";
			}
			else if (int.Parse(juego.Analisis.Porcentaje) < 50)
			{
				tooltipReviews = "/imagenes/analisis/negative.webp";
			}
		}

		if (juego.Bundles != null)
		{
			if (juego.Bundles.Count == 1)
			{
				tooltipBundles = Herramientas.Idiomas.CogerCadena(idioma, "Tooltip2", "Index");
			}
			else if (juego.Bundles.Count > 1)
			{
				tooltipBundles = string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Tooltip3", "Index"), juego.Bundles.Count.ToString());
			}			
		}

		if (juego.Gratis != null)
		{
			if (juego.Gratis.Count == 1)
			{
				tooltipGratis = Herramientas.Idiomas.CogerCadena(idioma, "Tooltip4", "Index");
			}
			else if (juego.Gratis.Count > 1)
			{
				tooltipGratis = string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Tooltip5", "Index"), juego.Gratis.Count.ToString());
			}
		}

		if (juego.Suscripciones != null)
		{
			if (juego.Suscripciones.Count == 1)
			{
				tooltipSuscripciones = Herramientas.Idiomas.CogerCadena(idioma, "Tooltip6", "Index");
			}
			else if (juego.Suscripciones.Count > 1)
			{
				tooltipSuscripciones = string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Tooltip7", "Index"), juego.Suscripciones.Count.ToString());
			}
		}
	}

	private string CargarDRM(Juegos.Juego juego)
	{
		string imagen = null;

		JuegoPrecio oferta = juego.PrecioMinimosHistoricos[0];
		List<Juegos.DRM> drms = Juegos.JuegoDRM2.GenerarListado();

		foreach (var drm in drms)
		{
			if (drm.Id == oferta.DRM)
			{
				imagen = drm.Imagen;
			}
		}

		if (imagen != null)
		{
			return imagen;
		}
		else
		{
			return null;
		}
	}

	private string CargarIconoTienda(Juegos.Juego juego)
	{
		string imagen = null;

		JuegoPrecio oferta = juego.PrecioMinimosHistoricos[0];
		List<Tiendas2.Tienda> tiendas = Tiendas2.TiendasCargar.GenerarListado();

		foreach (var tienda in tiendas)
		{
			if (tienda.Id == oferta.Tienda)
			{
				imagen = tienda.ImagenIcono;
			}
		}

		if (imagen != null)
		{
			return imagen;
		}
		else
		{
			return null;
		}
	}

	private string CargarDescuento(Juegos.Juego juego)
	{
		string descuentoMensaje = null;

		descuentoMensaje = juego.PrecioMinimosHistoricos[0].Descuento.ToString();
		descuentoMensaje = descuentoMensaje + "%";

		if (descuentoMensaje != null)
		{
			return descuentoMensaje;
		}
		else
		{
			return null;
		}
	}

	private string CargarPrecio(Juegos.Juego juego)
	{
		string precioMensaje = null;

		precioMensaje = juego.PrecioMinimosHistoricos[0].Precio.ToString();
		precioMensaje = precioMensaje.Replace(".", ",");

		int int1 = precioMensaje.IndexOf(",");

		if (int1 == precioMensaje.Length - 2)
		{
			precioMensaje = precioMensaje + "0";
		}

		if (precioMensaje.Length > int1 + 3)
		{
			precioMensaje = precioMensaje.Remove(int1 + 3, precioMensaje.Length - int1 - 3);
		}

		precioMensaje = precioMensaje + "€";

		if (precioMensaje != null)
		{
			return precioMensaje;
		}
		else
		{
			return null;
		}
	}

	private string CargarFechaDetectado(Juegos.Juego juego)
	{
		string mensaje = null;

		if (juego.PrecioMinimosHistoricos[0].FechaDetectado.Year > 2023)
		{
			mensaje = Herramientas.Calculadora.DiferenciaTiempo(juego.PrecioMinimosHistoricos[0].FechaDetectado, idioma);
		}

		return mensaje;
	}

	private string CargarVideo(Juegos.Juego juego)
	{
		string video = null;

		if (juego.Media != null)
		{
			if (string.IsNullOrEmpty(juego.Media.Video) == false)
			{
				int int1 = juego.Media.Video.LastIndexOf("/");
				string temp1 = juego.Media.Video.Remove(int1, juego.Media.Video.Length - int1);

				video = temp1 + "/microtrailer.webm";

				video = video.Replace("cdn.akamai.steamstatic.com/", "cdn.cloudflare.steamstatic.com/");
				video = video.Replace("http://", "https://");
			}
		}

		return video;
	}

	#region Noticias

	private List<Noticias.Noticia> noticiasMostrar = new List<Noticias.Noticia>();
	private List<Noticias.Noticia> noticiasGestor = new List<Noticias.Noticia>();
	private int noticiaMostrarId = 0;
	private string noticiaMostrarAncho = "1000px";

	private async void GestionarNoticia(MouseEventArgs e, string noticiaEnlace, int noticiaId, NoticiaTipo noticiaTipo)
	{
		if (string.IsNullOrEmpty(noticiaEnlace) == false)
		{
			await JavaScript.InvokeVoidAsync("open", noticiaEnlace, "_blank");
		}
		else
		{
			if (noticiaId > 0)
			{
				noticiaMostrarId = noticiaId;
			}
		}

		if (noticiaTipo == NoticiaTipo.Bundles)
		{
			noticiaMostrarAncho = "1200px";
		}
		else
		{
			noticiaMostrarAncho = "1000px";
		}
	}

	private void CerrarNoticia(MouseEventArgs e)
	{
		noticiaMostrarId = 0;
	}

	#endregion
}
