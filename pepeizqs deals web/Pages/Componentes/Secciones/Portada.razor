@using APIs.Steam
@using BaseDatos.Juegos
@using Blazored.Video
@using Blazored.Video.Support
@using Juegos
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient
@using Microsoft.JSInterop
@using Microsoft.VisualBasic
@using Newtonsoft.Json
@using Noticias
@using pepeizqs_deals_web.Areas.Identity.Data
@using pepeizqs_deals_web.Pages.Componentes.Interfaz

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JavaScript
@inject NavigationManager NavManager

<style>
	.noticia-fuente {
		font-size: 18px;
	}

	.noticia-categoria {
		font-size: 15px;
	}

	.noticia-fecha {
		font-size: 15px;
	}

	@@media (max-width: 800px) {
		.noticia-fuente {
			font-size: 13px;
		}

		.noticia-categoria {
			font-size: 11px;
		}

		.noticia-fecha {
			font-size: 11px;
		}
	}
</style>

<style>
	.tooltip4 {
		text-decoration: none;
		position: relative;
	}

		.tooltip4 .tooltip-relleno {
			display: none;
		}

		.tooltip4:hover .tooltip-relleno {
			display: block;
			position: fixed;
			overflow: hidden;
			z-index: 1;
		}

	.tooltip-relleno {
		background-color: var(--fondoBotonPequeño);
		color: var(--colorTexto);
		border: 1px solid var(--fondoBoton);
		border-radius: 2px;
		z-index: 1;
	}
</style>

<style>
	.destacado-fondo {
		display: block;
	}

	.destacado-video {
		display: none;
	}

	.destacado-mostrar:hover .destacado-fondo{
		display: none;
	}

	.destacado-mostrar:hover .destacado-video {
		display: block;
	}

	.destacados-galeria-cursor {
		cursor: pointer;
	}

	.destacados-galeria-fila {
		display: flex;
		overflow: auto;
	}

		.destacados-galeria-fila:after {
			content: "";
			display: table;
			clear: both;
		}

	.destacados-galeria-columna {
		float: left;
		width: 16.66%;
		flex: 0 0 auto;
		padding: 3px 3px 0px 3px;
		aspect-ratio: 92/43;
	}

	.destacados-galeria-captura {
		opacity: 0.3;
		object-fit: cover;
		overflow: hidden;
		transition: transform .2s;
	}

	.destacados-galeria-captura:hover {
		opacity: 1;
		transform: scale(1.01);
	}

	.destacado-hueco {
		padding: 80px 60px 30px 60px;
	}

	.destacado-logo-medidas {
		max-width: 250px;
		max-height: 200px;
	}

	.destacado-logo-alto {
		height: 150px;
	}

	.destacado-precio-descuento {
		padding: 12px 15px;
		font-size: 22px;
	}

	.destacado-icono {
		width: 40px;
		height: 40px;
	}

	@@media (max-width: 800px) {
		.destacado-hueco {
			padding: 40px 30px 15px 30px;
		}

		.destacado-logo-medidas {
			max-width: 150px;
			max-height: 120px;
		}

		.destacado-logo-alto {
			height: 100px;
		}

		.destacado-precio-descuento {
			padding: 6px 8px;
			font-size: 15px;
		}

		.destacado-icono {
			width: 24px;
			height: 24px;
		}
	}

	.noticia-expandir {
		transition: transform .2s;
	}

		.noticia-expandir:hover {
			transform: scale(1.01);
		}

	.noticia-ancho {
		width: calc(33% - 16px);
	}

	@@media (max-width: 800px) {
		.noticia-ancho {
			width: calc(50% - 16px);
		}
	}
</style>

@if (juegosDestacadosMostrar.Count > 0)
{
	<div style="margin-bottom: 60px; position: relative;">
		@if (juegoSeleccionado != null)
		{
			string colorSeleccionado = "var(--fondoOscuro)";

			if (Herramientas.Tooltip.ComprobarUsuarioTieneJuego(usuarioJuegosSteam, juegoSeleccionado, juegoSeleccionado.PrecioMinimosHistoricos[0].DRM) == true)
			{
				colorSeleccionado = "var(--fondoBien)";
			}

			if (Herramientas.Deseados.ComprobarSiEsta(usuario?.SteamWishlist, usuario?.Wishlist, juegoSeleccionado, juegoSeleccionado.PrecioMinimosHistoricos[0].DRM, true) == true)
			{
				colorSeleccionado = "var(--fondoAlerta)";
			}

			<a href="game/@juegoSeleccionado.IdMaestra/@Herramientas.EnlaceAdaptador.Nombre(juegoSeleccionado.Nombre)/">
				<div style="position: relative; padding: 3px; background-color: @colorSeleccionado;">
					<div class="destacado-mostrar">
						@{
							string video = string.Empty;

							if (juegoSeleccionado.Media != null)
							{
								if (string.IsNullOrEmpty(juegoSeleccionado.Media.Video) == false)
								{
									int int2 = juegoSeleccionado.Media.Video.LastIndexOf("/");
									string temp1 = juegoSeleccionado.Media.Video.Remove(int2, juegoSeleccionado.Media.Video.Length - int2);

									video = temp1 + "/microtrailer.webm";

									video = video.Replace("cdn.akamai.steamstatic.com/", "cdn.cloudflare.steamstatic.com/");
									video = video.Replace("http://", "https://");
								}
							}
						}

						@if (string.IsNullOrEmpty(video) == false)
						{
							<div class="destacado-fondo">
								<img src="@juegoSeleccionado.Imagenes.Library_1920x620" style="width: 100%;" alt="@juegoSeleccionado.Nombre">
							</div>

							<div class="destacado-video">
								<video src="@video" autoplay="true" loop muted style="height: 100%; width: 100%; overflow: hidden; aspect-ratio: 3.14/1; object-fit: cover;" />
							</div>
						}
						else
						{
							<img src="@juegoSeleccionado.Imagenes.Library_1920x620" style="width: 100%; aspect-ratio: 96/31;" alt="@juegoSeleccionado.Nombre">
						}

						<div style="position: absolute; left: 0; bottom: 0; width: 100%; background-image: linear-gradient(to bottom, rgba(255,0,0,0), @colorSeleccionado);
									display: flex; align-items: end;" class="destacado-hueco">

							<div class="destacado-logo-alto" style="width: 100%; height: 100%; display: flex; align-items: center;">
								<img src="@juegoSeleccionado.Imagenes.Logo" class="destacado-logo-medidas" alt="@juegoSeleccionado.Nombre">
							</div>

							<div style="display: flex; align-items: center; margin-bottom: 30px; color: var(--colorTexto);">
								<img class="destacado-icono" src="@JuegoDRM2.SacarImagen(juegoSeleccionado.PrecioMinimosHistoricos[0].DRM)" style="margin-right: 20px;" alt="DRM" />

								@{
									string iconoTienda = string.Empty;
									List<Tiendas2.Tienda> tiendas = Tiendas2.TiendasCargar.GenerarListado();

									foreach (var tienda in tiendas)
									{
										if (tienda.Id == juegoSeleccionado.PrecioMinimosHistoricos[0].Tienda)
										{
											iconoTienda = tienda.ImagenIcono;
											break;
										}
									}
								}

								<img class="destacado-icono" src="@iconoTienda" style="margin-right: 40px;" alt="Store" />

								<div class="destacado-precio-descuento" style="background-color: darkgreen;">
									@juegoSeleccionado.PrecioMinimosHistoricos[0].Descuento.ToString()%
								</div>
								<div class="destacado-precio-descuento" style="background-color: var(--fondoOscuro);">
									@{
										string precioMensaje = juegoSeleccionado.PrecioMinimosHistoricos[0].Precio.ToString();
										precioMensaje = precioMensaje.Replace(".", ",");

										int int1 = precioMensaje.IndexOf(",");

										if (int1 == precioMensaje.Length - 2)
										{
											precioMensaje = precioMensaje + "0";
										}

										if (precioMensaje.Length > int1 + 3)
										{
											precioMensaje = precioMensaje.Remove(int1 + 3, precioMensaje.Length - int1 - 3);
										}

										precioMensaje = precioMensaje + "€";

										@precioMensaje
									}
								</div>
							</div>
						</div>
					</div>
				</div>
			</a>
		}

		<div class="destacados-galeria-fila">
			@foreach (var destacado in juegosDestacadosMostrar)
			{
				bool mostrarBarra = false;
				string opacidad = string.Empty;

				if (juegoSeleccionado != null)
				{
					if (destacado.IdMaestra == juegoSeleccionado.IdMaestra)
					{
						opacidad = "opacity: 1;";
						mostrarBarra = true;
					}
				}

				string fondoDestacado = "background-color: var(--fondoOscuro);";

				if (Herramientas.Tooltip.ComprobarUsuarioTieneJuego(usuarioJuegosSteam, destacado, destacado.PrecioMinimosHistoricos[0].DRM) == true)
				{
					fondoDestacado = "background-color: var(--fondoBien);";
				}

				if (Herramientas.Deseados.ComprobarSiEsta(usuario?.SteamWishlist, usuario?.Wishlist, destacado, destacado.PrecioMinimosHistoricos[0].DRM, true) == true)
				{
					fondoDestacado = "background-color: var(--fondoAlerta);";
				}

				<div class="destacados-galeria-columna" @onclick="@(e => CambiarJuegoDestacado(e, destacado))" style="@fondoDestacado">
					<img class="destacados-galeria-captura destacados-galeria-cursor" src="@destacado.Imagenes.Header_460x215" style="width: 100%; @opacidad" alt="@destacado.Nombre">

					@if (mostrarBarra == true)
					{
						int porcentaje = (cronometroContador * 100) / cronometroLimite;

						<div style="height: 3px; width: 100%; background-color: transparent;">
							<div style="height: 3px; background-color: var(--fondoCodigo); width: @porcentaje%;" />
						</div>
					}
				</div>
			}
		</div>
	</div>
}

@if (noticiasMostrar.Count > 0)
{
	<div style="background-color: var(--fondoOscuro); padding: 30px; margin-bottom: 60px;">
		<div style="display: flex; overflow: auto; padding-bottom: 20px; gap: 30px; scrollbar-color: var(--fondoCodigo) var(--fondoOscuro);">
			@foreach (var noticia in noticiasMostrar)
			{
				string marginExtra = string.Empty;

				if (noticiasMostrar.Count == 1 || noticiasMostrar.Count == 2)
				{
					marginExtra = "margin-left: auto; margin-right: auto;";
				}

				<div class="noticia-ancho" style="float: left; flex: 0 0 auto; @marginExtra">
					<div class="tooltip-juego" onmousemove="hoverTooltip(event, 'tooltip-@noticia.Id.ToString()')" style="height: 100%;">
						@{
							string titulo = Herramientas.Idiomas.MirarTexto(idioma, noticia.TituloEn, noticia.TituloEs);
						}

						<div id="tooltip-@noticia.Id.ToString()" class="tooltip-relleno" style="padding: 15px; max-width: 400px;">
							@titulo
						</div>

						<div @onclick="(e => GestionarNoticia(e, noticia.Enlace, noticia.Id, titulo, noticia.Tipo))" style="height: 100%; cursor: pointer;">
							<div class="noticia-expandir" style="display: flex; flex-direction: column; color: var(--colorTexto); font-size: 14px; height: 100%; margin: 0 auto;">
								<div style="display: flex; align-items: center;">
									@if (usuario != null)
									{
										if (BaseDatos.Usuarios.Buscar.RolDios(usuario.Id) == true)
										{
											<div style="width: auto;">
												<a href="/news/@noticia.Id">Editar</a>
											</div>
										}
									}

									<div style="background-color: var(--fondoBotonPequeño); padding: 8px 12px; margin-left: auto;">
										@if (noticia.Tipo == NoticiaTipo.Bundles)
										{
											@Herramientas.Idiomas.CogerCadena(idioma, "News1", "Index")
										}
										else if (noticia.Tipo == NoticiaTipo.Gratis)
										{
											@Herramientas.Idiomas.CogerCadena(idioma, "News2", "Index")
										}
										else if (noticia.Tipo == NoticiaTipo.Suscripciones)
										{
											@Herramientas.Idiomas.CogerCadena(idioma, "News3", "Index")
										}
										else if (noticia.Tipo == NoticiaTipo.Rumores)
										{
											@Herramientas.Idiomas.CogerCadena(idioma, "News4", "Index")
										}
										else if (noticia.Tipo == NoticiaTipo.Web)
										{
											@Herramientas.Idiomas.CogerCadena(idioma, "News5", "Index")
										}
										else
										{
											@noticia.Tipo
										}
									</div>
								</div>

								<div style="background-color: var(--fondoBotonPequeño); padding: 2px; height: 100%;">
									<img src="@noticia.Imagen" style="width: 100%; height: 100%; max-height: 230px; object-fit: contain;" alt="@noticia.TituloEn" />
								</div>

								<div style="background-color: var(--fondoBotonPequeño); padding: 10px 12px; display: flex; align-items: center;">
									@{
										string icono = string.Empty;

										if (noticia.Tipo == NoticiaTipo.Bundles)
										{
											icono = Bundles2.BundlesCargar.DevolverBundle(noticia.BundleTipo).ImagenIcono;
										}
										else if (noticia.Tipo == NoticiaTipo.Gratis)
										{
											icono = Gratis2.GratisCargar.DevolverGratis(noticia.GratisTipo).ImagenIcono;
										}
										else if (noticia.Tipo == NoticiaTipo.Suscripciones)
										{
											icono = Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(noticia.SuscripcionTipo).ImagenIcono;
										}

										if (string.IsNullOrEmpty(icono) == false)
										{
											<div>
												<img src="@icono" style="width: 18px; height: 18px; margin-right: 20px;" alt="Store" />
											</div>
										}
									}

									<div style="margin-left: auto;">
										@Herramientas.Calculadora.DiferenciaTiempo(noticia.FechaEmpieza, idioma)
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			}
		</div>

		<div style="display: flex; align-items: center; justify-content: center; margin: 20px auto 0px auto; gap: 80px;">
			<a class="boton-pequeño" style="padding: 15px 20px; font-size: 17px; text-align: center; min-width: 300px; width: auto;" href="/last-news">
				@Herramientas.Idiomas.CogerCadena(idioma, "LastNewsMore", "Index")
			</a>

			<div style="display: flex; flex-direction: column; gap: 10px">
				<label>@Herramientas.Idiomas.CogerCadena(idioma, "LastNewsSocial", "Index")</label>

				<pepeizqs_deals_web.Pages.Componentes.Interfaz.RedesSociales idioma="@idioma" tamañoFuente="22px"/>
			</div>
		</div>
	</div>
}
else
{
	<div style="background-color: var(--fondoOscuro); padding: 30px; margin-bottom: 60px; max-width: 1000px; margin-left: auto; margin-right: auto; display: flex; align-items: center; justify-content: center; gap: 80px;">
		<a class="boton-pequeño" style="padding: 15px 20px; font-size: 17px; text-align: center; min-width: 300px; width: auto;" href="/last-news">
			@Herramientas.Idiomas.CogerCadena(idioma, "LastNewsMore", "Index")
		</a>

		<div style="display: flex; flex-direction: column; gap: 10px">
			<label>@Herramientas.Idiomas.CogerCadena(idioma, "LastNewsSocial", "Index")</label>

			<pepeizqs_deals_web.Pages.Componentes.Interfaz.RedesSociales idioma="@idioma" tamañoFuente="22px"/>
		</div>
	</div>
}

@if (noticiaMostrarId > 0)
{
	<div class="opciones-panel">
		<div style="max-width: @noticiaMostrarAncho; margin: 20px auto; position: relative; overflow-y: scroll; padding-right: 20px; scrollbar-color: var(--fondoCodigo) var(--fondoOscuro);">
			<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px; margin-bottom: 20px; display: flex; align-items: center; gap: 40px;">
				<button class="boton-pequeño" @onclick="CerrarNoticia" style="width: auto; padding: 5px 15px; border: 0px; color: var(--colorTextoVisitado); font-size: 22px;">
					<i class="fa-solid fa-arrow-left"></i>
				</button>

				<div style="font-size: 20px;">
					@noticiaMostrarTitulo
				</div>
			</div>
			
			<Noticia idioma="@idioma" noticiaId="@noticiaMostrarId" cambiarEnlace="false" tipo="Noticia.Tipo.Portada"/>
		</div>		
	</div>
}

@if (juegosMinimosMostrar.Count > 0)
{
	<div style="max-width: 1000px; margin: auto;">
		<div style="display: flex; font-size: 20px; align-items: center; justify-content: center; margin-bottom: 20px;">
			<div style="display: flex; align-items: center; justify-content: center; width: 100%;">
				<a href="/historical-lows" style="text-decoration: none; color: var(--colorEnlace);">@Herramientas.Idiomas.CogerCadena(idioma, "LastLows", "Index")</a>

				<div class="tooltip2" style="margin-left: 20px;">
					<i class="fa-solid fa-circle-info" style="font-size: 15px;"></i>
					<div class="tooltip-abrir tooltip-derecha" style="padding: 20px; min-width: 400px; max-width: 600px;">
						@Herramientas.Idiomas.CogerCadena(idioma, "LastLowsInfo", "Index")
					</div>
				</div>
			</div>

			<button class="boton-pequeño" @onclick="EnseñarFiltrado" style="width: auto; padding: 10px 15px; margin-left: 30px; border: 0px; color: var(--colorTextoVisitado);">
				@Herramientas.Idiomas.CogerCadena(idioma, "Filter", "Index")
			</button>
		</div>

		<div style="display: flex; flex-direction: column; gap: 25px; margin-bottom: 25px;">
			<Virtualize Context="juego" Items="juegosMinimosMostrar" ItemSize="107">
				<ItemContent>
					<ResultadoJuego idioma="@idioma" juego="@juego" usuarioJuegosSteam="@usuarioJuegosSteam" usuarioDeseadosSteam="@usuario?.SteamWishlist" usuarioDeseadosWeb="@usuario?.Wishlist" tipo="ResultadoJuego.Tipo.Portada" />
				</ItemContent>
			</Virtualize>
		</div>

		<div style="margin-bottom: 20px; margin-left: auto; margin-right: auto; width: 400px;">
			<a class="boton-pequeño" style="width: 100%; padding: 15px 20px; font-size: 17px; text-align: center;" href="/historical-lows">
				@Herramientas.Idiomas.CogerCadena(idioma, "LastLowsMore", "Index")
			</a>
		</div>
	</div>	
}

@if (mostrarFiltrado == true)
{
	<div class="opciones-panel">
		<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); max-width: 800px; padding: 30px; margin: 20px auto; overflow-y: scroll; padding-right: 20px; scrollbar-color: var(--fondoCodigo) var(--fondoOscuro);">
			<div style="display: flex; align-items: center;">
				<button class="boton-pequeño" @onclick="OcultarFiltrado" style="width: auto; padding: 5px 15px; margin-right: 20px; border: 0px; color: var(--colorTextoVisitado); font-size: 22px;">
					<i class="fa-solid fa-arrow-left"></i>
				</button>

				<div style="font-size: 20px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "Filter", "Index")
				</div>
			</div>

			<hr style="margin-top: 30px;">

			@if (usuario != null)
			{
				<div style="display: flex; align-items: center; margin-top: 30px;">
					<div class="checkbox-caja">
						<input type="checkbox" class="checkbox-interior" checked="@estadoOcultarJuegosUsuario" @onchange="OcultarJuegosUsuario">
					</div>

					<div style="margin-left: 20px; padding-bottom: 5px;">
						@Herramientas.Idiomas.CogerCadena(idioma, "FilterOption1", "Index")
					</div>
				</div>

				<hr style="margin-top: 30px;">
			}

			<div style="margin-top: 30px;">
				<div style="padding-bottom: 15px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "FilterOption2", "Index")
				</div>

				<div style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 20px;">
					@foreach (var drm in drms)
					{
						string iconoDRM = string.Empty;
						string nombreDRM = string.Empty;

						foreach (var drm2 in JuegoDRM2.GenerarListado())
						{
							if (drm2.Id == drm.DRMId)
							{
								iconoDRM = drm2.Imagen;
								nombreDRM = drm2.Nombre;
							}
						}

						<div style="display: flex; align-items: center;" title="@nombreDRM">
							<div class="checkbox-caja">
								<input type="checkbox" class="checkbox-interior" checked="@drm.Checkbox" @onchange="@(e => EnseñarJuegosDRM(e, drm.DRMId))">
							</div>

							@if (drm.DRMId != JuegoDRM.DRMFree)
							{
								<div style="margin-left: 20px; padding-bottom: 10px;">
									<img src="@iconoDRM" style="max-width: 24px; max-height: 24px;" title="@nombreDRM" />
								</div>
							}
							else
							{
								<div style="margin-left: 20px; padding-bottom: 5px;">
									<label style="font-size: 10px; max-width: 24px; text-align: center;">@nombreDRM</label>
								</div>
							}
						</div>
					}
				</div>
			</div>

			<hr style="margin-top: 30px;">

			<div style="margin-top: 30px;">
				<div style="padding-bottom: 15px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "FilterOption3", "Index")
				</div>

				<div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 20px;">
					@foreach (var categoria in categorias)
					{
						string nombreCategoria = string.Empty;

						if (categoria.Categoria == JuegoTipo.Game)
						{
							nombreCategoria = Herramientas.Idiomas.CogerCadena(idioma, "FilterOption3.1", "Index");
						}
						else if (categoria.Categoria == JuegoTipo.DLC)
						{
							nombreCategoria = Herramientas.Idiomas.CogerCadena(idioma, "FilterOption3.2", "Index");
						}
						else if (categoria.Categoria == JuegoTipo.Music)
						{
							nombreCategoria = Herramientas.Idiomas.CogerCadena(idioma, "FilterOption3.3", "Index");
						}
						else if (categoria.Categoria == JuegoTipo.Software)
						{
							nombreCategoria = Herramientas.Idiomas.CogerCadena(idioma, "FilterOption3.4", "Index");
						}

						<div style="display: flex; align-items: center;" title="@nombreCategoria">
							<div class="checkbox-caja">
								<input type="checkbox" class="checkbox-interior" checked="@categoria.Checkbox" @onchange="@(e => EnseñarJuegosCategoria(e, categoria.Categoria))">
							</div>

							<div style="margin-left: 15px; padding-bottom: 8px;">
								<label style="font-size: 14px;">@nombreCategoria</label>
							</div>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
}

<script>
	function hover(e, id) {
		var x = e.clientX,
			y = e.clientY;

		var tooltip = document.getElementById(id);

		if (screen.width / 2 > x) {
			tooltip.style.top = (y + 10) + 'px';
			tooltip.style.left = (x + 20) + 'px';
		}
		else {
			tooltip.style.top = (y - 10) + 'px';
			tooltip.style.left = (x - 20 - tooltip.getBoundingClientRect().width) + 'px';
		};
	};
</script>

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string usuarioId { get; set; }

	private Usuario usuario = new Usuario();

	private SqlConnection conexion = new SqlConnection();

	private List<string> usuarioJuegosSteam = new List<string>();

	protected override async Task OnInitializedAsync()
	{
		usuario = await UserManager.FindByIdAsync(usuarioId);

		if (usuario != null)
		{
			if (string.IsNullOrEmpty(usuario.SteamGames) == false)
			{
				usuarioJuegosSteam = Herramientas.Listados.Generar(usuario.SteamGames);
			}

			#region Filtrado

			if (usuario.IndexOption1 == true)
			{
				estadoOcultarJuegosUsuario = "checked";
			}
			else
			{
				estadoOcultarJuegosUsuario = null;
			}

			if (string.IsNullOrEmpty(usuario.IndexDRMs) == false)
			{
				drms = JsonConvert.DeserializeObject<List<MostrarJuegoDRM>>(usuario.IndexDRMs);
			}

			if (string.IsNullOrEmpty(usuario.IndexCategories) == false)
			{
				categorias = JsonConvert.DeserializeObject<List<MostrarJuegoCategoria>>(usuario.IndexCategories);
			}

			#endregion
		}

		//------------------------------------------------

		conexion = Herramientas.BaseDatos.Conectar();

		using (conexion)
		{
			#region Destacados

			juegosDestacadosMostrar = BaseDatos.Portada.Buscar.Destacados(usuarioJuegosSteam, conexion);

			if (juegosDestacadosMostrar.Count > 0)
			{
				juegoSeleccionado = juegosDestacadosMostrar[0];
			}

			CronometroDestacados();

			#endregion

			#region Minimos

			Filtros();

			#endregion

			#region Noticias

			try
			{
				noticiasGestor = BaseDatos.Noticias.Buscar.Actuales(conexion);
			}
			catch (Exception ex)
			{
				BaseDatos.Errores.Insertar.Mensaje("Portada Noticias", ex);
			}

			if (noticiasGestor != null)
			{
				if (noticiasGestor.Count > 0)
				{
					noticiasGestor = noticiasGestor.OrderBy(x => x.FechaEmpieza).Reverse().ToList();

					foreach (Noticias.Noticia noticia in noticiasGestor)
					{
						DateTime fechaTemporal = noticia.FechaEmpieza;
						fechaTemporal = fechaTemporal.AddDays(3);

						if (fechaTemporal > DateTime.Now)
						{
							bool añadir = true;

							if (DateTime.Now > noticia.FechaTermina)
							{
								añadir = false;
							}

							if (noticiasMostrar.Count > 0)
							{
								foreach (var noticiaMostrar in noticiasMostrar)
								{
									if (noticiaMostrar.Id == noticia.Id)
									{
										añadir = false;
									}
								}
							}

							if (añadir == true)
							{
								noticiasMostrar.Add(noticia);
							}
						}
					}
				}
			}

			#endregion
		}
	}

	#region Destacados

	private List<Juegos.Juego> juegosDestacadosMostrar = new List<Juegos.Juego>();
	private Juegos.Juego juegoSeleccionado = new Juegos.Juego();
	private PeriodicTimer cronometro = null;
	private int cronometroContador = 0;
	private int cronometroLimite = 30;

	private void CambiarJuegoDestacado(MouseEventArgs args, Juegos.Juego nuevoJuego)
	{
		juegoSeleccionado = nuevoJuego;

		cronometroContador = 0;
		cronometro.Dispose();
		CronometroDestacados();
	}

	private async void CronometroDestacados()
	{
		cronometro = new PeriodicTimer(TimeSpan.FromSeconds(1));
		while (await cronometro.WaitForNextTickAsync())
		{
			cronometroContador += 1;

			if (cronometroContador == cronometroLimite || juegosDestacadosMostrar.Count == 0)
			{
				bool tomarSiguiente = false;

				int i = 0;
				foreach (var destacado in juegosDestacadosMostrar)
				{
					if (tomarSiguiente == true)
					{
						juegoSeleccionado = destacado;
						break;
					}

					if (destacado.IdMaestra == juegoSeleccionado.IdMaestra)
					{
						tomarSiguiente = true;
					}

					i += 1;
				}

				if (i == juegosDestacadosMostrar.Count)
				{
					juegosDestacadosMostrar = BaseDatos.Portada.Buscar.Destacados(usuarioJuegosSteam, conexion);

					if (juegosDestacadosMostrar.Count > 0)
					{
						juegoSeleccionado = juegosDestacadosMostrar[0];
					}
				}

				cronometroContador = 0;
			}

			await InvokeAsync(StateHasChanged);
		}
	}

	#endregion

	#region Minimos Lista

	private void GenerarListaMinimos()
	{
		try
		{
			List<string> categoriasNumeros = new List<string>();

			if (categorias != null)
			{
				if (categorias.Count > 0)
				{
					foreach (var categoria in categorias)
					{
						if (categoria.Estado == true)
						{
							categoriasNumeros.Add(Convert.ChangeType(categoria.Categoria, categoria.Categoria.GetTypeCode()).ToString());
						}
					}
				}
			}

			List<string> drmsNumeros = new List<string>();

			if (drms != null)
			{
				if (drms.Count > 0)
				{
					foreach (var drm in drms)
					{
						if (drm.Estado == true)
						{
							drmsNumeros.Add(Convert.ChangeType(drm.DRMId, drm.DRMId.GetTypeCode()).ToString());
						}
					}
				}
			}

			juegosMinimosGestor = BaseDatos.Portada.Buscar.UltimosMinimos(150, categoriasNumeros, drmsNumeros, conexion);
		}
		catch (Exception ex)
		{
			BaseDatos.Errores.Insertar.Mensaje("Portada Minimos", ex);
		}
	}

	#endregion

	#region Minimos Filtrado

	private List<Juegos.Juego> juegosMinimosGestor = new List<Juegos.Juego>();
	private List<Juegos.Juego> juegosMinimosMostrar = new List<Juegos.Juego>();

	private void Filtros()
	{
		GenerarListaMinimos();

		if (juegosMinimosGestor != null)
		{
			if (juegosMinimosGestor.Count > 0)
			{
				juegosMinimosMostrar.Clear();

				foreach (var juego in juegosMinimosGestor)
				{
					bool ocultar = false;

					if (string.IsNullOrEmpty(estadoOcultarJuegosUsuario) == false)
					{
						if (estadoOcultarJuegosUsuario == "checked" && juego.PrecioMinimosHistoricos[0].DRM == JuegoDRM.Steam)
						{
							foreach (var juegoUsuario in usuarioJuegosSteam)
							{
								if (juego.IdSteam.ToString() == juegoUsuario)
								{
									ocultar = true;
									break;
								}
							}
						}
					}

					if (ocultar == false)
					{
						juegosMinimosMostrar.Add(juego);
					}
				}
			}
		}

		if (juegosMinimosMostrar != null)
		{
			if (juegosMinimosMostrar.Count > 0)
			{
				juegosMinimosMostrar = juegosMinimosMostrar.OrderBy(j => j.PrecioMinimosHistoricos[0].FechaDetectado).Reverse().ToList();
			}
		}
	}

	private bool mostrarFiltrado = false;

	private void EnseñarFiltrado()
	{
		mostrarFiltrado = true;
	}

	private void OcultarFiltrado()
	{
		mostrarFiltrado = false;
	}

	private string estadoOcultarJuegosUsuario = null;

	private async void OcultarJuegosUsuario()
	{
		if (usuario != null)
		{
			if (usuario.IndexOption1 == true)
			{
				usuario.IndexOption1 = false;
				estadoOcultarJuegosUsuario = null;
			}
			else
			{
				usuario.IndexOption1 = true;
				estadoOcultarJuegosUsuario = "checked";
			}

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }

			Filtros();
		}
	}

	private async void EnseñarJuegosDRM(ChangeEventArgs e, JuegoDRM drmElegido)
	{
		foreach (var drm in drms)
		{
			if (drm.DRMId == drmElegido)
			{
				if (drm.Checkbox == null)
				{
					drm.Checkbox = "checked";
					drm.Estado = true;
				}
				else
				{
					drm.Checkbox = null;
					drm.Estado = false;
				}
			}
		}

		if (usuario != null)
		{
			usuario.IndexDRMs = JsonConvert.SerializeObject(drms);

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }
		}

		Filtros();
	}

	private List<MostrarJuegoDRM> drms = CrearListaDRMs();

	public class MostrarJuegoDRM
	{
		public bool Estado { get; set; }
		public string Checkbox { get; set; }
		public JuegoDRM DRMId { get; set; }
	}

	private static List<MostrarJuegoDRM> CrearListaDRMs()
	{
		List<MostrarJuegoDRM> nuevaLista = new List<MostrarJuegoDRM>();

		foreach (var drm in JuegoDRM2.GenerarListado())
		{
			MostrarJuegoDRM nuevoDRM = new MostrarJuegoDRM();
			nuevoDRM.Estado = false;
			nuevoDRM.Checkbox = null;
			nuevoDRM.DRMId = drm.Id;

			if (nuevoDRM.DRMId == JuegoDRM.Steam || nuevoDRM.DRMId == JuegoDRM.GOG || nuevoDRM.DRMId == JuegoDRM.Ubisoft || nuevoDRM.DRMId == JuegoDRM.EA)
			{
				nuevoDRM.Estado = true;
				nuevoDRM.Checkbox = "checked";
			}

			nuevaLista.Add(nuevoDRM);
		}

		return nuevaLista;
	}

	private async void EnseñarJuegosCategoria(ChangeEventArgs e, JuegoTipo categoriaElegida)
	{
		foreach (var categoria in categorias)
		{
			if (categoria.Categoria == categoriaElegida)
			{
				if (categoria.Checkbox == null)
				{
					categoria.Checkbox = "checked";
					categoria.Estado = true;
				}
				else
				{
					categoria.Checkbox = null;
					categoria.Estado = false;
				}
			}
		}

		if (usuario != null)
		{
			usuario.IndexCategories = JsonConvert.SerializeObject(categorias);

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }
		}

		Filtros();
	}

	private List<MostrarJuegoCategoria> categorias = CrearListaCategorias();

	public class MostrarJuegoCategoria
	{
		public bool Estado { get; set; }
		public string Checkbox { get; set; }
		public JuegoTipo Categoria { get; set; }
	}

	private static List<MostrarJuegoCategoria> CrearListaCategorias()
	{
		List<MostrarJuegoCategoria> nuevaLista = new List<MostrarJuegoCategoria>();

		foreach (var categoria in JuegoTipos.CargarListado())
		{
			if (categoria != JuegoTipo.Bundle)
			{
				MostrarJuegoCategoria nuevaTienda = new MostrarJuegoCategoria();
				nuevaTienda.Estado = true;
				nuevaTienda.Checkbox = "checked";
				nuevaTienda.Categoria = categoria;

				nuevaLista.Add(nuevaTienda);
			}
		}

		return nuevaLista;
	}

	#endregion

	#region Noticias

	private List<Noticias.Noticia> noticiasMostrar = new List<Noticias.Noticia>();
	private List<Noticias.Noticia> noticiasGestor = new List<Noticias.Noticia>();
	private int noticiaMostrarId = 0;
	private string noticiaMostrarTitulo = null;
	private string noticiaMostrarAncho = "1000px";

	private async void GestionarNoticia(MouseEventArgs e, string noticiaEnlace, int noticiaId, string noticiaTitulo, NoticiaTipo noticiaTipo)
	{
		if (string.IsNullOrEmpty(noticiaEnlace) == false)
		{
			await JavaScript.InvokeVoidAsync("open", noticiaEnlace, "_blank");
		}
		else
		{
			if (noticiaId > 0)
			{
				noticiaMostrarId = noticiaId;
			}
		}

		if (noticiaTipo == NoticiaTipo.Bundles)
		{
			noticiaMostrarAncho = "1200px";
		}
		else
		{
			noticiaMostrarAncho = "1000px";
		}

		noticiaMostrarTitulo = noticiaTitulo;
	}

	private void CerrarNoticia(MouseEventArgs e)
	{
		noticiaMostrarId = 0;
	}

	#endregion
}
