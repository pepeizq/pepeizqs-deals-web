@using APIs.Steam
@using BaseDatos.Juegos;
@using Juegos;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient;
@using Microsoft.Extensions.Caching.Distributed;
@using Microsoft.VisualBasic;
@using Noticias;
@using pepeizqs_deals_web.Areas.Identity.Data
@using pepeizqs_deals_web.Pages.Componentes.Admin

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

<style>
	.destacados-espacio {
		gap: 15px;
	}

	.destacados-botonizq {
		font-size: 20px;
		margin-right: 20px;
	}

	.destacados-botonder {
		font-size: 20px;
		margin-left: 20px;
	}

	.destacado-precio {
		font-size: 18px;
		padding: 8px 10px;
	}

	.noticia-fuente {
		font-size: 18px;
	}

	.noticia-categoria {
		font-size: 15px;
	}

	.noticia-fecha {
		font-size: 15px;
	}

	.minimo-fuente {
		font-size: 17px;
	}

	.minimo-fuentefecha {
		font-size: 14px;
	}

	.minimo-espacio1 {
		width: 100px;
		padding: 20px;
	}

	.minimo-espacio2 {
		padding: 10px 15px;
		margin-right: 15px;
	}

	.minimo-espacio3 {
		margin-left: 30px;
		margin-right: 30px;
	}

	@@media (max-width: 800px) {
		.destacados-espacio {
			gap: 5px;
		}

		.destacados-botonizq {
			font-size: 14px;
			margin-right: 5px;
		}

		.destacados-botonder {
			font-size: 14px;
			margin-left: 5px;
		}

		.destacado-precio {
			font-size: 8px;
			padding: 4px 5px;
		}

		.noticia-fuente {
			font-size: 13px;
		}

		.noticia-categoria {
			font-size: 11px;
		}

		.noticia-fecha {
			font-size: 11px;
		}

		.minimo-fuente {
			font-size: 12px;
		}

		.minimo-fuentefecha {
			font-size: 10px;
		}

		.minimo-espacio1 {
			width: 60px;
			padding: 5px;
		}

		.minimo-espacio2 {
			padding: 5px 10px;
			margin-right: 0px;
		}

		.minimo-espacio3 {
			margin-left: 0px;
			margin-right: 0px;
		}
	}
</style>

<style>
	.tooltip4 {
		text-decoration: none;
		position: relative;
	}

		.tooltip4 .tooltip-relleno {
			display: none;
		}

		.tooltip4:hover .tooltip-relleno {
			display: block;
			position: fixed;
			overflow: hidden;
			z-index: 1;
		}

	.tooltip-relleno {
		background-color: var(--fondoBotonPequeño);
		color: var(--colorTexto);
		border: 1px solid var(--fondoBoton);
		border-radius: 2px;
		z-index: 1;
	}
</style>

@if (aviso != null)
{
	if (string.IsNullOrEmpty(aviso.Mensaje.Trim()) == false)
	{
		<div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); font-size: 17px; display: flex; align-items: center; margin-bottom: 40px; flex-direction: initial;">
			<label style="padding-right: 20px;">@aviso.Fecha.Day.ToString()/@aviso.Fecha.Month.ToString()</label>
			
			@{
				bool hayEnlace = false;

				if (string.IsNullOrEmpty(aviso.Enlace.Trim()) == false)
				{
					if (aviso.Enlace.Contains("https://") == true)
					{
						hayEnlace = true;
					}
				}

				if (hayEnlace == true)
				{
					<a href="@aviso.Enlace" target="_blank" style="text-decoration: none;">@aviso.Mensaje</a>
				}
				else
				{
					<label>@aviso.Mensaje</label>
				}
			}	
		</div>
	}
}

@if (juegosDestacadosMostrar.Count > 0)
{
	<div style="display: flex; font-size: 20px; padding-bottom: 20px; align-items: center; justify-content: center;">
		<a href="/historical-lows" style="text-decoration: none;">@Herramientas.Idiomas.CogerCadena(idioma, "Index.HighDeals")</a>
		
		<div class="tooltip2" style="margin-left: 20px;">
			<i class="fa-solid fa-circle-info" style="font-size: 15px;"></i>
			<div class="tooltip-abrir tooltip-derecha" style="padding: 20px; min-width: 400px; max-width: 600px;">
				@Herramientas.Idiomas.CogerCadena(idioma, "Index.HighDealsInfo")
			</div>
		</div>
	</div>

	<div style="width: 100%; display: flex; align-items: center; justify-content: center; margin-bottom: 60px;">
		<button @onclick="ClickearAtras" class="boton-pequeño destacados-botonizq" style="width: 50px; height: 50px; text-align: center;"><i class="fa-solid fa-chevron-left"></i></button>

		<div class="destacados-espacio tooltip4" onmousemove="hover(event, 'tooltip-destacados')" style="width: 100%; display: flex; align-items: center; justify-content: center;">
			@foreach (var destacado in juegosDestacadosMostrar)
			{
				if (destacado != null)
				{
					bool usuarioTieneJuego = Herramientas.Tooltip.ComprobarUsuarioTieneJuego(usuario, juegosUsuario, destacado, destacado.PrecioMinimosHistoricos[0].DRM);
					bool usuarioTieneDeseado = false;

					string fondoColor = string.Empty;
					string fondoDescuento = "background-color: darkgreen;";

					if (usuarioTieneJuego == true)
					{
						fondoColor = "background-color: var(--fondoBien);";
						fondoDescuento = "backdrop-filter: brightness(70%);";
					}
					else
					{
						usuarioTieneDeseado = Herramientas.Deseados.ComprobarSiEsta(usuario, destacado, destacado.PrecioMinimosHistoricos[0].DRM, true);

						if (usuarioTieneDeseado == true)
						{
							fondoColor = "background-color: var(--fondoAlerta);";
							fondoDescuento = "backdrop-filter: brightness(70%);";
						}
					}

					<div @onmouseover="@(e => CargarTooltip(e, destacado))" style="width: 25%;">
						<a href="game/@destacado.IdMaestra" class="boton-pequeño" style="padding: 2px; @fondoColor">
							<div>
								<img src="@destacado.Imagenes.Library_600x900" style="width: 100%; height: 100%;" alt="@destacado.Nombre" />
							</div>
							<div style="display: flex; align-content: center; align-items: center; justify-content: right;">
								<div class="destacado-precio" style="margin: 0px; @fondoDescuento">
									@CargarDescuento(destacado)
								</div>
								<div class="destacado-precio">
									@CargarPrecio(destacado)
								</div>
							</div>
						</a>
					</div>
				}
			}

			<div id="tooltip-destacados" class="tooltip-relleno">
				@if (string.IsNullOrEmpty(tooltipVideo) == false)
				{
					<video src="@tooltipVideo" autoplay="autoplay" loop muted style="width: 460px; height: 215px; object-fit: cover;" />
				}

				<div style="padding: 15px; text-align: center;">
					<label>@tooltipNombre</label>
					<div style="display: flex; align-items: center; margin-top: 8px; padding: 5px; text-align: center; justify-content: center;">
						<div style="margin-right: 20px;">
							<img src="@tooltipDRM" style="max-width: 20px; max-height: 20px;" alt="DRM"/>
						</div>
						<div style="margin-right: 20px;">
							<img src="@tooltipTienda" style="width: 20px; height: 20px;" alt="Store"/>
						</div>
						
						@if (string.IsNullOrEmpty(tooltipReviews) == false)
						{
							<div style="margin-right: 20px;">
								<img src="@tooltipReviews" style="width: 20px; height: 20px;" alt="Reviews"/>
							</div>
						}

						<div>
							@tooltipTiempo
						</div>
					</div>
				</div>
			</div>
		</div>

		<button @onclick="ClickearAdelante" class="boton-pequeño destacados-botonder" style="width: 50px; height: 50px; text-align: center;"><i class="fa-solid fa-chevron-right"></i></button>
	</div>
}

@if (noticiasMostrar.Count > 0)
{
	<div style="display: flex; font-size: 20px; align-items: center; justify-content: center;">
		<a href="/last-news" style="text-decoration: none;">@Herramientas.Idiomas.CogerCadena(idioma, "Index.LastNews")</a>

		<a href="@Herramientas.Idiomas.CogerRSS(idioma)" target="_blank" style="margin-left: 20px;"><i class="fa-solid fa-rss"></i></a>		
	</div>

	<div style="margin-bottom: 25px;">
		@foreach (var noticia in noticiasMostrar)
		{
			<div style="margin-top: 20px;">
			@{
				string objetivo = "_self";

				if (string.IsNullOrEmpty(noticia.Enlace) == false)
				{
					if (noticia.Enlace.Contains("/link/") == true)
					{
						objetivo = "_blank";
					}
				}

				<a class="boton-pequeño" style="padding: 2px;" href="@noticia.Enlace" target="@objetivo">
					<div class="perfil-flexible-centrado">
						<div style="width: 25%;">
							<img src="@noticia.Imagen" style="width: 100%; height: 100%; object-fit: contain;" alt="@noticia.TituloEn"/>
						</div>

						<div style="width: 75%; padding: 20px 30px;">
							<div style="margin-bottom: 20px; display: flex; align-items: center;">
								<div class="noticia-fecha" style="margin-right: 20px;">
									@noticia.FechaEmpieza.Day.ToString()/@noticia.FechaEmpieza.Month.ToString()/@noticia.FechaEmpieza.Year.ToString()
								</div>

								@if (string.IsNullOrEmpty(CargarIconoNoticia(noticia)) == false)
								{
									<img src="@CargarIconoNoticia(noticia)" style="width: 16px; height: 16px; margin-right: 20px;" alt="Store"/>
								}

								<label class="noticia-categoria">@NoticiasCargar.Traduccion(noticia.Tipo, idioma)</label>
							</div>

							<div class="noticia-fuente">
								@Herramientas.Idiomas.MirarTexto(idioma, @noticia.TituloEn, @noticia.TituloEs)
							</div>
						</div>
					</div>
				</a>
			}
			</div>
		}
	</div>

	<div style="margin-bottom: 60px; margin-left: auto; margin-right: auto; width: 400px;">
		<a class="boton-pequeño" style="width: 100%; padding: 15px 20px; font-size: 17px; text-align: center;" href="/last-news">
			@Herramientas.Idiomas.CogerCadena(idioma, "Index.LastNewsMore")
		</a>
	</div>
}
else
{
	<div style="margin-bottom: 60px; margin-left: auto; margin-right: auto; width: 700px;">
		<a class="boton-pequeño" style="width: 100%; padding: 15px 20px; font-size: 17px; text-align: center;" href="/last-news">
			@Herramientas.Idiomas.CogerCadena(idioma, "Index.LastNewsNo")
		</a>
	</div>
}

@if (sorteosActivos.Count > 2)
{
	<div style="margin-bottom: 50px; height: 200px;">
		<a href="/Giveaways" class="boton-pequeño" style="text-decoration: none; padding: 1px;">
			<div style="overflow: hidden; position: relative; height: 150px; display: flex; align-items: center;">
				<div style="position: absolute; right: 0; top: 0;">
					@{
						int i = 0;
						while (i < 3)
						{
							if (sorteosActivos[i] != null)
							{
								Juegos.Juego sorteoJuego = BaseDatos.Juegos.Buscar.UnJuego(sorteosActivos[i].JuegoId.ToString());

								if (sorteoJuego != null)
								{
									<img src="@sorteoJuego.Imagenes.Library_600x900" style="opacity: 0.3; width: 200px; height: 300px; margin-left: 20px; margin-top: 20px; margin-right: 20px;" alt="@sorteoJuego.Nombre">
								}
							}

							i += 1;
						}
					}
				</div>

				<div style="position: relative; left: 15%; transform: translateX(-50%);">
					<div style="font-size: 24px;">
						@Herramientas.Idiomas.CogerCadena(idioma, "Index.Giveaways")
					</div>
				</div>
			</div>
		</a>
	</div>
}

@if (juegosMinimosMostrar.Count > 0)
{
	<div style="display: flex; font-size: 20px; align-items: center; justify-content: center;">
		<a href="/historical-lows" style="text-decoration: none;">@Herramientas.Idiomas.CogerCadena(idioma, "Index.LastLows")</a>

		<div class="tooltip2" style="margin-left: 20px;">
			<i class="fa-solid fa-circle-info" style="font-size: 15px;"></i>
			<div class="tooltip-abrir tooltip-derecha" style="padding: 20px; min-width: 400px; max-width: 600px;">
				@Herramientas.Idiomas.CogerCadena(idioma, "Index.LastLowsInfo")
			</div>
		</div>
	</div>

	<div class="tooltip4" onmousemove="hover(event, 'tooltip-minimos')" style="margin-bottom: 25px;">
		@foreach (global::Juegos.Juego juego in juegosMinimosMostrar)
		{
			bool usuarioTieneJuego = Herramientas.Tooltip.ComprobarUsuarioTieneJuego(usuario, juegosUsuario, juego, juego.PrecioMinimosHistoricos[0].DRM);
			bool usuarioTieneDeseado = false;

			string fondoColor = string.Empty;
			string fondoDescuento = "background-color: darkgreen;";

			if (usuarioTieneJuego == true)
			{
				fondoColor = "background-color: var(--fondoBien);";
				fondoDescuento = "backdrop-filter: brightness(70%);";
			}
			else
			{
				usuarioTieneDeseado = Herramientas.Deseados.ComprobarSiEsta(usuario, juego, juego.PrecioMinimosHistoricos[0].DRM, true);

				if (usuarioTieneDeseado == true)
				{
					fondoColor = "background-color: var(--fondoAlerta);";
					fondoDescuento = "backdrop-filter: brightness(70%);";
				}
			}

			<div class="perfil-flexible-centrado minimo-espacio3" style="margin-top: 20px;" @onmouseover="@(e => CargarTooltip(e, juego))">
				<a class="boton-pequeño" style="padding: 2px; @fondoColor" href="/game/@juego.IdMaestra">
					<div class="perfil-flexible-centrado">
						<div style="width: 20%;">
							<img src="@juego.Imagenes.Capsule_231x87" style="height: 100%; width: 100%;" alt="@juego.Nombre"/>
						</div>

						<div style="width: 73%; display: flex; flex-flow: column wrap; padding: 15px 20px;">
							<div class="minimo-fuente">@juego.Nombre</div>
							<div style="margin-top: 10px; display: flex; align-items: center;">
								<img src="@CargarDRM(juego)" style="width: 16px; height: 16px; margin-right: 10px;" alt="DRM"/>
								<img src="@CargarIconoTienda(juego)" style="width: 16px; height: 16px; margin-right: 10px;" alt="Store"/>
								<div class="minimo-fuentefecha">@CargarFechaDetectado(juego)</div>
							</div>
						</div>

						<div style="width: 17%; display: flex; align-items: center; justify-content: center; text-align: center;">
							<div class="minimo-fuente minimo-espacio2" style="@fondoDescuento">
								@CargarDescuento(juego)
							</div>

							<div class="minimo-fuente minimo-espacio1" style="text-align: center;">
								@CargarPrecio(juego)
							</div>
						</div>
					</div>
				</a>
			</div>
		}

		<div id="tooltip-minimos" class="tooltip-relleno">
			@if (string.IsNullOrEmpty(tooltipVideo) == false)
			{
				<video src="@tooltipVideo" autoplay="autoplay" loop muted style="width: 460px; height: 215px; object-fit: cover;" />
			}

			<div style="padding: 12px;">
				<label style="padding-left: 5px; padding-right: 5px;">@tooltipNombre</label>
				<div style="display: flex; align-items: center; margin-top: 5px; padding: 5px; text-align: left; justify-content: left;">
					<div style="margin-right: 20px;">
						<img src="@tooltipDRM" style="max-width: 20px; max-height: 20px;" alt="DRM"/>
					</div>
					<div style="margin-right: 20px;">
						<img src="@tooltipTienda" style="width: 20px; height: 20px;" alt="Store"/>
					</div>

					@if (string.IsNullOrEmpty(tooltipReviews) == false)
					{
						<div style="margin-right: 20px;">
							<img src="@tooltipReviews" style="width: 20px; height: 20px;" alt="Reviews"/>
						</div>
					}

					<div style="margin-right: 15px; background-color: darkgreen; padding: 5px 10px;">
						@tooltipDescuento
					</div>
					<div>
						@tooltipPrecio
					</div>
				</div>

				@if (string.IsNullOrEmpty(tooltipBundles) == false || string.IsNullOrEmpty(tooltipGratis) == false || string.IsNullOrEmpty(tooltipSuscripciones) == false)
				{
					<div style="font-size: 14px; margin-top: 5px; padding: 5px;">
						<div>
							@Herramientas.Idiomas.CogerCadena(idioma, "Index.Tooltip1")
						</div>

						@if (string.IsNullOrEmpty(tooltipBundles) == false)
						{
							<div>
								• @tooltipBundles
							</div>
						}

						@if (string.IsNullOrEmpty(tooltipGratis) == false)
						{
							<div>
								• @tooltipGratis
							</div>
						}

						@if (string.IsNullOrEmpty(tooltipSuscripciones) == false)
						{
							<div>
								• @tooltipSuscripciones
							</div>
						}
					</div>
				}
			</div>
		</div>
	</div>

	<div style="margin-bottom: 20px; margin-left: auto; margin-right: auto; width: 400px;">
		<a class="boton-pequeño" style="width: 100%; padding: 15px 20px; font-size: 17px; text-align: center;" href="/historical-lows?mode=last">
			@Herramientas.Idiomas.CogerCadena(idioma, "Index.LastLowsMore")
		</a>
	</div>
}

<script>
	function hover(e, id) {
		var x = e.clientX,
			y = e.clientY;

		var tooltip = document.getElementById(id);

		if (screen.width / 2 > x) {
			tooltip.style.top = (y + 10) + 'px';
			tooltip.style.left = (x + 20) + 'px';
		}
		else {
			tooltip.style.top = (y - 10) + 'px';
			tooltip.style.left = (x - 20 - tooltip.getBoundingClientRect().width) + 'px';
		};
	};
</script>

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	private Usuario usuario = new Usuario();
	private List<string> juegosUsuario = new List<string>();

	private BaseDatos.Avisos.Aviso aviso = null;

	private List<Juegos.Juego> juegosDestacadosMostrar = new List<Juegos.Juego>();
	private List<Juegos.Juego> juegosDestacadosGestor = new List<Juegos.Juego>();
	private int cantidadDestacadosMostrar = 6;
	private int posicionDestacadosMostrar = 0;
	private int topeAtras = 0;
	private int topeAdelante = 0;

	private List<Juegos.Juego> juegosMinimosMostrar = new List<Juegos.Juego>();

	private List<Noticias.Noticia> noticiasMostrar = new List<Noticias.Noticia>();
	private List<Noticias.Noticia> noticiasGestor = new List<Noticias.Noticia>();

	private List<Sorteos2.Sorteo> sorteosActivos = new List<Sorteos2.Sorteo>();

	protected override async Task OnInitializedAsync()
	{
		usuario = UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User).Result;

		if (usuario != null)
		{
			if (string.IsNullOrEmpty(usuario.SteamAccount) == false && string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
			{
				bool tiempo = true;

				if (string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
				{
					if (Convert.ToDateTime(usuario.SteamAccountLastCheck) + TimeSpan.FromDays(7) > DateTime.Now)
					{
						tiempo = false;
					}
				}

				if (tiempo == true)
				{
					SteamUsuario datos = await APIs.Steam.Cuenta.CargarDatos(usuario.SteamAccount);

					usuario.SteamGames = datos.Juegos;
					usuario.SteamWishlist = datos.Deseados;
					usuario.Avatar = datos.Avatar;
					usuario.Nickname = datos.Nombre;
					usuario.SteamAccountLastCheck = DateTime.Now.ToString();
					usuario.OfficialGroup = datos.GrupoPremium;
					usuario.OfficialGroup2 = datos.GrupoNormal;

					await UserManager.UpdateAsync(usuario);
				}
			}

			juegosUsuario = Herramientas.Listados.Generar(usuario.SteamGames);
		}

		//------------------------------------------------

		SqlConnection conexion = Herramientas.BaseDatos.Conectar();

		using (conexion)
		{
			#region Aviso

			aviso = BaseDatos.Avisos.Buscar.Ejecutar(idioma, conexion);

			#endregion

			#region Destacados

			try
			{
				juegosDestacadosGestor = BaseDatos.Juegos.Buscar.Todos(conexion, "portadaJuegosDestacados");
			}
			catch (Exception ex)
			{
				BaseDatos.Errores.Insertar.Ejecutar("Portada", ex, conexion);			
			}

			if (juegosDestacadosGestor != null)
			{
				if (juegosDestacadosGestor.Count > 0)
				{
					if (juegosDestacadosGestor.Count > 0)
					{
						juegosDestacadosGestor = juegosDestacadosGestor.OrderBy(j => j.PrecioMinimosHistoricos[0].FechaDetectado).Reverse().ToList();
					}

					for (int i = posicionDestacadosMostrar; i < cantidadDestacadosMostrar; i += 1)
					{
						if (i < juegosDestacadosGestor.Count)
						{
							if (juegosDestacadosGestor[i] != null)
							{
								juegosDestacadosMostrar.Add(juegosDestacadosGestor[i]);
							}
						}		
						else
						{
							break;
						}
					}
				}
			}

			#endregion

			#region Minimos

			try
			{
				juegosMinimosMostrar = BaseDatos.Juegos.Buscar.Todos(conexion, "portadaJuegosMinimos");
			}
			catch { }

			if (juegosMinimosMostrar != null)
			{
				if (juegosMinimosMostrar.Count > 0)
				{
					juegosMinimosMostrar = juegosMinimosMostrar.OrderBy(j => j.PrecioMinimosHistoricos[0].FechaDetectado).Reverse().ToList();
				}
			}			

			#endregion

			#region Noticias

			try
			{
				noticiasGestor = BaseDatos.Noticias.Buscar.Ultimas(conexion, "30");
			}
			catch { }

			if (noticiasGestor != null)
			{
				if (noticiasGestor.Count > 0)
				{
					noticiasGestor = noticiasGestor.OrderBy(x => x.FechaEmpieza).Reverse().ToList();

					foreach (Noticias.Noticia noticia in noticiasGestor)
					{
						if (noticia.Enlace == null)
						{
							noticia.Enlace = "/news/" + noticia.IdMaestra.ToString();
						}

						DateTime fechaTemporal = noticia.FechaEmpieza;
						fechaTemporal = fechaTemporal.AddDays(3);

						if (fechaTemporal > DateTime.Now)
						{
							bool añadir = true;

							if (noticiasMostrar.Count > 0)
							{
								foreach (var noticiaMostrar in noticiasMostrar)
								{
									if (noticiaMostrar.Id == noticia.Id)
									{
										añadir = false;
									}
								}
							}

							if (añadir == true)
							{
								noticiasMostrar.Add(noticia);
							}							
						}
					}
				}
			}

			#endregion

			#region Sorteos

			sorteosActivos = BaseDatos.Sorteos.Buscar.Activos(conexion);

			#endregion
		}
	}

	private void ClickearAdelante()
	{
		juegosDestacadosMostrar.Clear();

		posicionDestacadosMostrar += cantidadDestacadosMostrar;
		topeAdelante = posicionDestacadosMostrar + cantidadDestacadosMostrar;

		if (topeAdelante > juegosDestacadosGestor.Count)
		{
			posicionDestacadosMostrar = 0;
			topeAdelante = cantidadDestacadosMostrar;
		}

		for (int i = posicionDestacadosMostrar; i < topeAdelante; i += 1)
		{
			juegosDestacadosMostrar.Add(juegosDestacadosGestor[i]);
		}
	}

	private void ClickearAtras()
	{
		juegosDestacadosMostrar.Clear();

		topeAtras = posicionDestacadosMostrar;
		posicionDestacadosMostrar -= cantidadDestacadosMostrar;

		if (posicionDestacadosMostrar < 0)
		{
			posicionDestacadosMostrar = juegosDestacadosGestor.Count - cantidadDestacadosMostrar;
			topeAtras = juegosDestacadosGestor.Count;
		}

		for (int i = posicionDestacadosMostrar; i < topeAtras; i += 1)
		{
			juegosDestacadosMostrar.Add(juegosDestacadosGestor[i]);
		}
	}

	private string tooltipNombre = string.Empty;
	private string tooltipDescuento = string.Empty;
	private string tooltipPrecio = string.Empty;
	private string tooltipDRM = string.Empty;
	private string tooltipTienda = string.Empty;
	private string tooltipTiempo = string.Empty;
	private string tooltipVideo = string.Empty;
	private string tooltipReviews = string.Empty;
	private string tooltipBundles = string.Empty;
	private string tooltipGratis = string.Empty;
	private string tooltipSuscripciones = string.Empty;

	private void CargarTooltip(MouseEventArgs args, global::Juegos.Juego juego)
	{
		tooltipNombre = juego.Nombre;
		tooltipDescuento = CargarDescuento(juego);
		tooltipPrecio = CargarPrecio(juego);
		tooltipDRM = CargarDRM(juego);
		tooltipTienda = CargarIconoTienda(juego);
		tooltipTiempo = CargarFechaDetectado(juego);
		tooltipVideo = null;
		tooltipReviews = null;
		tooltipBundles = null;
		tooltipGratis = null;
		tooltipSuscripciones = null;

		if (juego.Media != null)
		{
			if (string.IsNullOrEmpty(juego.Media.Video) == false)
			{
				int int1 = juego.Media.Video.LastIndexOf("/");
				string temp1 = juego.Media.Video.Remove(int1, juego.Media.Video.Length - int1);

				tooltipVideo = temp1 + "/microtrailer.webm";

				tooltipVideo = tooltipVideo.Replace("cdn.akamai.steamstatic.com/", "cdn.cloudflare.steamstatic.com/");
				tooltipVideo = tooltipVideo.Replace("http://", "https://");
			}
		}

		if (juego.Analisis != null)
		{
			if (int.Parse(juego.Analisis.Porcentaje) > 74)
			{
				tooltipReviews = "/imagenes/analisis/positive.webp";
			}
			else if (int.Parse(juego.Analisis.Porcentaje) > 49 && int.Parse(juego.Analisis.Porcentaje) < 75)
			{
				tooltipReviews = "/imagenes/analisis/mixed.webp";
			}
			else if (int.Parse(juego.Analisis.Porcentaje) < 50)
			{
				tooltipReviews = "/imagenes/analisis/negative.webp";
			}
		}

		if (juego.Bundles != null)
		{
			if (juego.Bundles.Count == 1)
			{
				tooltipBundles = Herramientas.Idiomas.CogerCadena(idioma, "Index.Tooltip2");
			}
			else if (juego.Bundles.Count > 1)
			{
				tooltipBundles = string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Index.Tooltip3"), juego.Bundles.Count.ToString());
			}			
		}

		if (juego.Gratis != null)
		{
			if (juego.Gratis.Count == 1)
			{
				tooltipGratis = Herramientas.Idiomas.CogerCadena(idioma, "Index.Tooltip4");
			}
			else if (juego.Gratis.Count > 1)
			{
				tooltipGratis = string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Index.Tooltip5"), juego.Gratis.Count.ToString());
			}
		}

		if (juego.Suscripciones != null)
		{
			if (juego.Suscripciones.Count == 1)
			{
				tooltipSuscripciones = Herramientas.Idiomas.CogerCadena(idioma, "Index.Tooltip6");
			}
			else if (juego.Suscripciones.Count > 1)
			{
				tooltipSuscripciones = string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Index.Tooltip7"), juego.Suscripciones.Count.ToString());
			}
		}
	}

	private string CargarDRM(global::Juegos.Juego juego)
	{
		string imagen = null;

		JuegoPrecio oferta = juego.PrecioMinimosHistoricos[0];
		List<Juegos.DRM> drms = Juegos.JuegoDRM2.GenerarListado();

		foreach (var drm in drms)
		{
			if (drm.Id == oferta.DRM)
			{
				imagen = drm.Imagen;
			}
		}

		if (imagen != null)
		{
			return imagen;
		}
		else
		{
			return null;
		}
	}

	private string CargarIconoTienda(global::Juegos.Juego juego)
	{
		string imagen = null;

		JuegoPrecio oferta = juego.PrecioMinimosHistoricos[0];
		List<Tiendas2.Tienda> tiendas = Tiendas2.TiendasCargar.GenerarListado();

		foreach (var tienda in tiendas)
		{
			if (tienda.Id == oferta.Tienda)
			{
				imagen = tienda.ImagenIcono;
			}
		}

		if (imagen != null)
		{
			return imagen;
		}
		else
		{
			return null;
		}
	}

	private string CargarDescuento(global::Juegos.Juego juego)
	{
		string descuentoMensaje = null;

		descuentoMensaje = juego.PrecioMinimosHistoricos[0].Descuento.ToString();
		descuentoMensaje = descuentoMensaje + "%";

		if (descuentoMensaje != null)
		{
			return descuentoMensaje;
		}
		else
		{
			return null;
		}
	}

	private string CargarPrecio(global::Juegos.Juego juego)
	{
		string precioMensaje = null;

		precioMensaje = juego.PrecioMinimosHistoricos[0].Precio.ToString();
		precioMensaje = precioMensaje.Replace(".", ",");

		int int1 = precioMensaje.IndexOf(",");

		if (int1 == precioMensaje.Length - 2)
		{
			precioMensaje = precioMensaje + "0";
		}

		if (precioMensaje.Length > int1 + 3)
		{
			precioMensaje = precioMensaje.Remove(int1 + 3, precioMensaje.Length - int1 - 3);
		}

		precioMensaje = precioMensaje + "€";

		if (precioMensaje != null)
		{
			return precioMensaje;
		}
		else
		{
			return null;
		}
	}

	private string CargarFechaDetectado(global::Juegos.Juego juego)
	{
		string mensaje = null;

		if (juego.PrecioMinimosHistoricos[0].FechaDetectado.Year > 2023)
		{
			mensaje = Herramientas.Calculadora.DiferenciaTiempo(juego.PrecioMinimosHistoricos[0].FechaDetectado, idioma);
		}
		
		return mensaje;
	}

	private string CargarEnlaceNoticia(Noticias.Noticia noticia)
	{
		string enlace = string.Empty;

		if (noticia.Enlace != null)
		{
			enlace = noticia.Enlace;
		}
		else
		{
			enlace = "/news/" + noticia.IdMaestra.ToString();
		}

		return enlace;
	}

	private string CargarIconoNoticia(Noticias.Noticia noticia)
	{
		string icono = string.Empty;

		if (noticia.Tipo == NoticiaTipo.Bundles)
		{
			icono = Bundles2.BundlesCargar.DevolverBundle(noticia.BundleTipo).ImagenIcono;
		}
		else if (noticia.Tipo == NoticiaTipo.Gratis)
		{
			icono = Gratis2.GratisCargar.DevolverGratis(noticia.GratisTipo).ImagenIcono;
		}
		else if (noticia.Tipo == NoticiaTipo.Suscripciones)
		{
			icono = Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(noticia.SuscripcionTipo).ImagenIcono;
		}

		return icono;
	}

	private string CargarFondoNoticia(Noticias.Noticia noticia)
	{
		string imagen = null;

		if (noticia != null)
		{
			if (noticia.Imagen != null)
			{
				imagen = noticia.Imagen;
			}

			if (imagen == null)
			{
				if (noticia.Juegos != null)
				{
					List<string> juegos = Herramientas.Listados.Generar(noticia.Juegos);

					if (juegos != null)
					{
						global::Juegos.Juego juego = BaseDatos.Juegos.Buscar.UnJuego(juegos[0]);

						if (juego != null)
						{
							imagen = juego.Imagenes.Library_1920x620;
						}
					}
				}
			}

			if (imagen == null)
			{
				if (noticia.ContenidoEn != null)
				{
					if (noticia.ContenidoEn.Contains(".png") == true || noticia.ContenidoEn.Contains(".webp") == true || noticia.ContenidoEn.Contains(".jpg") == true)
					{
						int contador = 4;
						int int1 = noticia.ContenidoEn.IndexOf(".png");

						if (int1 == -1)
						{
							contador = 5;
							int1 = noticia.ContenidoEn.IndexOf(".webp");
						}

						if (int1 == -1)
						{
							contador = 4;
							int1 = noticia.ContenidoEn.IndexOf(".jpg");
						}

						if (int1 > - 1)
						{
							string temp1 = noticia.ContenidoEn.Remove(int1 + contador, noticia.ContenidoEn.Length - int1 - contador);

							int int2 = temp1.LastIndexOf("https://");
							string temp2 = temp1.Remove(0, int2);

							temp2 = temp2.Replace(Strings.ChrW(34).ToString(), null);

							imagen = temp2.Trim();
						}
					}
				}
			}
		}

		return imagen;
	}
}
