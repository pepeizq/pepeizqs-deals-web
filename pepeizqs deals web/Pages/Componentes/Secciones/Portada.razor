@using BaseDatos.Juegos;
@using Juegos;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient;
@using Microsoft.Extensions.Caching.Distributed;
@using Microsoft.VisualBasic;
@using Noticias;
@using pepeizqs_deals_web.Areas.Identity.Data
@using pepeizqs_deals_web.Pages.Componentes.Admin

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

<style>
	.destacados-espacio {
		gap: 15px;
	}

	.destacados-botonizq {
		font-size: 20px;
		margin-right: 20px;
	}

	.destacados-botonder {
		font-size: 20px;
		margin-left: 20px;
	}

	.destacado-juego {
		min-width: 150px;
		max-width: 200px;
	}

	.destacado-fuente {
		font-size: 18px;
	}

	.noticia-fuente {
		font-size: 18px;
	}

	.noticia-fecha {
		font-size: 15px;
	}

	.minimo-fuente {
		font-size: 17px;
	}

	.minimo-fuentefecha {
		font-size: 14px;
	}

	.minimo-espacio1 {
		width: 100px;
		padding: 20px;
	}

	.minimo-espacio2 {
		padding: 10px 15px;
		margin-right: 15px;
	}

	.minimo-espacio3 {
		margin-left: 30px;
		margin-right: 30px;
	}

	@@media (max-width: 800px) {
		.destacados-espacio {
			gap: 5px;
		}

		.destacados-botonizq {
			font-size: 14px;
			margin-right: 5px;
		}

		.destacados-botonder {
			font-size: 14px;
			margin-left: 5px;
		}

		.destacado-juego {
			min-width: 100px;
			max-width: 150px;
		}

		.destacado-fuente {
			font-size: 11px;
		}

		.noticia-fuente {
			font-size: 13px;
		}

		.noticia-fecha {
			font-size: 11px;
		}

		.minimo-fuente {
			font-size: 12px;
		}

		.minimo-fuentefecha {
			font-size: 10px;
		}

		.minimo-espacio1 {
			width: 60px;
			padding: 5px;
		}

		.minimo-espacio2 {
			padding: 5px 10px;
			margin-right: 0px;
		}

		.minimo-espacio3 {
			margin-left: 0px;
			margin-right: 0px;
		}
	}
</style>

@if (noticiaEvento.Count == 1)
{
	<div style="margin-bottom: 50px;">
		<a href="@CargarEnlaceNoticia(noticiaEvento[0])" class="boton-pequeño" style="text-decoration: none; padding: 1px;">
			<div style="overflow: hidden; position: relative; height: 150px; display: flex; align-items: center;">
				<img style="opacity: 0.2; position: absolute; left: 0; top: 0; width: 100%; height: auto;" src="@CargarFondoNoticia(noticiaEvento[0])">
				<div style="position: relative; left: 50%; transform: translateX(-50%);">
					<div style="font-size: 24px;">
						@Herramientas.Idiomas.MirarTexto(idioma, @noticiaEvento[0].TituloEn, @noticiaEvento[0].TituloEs)
					</div>
				</div>
			</div>
		</a>
	</div>
}

@if (juegosDestacadosMostrar.Count > 0)
{
	<div style="display: flex; font-size: 20px; padding-bottom: 20px; align-items: center; justify-content: center;">
		<a href="/HistoricalLow" style="text-decoration: none;">@Herramientas.Idiomas.CogerCadena(idioma, "Index.HighDeals")</a>
		
		<div class="tooltip2" style="margin-left: 20px;">
			<i class="fa-solid fa-circle-info" style="font-size: 15px;"></i>
			<div class="tooltip-abrir tooltip-derecha" style="padding: 20px; min-width: 400px; max-width: 600px;">
				@Herramientas.Idiomas.CogerCadena(idioma, "Index.HighDealsInfo")
			</div>
		</div>
	</div>

	<div style="display: flex; align-items: center; margin-bottom: 60px;">
		<button @onclick="ClickearAtras" class="boton-pequeño destacados-botonizq" style="width: 50px; height: 50px; text-align: center;"><i class="fa-solid fa-chevron-left"></i></button>

		<div class="destacados-espacio" style="display: grid; grid-auto-flow: column;">
			@{			
				int j = 0;

				@foreach (var destacado in juegosDestacadosMostrar)
				{
					string izquierda = "105%";

					if (j < 3)
					{
						izquierda = "105%";
					}
					else
					{
						izquierda = "-365%";
					}

					j += 1;

					string miniVideo = string.Empty;

					if (destacado != null)
					{
						if (destacado.Media != null)
						{
							if (string.IsNullOrEmpty(destacado.Media.Video) == false)
							{
								int int1 = destacado.Media.Video.LastIndexOf("/");
								string temp1 = destacado.Media.Video.Remove(int1, destacado.Media.Video.Length - int1);

								miniVideo = temp1 + "/microtrailer.webm";

								miniVideo = miniVideo.Replace("cdn.akamai.steamstatic.com/", "cdn.cloudflare.steamstatic.com/");
								miniVideo = miniVideo.Replace("http://", "https://");
							}
						}

						<Tooltip izquierda="@izquierda" drm="@CargarDRM(destacado)" tienda="@CargarIconoTienda(destacado)" tiempo="@CargarFechaDetectado(destacado)" video="@miniVideo" nombre="@destacado.Nombre">
							<div class="tooltip2 destacado-juego">
								<a href="game/@destacado.IdMaestra" class="boton-pequeño destacado-fuente" style="padding: 2px;">
									<div>
										<img src="@destacado.Imagenes.Library_600x900" style="max-width: 100%; max-height: 100%;" />
									</div>
									<div style="display: flex; align-content: center; align-items: center; justify-content: right;">
										<div style="background-color: darkgreen; margin: 0px; padding: 8px 10px;">
											@CargarDescuento(destacado)
										</div>
										<div style="padding: 8px 10px;">
											@CargarPrecio(destacado)
										</div>
									</div>
								</a>
							</div>
						</Tooltip>
					}		
				}
			}			
		</div>

		<button @onclick="ClickearAdelante" class="boton-pequeño destacados-botonder" style="width: 50px; height: 50px; text-align: center;"><i class="fa-solid fa-chevron-right"></i></button>
	</div>
}

@if (noticiasMostrar.Count > 0)
{
	<div style="display: flex; font-size: 20px; align-items: center; justify-content: center;">
		<a href="/LastNews" style="text-decoration: none;">@Herramientas.Idiomas.CogerCadena(idioma, "Index.LastNews")</a>

		<a href="@Herramientas.Idiomas.CogerRSS(idioma)" target="_blank" style="margin-left: 20px;"><i class="fa-solid fa-rss"></i></a>		
	</div>

	<div style="margin-bottom: 25px;">
		@foreach (var noticia in noticiasMostrar)
		{
			<div class="perfil-flexible-centrado" style="margin-top: 20px;">
				<a class="boton-pequeño" style="padding: 1px;" href="@noticia.Enlace" target="@SacarNoticiaNuevaPestaña(noticia)">
					<div class="perfil-flexible-centrado">
						<div style="width: 25%;">
							<img src="@noticia.Imagen" style="width: 100%; height: 100%; object-fit: contain;" />
						</div>

						<div style="width: 75%; padding: 20px 30px;">
							<div style="margin-bottom: 20px; display: flex; align-items: center;">
								<div class="noticia-fecha" style="margin-right: 20px;">
									@noticia.FechaEmpieza.Day.ToString()/@noticia.FechaEmpieza.Month.ToString()/@noticia.FechaEmpieza.Year.ToString()
								</div>

								@if (string.IsNullOrEmpty(CargarIconoNoticia(noticia)) == false)
								{
									<img src="@CargarIconoNoticia(noticia)" style="width: 16px; height: 16px; margin-right: 20px;" />
								}	

								<label style="font-size: 15px;">@NoticiasCargar.Traduccion(noticia.Tipo, idioma)</label>
							</div>

							<div class="noticia-fuente">
								@Herramientas.Idiomas.MirarTexto(idioma, @noticia.TituloEn, @noticia.TituloEs)
							</div>
						</div>
					</div>
				</a>
			</div>
		}
	</div>

	<div style="margin-bottom: 60px; margin-left: auto; margin-right: auto; width: 400px;">
		<a class="boton-pequeño" style="width: 100%; padding: 15px 20px; font-size: 17px; text-align: center;" href="/LastNews">
			@Herramientas.Idiomas.CogerCadena(idioma, "Index.LastNewsMore")
		</a>
	</div>
}
else
{
	<div style="margin-bottom: 60px; margin-left: auto; margin-right: auto; width: 700px;">
		<a class="boton-pequeño" style="width: 100%; padding: 15px 20px; font-size: 17px; text-align: center;" href="/LastNews">
			@Herramientas.Idiomas.CogerCadena(idioma, "Index.LastNewsNo")
		</a>
	</div>
}

@if (mensajeMostrar > 0)
{
	<div style="margin-bottom: 60px; margin-left: auto; margin-right: auto;">
		@if (mensajeMostrar == 1)
		{
			<a class="boton-pequeño" style="width: 100%; padding: 25px 35px; font-size: 17px; text-align: center;" href="/Identity/Account/Register">
				<div style="display: flex; align-content: center; align-items: center;">
					<div style="width: 10%; text-align: right; padding-right: 30px;">
						<i class="fa-solid fa-circle-info" style="font-size: 32px;"></i>
					</div>
					<div style="width: 90%;">
						@Herramientas.Idiomas.CogerCadena(idioma, "Index.Message1")
					</div>
				</div>
			</a>
		}

		@if (mensajeMostrar == 2)
		{
			<a class="boton-pequeño" style="width: 100%; padding: 25px 35px; font-size: 17px; text-align: center;">
				<div style="display: flex; align-content: center; align-items: center;">
					<div style="width: 10%; text-align: right; padding-right: 30px;">
						<i class="fa-solid fa-euro-sign" style="font-size: 32px;"></i>
					</div>
					<div style="width: 90%;">
						@Herramientas.Idiomas.CogerCadena(idioma, "Index.Message2")
					</div>
				</div>
			</a>
		}

		@if (mensajeMostrar == 3)
		{
			<a class="boton-pequeño" style="width: 100%; padding: 25px 35px; font-size: 17px; text-align: center;" href="https://github.com/pepeizq/pepeizqs-deals-web/">
				<div style="display: flex; align-content: center; align-items: center;">
					<div style="width: 10%; text-align: right; padding-right: 30px;">
						<i class="fa-brands fa-github" style="font-size: 32px;"></i>
					</div>
					<div style="width: 90%;">
						@Herramientas.Idiomas.CogerCadena(idioma, "Index.Message3")
					</div>
				</div>
			</a>
		}
	</div>
}

@if (juegosMinimosMostrar.Count > 0)
{
	<div style="display: flex; font-size: 20px; align-items: center; justify-content: center;">
		<a href="/HistoricalLow" style="text-decoration: none;">@Herramientas.Idiomas.CogerCadena(idioma, "Index.LastLows")</a>

		<div class="tooltip2" style="margin-left: 20px;">
			<i class="fa-solid fa-circle-info" style="font-size: 15px;"></i>
			<div class="tooltip-abrir tooltip-derecha" style="padding: 20px; min-width: 400px; max-width: 600px;">
				@Herramientas.Idiomas.CogerCadena(idioma, "Index.LastLowsInfo")
			</div>
		</div>
	</div>

	<div style="margin-bottom: 25px;">
		@foreach (global::Juegos.Juego juego in juegosMinimosMostrar)
		{
			<div class="perfil-flexible-centrado minimo-espacio3" style="margin-top: 20px;">
				<a class="boton-pequeño" style="padding: 2px;" href="/game/@juego.IdMaestra">
					<div class="perfil-flexible-centrado">
						<div style="width: 20%;">
							<img src="@juego.Imagenes.Capsule_231x87" style="height: 100%; width: 100%;" />
						</div>

						<div style="width: 73%; display: flex; flex-flow: column wrap; padding: 15px 20px;">
							<div class="minimo-fuente">@juego.Nombre</div>
							<div style="margin-top: 10px; display: flex; align-items: center;">
								<img src="@CargarDRM(juego)" style="width: 16px; height: 16px; margin-right: 10px;" />
								<img src="@CargarIconoTienda(juego)" style="width: 16px; height: 16px; margin-right: 10px;" />
								<div class="minimo-fuentefecha">@CargarFechaDetectado(juego)</div>
							</div>
						</div>

						<div style="width: 17%; display: flex; align-items: center; justify-content: center; text-align: center;">
							<div class="minimo-fuente minimo-espacio2" style="background-color: darkgreen;">
								@CargarDescuento(juego)
							</div>

							<div class="minimo-fuente minimo-espacio1" style="text-align: center;">
								@CargarPrecio(juego)
							</div>
						</div>
					</div>
				</a>
			</div>
		}
	</div>

	<div style="margin-bottom: 20px; margin-left: auto; margin-right: auto; width: 400px;">
		<a class="boton-pequeño" style="width: 100%; padding: 15px 20px; font-size: 17px; text-align: center;" href="/HistoricalLow?mode=last">
			@Herramientas.Idiomas.CogerCadena(idioma, "Index.LastLowsMore")
		</a>
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string dominio { get; set; }

	private Usuario usuario = new Usuario();

	List<global::Juegos.Juego> juegosDestacadosMostrar = new List<global::Juegos.Juego>();
	List<global::Juegos.Juego> juegosDestacadosGestor = new List<global::Juegos.Juego>();
	public int cantidadDestacadosMostrar = 6;
	public int posicionDestacadosMostrar = 0;
	public int topeAtras = 0;
	public int topeAdelante = 0;

	List<global::Juegos.Juego> juegosMinimosMostrar = new List<global::Juegos.Juego>();

	private int mensajeMostrar = 0;

	List<Noticia> noticiasMostrar = new List<Noticia>();
	List<Noticia> noticiasGestor = new List<Noticia>();
	List<Noticia> noticiaEvento = new List<Noticia>();

	protected override async Task OnInitializedAsync()
	{
		usuario = UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User).Result;

		if (usuario == null)
		{
			Random rnd = new Random();
			mensajeMostrar = rnd.Next(1, 4);
		}

		//------------------------------------------------

		SqlConnection conexion = Herramientas.BaseDatos.Conectar();

		using (conexion)
		{
			#region Destacados

			try
			{
				juegosDestacadosGestor = BaseDatos.Juegos.Buscar.Todos(conexion, "portadaJuegosDestacados");
			}
			catch { }

			if (juegosDestacadosGestor != null)
			{
				if (juegosDestacadosGestor.Count > 0)
				{
					juegosDestacadosGestor = juegosDestacadosGestor.OrderBy(x => x.Id).ToList();

					foreach (var juego in juegosDestacadosGestor)
					{
						try
						{
							juego.Imagenes.Library_600x900 = await Herramientas.Imagenes.DescargarYGuardar(juego.Imagenes.Library_600x900, "juegos", juego.IdMaestra.ToString(), "library_600x900", dominio);
						}
						catch { }
					}

					for (int i = posicionDestacadosMostrar; i < cantidadDestacadosMostrar; i += 1)
					{
						juegosDestacadosMostrar.Add(juegosDestacadosGestor[i]);
					}
				}
			}

			#endregion

			#region Minimos

			try
			{
				juegosMinimosMostrar = BaseDatos.Juegos.Buscar.Todos(conexion, "portadaJuegosMinimos");
			}
			catch { }

			if (juegosMinimosMostrar != null)
			{
				if (juegosMinimosMostrar.Count > 0)
				{
					juegosMinimosMostrar = juegosMinimosMostrar.OrderBy(x => x.Id).ToList();

					foreach (global::Juegos.Juego juego in juegosMinimosMostrar)
					{
						try
						{
							juego.Imagenes.Capsule_231x87 = await Herramientas.Imagenes.DescargarYGuardar(juego.Imagenes.Capsule_231x87, "juegos", juego.IdMaestra.ToString(), "capsule_231x87", dominio);
						}
						catch { }
					}
				}
			}			

			#endregion

			#region Noticias

			try
			{
				noticiasGestor = BaseDatos.Noticias.Buscar.Todas(conexion, "portadaNoticias");
			}
			catch { }

			if (noticiasGestor != null)
			{
				if (noticiasGestor.Count > 0)
				{
					noticiasGestor = noticiasGestor.OrderBy(x => x.FechaEmpieza).Reverse().ToList();

					foreach (Noticia noticia in noticiasGestor)
					{
						if (noticia.Imagen != null)
						{
							try
							{
								noticia.Imagen = await Herramientas.Imagenes.DescargarYGuardar(noticia.Imagen, "noticias", noticia.IdMaestra.ToString(), "header", dominio);
							}
							catch { }
						}

						if (noticia.Enlace == null)
						{
							noticia.Enlace = "/news/" + noticia.IdMaestra.ToString();
						}

						DateTime fechaTemporal = noticia.FechaEmpieza;
						fechaTemporal = fechaTemporal.AddDays(3);

						if (fechaTemporal > DateTime.Now)
						{
							noticiasMostrar.Add(noticia);
						}
					}
				}
			}

			noticiaEvento = BaseDatos.Noticias.Buscar.Todas(conexion, "portadaNoticiasEvento");

			#endregion
		}
	}

	private string SacarNoticiaNuevaPestaña(Noticia noticia)
	{
		if (noticia.Enlace != null)
		{
			if (noticia.Enlace.Contains("/link/") == true)
			{
				return "_blank";
			}
		}

		return "_self";
	}

	private void ClickearAdelante()
	{
		juegosDestacadosMostrar.Clear();

		posicionDestacadosMostrar += cantidadDestacadosMostrar;
		topeAdelante = posicionDestacadosMostrar + cantidadDestacadosMostrar;

		if (topeAdelante > juegosDestacadosGestor.Count)
		{
			posicionDestacadosMostrar = 0;
			topeAdelante = cantidadDestacadosMostrar;
		}

		for (int i = posicionDestacadosMostrar; i < topeAdelante; i += 1)
		{
			juegosDestacadosMostrar.Add(juegosDestacadosGestor[i]);
		}
	}

	private void ClickearAtras()
	{
		juegosDestacadosMostrar.Clear();

		topeAtras = posicionDestacadosMostrar;
		posicionDestacadosMostrar -= cantidadDestacadosMostrar;

		if (posicionDestacadosMostrar < 0)
		{
			posicionDestacadosMostrar = juegosDestacadosGestor.Count - cantidadDestacadosMostrar;
			topeAtras = juegosDestacadosGestor.Count;
		}

		for (int i = posicionDestacadosMostrar; i < topeAtras; i += 1)
		{
			juegosDestacadosMostrar.Add(juegosDestacadosGestor[i]);
		}
	}

	private string CargarDRM(global::Juegos.Juego juego)
	{
		string imagen = null;

		JuegoPrecio oferta = juego.PrecioActualesTiendas[0];
		List<Juegos.DRM> drms = Juegos.JuegoDRM2.GenerarListado();

		foreach (var drm in drms)
		{
			if (drm.Id == oferta.DRM)
			{
				imagen = drm.Imagen;
			}
		}

		if (imagen != null)
		{
			return imagen;
		}
		else
		{
			return null;
		}
	}

	private string CargarIconoTienda(global::Juegos.Juego juego)
	{
		string imagen = null;

		JuegoPrecio oferta = juego.PrecioActualesTiendas[0];
		List<Tiendas2.Tienda> tiendas = Tiendas2.TiendasCargar.GenerarListado();

		foreach (var tienda in tiendas)
		{
			if (tienda.Id == oferta.Tienda)
			{
				imagen = tienda.ImagenIcono;
			}
		}

		if (imagen != null)
		{
			return imagen;
		}
		else
		{
			return null;
		}
	}

	private string CargarDescuento(global::Juegos.Juego juego)
	{
		string descuentoMensaje = null;

		descuentoMensaje = juego.PrecioActualesTiendas[0].Descuento.ToString();
		descuentoMensaje = descuentoMensaje + "%";

		if (descuentoMensaje != null)
		{
			return descuentoMensaje;
		}
		else
		{
			return null;
		}
	}

	private string CargarPrecio(global::Juegos.Juego juego)
	{
		string precioMensaje = null;

		precioMensaje = juego.PrecioActualesTiendas[0].Precio.ToString();
		precioMensaje = precioMensaje.Replace(".", ",");

		int int1 = precioMensaje.IndexOf(",");

		if (int1 == precioMensaje.Length - 2)
		{
			precioMensaje = precioMensaje + "0";
		}

		if (precioMensaje.Length > int1 + 3)
		{
			precioMensaje = precioMensaje.Remove(int1 + 3, precioMensaje.Length - int1 - 3);
		}

		precioMensaje = precioMensaje + "€";

		if (precioMensaje != null)
		{
			return precioMensaje;
		}
		else
		{
			return null;
		}
	}

	private string CargarFechaDetectado(global::Juegos.Juego juego)
	{
		string mensaje = null;

		mensaje = Herramientas.Calculadora.HaceTiempo(juego.PrecioActualesTiendas[0].FechaDetectado, idioma);

		return mensaje;
	}

	private string CargarEnlaceNoticia(Noticia noticia)
	{
		string enlace = string.Empty;

		if (noticia.Enlace != null)
		{
			enlace = noticia.Enlace;
		}
		else
		{
			enlace = "/news/" + noticia.IdMaestra.ToString();
		}

		return enlace;
	}

	private string CargarIconoNoticia(Noticia noticia)
	{
		string icono = string.Empty;

		if (noticia.Tipo == NoticiaTipo.Bundles)
		{
			icono = Bundles2.BundlesCargar.DevolverBundle(noticia.BundleTipo).ImagenIcono;
		}
		else if (noticia.Tipo == NoticiaTipo.Gratis)
		{
			icono = Gratis2.GratisCargar.DevolverGratis(noticia.GratisTipo).ImagenIcono;
		}
		else if (noticia.Tipo == NoticiaTipo.Suscripciones)
		{
			icono = Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(noticia.SuscripcionTipo).ImagenIcono;
		}

		return icono;
	}

	private string CargarFondoNoticia(Noticia noticia)
	{
		string imagen = null;

		if (noticia != null)
		{
			if (noticia.Imagen != null)
			{
				imagen = noticia.Imagen;
			}

			if (imagen == null)
			{
				if (noticia.Juegos != null)
				{
					List<string> juegos = Herramientas.Listados.Generar(noticia.Juegos);

					if (juegos != null)
					{
						global::Juegos.Juego juego = BaseDatos.Juegos.Buscar.UnJuego(juegos[0]);

						if (juego != null)
						{
							imagen = juego.Imagenes.Library_1920x620;
						}
					}
				}
			}

			if (imagen == null)
			{
				if (noticia.ContenidoEn != null)
				{
					if (noticia.ContenidoEn.Contains(".png") == true || noticia.ContenidoEn.Contains(".webp") == true || noticia.ContenidoEn.Contains(".jpg") == true)
					{
						int contador = 4;
						int int1 = noticia.ContenidoEn.IndexOf(".png");

						if (int1 == -1)
						{
							contador = 5;
							int1 = noticia.ContenidoEn.IndexOf(".webp");
						}

						if (int1 == -1)
						{
							contador = 4;
							int1 = noticia.ContenidoEn.IndexOf(".jpg");
						}

						if (int1 > - 1)
						{
							string temp1 = noticia.ContenidoEn.Remove(int1 + contador, noticia.ContenidoEn.Length - int1 - contador);

							int int2 = temp1.LastIndexOf("https://");
							string temp2 = temp1.Remove(0, int2);

							temp2 = temp2.Replace(Strings.ChrW(34).ToString(), null);

							imagen = temp2.Trim();
						}
					}
				}
			}
		}

		return imagen;
	}
}
