@using ApexCharts
@using Bundles2
@using Gratis2
@using Herramientas
@using Juegos
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using Microsoft.VisualBasic
@using pepeizqs_deals_web.Areas.Identity.Data
@using Suscripciones2
@using System.Net
@using System.Text.Json
@using Tiendas2

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IJSRuntime JavaScript

@implements IDisposable
@inject PersistentComponentState ApplicationState

@if (juego != null)
{
    string titulo = juego.Nombre + " • pepeizq's deals";
    string descripcion = string.Empty;
    string enlace = "https://pepeizqdeals.com/game/" + juego.Id.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(juego.Nombre) + "/";
    string imagen = string.Empty;

    if (juego.Caracteristicas != null)
    {
        if (string.IsNullOrEmpty(juego.Caracteristicas.Descripcion) == false)
        {
            descripcion = juego.Caracteristicas.Descripcion;
        }
    }

    if (juego.Imagenes != null)
    {
        if (string.IsNullOrEmpty(juego.Imagenes.Header_460x215) == false)
        {
            imagen = juego.Imagenes.Header_460x215;
        }
    }

    string[] keywordsEnBruto = Herramientas.Buscador.LimpiarNombre(juego.Nombre, false).Split(' ');
    List<string> keywordsLista = new List<string>();
    keywordsLista.AddRange(keywordsEnBruto);

    string keywords = "deals";

    foreach (string keyword in keywordsLista)
    {
        if (keyword.Length > 3)
        {
            keywords = keywords + ", " + keyword;
        }
    }

    <HeadContent>
        <meta name="og:title" content="@titulo" />
        <meta name="description" content="@descripcion" />
        <meta name="og:description" content="@descripcion" />
        <meta name="og:url" content="@enlace" />
        <meta name="og:image" content="@imagen" />
        <meta name="og:video" content="@mediaMostrar" />
        <meta name="og:site_name" content="pepeizq's deals" />
        <meta name="og:type" content="website" />
        <meta name="robots" content="index, follow" />
        <meta name="keywords" content="@keywords" />

        @{
            string nombreJson = juego.Nombre.Replace(Strings.ChrW(34).ToString(), null);

            decimal estrellasJson = 0;
            string cantidadJson = string.Empty;
            
            if (juego.Analisis != null)
            {
                if (string.IsNullOrEmpty(juego.Analisis.Porcentaje) == false && string.IsNullOrEmpty(juego.Analisis.Cantidad) == false)
                {
                    estrellasJson = decimal.Parse(juego.Analisis.Porcentaje) / 20;

                    if (estrellasJson < 0.5m)
                    {
                        estrellasJson = 0.50m;
                    }

                    cantidadJson = juego.Analisis.Cantidad.Replace(",", null);

                    if (string.IsNullOrEmpty(cantidadJson) == true)
                    {
                        cantidadJson = "10";
                    }
                }
            }
            
            string desarrolladorJson = "not detected";

            if (juego.Caracteristicas != null)
            {
                if (juego.Caracteristicas.Desarrolladores != null)
                {
                    if (juego.Caracteristicas.Desarrolladores.Count > 0)
                    {
                        if (string.IsNullOrEmpty(juego.Caracteristicas.Desarrolladores[0]) == false)
                        {
                            desarrolladorJson = juego.Caracteristicas.Desarrolladores[0];
                        }
                    }
                }
            } 
        }

        <script type="application/ld+json">
            @{
                string seoJson = "{" + Environment.NewLine +
                    Strings.ChrW(34) + "@context" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "https://schema.org" + Strings.ChrW(34) + "," + Environment.NewLine +
                    Strings.ChrW(34) + "@type" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "SoftwareApplication" + Strings.ChrW(34) + "," + Environment.NewLine +
                    Strings.ChrW(34) + "name" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + nombreJson + Strings.ChrW(34) + "," + Environment.NewLine +
                    Strings.ChrW(34) + "description" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + descripcion + Strings.ChrW(34) + "," + Environment.NewLine +
                    Strings.ChrW(34) + "operatingSystem" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "WINDOWS" + Strings.ChrW(34) + "," + Environment.NewLine +
                    Strings.ChrW(34) + "applicationCategory" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "GameApplication" + Strings.ChrW(34); 

                if (juego.Imagenes != null)
                {
                    seoJson = seoJson + "," + Environment.NewLine + Strings.ChrW(34) + "image" + Strings.ChrW(34) + ": {" + Strings.ChrW(34) + 
                        "@type" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "ImageObject" + Strings.ChrW(34) + "," + Strings.ChrW(34) + "url" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + juego.Imagenes.Header_460x215 + Strings.ChrW(34) + 
                        "," + Strings.ChrW(34) + "contentUrl" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + juego.Imagenes.Header_460x215 + Strings.ChrW(34) + "}";
                }

                if (estrellasJson > 0 && string.IsNullOrEmpty(cantidadJson) == false)
                {
                    seoJson = seoJson + "," + Environment.NewLine + Strings.ChrW(34) + "aggregateRating" + Strings.ChrW(34) + ":" + Environment.NewLine + "{" + Environment.NewLine +
                        Strings.ChrW(34) + "@type" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "AggregateRating" + Strings.ChrW(34);
                        
                    seoJson = seoJson + "," + Environment.NewLine + Strings.ChrW(34) + "ratingValue" + Strings.ChrW(34) + ":" + estrellasJson.ToString();
                    seoJson = seoJson + "," + Environment.NewLine + Strings.ChrW(34) + "ratingCount" + Strings.ChrW(34) + ":" + cantidadJson;
                    seoJson = seoJson + Environment.NewLine + "}";
                }

                if (juego.PrecioActualesTiendas != null)
                {
                    decimal minimoCantidad = 10000000;

                    foreach (var precio in juego.PrecioActualesTiendas)
                    {
                        if (Herramientas.OfertaActiva.Verificar(precio) == true && precio.DRM != JuegoDRM.NoEspecificado && precio.DRM != JuegoDRM.Microsoft)
                        {
                            decimal tempPrecio = precio.Precio;

                            if (tempPrecio < minimoCantidad)
                            {
                                minimoCantidad = tempPrecio;
                            }
                        }
                    }

                    if (minimoCantidad < 10000000)
                    {
                         seoJson = seoJson + "," + Environment.NewLine + Strings.ChrW(34) + "offers" + Strings.ChrW(34) + ":" + Environment.NewLine + "{" +
                            Strings.ChrW(34) + "@type" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "Offer" + Strings.ChrW(34) + "," +
                            Strings.ChrW(34) + "price" + Strings.ChrW(34) + ":" + minimoCantidad.ToString() + "," +
                            Strings.ChrW(34) + "priceCurrency" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "EUR" + Strings.ChrW(34) + "," +
                            Strings.ChrW(34) + "availability" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "https://schema.org/InStock" + Strings.ChrW(34) + "," +
                            Strings.ChrW(34) + "url" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + enlace + Strings.ChrW(34) + Environment.NewLine + "}";
                    }
                }

                seoJson = seoJson + "}";
            }

            @((MarkupString)seoJson)
        </script>

        <script type="application/ld+json">
            {
              "@@context": "https://schema.org/",
              "@@type": "Product",
              "name": "@nombreJson",
              "description": "@descripcion",
              "url": "@enlace",
              "review": {
                "@@type": "Review",
                "reviewRating": {
                  "@@type": "Rating",
                  "ratingValue": @estrellasJson,
                  "bestRating": 5
                },
                "author": {
                  "@@type": "Organization",
                  "name": "@desarrolladorJson"
                }
              },
              "aggregateRating": {
                "@@type": "AggregateRating",
                "ratingValue": @estrellasJson,
                "reviewCount": @cantidadJson
              }
            }
        </script>

        @if (string.IsNullOrEmpty(mediaMostrar) == false)
        {
            <script type="application/ld+json">
                {
                  "@@context": "https://schema.org",
                  "@@type": "VideoObject",
                  "name": "@nombreJson Trailer",
                  "description": "@descripcion",
                  "thumbnailUrl": [
                    "@imagen"
                   ],
                  "contentUrl": "@mediaMostrar",
                  "embedUrl": "@mediaMostrar",
                  "uploadDate": "@DateTime.Now.ToString()+06:00"
                }
            </script>            
        }

        <link rel="canonical" href="@enlace" />
    </HeadContent>
}

<script>
    window.ChangeUrl = function (url) {
        history.pushState(null, '', url);
    }
</script>

<script>
    function moverScroll(id) {
        const yOffset = -185;
        const element = document.getElementById(id);
        const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

        window.scrollTo({ top: y, behavior: 'smooth' });
    }
</script>

<style>
    .descripcion-datos {
    grid-template-columns: 1fr 1fr;
    }

    @@media(max-width: 1000px) {
    .descripcion-datos {
    grid-template-columns: 1fr;
    }
    }

    .boton-expandir {
    transition: transform .2s;
    background-color: var(--fondoBotonPequeño);
    }

    .boton-expandir:hover {
    transform: scale(1.01);
    background-color: var(--fondoBotonPequeñoHover);
    }

    .boton-expandir2 {
    transition: transform .2s;
    }

    .boton-expandir2:hover {
    transform: scale(1.01);
    }
</style>

@if (juego != null)
{
    <div>
        @if (juego.Imagenes != null)
        {
            if (juego.Tipo == JuegoTipo.Game)
            {
                bool mostrar = true;

                if (usuarioLogeado == false)
                {
                    if (string.IsNullOrEmpty(juego.MayorEdad) == false)
                    {
                        if (juego.MayorEdad.ToLower() == "true")
                        {
                            mostrar = false;
                        }
                    }
                }
                            
                if (mostrar == true)
                {
                    <img class="juego-fondo" src="@Herramientas.Ficheros.Imagenes.ServidorExterno(juego.Imagenes.Library_1920x620, 1536, 496)" alt="@juego.Nombre" loading="lazy" />
                }
            }
        }

        <div style="position: relative; display: flex; flex-direction: column; gap: 50px;">
            @{
                string fondoCabecera = "background-color: var(--fondoOscuroTransparente);";
                string fondoBoton = "background-color: var(--fondoBotonPequeño);";
                string fondoCajas = "background-color: var(--fondoMinimo);";

                if (juego.Tipo == JuegoTipo.DLC)
                {
                    fondoCabecera = "background: color-mix(in srgb, var(--fondoOscuroTransparente), var(--fondoDlc) 70%);";
                    fondoBoton = "background: color-mix(in srgb, var(--fondoBotonPequeño) 70%, var(--fondoDlc));";
                    fondoCajas = "background: color-mix(in srgb, var(--fondoMinimo), var(--fondoDlc) 60%);";
                }
                else if (juego.Tipo == JuegoTipo.Music)
                {
                    fondoCabecera = "background: color-mix(in srgb, var(--fondoOscuroTransparente), var(--fondoBandaSonora));";
                    fondoBoton = "background: color-mix(in srgb, var(--fondoBotonPequeño) 70%, var(--fondoBandaSonora));";
                    fondoCajas = "background: color-mix(in srgb, var(--fondoMinimo), var(--fondoBandaSonora) 60%);";
                }
            }

            <div class="juego-cabecera" style="@fondoCabecera position: sticky; top: 70px; z-index: 3;">
                <div class="perfil-flexible-centrado">
                    @if (juego.Imagenes != null)
                    {
                        if (string.IsNullOrEmpty(juego.Imagenes.Header_460x215) == false)
                        {
                            bool difuminar = false;

                            if (usuarioLogeado == false)
                            {
                                if (string.IsNullOrEmpty(juego.MayorEdad) == false)
                                {
                                    if (juego.MayorEdad.ToLower() == "true")
                                    {
                                        difuminar = true;                                        
                                    }
                                }
                            }
                            
                            if (difuminar == false)
                            {
                                <div class="juego-flexible-izquierda">
                                    <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(juego.Imagenes.Header_460x215, 250, 116)" class="juego-imagen" alt="@juego.Nombre" loading="lazy" />
                                </div>
                            }
                            else
                            {
                                <div class="juego-flexible-izquierda" style="overflow: hidden;">
                                    <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(juego.Imagenes.Header_460x215, 250, 116)" class="juego-imagen" style="filter: blur(10px);" alt="@juego.Nombre" loading="lazy" />
                                </div>
                            }
                        }
                    }

                    <div class="juego-titulo">
                        <h1 style="font-size: 20px; margin: 0px;">@juego.Nombre</h1>

                        <div style="display: flex; align-items: center; gap: 15px;">
                            @{
                                bool mostrarDRMs = false;

                                foreach (DRM drm in JuegoDRM2.GenerarListado())
                                {
                                    if (VerificarMostrarDRM(idioma, drm.Id, juego) == true && drm.Id != JuegoDRM.NoEspecificado)
                                    {
                                        mostrarDRMs = true;
                                        break;
                                    }
                                }

                                if (mostrarDRMs == true)
                                {
                                    <div style="display: flex; align-items: center; gap: 10px;">
                                        @foreach (DRM drm in JuegoDRM2.GenerarListado())
                                        {
                                            if (drm.Id != JuegoDRM.NoEspecificado)
                                            {
                                                if (VerificarMostrarDRM(idioma, drm.Id, juego) == true)
                                                {
                                                    string fondoBotonDRM = fondoBoton;

                                                    if (usuarioLogeado == true)
                                                    {
                                                        if (usuarioTieneDesea != null)
                                                        {
                                                            if (usuarioTieneDesea.Count > 0)
                                                            {
                                                                foreach (var tieneDesea in usuarioTieneDesea)
                                                                {
                                                                    if (drm.Id == tieneDesea.DRM && tieneDesea.Tiene == true)
                                                                    {
                                                                        fondoBotonDRM = "background-color: var(--fondoBien);";
                                                                        break;
                                                                    }

                                                                    if (drm.Id == tieneDesea.DRM && tieneDesea.Desea == true)
                                                                    {
                                                                        fondoBotonDRM = "background-color: var(--fondoAlerta);";
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        } 
                                                    }

                                                    if (drm.Id == JuegoDRM.DRMFree)
                                                    {
                                                        <button onclick="moverScroll('@drm.Id')" class="boton-pequeño" style="@fondoBotonDRM width: 40px; height: 40px; text-align: center; padding: 7px;"><div style="font-weight: bold; font-size: 9px;">DRM Free</div></button>
                                                    }
                                                    else
                                                    {
                                                        <button onclick="moverScroll('@drm.Id')" class="boton-pequeño" style="@fondoBotonDRM width: 40px; height: 40px; text-align: center; padding: 9px;">
                                                            <div style="display: flex; align-items: center;">
                                                                <img src="@JuegoDRM2.SacarImagen(drm.Id)" style="max-width: 100%; max-height: 100%;" alt="@drm.Nombre" loading="lazy" />
                                                            </div>
                                                        </button>
                                                    }
                                                }
                                            }
                                        }
                                    </div>
                                }
                            }

                            @if (juego.Bundles != null)
                            {
                                <button onclick="moverScroll('bundles')" class="boton" style="padding: 0px; background-color: transparent; color: var(--colorEnlace); font-size: 16px; width: fit-content;">@Idiomas.BuscarTexto(idioma, "Bundles", "Header")</button>
                            }

                            @if (juego.Gratis != null)
                            {
                                <button onclick="moverScroll('gratis')" class="boton" style="padding: 0px; background-color: transparent; color: var(--colorEnlace); font-size: 16px; width: fit-content;">@Idiomas.BuscarTexto(idioma, "Free", "Header")</button>
                            }

                            @if (juego.Suscripciones != null)
                            {
                                <button onclick="moverScroll('suscripciones')" class="boton" style="padding: 0px; background-color: transparent; color: var(--colorEnlace); font-size: 16px; width: fit-content;">@Idiomas.BuscarTexto(idioma, "Subscriptions", "Header")</button>
                            }

                            @if (dlcs.Count > 0)
                            {
                                <button onclick="moverScroll('dlcs')" class="boton" style="padding: 8px 10px; background-color: var(--fondoDlc); color: var(--colorTextoDlc); font-size: 16px; width: fit-content;">@Idiomas.BuscarTexto(idioma, "String34", "Game") (@dlcs.Count.ToString())</button>
                            }
                        </div>
                    </div>

                    @{
                        bool añadirDivAnalisisJugadores = false;

                        if (juego.Analisis != null)
                        {
                            if (string.IsNullOrEmpty(juego.Analisis.Cantidad) == false && string.IsNullOrEmpty(juego.Analisis.Porcentaje) == false)
                            {
                                añadirDivAnalisisJugadores = true;
                            }
                        }

                        if (juego.Tipo == JuegoTipo.Game)
                        {
                            if (juego.CantidadJugadores != null)
                            {
                                if (juego.CantidadJugadores.Cantidad > -1)
                                {
                                    añadirDivAnalisisJugadores = true;
                                }
                            }
                        }

                        if (añadirDivAnalisisJugadores == true)
                        {
                            <div class="tooltip-juego" onmousemove="hoverTooltip(event, 'tooltip-reviews')" style="padding: 10px 20px; display: flex; flex-direction: row; align-items: stretch; gap: 15px;">
                                @if (juego.Analisis != null)
                                {
                                    if (string.IsNullOrEmpty(juego.Analisis.Cantidad) == false && string.IsNullOrEmpty(juego.Analisis.Porcentaje) == false)
                                    {
                                        <button onclick="moverScroll('reviews')" class="boton" style="width: fit-content; padding: 0px; color: var(--colorTexto);">
                                            <div style="@fondoCajas border: 1px solid var(--fondoBotonPequeño); padding: 10px; display: flex; flex-direction: column; gap: 10px;">
                                                <div style="display: flex; align-items: center; gap: 10px; justify-content: center;">
                                                    @if (int.Parse(juego.Analisis.Porcentaje) > 74)
                                                    {
                                                        <img src="/imagenes/analisis/positivo3.svg" style="width: 30px; height: 30px;" alt="Reviews" loading="lazy" />
                                                    }

                                                    @if (int.Parse(juego.Analisis.Porcentaje) > 49 && int.Parse(juego.Analisis.Porcentaje) < 75)
                                                    {
                                                        <img src="/imagenes/analisis/meh3.svg" style="width: 30px; height: 30px;" alt="Reviews" loading="lazy" />
                                                    }

                                                    @if (int.Parse(juego.Analisis.Porcentaje) < 50)
                                                    {
                                                        <img src="/imagenes/analisis/negativo3.svg" style="width: 30px; height: 30px;" alt="Reviews" loading="lazy" />
                                                    }

                                                    <div style="font-size: 17px;">
                                                        @juego.Analisis.Porcentaje%
                                                    </div>
                                                </div>

                                                <div style="font-size: 14px;">
                                                    @Calculadora.RedondearAnalisis(idioma, juego.Analisis.Cantidad)
                                                </div>
                                            </div>
                                        </button>
                                    }
                                }

                                @if (juego.Tipo == JuegoTipo.Game)
                                {
                                    if (juego.CantidadJugadores != null)
                                    {
                                        if (juego.CantidadJugadores.Cantidad > -1)
                                        {
                                            <div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); padding: 10px; display: flex; flex-direction: column; gap: 10px; min-height: 82px;">
                                                <div style="font-size: 17px; text-align: center; line-height: 30px;">
                                                    @juego.CantidadJugadores.Cantidad.ToString("N0")
                                                </div>

                                                <div style="font-size: 14px;">
                                                    @Idiomas.BuscarTexto(idioma, "String80", "Game")
                                                </div>
                                            </div>
                                        }
                                    }
                                }

                                @if (usuario != null)
                                {
                                    if (global::BaseDatos.Usuarios.Buscar.RolDios(usuario.Id) == true)
                                    {
                                        if (juego.IdSteam > 0)
                                        {
                                            <div style="display: flex; flex-direction: column; gap: 10px; justify-content: center; align-items: center;">
                                                <label>@Idiomas.BuscarTexto(idioma, "String1", "Game")</label>

                                                @if (juego.IdSteam > 0)
                                                {
                                                    <a class="juego-boton-pequeño" style="@fondoBoton" href="@EnlaceAcortador.Generar("https://store.steampowered.com/app/" + juego.IdSteam.ToString(), APIs.Steam.Tienda.Generar().Id, usuarioPatreon)" target="_blank">Steam</a>
                                                }
                                            </div>
                                        }
                                    }
                                } 

                                <div id="tooltip-reviews" class="tooltip-relleno">
                                    <div style="margin: 8px;">@Idiomas.BuscarTexto(idioma, "String2", "Game")</div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>

            <div style="margin-top: -30px; position: relative; display: flex; flex-direction: column; gap: 20px;">
                @if (juego.Tipo == JuegoTipo.Game)
                {
                    if (string.IsNullOrEmpty(juego.FreeToPlay) == false)
                    {
                        if (juego.FreeToPlay.ToLower() == "true")
                        {
                            <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 20px 30px; display: flex; flex-direction: row; align-items: center; gap: 30px;">
                                <div style="max-width: 26px;">
                                    <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                        <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336l24 0 0-64-24 0c-13.3 0-24-10.7-24-24s10.7-24 24-24l48 0c13.3 0 24 10.7 24 24l0 88 8 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-80 0c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"/>
                                    </svg>
                                </div>

                                <div style="width: 100%;">
                                    @Idiomas.BuscarTexto(idioma, "String33", "Game")
                                </div>
                            </div>
                        }
                    }

                    if (string.IsNullOrEmpty(juego.MayorEdad) == false)
                    {
                        if (juego.MayorEdad.ToLower() == "true")
                        {
                            <div style="padding: 20px 30px; display: flex; flex-direction: row; align-items: center; gap: 30px; background-color: var(--fondoAlerta); border: 1px solid var(--fondoBotonPequeño);">
                                <div style="max-width: 26px;">
                                    <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                        <path d="M256 32c14.2 0 27.3 7.5 34.5 19.8l216 368c7.3 12.4 7.3 27.7 .2 40.1S486.3 480 472 480L40 480c-14.3 0-27.6-7.7-34.7-20.1s-7-27.8 .2-40.1l216-368C228.7 39.5 241.8 32 256 32zm0 128c-13.3 0-24 10.7-24 24l0 112c0 13.3 10.7 24 24 24s24-10.7 24-24l0-112c0-13.3-10.7-24-24-24zm32 224a32 32 0 1 0 -64 0 32 32 0 1 0 64 0z" />
                                    </svg>
                                </div>

                                <div style="width: 100%;">
                                    @if (usuarioLogeado == true)
                                    {
                                        @Idiomas.BuscarTexto(idioma, "String45", "Game")
                                    }
                                    else
                                    {
                                        @string.Format("{0} {1}", Idiomas.BuscarTexto(idioma, "String45", "Game"), Idiomas.BuscarTexto(idioma, "String93", "Game"))
                                    }
                                </div>
                            </div>
                        }
                    }

                    if (juego.Categorias != null)
                    {
                        foreach (var categoria in juego.Categorias)
                        {
                            if (categoria == "54")
                            {
                                <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 20px 30px; display: flex; flex-direction: row; align-items: center; gap: 30px;">
                                    <div style="max-width: 26px;">
                                        <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512">
                                            <path d="M576 64L64 64C28.7 64 0 92.7 0 128L0 384c0 35.3 28.7 64 64 64l120.4 0c24.2 0 46.4-13.7 57.2-35.4l32-64c8.8-17.5 26.7-28.6 46.3-28.6s37.5 11.1 46.3 28.6l32 64c10.8 21.7 33 35.4 57.2 35.4L576 448c35.3 0 64-28.7 64-64l0-256c0-35.3-28.7-64-64-64zM96 240a64 64 0 1 1 128 0A64 64 0 1 1 96 240zm384-64a64 64 0 1 1 0 128 64 64 0 1 1 0-128z"/>
                                        </svg>
                                    </div>

                                    <div style="width: 100%;">
                                        @Idiomas.BuscarTexto(idioma, "String79", "Game")
                                    </div>
                                </div>
                            }
                        }
                    }
                }

                @if (juego.Tipo == JuegoTipo.DLC)
                {
                    if (string.IsNullOrEmpty(juego.Maestro) == false)
                    {
                        if (juego.Maestro != "no")
                        {
                            Juegos.Juego juegoMaestro = global::BaseDatos.Juegos.Buscar.UnJuego(juego.Maestro);

                            <a href="/game/@juego.Maestro/@Herramientas.EnlaceAdaptador.Nombre(juegoMaestro.Nombre)/" style="text-decoration: none;">
                                <div class="boton-expandir" style="padding: 20px 30px; display: flex; flex-direction: row; align-items: center; gap: 30px; background: color-mix(in srgb, var(--fondoOscuro), var(--fondoDlc) 70%); color: var(--colorTextoDlc); border: 1px solid var(--fondoBotonPequeño);">
                                    <div style="max-width: 26px; opacity: 0.5;">
                                        <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                            <path d="M256 0a256 256 0 1 0 0 512A256 256 0 1 0 256 0zM127 297c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l71 71L232 120c0-13.3 10.7-24 24-24s24 10.7 24 24l0 214.1 71-71c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9L273 409c-9.4 9.4-24.6 9.4-33.9 0L127 297z"/>
                                        </svg>
                                    </div>

                                    <div style="width: 100%;">
                                        @string.Format(Idiomas.BuscarTexto(idioma, "String32", "Game"), juegoMaestro.Nombre)
                                    </div>
                                </div>
                            </a>
                        }
                    }

                    if (string.IsNullOrEmpty(juego.MayorEdad) == false)
                    {
                        if (juego.MayorEdad.ToLower() == "true")
                        {
                            <div style="padding: 20px 30px; display: flex; flex-direction: row; align-items: center; gap: 30px; background-color: var(--fondoAlerta); border: 1px solid var(--fondoBotonPequeño);">
                                <div style="max-width: 26px;">
                                    <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                        <path d="M256 32c14.2 0 27.3 7.5 34.5 19.8l216 368c7.3 12.4 7.3 27.7 .2 40.1S486.3 480 472 480L40 480c-14.3 0-27.6-7.7-34.7-20.1s-7-27.8 .2-40.1l216-368C228.7 39.5 241.8 32 256 32zm0 128c-13.3 0-24 10.7-24 24l0 112c0 13.3 10.7 24 24 24s24-10.7 24-24l0-112c0-13.3-10.7-24-24-24zm32 224a32 32 0 1 0 -64 0 32 32 0 1 0 64 0z" />
                                    </svg>
                                </div>

                                <div style="width: 100%;">
                                    @Idiomas.BuscarTexto(idioma, "String46", "Game")
                                </div>
                            </div>
                        }
                    }
                }

                @if (juego.Tipo == JuegoTipo.Music)
                {
                    <div style="background: color-mix(in srgb, var(--fondoOscuro), var(--fondoBandaSonora)); border: 1px solid var(--fondoBotonPequeño); padding: 20px 30px; display: flex; flex-direction: row; align-items: center; gap: 30px;">
                        <div style="max-width: 26px;">
                            <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                <path d="M499.1 6.3c8.1 6 12.9 15.6 12.9 25.7l0 72 0 264c0 44.2-43 80-96 80s-96-35.8-96-80s43-80 96-80c11.2 0 22 1.6 32 4.6L448 147 192 223.8 192 432c0 44.2-43 80-96 80s-96-35.8-96-80s43-80 96-80c11.2 0 22 1.6 32 4.6L128 200l0-72c0-14.1 9.3-26.6 22.8-30.7l320-96c9.7-2.9 20.2-1.1 28.3 5z"/>
                            </svg>
                        </div>

                        <div style="width: 100%;">
                            @Idiomas.BuscarTexto(idioma, "String78", "Game")
                        </div>
                    </div>
                }
            </div>

            @foreach (DRM drm in JuegoDRM2.GenerarListado())
            {
                if (drm.Id != JuegoDRM.NoEspecificado)
                {
                    if (VerificarMostrarDRM(idioma, drm.Id, juego) == true)
                    {
                        bool usuarioTieneJuego = false;
                        bool usuarioTieneDeseado = false;
                        bool usuarioTieneDeseadoImportado = false;
                        string usuarioTieneDeseadoMensaje = string.Empty;

                        if (usuarioTieneDesea != null)
                        {
                            if (usuarioTieneDesea.Count > 0)
                            {
                                foreach (var tieneDesea in usuarioTieneDesea)
                                {
                                    if (drm.Id == tieneDesea.DRM)
                                    {
                                        usuarioTieneJuego = tieneDesea.Tiene;
                                        usuarioTieneDeseado = tieneDesea.Desea;
                                        usuarioTieneDeseadoImportado = tieneDesea.ImportadoDesea;

                                        if (tieneDesea.Desea == true && tieneDesea.ImportadoDesea == true && juego.Tipo == Juegos.JuegoTipo.Game && (drm.Id == JuegoDRM.Steam || drm.Id == JuegoDRM.GOG))
                                        {
                                            usuarioTieneDeseadoMensaje = string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String7", "Game"), JuegoDRM2.DevolverDRM(drm.Id));
                                        }

                                        if (tieneDesea.Desea == true && tieneDesea.ImportadoDesea == true && juego.Tipo == Juegos.JuegoTipo.DLC && (drm.Id == JuegoDRM.Steam || drm.Id == JuegoDRM.GOG))
                                        {
                                            usuarioTieneDeseadoMensaje = string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String8", "Game"), JuegoDRM2.DevolverDRM(drm.Id));
                                        }
                                    }
                                }
                            }                            
                        }

                        List<JuegoPrecio> preciosActualesDRM = OrdenarPrecios(juego.PrecioActualesTiendas, drm.Id);
                        string mensajeMinimoDRM = CogerMinimoDRM(idioma, drm.Id, juego.PrecioMinimosHistoricos, juego.PrecioActualesTiendas, juego.Historicos);

                        <div id="@drm.Id">
                            @if (string.IsNullOrEmpty(mensajeMinimoDRM) == false)
                            {
                                if (usuarioLogeado == true)
                                {
                                    if (usuarioTieneJuego == false && usuarioTieneDeseadoImportado == false)
                                    {
                                        if (usuarioTieneDeseado == true)
                                        {
                                            <button @onclick="(e => CambiarEstadoDeseado(e, false, drm.Id))" class="boton-pequeño" style="width: auto; padding: 20px 40px; background-color: var(--fondoAlerta); border: 1px solid var(--fondoBotonPequeño);">
                                                <div class="perfil-flexible-centrado" style="gap: 25px;">
                                                    <div style="max-width: 26px;">
                                                        <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                                            <path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z"/>
                                                        </svg>
                                                    </div>

                                                    <div style="text-align: left; width: 100%;">@Herramientas.Idiomas.BuscarTexto(idioma, "String3", "Game")</div>
                                                </div>
                                            </button>
                                        }
                                        else
                                        {
                                            <button @onclick="(e => CambiarEstadoDeseado(e, true, drm.Id))" class="boton-pequeño" style="width: auto; padding: 20px 40px;">
                                                @Herramientas.Idiomas.BuscarTexto(idioma, "String4", "Game")
                                            </button>
                                        }
                                    }
                                }
                                else
                                {
                                    <button @onclick="(e => LogearEnseñar(e))" class="boton-pequeño" style="width: auto; padding: 20px 40px;">
                                        @Herramientas.Idiomas.BuscarTexto(idioma, "String4", "Game")
                                    </button>
                                }
                            }

                            <div class="juego-drm-centrado">
                                <div style="width: 100%; display: flex; flex-direction: column; gap: 10px; padding: 10px; background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño);">                               
                                    @if (usuarioLogeado == true)
                                    {
                                        if (usuarioTieneJuego == true)
                                        {
                                            string mensaje = string.Empty;

                                            if (drm.Id == JuegoDRM.Steam || drm.Id == JuegoDRM.GOG || drm.Id == JuegoDRM.Amazon || drm.Id == JuegoDRM.Epic || drm.Id == JuegoDRM.Ubisoft || drm.Id == JuegoDRM.EA)
                                            {
                                                if (juego.Tipo == Juegos.JuegoTipo.Game)
                                                {
                                                    mensaje = string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String5", "Game"), JuegoDRM2.DevolverDRM(drm.Id));
                                                }
                                                else if (juego.Tipo == Juegos.JuegoTipo.DLC)
                                                {
                                                    mensaje = string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String6", "Game"), JuegoDRM2.DevolverDRM(drm.Id));
                                                }
                                            }

                                            <div>
                                                <div style="background-color: var(--fondoBien); border: 1px solid var(--fondoBotonPequeño); padding: 15px 20px;">
                                                    <div class="perfil-flexible-centrado" style="gap: 30px;">
                                                        <div style="display: flex; align-items: center; justify-content: center; width: 50px; height: 26px;">
                                                            <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                                                <path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z" />
                                                            </svg>
                                                        </div>

                                                        <label style="text-align: left; width: 100%;">@mensaje</label>

                                                        @if (Herramientas.RobotsUserAgents.EsBotVerificado(userAgent) == false)
                                                        {
                                                            string enlaceJugar = string.Empty;

                                                            if (drm.Id == JuegoDRM.Steam && juego.IdSteam > 0)
                                                            {
                                                                enlaceJugar = "steam://rungameid/" + juego.IdSteam.ToString();
                                                            }
                                                            else if (drm.Id == JuegoDRM.Amazon && string.IsNullOrEmpty(juego.IdAmazon) == false)
                                                            {
                                                                enlaceJugar = "amazon-games://play/" + juego.IdAmazon;
                                                            }
                                                            else if (drm.Id == JuegoDRM.Ubisoft && string.IsNullOrEmpty(juego.ExeUbisoft) == false)
                                                            {
                                                                enlaceJugar = "uplay://launch/" + juego.ExeUbisoft + "/0";
                                                            }
                                                            else if (drm.Id == JuegoDRM.EA && string.IsNullOrEmpty(juego.ExeEA) == false)
                                                            {
                                                                enlaceJugar = "origin://LaunchGame/" + juego.ExeEA;
                                                            }
                                                            else if (drm.Id == JuegoDRM.Epic && string.IsNullOrEmpty(juego.ExeEpic) == false)
                                                            {
                                                                enlaceJugar = "com.epicgames.launcher://apps/" + juego.ExeEpic + "?action=launch&silent=true";
                                                            }

                                                            if (string.IsNullOrEmpty(enlaceJugar) == false)
                                                            {
                                                                <a class="juego-boton-pequeño" href="@enlaceJugar" style="width: auto; min-width: 200px; text-align: center; backdrop-filter: brightness(60%); background-color: transparent;">
                                                                    @Herramientas.Idiomas.BuscarTexto(idioma, "String81", "Game")
                                                                </a>
                                                            }
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            if (string.IsNullOrEmpty(usuarioTieneDeseadoMensaje) == false)
                                            {
                                                <div style="background-color: var(--fondoAlerta); border: 1px solid var(--fondoBotonPequeño); padding: 20px 25px;">
                                                    <div class="perfil-flexible-centrado" style="gap: 25px;">
                                                        <div style="display: flex; align-items: center; justify-content: center; width: 40px; height: 26px;">
                                                            <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 128 512">
                                                                <path d="M96 64c0-17.7-14.3-32-32-32S32 46.3 32 64l0 256c0 17.7 14.3 32 32 32s32-14.3 32-32L96 64zM64 480a40 40 0 1 0 0-80 40 40 0 1 0 0 80z" />
                                                            </svg>
                                                        </div>                                                    

                                                        <label style="text-align: left; width: 100%;">@usuarioTieneDeseadoMensaje</label>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    }

                                    @if (string.IsNullOrEmpty(mensajeMinimoDRM) == false || BundlesComprobar(juego.Bundles, drm.Id) != null || GratisComprobar(juego.Gratis, drm.Id) != null || SuscripcionesComprobar(juego.Suscripciones, drm.Id) != null)
                                    {
                                        <div style="text-align: left; background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); padding: 20px; display: flex; align-items: center; gap: 30px;">
                                            @if (drm.Id == JuegoDRM.DRMFree)
                                            {
                                                <div style="max-width: 45px; text-align: center;">DRM Free</div>
                                            }
                                            else
                                            {
                                                <div style="min-width: 40px; max-width: 40px;">
                                                    <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(JuegoDRM2.SacarImagen(drm.Id), 40, 40)" alt="@drm.Nombre" style="width: 100%; height: 100%;" loading="lazy" />
                                                </div>
                                            }

                                            <div style="display: flex; flex-direction: column; gap: 15px; width: 100%;">
                                                @if (string.IsNullOrEmpty(mensajeMinimoDRM) == false)
                                                {
                                                    <div>
                                                        <div>@Idiomas.BuscarTexto(idioma, "String10", "Game") @JuegoDRM2.DevolverDRM(drm.Id):</div>

                                                        <div style="margin-top: 5px;">
                                                            <label>@PrepararPrecio(juego.PrecioMinimosHistoricos, drm.Id, true)</label>
                                                            <label style="font-size: 14px;">@mensajeMinimoDRM</label>
                                                        </div>
                                                    </div>
                                                }

                                                @if (BundlesComprobar(juego.Bundles, drm.Id) != null || GratisComprobar(juego.Gratis, drm.Id) != null || SuscripcionesComprobar(juego.Suscripciones, drm.Id) != null)
                                                {
                                                    <div style="display: flex; flex-direction: column; gap: 10px;">
                                                        @if (BundlesComprobar(juego.Bundles, drm.Id) != null)
                                                        {
                                                            <button onclick="moverScroll('bundles')" class="boton" style="padding: 0px; background-color: transparent; color: var(--colorEnlace); font-size: 16px; width: fit-content;">@BundlesPreparar(drm.Id, idioma)</button>
                                                        }

                                                        @if (GratisComprobar(juego.Gratis, drm.Id) != null)
                                                        {
                                                            <button onclick="moverScroll('gratis')" class="boton" style="padding: 0px; background-color: transparent; color: var(--colorEnlace); font-size: 16px; width: fit-content;">@GratisPreparar(drm.Id, idioma)</button>
                                                        }

                                                        @if (SuscripcionesComprobar(juego.Suscripciones, drm.Id) != null)
                                                        {
                                                            <button onclick="moverScroll('suscripciones')" class="boton" style="padding: 0px; background-color: transparent; color: var(--colorEnlace); font-size: 16px; width: fit-content;">@SuscripcionesPreparar(drm.Id, idioma)</button>
                                                        }
                                                    </div>
                                                }

                                                @{
                                                    bool añadirDiv = false;
                                                    bool amazonLuna = false;

                                                    if (drm.Id == JuegoDRM.Steam)
                                                    {
                                                        añadirDiv = true;
                                                    }

                                                    if (drm.Id == JuegoDRM.GOG && juego.GalaxyGOG != null)
                                                    {
                                                        if (juego.GalaxyGOG.Windows == true || juego.GalaxyGOG.Mac == true || juego.GalaxyGOG.Linux == true)
                                                        {
                                                            añadirDiv = true;
                                                        }
                                                    }

                                                    if (drm.Id == JuegoDRM.Epic && juego.EpicGames != null)
                                                    {
                                                        if (juego.EpicGames.Windows == true || juego.EpicGames.Mac == true)
                                                        {
                                                            añadirDiv = true;
                                                        }
                                                    }

                                                    if (drm.Id == JuegoDRM.Microsoft && juego.Xbox != null)
                                                    {
                                                        if (juego.Xbox.Windows == true)
                                                        {
                                                            añadirDiv = true;
                                                        }
                                                    }

                                                    if (drm.Id == JuegoDRM.GOG && juego.Tipo == JuegoTipo.Game)
                                                    {
                                                        amazonLuna = global::BaseDatos.Streaming.Buscar.AmazonLuna(juego.Id);

                                                        if (amazonLuna == true)
                                                        {
                                                            añadirDiv = true;
                                                        }
                                                    }

                                                    if (drmsGeforceNOW.Count > 0)
                                                    {
                                                        foreach (var drmG in drmsGeforceNOW)
                                                        {
                                                            if (drmG == drm.Id)
                                                            {
                                                                añadirDiv = true;
                                                            }
                                                        }
                                                    }

                                                    if (añadirDiv == true)
                                                    {
                                                        <div style="display: flex; align-items: center; flex-direction: row; gap: 20px; padding-left: 2px;">
                                                            @if (drm.Id == JuegoDRM.Steam)
                                                            {
                                                                if (juego.Caracteristicas != null)
                                                                {
                                                                    <div style="display: flex; align-items: center; gap: 8px; height: 18px;">
                                                                        @if (juego.Caracteristicas.Windows == true)
                                                                        {
                                                                            <div title="@Idiomas.BuscarTexto(idioma, "String72", "Game")" style="width: 100%; height: 100%;">
                                                                                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 15 15"><path d="M0 1h7v7H0zM0 9h7v7H0zM8 9h7v7H8zM8 1h7v7H8z" fill="var(--colorTexto)"></path></svg>
                                                                            </div>
                                                                        }

                                                                        @if (juego.Caracteristicas.Mac == true)
                                                                        {
                                                                            <div title="@Idiomas.BuscarTexto(idioma, "String73", "Game")" style="width: 100%; height: 100%;">
                                                                                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 410 410"><path d="M361.05 137.57c-61 66-57 118 13 165-11 33-29 63-54 89-17 18-38 25-60 14-32-15-62-14-93 1-18 9-35 5-51-8-49-40-95-150-72-219 18-55 75-99 137-69 21 10 40 6 61-2 51-19 87-10 119 29zm-153-45c0-50 26-80 78-92 5 51-28 91-78 92z" fill="var(--colorTexto)"></path></svg>
                                                                            </div>
                                                                        }

                                                                        @if (juego.Caracteristicas.Linux == true)
                                                                        {
                                                                            <div title="@Idiomas.BuscarTexto(idioma, "String74", "Game")" style="width: 100%; height: 100%;">
                                                                                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 16 16"><path d="M6.813.034C-.65.635 1.329 8.518 1.218 11.158 1.119 12.555.655 14.262 0 16h2.018c.207-.737.36-1.465.425-2.159.122.085.252.167.39.245.227.133.42.31.626.498.48.438 1.025.933 2.09.996.071.004.143.006.213.006 1.077 0 1.813-.471 2.404-.85.284-.181.529-.338.76-.413.654-.205 1.226-.536 1.654-.957.067-.066.128-.134.187-.202.238.873.565 1.855.926 2.835H16c-1.034-1.597-2.1-3.162-2.079-5.159.044-3.948.45-11.409-7.109-10.806zm3.17 10.145a12.94 12.94 0 0 0-.852-.328 2.08 2.08 0 0 0 .213-.894c.018-.819-.395-1.483-.922-1.485-.526 0-.967.662-.985 1.48v.08a4.609 4.609 0 0 0-.956-.324l-.004-.093c-.03-1.491.884-2.725 2.043-2.756C9.68 5.827 10.642 7.01 10.672 8.5a3.192 3.192 0 0 1-.474 1.777 3.108 3.108 0 0 0-.215-.099zm-1.276.488c.253.087.539.185.921.35l.007.002c.357.147.78.415.76.859-.03.68-.92 1.32-1.743 1.578l-.005.002c-.342.11-.647.306-.97.513-.543.347-1.104.706-1.915.706-.054 0-.107 0-.16-.004-.744-.043-1.09-.36-1.53-.76-.232-.212-.472-.43-.781-.612l-.007-.004c-.667-.377-1.081-.845-1.108-1.253-.013-.203.077-.379.269-.522.416-.312.695-.516.88-.651.204-.15.266-.195.312-.238l.106-.103c.382-.372 1.021-.993 2.002-.993.6 0 1.264.23 1.972.686.333.217.623.317.99.444zM5.6 12.046c-.954-.07-1.721-.33-2.058-.559a.455.455 0 0 0-.51.753c.542.367 1.501.64 2.503.712.17.013.356.02.557.02.871 0 1.978-.083 3.162-.634a.455.455 0 0 0-.383-.824c-1.28.596-2.471.59-3.27.532zM4.25 8.97c-.072-.732-.462-1.285-.873-1.234-.41.05-.686.684-.614 1.415.03.32.123.604.25.82-.031.025-.12.09-.224.166l-.286.21c-.312-.408-.524-.993-.562-1.654-.074-1.29.542-2.373 1.377-2.422.834-.048 1.57.957 1.645 2.245.004.07.006.139.006.207A3.25 3.25 0 0 0 4.25 9a.614.614 0 0 0-.001-.029z" fill="var(--colorTexto)"></path></svg>
                                                                            </div>
                                                                        }
                                                                    </div>

                                                                    if (juego.Tipo == JuegoTipo.Game)
                                                                    {
                                                                        if (juego.Categorias != null)
                                                                        {
                                                                            if (juego.Categorias.Count > 0)
                                                                            {
                                                                                bool añadirDiv2 = false;

                                                                                foreach (var categoria in juego.Categorias)
                                                                                {
                                                                                    if (categoria == "22" || categoria == "23")
                                                                                    {
                                                                                        añadirDiv2 = true;
                                                                                    }
                                                                                }

                                                                                if (añadirDiv2 == true)
                                                                                {
                                                                                    <div style="display: flex; align-items: center; gap: 8px; height: 18px;">
                                                                                        @foreach (var categoria in juego.Categorias)
                                                                                        {
                                                                                            if (categoria == "22")
                                                                                            {
                                                                                                <div title="@string.Format(Idiomas.BuscarTexto(idioma, "String75", "Game"), "Steam")" style="width: 100%; height: 100%;">
                                                                                                    <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 512 512" fill="var(--colorTexto)"><path d="M211 7.3C205 1 196-1.4 187.6 .8s-14.9 8.9-17.1 17.3L154.7 80.6l-62-17.5c-8.4-2.4-17.4 0-23.5 6.1s-8.5 15.1-6.1 23.5l17.5 62L18.1 170.6c-8.4 2.1-15 8.7-17.3 17.1S1 205 7.3 211l46.2 45L7.3 301C1 307-1.4 316 .8 324.4s8.9 14.9 17.3 17.1l62.5 15.8-17.5 62c-2.4 8.4 0 17.4 6.1 23.5s15.1 8.5 23.5 6.1l62-17.5 15.8 62.5c2.1 8.4 8.7 15 17.1 17.3s17.3-.2 23.4-6.4l45-46.2 45 46.2c6.1 6.2 15 8.7 23.4 6.4s14.9-8.9 17.1-17.3l15.8-62.5 62 17.5c8.4 2.4 17.4 0 23.5-6.1s8.5-15.1 6.1-23.5l-17.5-62 62.5-15.8c8.4-2.1 15-8.7 17.3-17.1s-.2-17.4-6.4-23.4l-46.2-45 46.2-45c6.2-6.1 8.7-15 6.4-23.4s-8.9-14.9-17.3-17.1l-62.5-15.8 17.5-62c2.4-8.4 0-17.4-6.1-23.5s-15.1-8.5-23.5-6.1l-62 17.5L341.4 18.1c-2.1-8.4-8.7-15-17.1-17.3S307 1 301 7.3L256 53.5 211 7.3z"></path></svg>
                                                                                                </div>
                                                                                            }

                                                                                            if (categoria == "23")
                                                                                            {
                                                                                                <div title="@string.Format(Idiomas.BuscarTexto(idioma, "String76", "Game"), "Steam")" style="width: 100%; height: 100%;">
                                                                                                    <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 640 512" fill="var(--colorTexto)"><path d="M0 336c0 79.5 64.5 144 144 144l368 0c70.7 0 128-57.3 128-128c0-61.9-44-113.6-102.4-125.4c4.1-10.7 6.4-22.4 6.4-34.6c0-53-43-96-96-96c-19.7 0-38.1 6-53.3 16.2C367 64.2 315.3 32 256 32C167.6 32 96 103.6 96 192c0 2.7 .1 5.4 .2 8.1C40.2 219.8 0 273.2 0 336z" /></svg>
                                                                                                </div>
                                                                                            }
                                                                                        }
                                                                                    </div>
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }	
                                                            }

                                                            @if (drm.Id == JuegoDRM.GOG)
                                                            {
                                                                if (juego.GalaxyGOG != null)
                                                                {
                                                                    <div style="display: flex; align-items: center; gap: 8px; height: 18px;">
                                                                        @if (juego.GalaxyGOG.Windows == true)
                                                                        {
                                                                            <div title="@Idiomas.BuscarTexto(idioma, "String72", "Game")" style="width: 100%; height: 100%;">
                                                                                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 15 15"><path d="M0 1h7v7H0zM0 9h7v7H0zM8 9h7v7H8zM8 1h7v7H8z" fill="var(--colorTexto)"></path></svg>
                                                                            </div>
                                                                        }

                                                                        @if (juego.GalaxyGOG.Mac == true)
                                                                        {
                                                                            <div title="@Idiomas.BuscarTexto(idioma, "String73", "Game")" style="width: 100%; height: 100%;">
                                                                                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 410 410"><path d="M361.05 137.57c-61 66-57 118 13 165-11 33-29 63-54 89-17 18-38 25-60 14-32-15-62-14-93 1-18 9-35 5-51-8-49-40-95-150-72-219 18-55 75-99 137-69 21 10 40 6 61-2 51-19 87-10 119 29zm-153-45c0-50 26-80 78-92 5 51-28 91-78 92z" fill="var(--colorTexto)"></path></svg>
                                                                            </div>
                                                                        }

                                                                        @if (juego.GalaxyGOG.Linux == true)
                                                                        {
                                                                            <div title="@Idiomas.BuscarTexto(idioma, "String74", "Game")" style="width: 100%; height: 100%;">
                                                                                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 16 16"><path d="M6.813.034C-.65.635 1.329 8.518 1.218 11.158 1.119 12.555.655 14.262 0 16h2.018c.207-.737.36-1.465.425-2.159.122.085.252.167.39.245.227.133.42.31.626.498.48.438 1.025.933 2.09.996.071.004.143.006.213.006 1.077 0 1.813-.471 2.404-.85.284-.181.529-.338.76-.413.654-.205 1.226-.536 1.654-.957.067-.066.128-.134.187-.202.238.873.565 1.855.926 2.835H16c-1.034-1.597-2.1-3.162-2.079-5.159.044-3.948.45-11.409-7.109-10.806zm3.17 10.145a12.94 12.94 0 0 0-.852-.328 2.08 2.08 0 0 0 .213-.894c.018-.819-.395-1.483-.922-1.485-.526 0-.967.662-.985 1.48v.08a4.609 4.609 0 0 0-.956-.324l-.004-.093c-.03-1.491.884-2.725 2.043-2.756C9.68 5.827 10.642 7.01 10.672 8.5a3.192 3.192 0 0 1-.474 1.777 3.108 3.108 0 0 0-.215-.099zm-1.276.488c.253.087.539.185.921.35l.007.002c.357.147.78.415.76.859-.03.68-.92 1.32-1.743 1.578l-.005.002c-.342.11-.647.306-.97.513-.543.347-1.104.706-1.915.706-.054 0-.107 0-.16-.004-.744-.043-1.09-.36-1.53-.76-.232-.212-.472-.43-.781-.612l-.007-.004c-.667-.377-1.081-.845-1.108-1.253-.013-.203.077-.379.269-.522.416-.312.695-.516.88-.651.204-.15.266-.195.312-.238l.106-.103c.382-.372 1.021-.993 2.002-.993.6 0 1.264.23 1.972.686.333.217.623.317.99.444zM5.6 12.046c-.954-.07-1.721-.33-2.058-.559a.455.455 0 0 0-.51.753c.542.367 1.501.64 2.503.712.17.013.356.02.557.02.871 0 1.978-.083 3.162-.634a.455.455 0 0 0-.383-.824c-1.28.596-2.471.59-3.27.532zM4.25 8.97c-.072-.732-.462-1.285-.873-1.234-.41.05-.686.684-.614 1.415.03.32.123.604.25.82-.031.025-.12.09-.224.166l-.286.21c-.312-.408-.524-.993-.562-1.654-.074-1.29.542-2.373 1.377-2.422.834-.048 1.57.957 1.645 2.245.004.07.006.139.006.207A3.25 3.25 0 0 0 4.25 9a.614.614 0 0 0-.001-.029z" fill="var(--colorTexto)"></path></svg>
                                                                            </div>
                                                                        }
                                                                    </div>

                                                                    if (juego.Tipo == JuegoTipo.Game)
                                                                    {
                                                                        if (juego.GalaxyGOG.Logros == true || juego.GalaxyGOG.GuardadoNube == true)
                                                                        {
                                                                            <div style="display: flex; align-items: center; gap: 8px; height: 18px;">
                                                                                <img src="/imagenes/otros/goggalaxy.ico" title="GOG Galaxy" style="width: 100%; height: 100%;" loading="lazy" />

                                                                                @if (juego.GalaxyGOG.Logros == true)
                                                                                {
                                                                                    <div title="@string.Format(Idiomas.BuscarTexto(idioma, "String75", "Game"), "GOG Galaxy")" style="width: 100%; height: 100%;">
                                                                                        <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 512 512" fill="var(--colorTexto)"><path d="M211 7.3C205 1 196-1.4 187.6 .8s-14.9 8.9-17.1 17.3L154.7 80.6l-62-17.5c-8.4-2.4-17.4 0-23.5 6.1s-8.5 15.1-6.1 23.5l17.5 62L18.1 170.6c-8.4 2.1-15 8.7-17.3 17.1S1 205 7.3 211l46.2 45L7.3 301C1 307-1.4 316 .8 324.4s8.9 14.9 17.3 17.1l62.5 15.8-17.5 62c-2.4 8.4 0 17.4 6.1 23.5s15.1 8.5 23.5 6.1l62-17.5 15.8 62.5c2.1 8.4 8.7 15 17.1 17.3s17.3-.2 23.4-6.4l45-46.2 45 46.2c6.1 6.2 15 8.7 23.4 6.4s14.9-8.9 17.1-17.3l15.8-62.5 62 17.5c8.4 2.4 17.4 0 23.5-6.1s8.5-15.1 6.1-23.5l-17.5-62 62.5-15.8c8.4-2.1 15-8.7 17.3-17.1s-.2-17.4-6.4-23.4l-46.2-45 46.2-45c6.2-6.1 8.7-15 6.4-23.4s-8.9-14.9-17.3-17.1l-62.5-15.8 17.5-62c2.4-8.4 0-17.4-6.1-23.5s-15.1-8.5-23.5-6.1l-62 17.5L341.4 18.1c-2.1-8.4-8.7-15-17.1-17.3S307 1 301 7.3L256 53.5 211 7.3z"></path></svg>
                                                                                    </div>
                                                                                }

                                                                                @if (juego.GalaxyGOG.GuardadoNube == true)
                                                                                {
                                                                                    <div title="@string.Format(Idiomas.BuscarTexto(idioma, "String76", "Game"), "GOG Galaxy")" style="width: 100%; height: 100%;">
                                                                                        <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 640 512" fill="var(--colorTexto)"><path d="M0 336c0 79.5 64.5 144 144 144l368 0c70.7 0 128-57.3 128-128c0-61.9-44-113.6-102.4-125.4c4.1-10.7 6.4-22.4 6.4-34.6c0-53-43-96-96-96c-19.7 0-38.1 6-53.3 16.2C367 64.2 315.3 32 256 32C167.6 32 96 103.6 96 192c0 2.7 .1 5.4 .2 8.1C40.2 219.8 0 273.2 0 336z" /></svg>
                                                                                    </div>
                                                                                }
                                                                            </div>
                                                                        }

                                                                        if (juego.GalaxyGOG.Preservacion == true)
                                                                        {
                                                                            <div style="display: flex; align-items: center; justify-content: center; gap: 10px;" title="@Herramientas.Idiomas.BuscarTexto(idioma, "String77", "Game")">
                                                                                <img src="/imagenes/otros/gogpreserved.webp" style="max-width: 22px; max-height: 22px;" loading="lazy" />
                                                                            </div>
                                                                        }
                                                                    }
                                                                }															
                                                            }

                                                            @if (drm.Id == JuegoDRM.Epic)
                                                            {
                                                                if (juego.EpicGames != null)
                                                                {
                                                                    <div style="display: flex; align-items: center; gap: 8px; height: 18px;">
                                                                        @if (juego.EpicGames.Windows == true)
                                                                        {
                                                                            <div title="@Idiomas.BuscarTexto(idioma, "String72", "Game")" style="width: 100%; height: 100%;">
                                                                                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 15 15"><path d="M0 1h7v7H0zM0 9h7v7H0zM8 9h7v7H8zM8 1h7v7H8z" fill="var(--colorTexto)"></path></svg>
                                                                            </div>
                                                                        }

                                                                        @if (juego.EpicGames.Mac == true)
                                                                        {
                                                                            <div title="@Idiomas.BuscarTexto(idioma, "String73", "Game")" style="width: 100%; height: 100%;">
                                                                                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 410 410"><path d="M361.05 137.57c-61 66-57 118 13 165-11 33-29 63-54 89-17 18-38 25-60 14-32-15-62-14-93 1-18 9-35 5-51-8-49-40-95-150-72-219 18-55 75-99 137-69 21 10 40 6 61-2 51-19 87-10 119 29zm-153-45c0-50 26-80 78-92 5 51-28 91-78 92z" fill="var(--colorTexto)"></path></svg>
                                                                            </div>
                                                                        }
                                                                    </div>

                                                                    if (juego.Tipo == JuegoTipo.Game)
                                                                    {
                                                                        if (juego.EpicGames.Logros == true || juego.EpicGames.GuardadoNube == true)
                                                                        {
                                                                            <div style="display: flex; align-items: center; gap: 8px; height: 18px;">
                                                                                @if (juego.EpicGames.Logros == true)
                                                                                {
                                                                                    <div title="@string.Format(Idiomas.BuscarTexto(idioma, "String75", "Game"), "Epic Games")" style="width: 100%; height: 100%;">
                                                                                        <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 512 512" fill="var(--colorTexto)"><path d="M211 7.3C205 1 196-1.4 187.6 .8s-14.9 8.9-17.1 17.3L154.7 80.6l-62-17.5c-8.4-2.4-17.4 0-23.5 6.1s-8.5 15.1-6.1 23.5l17.5 62L18.1 170.6c-8.4 2.1-15 8.7-17.3 17.1S1 205 7.3 211l46.2 45L7.3 301C1 307-1.4 316 .8 324.4s8.9 14.9 17.3 17.1l62.5 15.8-17.5 62c-2.4 8.4 0 17.4 6.1 23.5s15.1 8.5 23.5 6.1l62-17.5 15.8 62.5c2.1 8.4 8.7 15 17.1 17.3s17.3-.2 23.4-6.4l45-46.2 45 46.2c6.1 6.2 15 8.7 23.4 6.4s14.9-8.9 17.1-17.3l15.8-62.5 62 17.5c8.4 2.4 17.4 0 23.5-6.1s8.5-15.1 6.1-23.5l-17.5-62 62.5-15.8c8.4-2.1 15-8.7 17.3-17.1s-.2-17.4-6.4-23.4l-46.2-45 46.2-45c6.2-6.1 8.7-15 6.4-23.4s-8.9-14.9-17.3-17.1l-62.5-15.8 17.5-62c2.4-8.4 0-17.4-6.1-23.5s-15.1-8.5-23.5-6.1l-62 17.5L341.4 18.1c-2.1-8.4-8.7-15-17.1-17.3S307 1 301 7.3L256 53.5 211 7.3z"></path></svg>
                                                                                    </div>
                                                                                }

                                                                                @if (juego.EpicGames.GuardadoNube == true)
                                                                                {
                                                                                    <div title="@string.Format(Idiomas.BuscarTexto(idioma, "String76", "Game"), "Epic Games")" style="width: 100%; height: 100%;">
                                                                                        <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 640 512" fill="var(--colorTexto)"><path d="M0 336c0 79.5 64.5 144 144 144l368 0c70.7 0 128-57.3 128-128c0-61.9-44-113.6-102.4-125.4c4.1-10.7 6.4-22.4 6.4-34.6c0-53-43-96-96-96c-19.7 0-38.1 6-53.3 16.2C367 64.2 315.3 32 256 32C167.6 32 96 103.6 96 192c0 2.7 .1 5.4 .2 8.1C40.2 219.8 0 273.2 0 336z" /></svg>
                                                                                    </div>
                                                                                }
                                                                            </div>
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                            @if (drm.Id == JuegoDRM.Microsoft)
                                                            {
                                                                if (juego.Xbox != null)
                                                                {
                                                                    if (juego.Xbox.Windows == true)
                                                                    {
                                                                        <div style="display: flex; align-items: center; gap: 8px; height: 18px;">
                                                                            <div title="@Idiomas.BuscarTexto(idioma, "String72", "Game")" style="width: 100%; height: 100%;">
                                                                                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 15 15"><path d="M0 1h7v7H0zM0 9h7v7H0zM8 9h7v7H8zM8 1h7v7H8z" fill="var(--colorTexto)"></path></svg>
                                                                            </div>
                                                                        </div>
                                                                    }

                                                                    if (juego.Tipo == JuegoTipo.Game)
                                                                    {
                                                                        if (juego.Xbox.Logros == true || juego.Xbox.GuardadoNube == true)
                                                                        {
                                                                            <div style="display: flex; align-items: center; gap: 8px; height: 18px;">
                                                                                @if (juego.Xbox.Logros == true)
                                                                                {
                                                                                    <div title="@string.Format(Idiomas.BuscarTexto(idioma, "String75", "Game"), "Xbox")" style="width: 100%; height: 100%;">
                                                                                        <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 512 512" fill="var(--colorTexto)"><path d="M211 7.3C205 1 196-1.4 187.6 .8s-14.9 8.9-17.1 17.3L154.7 80.6l-62-17.5c-8.4-2.4-17.4 0-23.5 6.1s-8.5 15.1-6.1 23.5l17.5 62L18.1 170.6c-8.4 2.1-15 8.7-17.3 17.1S1 205 7.3 211l46.2 45L7.3 301C1 307-1.4 316 .8 324.4s8.9 14.9 17.3 17.1l62.5 15.8-17.5 62c-2.4 8.4 0 17.4 6.1 23.5s15.1 8.5 23.5 6.1l62-17.5 15.8 62.5c2.1 8.4 8.7 15 17.1 17.3s17.3-.2 23.4-6.4l45-46.2 45 46.2c6.1 6.2 15 8.7 23.4 6.4s14.9-8.9 17.1-17.3l15.8-62.5 62 17.5c8.4 2.4 17.4 0 23.5-6.1s8.5-15.1 6.1-23.5l-17.5-62 62.5-15.8c8.4-2.1 15-8.7 17.3-17.1s-.2-17.4-6.4-23.4l-46.2-45 46.2-45c6.2-6.1 8.7-15 6.4-23.4s-8.9-14.9-17.3-17.1l-62.5-15.8 17.5-62c2.4-8.4 0-17.4-6.1-23.5s-15.1-8.5-23.5-6.1l-62 17.5L341.4 18.1c-2.1-8.4-8.7-15-17.1-17.3S307 1 301 7.3L256 53.5 211 7.3z"></path></svg>
                                                                                    </div>
                                                                                }

                                                                                @if (juego.Xbox.GuardadoNube == true)
                                                                                {
                                                                                    <div title="@string.Format(Idiomas.BuscarTexto(idioma, "String76", "Game"), "Xbox")" style="width: 100%; height: 100%;">
                                                                                        <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 640 512" fill="var(--colorTexto)"><path d="M0 336c0 79.5 64.5 144 144 144l368 0c70.7 0 128-57.3 128-128c0-61.9-44-113.6-102.4-125.4c4.1-10.7 6.4-22.4 6.4-34.6c0-53-43-96-96-96c-19.7 0-38.1 6-53.3 16.2C367 64.2 315.3 32 256 32C167.6 32 96 103.6 96 192c0 2.7 .1 5.4 .2 8.1C40.2 219.8 0 273.2 0 336z" /></svg>
                                                                                    </div>
                                                                                }
                                                                            </div>
                                                                        }

                                                                        <div style="display: flex; align-items: center; gap: 10px;">
                                                                            <div style="font-size: 14px;">
                                                                                Cloud Gaming
                                                                            </div>

                                                                            @if (juego.Xbox.Streaming == true)
                                                                            {
                                                                                <div style="max-width: 16px;">
                                                                                    <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                                                                        <path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z"/>
                                                                                    </svg>
                                                                                </div>
                                                                            }
                                                                            else
                                                                            {
                                                                                <div style="max-width: 16px;">
                                                                                    <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512">
                                                                                        <path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"/>
                                                                                    </svg>
                                                                                </div>
                                                                            }
                                                                        </div>
                                                                    }
                                                                }
                                                            }

                                                            @if (drm.Id == JuegoDRM.Steam && juego.Deck != JuegoDeck.Desconocido)
                                                            {
                                                                <button @onclick="(e => DeckEnseñar(e))" class="boton-expandir" title="Steam Deck" style="color: var(--colorTexto); text-decoration: none; border: 0px;">
                                                                    <div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px; width: 75px; height: 32px;">
                                                                        <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.84" fill-rule="evenodd" clip-rule="evenodd" d="M7.77715 4.30197C10.9241 4.30197 13.4752 6.85305 13.4752 9.99997C13.4752 13.1469 10.9241 15.698 7.77715 15.698V18.8889C12.6864 18.8889 16.666 14.9092 16.666 9.99997C16.666 5.09078 12.6864 1.11108 7.77715 1.11108V4.30197ZM7.77756 13.8889C9.92533 13.8889 11.6664 12.1477 11.6664 9.99997C11.6664 7.8522 9.92533 6.11108 7.77756 6.11108C5.62979 6.11108 3.88867 7.8522 3.88867 9.99997C3.88867 12.1477 5.62979 13.8889 7.77756 13.8889Z" fill="var(--colorTexto)"></path></svg>

                                                                        @if (juego.Deck == JuegoDeck.Verificado)
                                                                        {
                                                                            <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.33342 11.9222L14.4945 5.76667L16.4556 7.72779L8.33342 15.8556L3.26675 10.7833L5.22786 8.82223L8.33342 11.9222Z" fill="var(--deckVerificado)"></path></svg>
                                                                        }

                                                                        @if (juego.Deck == JuegoDeck.Jugable)
                                                                        {
                                                                            <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.61079 9.44444V15H11.3886V9.44444H8.61079ZM9.07372 8.05245C9.34781 8.23558 9.67004 8.33333 9.99967 8.33333C10.4417 8.33333 10.8656 8.15774 11.1782 7.84518C11.4907 7.53262 11.6663 7.10869 11.6663 6.66667C11.6663 6.33703 11.5686 6.0148 11.3855 5.74072C11.2023 5.46663 10.942 5.25301 10.6375 5.12687C10.3329 5.00072 9.99783 4.96771 9.67452 5.03202C9.35122 5.09633 9.05425 5.25507 8.82116 5.48815C8.58808 5.72124 8.42934 6.01821 8.36503 6.34152C8.30072 6.66482 8.33373 6.99993 8.45988 7.30447C8.58602 7.60902 8.79964 7.86931 9.07372 8.05245Z" fill="var(--deckJugable)"></path></svg>
                                                                        }

                                                                        @if (juego.Deck == JuegoDeck.NoSoportado)
                                                                        {
                                                                            <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M14.193 15.606a7 7 0 0 1-9.799-9.799l9.8 9.8Zm1.414-1.414a7 7 0 0 0-9.799-9.799l9.8 9.8ZM19.001 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" fill="var(--colorTexto)"></path></svg>
                                                                        }
                                                                    </div>
                                                                </button>
                                                            }

                                                            @if (drmsGeforceNOW.Count > 0)
                                                            {
                                                                foreach (var drmG in drmsGeforceNOW)
                                                                {
                                                                    if (drmG == drm.Id)
                                                                    {
                                                                        <div style="display: flex; align-items: center; justify-content: center; gap: 10px;" title="@Herramientas.Idiomas.BuscarTexto(idioma, "String71", "Game")">
                                                                            <img src="@APIs.GeforceNOW.Streaming.Generar().ImagenIcono" style="max-width: 22px; max-height: 22px;" loading="lazy" alt="Geforce NOW" />
                                                                        </div>
                                                                    }
                                                                }
                                                            }

                                                            @if (amazonLuna == true)
                                                            {
                                                                if (drm.Id == JuegoDRM.GOG && juego.Tipo == JuegoTipo.Game)
                                                                {
                                                                    <div style="display: flex; align-items: center; justify-content: center; gap: 10px;" title="@Herramientas.Idiomas.BuscarTexto(idioma, "String87", "Game")">
                                                                        <img src="@APIs.GOG.Streaming.Generar().ImagenIcono" style="max-width: 22px; max-height: 22px;" />
                                                                    </div>
                                                                }
                                                            }

                                                            @if (juego.Idiomas != null)
                                                            {
                                                                if (juego.Idiomas.Count > 0)
                                                                {
                                                                    bool tieneIdiomasSteam = false;
                                                                    bool tieneIdiomasGog = false;
                                                                    bool tieneIdiomasEpic = false;
                                                                    bool tieneIdiomasXbox = false;

                                                                    bool idiomaEncontrado = false;

                                                                    string idiomaUsuario = idioma;

                                                                    if (usuario != null)
                                                                    {
                                                                        if (string.IsNullOrEmpty(usuario.LanguageGames) == false)
                                                                        {
                                                                            idiomaUsuario = usuario.LanguageGames;
                                                                        }
                                                                    }

                                                                    foreach (var idiomaJuego in juego.Idiomas)
                                                                    {
                                                                        if (idiomaJuego.DRM == JuegoDRM.Steam)
                                                                        {
                                                                            tieneIdiomasSteam = true;
                                                                        }

                                                                        if (idiomaJuego.DRM == JuegoDRM.GOG)
                                                                        {
                                                                            tieneIdiomasGog = true;
                                                                        }

                                                                        if (idiomaJuego.DRM == JuegoDRM.Epic)
                                                                        {
                                                                            tieneIdiomasEpic = true;
                                                                        }

                                                                        if (idiomaJuego.DRM == JuegoDRM.Microsoft)
                                                                        {
                                                                            tieneIdiomasXbox = true;
                                                                        }

                                                                        if (idiomaJuego.DRM == drm.Id)
                                                                        {
                                                                            string idiomaEncontradoTexto = Herramientas.Idiomas.EncontrarIdiomaJuego(idiomaUsuario, idiomaJuego.Idioma);

                                                                            if (string.IsNullOrEmpty(idiomaEncontradoTexto) == false)
                                                                            {
                                                                                idiomaEncontrado = true;

                                                                                string imagenBandera = "/imagenes/banderas/" + idiomaEncontradoTexto + ".svg";

                                                                                <button @onclick="(e => IdiomasEnseñar(e, drm.Id))" class="boton-expandir" style="color: var(--colorTexto); text-decoration: none; border: 0px; height: 34px; padding: 0px 22px;">
                                                                                    <div style="display: flex; align-items: center; gap: 10px; flex-direction: row; justify-content: center;">
                                                                                        <img src="@imagenBandera" style="max-width: 20px; max-height: 20px;" alt="Language" loading="lazy" />

                                                                                        <div style="font-size: 14px;">
                                                                                            @Idiomas.BuscarTexto(idioma, "String91", "Game")
                                                                                        </div>

                                                                                        @if (idiomaJuego.Audio == true)
                                                                                        {
                                                                                            <div style="min-width: 14px; max-width: 16px;">
                                                                                                <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                                                                                    <path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z"/>
                                                                                                </svg>
                                                                                            </div>
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            <div style="min-width: 14px; max-width: 16px;">
                                                                                                <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512">
                                                                                                    <path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"/>
                                                                                                </svg>
                                                                                            </div>
                                                                                        }

                                                                                        <div style="font-size: 14px;">
                                                                                            @Idiomas.BuscarTexto(idioma, "String92", "Game")
                                                                                        </div>

                                                                                        @if (idiomaJuego.Texto == true)
                                                                                        {
                                                                                            <div style="min-width: 14px; max-width: 16px;">
                                                                                                <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                                                                                    <path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z"/>
                                                                                                </svg>
                                                                                            </div>
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            <div style="min-width: 14px; max-width: 16px;">
                                                                                                <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512">
                                                                                                    <path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z" />
                                                                                                </svg>
                                                                                            </div>
                                                                                        }
                                                                                    </div>
                                                                                </button>
                                                                            }
                                                                        }
                                                                    }

                                                                    bool ponerNoTieneIdioma = false;

                                                                    if (drm.Id == JuegoDRM.Steam && tieneIdiomasSteam == true && idiomaEncontrado == false)
                                                                    {
                                                                        ponerNoTieneIdioma = true;
                                                                    }

                                                                    if (drm.Id == JuegoDRM.GOG && tieneIdiomasGog == true && idiomaEncontrado == false)
                                                                    {
                                                                        ponerNoTieneIdioma = true;
                                                                    }

                                                                    if (drm.Id == JuegoDRM.Epic && tieneIdiomasEpic == true && idiomaEncontrado == false)
                                                                    {
                                                                        ponerNoTieneIdioma = true;
                                                                    }

                                                                    if (drm.Id == JuegoDRM.Microsoft && tieneIdiomasXbox == true && idiomaEncontrado == false)
                                                                    {
                                                                        ponerNoTieneIdioma = true;
                                                                    }

                                                                    if (ponerNoTieneIdioma == true)
                                                                    {
                                                                        string imagenBandera = "/imagenes/banderas/" + Herramientas.Idiomas.EncontrarIdiomaImagen(idiomaUsuario) + ".svg";

                                                                        <button @onclick="(e => IdiomasEnseñar(e, drm.Id))" class="boton-expandir" style="color: var(--colorTexto); text-decoration: none; border: 0px; height: 34px; padding: 0px 22px;">
                                                                            <div style="display: flex; align-items: center; gap: 10px; flex-direction: row; justify-content: center;">
                                                                                <img src="@imagenBandera" style="max-width: 20px; max-height: 20px;" alt="Language" loading="lazy"/>

                                                                                <div style="font-size: 14px;">
                                                                                    @Idiomas.BuscarTexto(idioma, "String91", "Game")
                                                                                </div>

                                                                                <div style="min-width: 14px; max-width: 16px;min-width: 14px;width: 16px;">
                                                                                    <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512">
                                                                                        <path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"/>
                                                                                    </svg>
                                                                                </div>

                                                                                <div style="font-size: 14px;">
                                                                                    @Idiomas.BuscarTexto(idioma, "String92", "Game")
                                                                                </div>

                                                                                <div style="min-width: 14px; max-width: 16px;">
                                                                                    <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512">
                                                                                        <path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z" />
                                                                                    </svg>
                                                                                </div>
                                                                            </div>
                                                                        </button>
                                                                    }
                                                                }
                                                            }
                                                        </div>
                                                    }
                                                }
                                            </div>

                                            <div style="display: flex; flex-direction: column; gap: 15px;">
                                                @if (HistoricoComprobar(drm.Id) == true)
                                                {
                                                    <button @onclick="(e => HistoricoEnseñar(e, drm.Id))" class="boton-pequeño" style="width: auto; min-width: 200px; text-align: center; font-size: 14px; padding: 10px 12px;">
                                                        @Herramientas.Idiomas.BuscarTexto(idioma, "String64", "Game")
                                                    </button>
                                                }

                                                @if (Herramientas.RobotsUserAgents.EsBotVerificado(userAgent) == false)
                                                {
                                                    if (drm.Id == JuegoDRM.Steam)
                                                    {
                                                        if (juego.IdSteam > 0)
                                                        {
                                                            <a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar("https://store.steampowered.com/app/" + juego.IdSteam.ToString(), APIs.Steam.Tienda.Generar().Id, usuarioPatreon)" target="_blank" style="width: auto; min-width: 200px; text-align: center;">
                                                                @string.Format("{0} {1}", Herramientas.Idiomas.BuscarTexto(idioma, "String1", "Game"), "Steam")
                                                            </a>
                                                        }
                                                    }

                                                    if (drm.Id == JuegoDRM.GOG)
                                                    {
                                                        if (string.IsNullOrEmpty(juego.SlugGOG) == false)
                                                        {
                                                            <a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar("https://www.gog.com/game/" + juego.SlugGOG, APIs.GOG.Tienda.Generar().Id, usuarioPatreon)" target="_blank" style="width: auto; min-width: 200px; text-align: center;">
                                                                @string.Format("{0} {1}", Herramientas.Idiomas.BuscarTexto(idioma, "String1", "Game"), "GOG")
                                                            </a>
                                                        }
                                                    }

                                                    if (drm.Id == JuegoDRM.Epic)
                                                    {
                                                        if (string.IsNullOrEmpty(juego.SlugEpic) == false)
                                                        {
                                                            <a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar("https://store.epicgames.com/p/" + juego.SlugEpic, APIs.EpicGames.Tienda.Generar().Id, usuarioPatreon)" target="_blank" style="width: auto; min-width: 200px; text-align: center;">
                                                                @string.Format("{0} {1}", Herramientas.Idiomas.BuscarTexto(idioma, "String1", "Game"), "Epic Games")
                                                            </a>
                                                        }
                                                    }
                                                }
                                            </div>
                                        </div>
                                    }

                                    @if (preciosActualesDRM.Count > 0 && Herramientas.RobotsUserAgents.EsBotVerificado(userAgent) == false)
                                    {
                                        List<JuegoPrecio> preciosBajos = new List<JuegoPrecio>();
                                        int descuentoMaximo = 0;

                                        <div style="display: flex; flex-direction: column; gap: 20px; padding: 20px;">
                                            @foreach (JuegoPrecio precio in preciosActualesDRM)
                                            {
                                                if (Herramientas.OfertaActiva.Verificar(precio) == true)
                                                {
                                                    if (precio.Descuento > descuentoMaximo)
                                                    {
                                                        descuentoMaximo = precio.Descuento;
                                                    }

                                                    if ((precio.Descuento > descuentoMaximo - (descuentoMaximo / 2)) || preciosActualesDRM.Count == 1)
                                                    {
                                                        <div>
                                                            @if (string.IsNullOrEmpty(precio.CodigoTexto) == false)
                                                            {
                                                                <div style="width: 100%; display: flex; justify-content: right;">
                                                                    <button @onclick="(e => CopiarAlClipboard(e, precio.CodigoTexto))" class="juego-boton-pequeño" style="width: fit-content; padding: 10px 15px; display: flex; justify-content: right;">
                                                                        <div style="display: flex; align-items: center; gap: 5px;">
                                                                            <div>@Herramientas.Idiomas.BuscarTexto(idioma, "String90", "Game")</div>
                                                                            <div>@precio.CodigoTexto</div>
                                                                        </div>
                                                                    </button>
                                                                </div>
                                                            }

                                                            <a class="juego-boton-pequeño" style="display: block;" href="@EnlaceAcortador.Generar(precio.Enlace, precio.Tienda, usuarioPatreon)" target="_blank">
                                                                <div style="display: flex; align-items: center; flex-wrap: wrap; justify-content: space-between; gap: 20px;">
                                                                    <img src="@SacarImagenTienda(precio.Tienda)" class="juego-imagen-boton" alt="@precio.Tienda" loading="lazy" />
                                                                    <span style="flex: 1;">@ComprobarEdicion(juego.Nombre, precio.Nombre)</span>

                                                                    <div class="juego-descuento-precio">
                                                                        <div style="font-size: 14px; margin: 20px;">
                                                                            @Calculadora.DiferenciaTiempo(precio.FechaDetectado, idioma)
                                                                        </div>

                                                                        <div style="width: 75px; text-align: center;" class="juego-descuento">
                                                                            @precio.Descuento.ToString()%
                                                                        </div>

                                                                        <div class="juego-precio" style="text-align: center;">
                                                                            @PrepararPrecio(precio, false)

                                                                            @if (precio.Moneda != JuegoMoneda.Euro)
                                                                            {
                                                                                <br />

                                                                                <label style="font-size: 13px;">@Divisas.DevolverSimbolo(precio.Precio, precio.Moneda)</label>
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </a>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        preciosBajos.Add(precio);
                                                    }
                                                }           
                                            }

                                            @if (preciosBajos.Count > 0)
                                            {
                                                <button class="juego-boton-pequeño" style="display: block;" @onclick="(e => DescuentosBajosMostrar(e))">
                                                    <div style="display: flex; align-items: center; padding: 5px;">
                                                        @if (mostrarDescuentosBajos == true)
                                                        {
                                                            <div style="max-width: 12px;">
                                                                <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                                                    <path d="M246.6 41.4c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L224 109.3 361.4 246.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-160-160zm160 352l-160-160c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L224 301.3 361.4 438.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3z"/>
                                                                </svg>
                                                            </div>

                                                            <div style="width: 100%; text-align: center; font-size: 14px;">
                                                                @Herramientas.Idiomas.BuscarTexto(idioma, "String43", "Game")
                                                            </div>

                                                            <div style="max-width: 12px;">
                                                                <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                                                    <path d="M246.6 41.4c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L224 109.3 361.4 246.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-160-160zm160 352l-160-160c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L224 301.3 361.4 438.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3z" />
                                                                </svg>
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <div style="max-width: 12px;">
                                                                <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                                                    <path d="M246.6 470.6c-12.5 12.5-32.8 12.5-45.3 0l-160-160c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L224 402.7 361.4 265.4c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3l-160 160zm160-352l-160 160c-12.5 12.5-32.8 12.5-45.3 0l-160-160c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L224 210.7 361.4 73.4c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3z" />
                                                                </svg>
                                                            </div>

                                                            <div style="width: 100%; text-align: center; font-size: 14px;">
                                                                @Herramientas.Idiomas.BuscarTexto(idioma, "String42", "Game")
                                                            </div>

                                                            <div style="max-width: 12px;">
                                                                <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                                                    <path d="M246.6 470.6c-12.5 12.5-32.8 12.5-45.3 0l-160-160c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L224 402.7 361.4 265.4c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3l-160 160zm160-352l-160 160c-12.5 12.5-32.8 12.5-45.3 0l-160-160c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L224 210.7 361.4 73.4c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3z" />
                                                                </svg>
                                                            </div>
                                                        }
                                                    </div>
                                                </button>

                                                if (mostrarDescuentosBajos == true)
                                                {
                                                    foreach (var precioBajo in preciosBajos)
                                                    {
                                                        <div>
                                                            @if (string.IsNullOrEmpty(precioBajo.CodigoTexto) == false)
                                                            {
                                                                <div style="width: 100%; display: flex; justify-content: right;">
                                                                    <button @onclick="(e => CopiarAlClipboard(e, precioBajo.CodigoTexto))" class="juego-boton-pequeño" style="width: fit-content; padding: 10px 15px; display: flex; justify-content: right;">
                                                                        <div style="display: flex; align-items: center; gap: 5px;">
                                                                            <div>@Herramientas.Idiomas.BuscarTexto(idioma, "String90", "Game")</div>
                                                                            <div>@precioBajo.CodigoTexto</div>
                                                                        </div>
                                                                    </button>
                                                                </div>
                                                            }

                                                            <a class="juego-boton-pequeño" style="display: block;" href="@EnlaceAcortador.Generar(precioBajo.Enlace, precioBajo.Tienda, usuarioPatreon)" target="_blank">
                                                                <div style="display: flex; align-items: center; flex-wrap: wrap; justify-content: space-between; gap: 20px;">
                                                                    <img src="@SacarImagenTienda(precioBajo.Tienda)" class="juego-imagen-boton" alt="@precioBajo.Tienda" loading="lazy" />
                                                                    <span style="flex: 1;">@ComprobarEdicion(juego.Nombre, precioBajo.Nombre)</span>

                                                                    <div class="juego-descuento-precio">
                                                                        <div style="font-size: 14px; margin: 20px;">
                                                                            @Calculadora.DiferenciaTiempo(precioBajo.FechaDetectado, idioma)
                                                                        </div>

                                                                        <div style="width: 75px; text-align: center;" class="juego-descuento">
                                                                            @precioBajo.Descuento.ToString()%
                                                                        </div>

                                                                        <div class="juego-precio" style="text-align: center;">
                                                                            @PrepararPrecio(precioBajo, false)

                                                                            @if (precioBajo.Moneda != JuegoMoneda.Euro)
                                                                            {
                                                                                <br />

                                                                                <label style="font-size: 13px;">@Divisas.DevolverSimbolo(precioBajo.Precio, precioBajo.Moneda)</label>
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </a>
                                                        </div>         
                                                    }
                                                }
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        if (string.IsNullOrEmpty(mensajeMinimoDRM) == false)
                                        {
                                            <div style="padding: 30px 40px;">@Idiomas.BuscarTexto(idioma, "String12", "Game")</div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            }

            @if (juego.Bundles != null)
            {
                <div id="bundles" class="perfil">
                    @if (BundlesDisponibles(juego.Bundles).Count > 0)
                    {
                        <div style="margin-bottom: 10px;">
                            <label style="font-size: 18px;">@Idiomas.BuscarTexto(idioma, "String22", "Game")</label>
                        </div>

                        @foreach (var bundle2 in BundlesDisponibles(juego.Bundles))
                        {
                            if (bundle2.BundleId > 0)
                            {
                                var bundle3 = global::BaseDatos.Bundles.Buscar.UnBundle(bundle2.BundleId);

                                if (bundle3 != null)
                                {
                                    <a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar(bundle2.Enlace, bundle3.Tipo, usuarioPatreon)" target="_blank" style="font-size: 16px; padding: 20px 25px; margin-top: 10px; margin-bottom: 10px; cursor: pointer;">
                                        <div style="display: flex; align-items: center;">
                                            <div style="margin-right: 15px;">
                                                <img src="@BundlesCargar.DevolverBundle(bundle3.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Bundle" loading="lazy"/>
                                            </div>

                                            <div style="margin-right: 30px;">
                                                <img src="@JuegoDRM2.SacarImagen(bundle2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM" loading="lazy" />
                                            </div>

                                            <div style="margin-right: 20px; width: 100%;">
                                                <label style="cursor: pointer;">@bundle3.NombreBundle • @bundle3.NombreTienda</label><br />
                                                <label style="font-size: 13px; cursor: pointer;">@Calculadora.DiferenciaTiempo(bundle3.FechaTermina, idioma, 1)</label>
                                            </div>

                                            <div style="text-align: right;">
                                                <label style="cursor: pointer;">@BundlesPrepararPrecio(bundle3, juego.Id)</label>
                                                <label style="font-size: 13px; cursor: pointer;">@BundlesPrepararInfo(bundle3, juego.Id)</label>
                                            </div>
                                        </div>
                                    </a>
                                }
                            }						
                        }
                    }

                    @if (BundlesAntiguos(juego.Bundles).Count > 0)
                    {
                        if (BundlesDisponibles(juego.Bundles).Count > 0)
                        {
                            <div style="margin-top: 40px; margin-bottom: 10px;">
                                <label style="font-size: 18px;">@Idiomas.BuscarTexto(idioma, "String23", "Game")</label>
                            </div>
                        }
                        else
                        {
                            <div style="margin-bottom: 10px;">
                                <label style="font-size: 18px;">@Idiomas.BuscarTexto(idioma, "String23", "Game")</label>
                            </div>
                        }

                        foreach (var bundle2 in BundlesAntiguos(juego.Bundles))
                        {
                            var bundle3 = global::BaseDatos.Bundles.Buscar.UnBundle(bundle2.BundleId);

                            if (bundle3 != null)
                            {
                                <button @onclick="(e => BundleAbrir(e, bundle2.BundleId))" class="boton-pequeño" style="font-size: 17px; padding: 20px 25px; margin-top: 10px; margin-bottom: 10px;">
                                    <div style="display: flex; align-items: center;">
                                        <div style="margin-right: 15px;">
                                            <img src="@BundlesCargar.DevolverBundle(bundle3.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Bundle" loading="lazy"/>
                                        </div>

                                        <div style="margin-right: 30px;">
                                            <img src="@JuegoDRM2.SacarImagen(bundle2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM" loading="lazy" />
                                        </div>

                                        <div style="margin-right: 20px; width: 100%;">
                                            <div style="cursor: pointer;">@bundle3.NombreBundle • @bundle3.NombreTienda</div>
                                            <div style="font-size: 13px; cursor: pointer;">@Calculadora.DiferenciaTiempo(bundle3.FechaTermina, idioma)</div>
                                        </div>

                                        <div style="text-align: right; width: 15%;">
                                            <div style="cursor: pointer;">@BundlesPrepararPrecio(bundle3, juego.Id)</div>
                                            <div style="font-size: 13px; cursor: pointer;">@BundlesPrepararInfo(bundle3, juego.Id)</div>
                                        </div>
                                    </div>
                                </button>
                            }
                        }
                    }			
                </div>
            }

            @if (juego.Gratis != null)
            {
                <div id="gratis" style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
                    @if (GratisDisponibles(juego.Gratis).Count > 0)
                    {
                        <div style="margin-bottom: 10px;">
                            <label style="font-size: 18px;">@Idiomas.BuscarTexto(idioma, "String30", "Game")</label>
                        </div>

                        @foreach (var gratis2 in GratisDisponibles(juego.Gratis))
                        {
                            <a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar(gratis2.Enlace, gratis2.Tipo, usuarioPatreon)" target="_blank" style="font-size: 16px; padding: 20px 25px; margin-top: 10px; margin-bottom: 10px; cursor: pointer; width: 100%; display: block;">
                                <div style="display: flex; align-items: center;">
                                    <div style="margin-right: 15px;">
                                        <img src="@GratisCargar.DevolverGratis(gratis2.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Free" loading="lazy"/>
                                    </div>

                                    <div style="margin-right: 30px;">
                                        <img src="@JuegoDRM2.SacarImagen(gratis2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM" loading="lazy" />
                                    </div>

                                    <div style="margin-right: 20px; width: 100%;">
                                        <label style="cursor: pointer;">@GratisCargar.DevolverGratis(gratis2.Tipo).Nombre</label>
                                    </div>
                                </div>
                            </a>
                        }
                    }

                    @if (GratisAntiguos(juego.Gratis).Count > 0)
                    {
                        if (GratisDisponibles(juego.Gratis).Count > 0)
                        {
                            <div style="margin-top: 40px; margin-bottom: 10px;">
                                <label style="font-size: 18px;">@Idiomas.BuscarTexto(idioma, "String31", "Game")</label>
                            </div>
                        }
                        else
                        {
                            <div style="margin-bottom: 10px;">
                                <label style="font-size: 18px;">@Idiomas.BuscarTexto(idioma, "String31", "Game")</label>
                            </div>
                        }

                        foreach (var gratis2 in GratisAntiguos(juego.Gratis))
                        {
                            <hr/>
                            <div style="display: flex; align-items: center; font-size: 16px; padding: 15px 5px;">
                                <div style="margin-right: 15px; width: 22px; height: 22px;">
                                    <img src="@GratisCargar.DevolverGratis(gratis2.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Free" loading="lazy"/>
                                </div>

                                <div style="margin-right: 30px; width: 22px; height: 22px;">
                                    @if (gratis2.DRM == JuegoDRM.DRMFree)
                                    {
                                        <label style="max-width: 22px; max-height: 22px; font-size: 8px; text-align: center;">DRM Free</label>
                                    }
                                    else
                                    {
                                        <img src="@JuegoDRM2.SacarImagen(gratis2.DRM)" style="max-width: 22px; max-height: 22px;" alt="@JuegoDRM2.DevolverDRM(gratis2.DRM)" loading="lazy" />
                                    }
                                </div>

                                <div style="padding-right: 20px; width: 15%;">
                                    <label>@GratisCargar.DevolverGratis(gratis2.Tipo).Nombre</label><br />
                                    <label style="font-size: 13px;">@Calculadora.DiferenciaTiempo(gratis2.FechaTermina, idioma)</label>
                                </div>

                                <div style="padding-right: 20px; width: 85%;">
                                    <label>@Idiomas.BuscarTexto(idioma, "String37", "Game") @Calculadora.DiferenciaDuranteDias(gratis2.FechaEmpieza, gratis2.FechaTermina, idioma)</label><br />
                                    <label style="font-size: 13px;">@gratis2.FechaEmpieza.Day.ToString()/@gratis2.FechaEmpieza.Month.ToString()/@gratis2.FechaEmpieza.Year.ToString() • @gratis2.FechaTermina.Day.ToString()/@gratis2.FechaTermina.Month.ToString()/@gratis2.FechaTermina.Year.ToString()</label>
                                </div> 
                            </div>
                        }
                    }
                </div>
            }

            @if (juego.Suscripciones != null)
            {
                <div id="suscripciones" style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
                    @if (SuscripcionesDisponibles(juego.Suscripciones).Count > 0)
                    {
                        <div style="margin-bottom: 20px;">
                            <label style="font-size: 18px;">@Idiomas.BuscarTexto(idioma, "String26", "Game")</label>
                        </div>

                        <div style="display: flex; flex-direction: column; gap: 20px;">
                            @foreach (var suscripcion2 in SuscripcionesDisponibles(juego.Suscripciones))
                            {
                                Suscripcion suscripcionUsar = SuscripcionesCargar.DevolverSuscripcion(suscripcion2.Tipo);
                                string enlaceSuscripcion = suscripcion2.Enlace;

                                if (suscripcionUsar.UsuarioEnlacesEspecificos == false)
                                {
                                    enlaceSuscripcion = suscripcionUsar.Enlace;
                                }

                                enlaceSuscripcion = EnlaceAcortador.Generar(enlaceSuscripcion, suscripcion2.Tipo, usuarioPatreon);

                                <a class="juego-boton-pequeño" href="@enlaceSuscripcion" target="_blank" style="font-size: 16px; padding: 20px 25px; cursor: pointer; display: block;">
                                    <div style="display: flex; align-items: center;">
                                        <div style="margin-right: 15px;">
                                            <img src="@suscripcionUsar.ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Subscription" loading="lazy" />
                                        </div>

                                        <div style="margin-right: 30px;">
                                            <img src="@JuegoDRM2.SacarImagen(suscripcion2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM" loading="lazy" />
                                        </div>

                                        <div style="margin-right: 20px; width: 100%;">
                                            <div style="display: flex; align-items: center; gap: 5px;">
                                                <div>
                                                    @suscripcionUsar.Nombre
                                                </div>

                                                @if (suscripcionUsar.Precio > 0)
                                                {
                                                    string precioTexto = suscripcionUsar.Precio.ToString();
                                                    precioTexto = precioTexto.Replace(".", ",");
                                                    precioTexto = precioTexto + "€";

                                                    <div>
                                                        • @precioTexto
                                                    </div>
                                                }
                                            </div>

                                            @if (suscripcionUsar.ParaSiempre == true)
                                            {
                                                <div style="font-size: 14px; margin-top: 5px;">@Idiomas.BuscarTexto(idioma, "String70", "Game") (@Calculadora.DiferenciaTiempo(suscripcion2.FechaTermina, idioma, 1)).</div>
                                            }
                                            else
                                            {
                                                <div style="font-size: 14px; margin-top: 5px;">@Idiomas.BuscarTexto(idioma, "String69", "Game").</div>
                                            }
                                        </div>
                                    </div>
                                </a>
                            }
                        </div>
                    }

                    @if (SuscripcionesAntiguas(juego.Suscripciones).Count > 0)
                    {
                        if (SuscripcionesDisponibles(juego.Suscripciones).Count > 0)
                        {
                            <div style="margin-top: 40px; margin-bottom: 10px;">
                                <label style="font-size: 18px;">@Idiomas.BuscarTexto(idioma, "String27", "Game")</label>
                            </div>
                        }
                        else
                        {
                            <div style="margin-bottom: 10px;">
                                <label style="font-size: 18px;">@Idiomas.BuscarTexto(idioma, "String27", "Game")</label>
                            </div>
                        }

                        foreach (var suscripcion2 in SuscripcionesAntiguas(juego.Suscripciones))
                        {
                            <hr />
                            <div style="display: flex; align-items: center; font-size: 16px; padding: 15px 5px;">
                                <div style="margin-right: 15px; width: 22px; height: 22px;">
                                    <img src="@SuscripcionesCargar.DevolverSuscripcion(suscripcion2.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Subscription" loading="lazy" />
                                </div>

                                <div style="margin-right: 30px; width: 22px; height: 22px;">
                                    <img src="@JuegoDRM2.SacarImagen(suscripcion2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM" loading="lazy" />
                                </div>

                                <div style="padding-right: 20px; width: 15%;">
                                    <label>@SuscripcionesCargar.DevolverSuscripcion(suscripcion2.Tipo).Nombre</label><br />
                                    <label style="font-size: 13px;">@Calculadora.DiferenciaTiempo(suscripcion2.FechaTermina, idioma)</label>
                                </div>

                                <div style="padding-right: 20px; width: 85%;">
                                    <label>@Idiomas.BuscarTexto(idioma, "String38", "Game") @Calculadora.DiferenciaDuranteDias(suscripcion2.FechaEmpieza, suscripcion2.FechaTermina, idioma)</label><br />
                                    <label style="font-size: 13px;">@suscripcion2.FechaEmpieza.Day.ToString()/@suscripcion2.FechaEmpieza.Month.ToString()/@suscripcion2.FechaEmpieza.Year.ToString() • @suscripcion2.FechaTermina.Day.ToString()/@suscripcion2.FechaTermina.Month.ToString()/@suscripcion2.FechaTermina.Year.ToString()</label>
                                </div>
                            </div>
                        }
                    }
                </div>
            }

            @if (juego.Media != null)
            {
                if (juego.Media.Capturas != null)
                {
                    if (juego.Media.Capturas.Count > 0)
                    {
                        bool difuminar = false;

                        if (usuarioLogeado == false)
                        {
                            if (string.IsNullOrEmpty(juego.MayorEdad) == false)
                            {
                                if (juego.MayorEdad.ToLower() == "true")
                                {
                                    difuminar = true;
                                }
                            }
                        }

                        <div class="juego-galeria-contenedor">
                            @if (mediaMostrarPosicion == 99999 && difuminar == false)
                            {
                                <video style="width: 100vw; height: calc(100vh - 190px); cursor: pointer; max-width: 1320px; max-height: 742.50px;" controls="controls" preload="metadata">
                                    <source src="@mediaMostrar" type="video/mp4" />
                                    <source src="@mediaMostrar.Replace(".mp4", ".webm")" type="video/webm" />
                                </video>
                            }
                            else
                            {
                                <div style="overflow: hidden;">
                                    <div class="juego-galeria-numero">@(mediaMostrarPosicion + 1) / @(juego.Media.Capturas.Count)</div>
                                    
                                    @if (difuminar == false)
                                    {
                                        <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(mediaMostrar)" style="width: 100vw; height: calc(100vh - 190px); max-width: 1320px; max-height: 742.50px; object-fit: contain;" alt="@juego.Nombre" loading="lazy">
                                    }
                                    else
                                    {
                                        <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(mediaMostrar)" style="width: 100vw; height: calc(100vh - 190px); max-width: 1320px; max-height: 742.50px; object-fit: contain; filter: blur(10px);" alt="@juego.Nombre" loading="lazy">
                                    } 
                                </div>

                                <a class="juego-galeria-atras" @onclick="@(e => CambiarMediaMostrar(e, mediaMostrarPosicion - 1))">&#10094;</a>
                                <a class="juego-galeria-siguiente" @onclick="@(e => CambiarMediaMostrar(e, mediaMostrarPosicion + 1))">&#10095;</a>
                            }

                            @if (juego.Media.Miniaturas != null)
                            {
                                <div class="juego-galeria-fila" style="scrollbar-color: var(--fondoCodigo) var(--fondoOscuro);">
                                    @{
                                        if (string.IsNullOrEmpty(juego.Media.Video) == false && difuminar == false)
                                        {
                                            if (juego.Imagenes != null)
                                            {
                                                <div class="juego-galeria-columna" @onclick="@(e => CambiarMediaMostrar(e, 99999))" style="position: relative;">
                                                    <img class="juego-galeria-capturas juego-galeria-cursor" src="@Herramientas.Ficheros.Imagenes.ServidorExterno(juego.Imagenes.Header_460x215, 220, 124)" style="width: 100%;" alt="@juego.Nombre" loading="lazy">

                                                    <div style="max-width: 42px; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                                                        <svg class="svg-boton" style="cursor: pointer;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                                            <path d="M0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zM188.3 147.1c-7.6 4.2-12.3 12.3-12.3 20.9l0 176c0 8.7 4.7 16.7 12.3 20.9s16.8 4.1 24.3-.5l144-88c7.1-4.4 11.5-12.1 11.5-20.5s-4.4-16.1-11.5-20.5l-144-88c-7.4-4.5-16.7-4.7-24.3-.5z"/>
                                                        </svg>
                                                    </div>
                                                </div>
                                            }
                                        }

                                        int i = 0;
                                        while (i < juego.Media.Miniaturas.Count)
                                        {
                                            int nuevaPosicion = i;

                                            if (difuminar == false)
                                            {
                                                <div class="juego-galeria-columna" @onclick="@(e => CambiarMediaMostrar(e, nuevaPosicion))">
                                                    <img class="juego-galeria-capturas juego-galeria-cursor" src="@Herramientas.Ficheros.Imagenes.ServidorExterno(juego.Media.Miniaturas[i], 220, 124)" style="width: 100%;" alt="@juego.Nombre" loading="lazy">
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="juego-galeria-columna" @onclick="@(e => CambiarMediaMostrar(e, nuevaPosicion))" style="overflow: hidden;">
                                                    <img class="juego-galeria-capturas juego-galeria-cursor" src="@Herramientas.Ficheros.Imagenes.ServidorExterno(juego.Media.Miniaturas[i], 220, 124)" style="width: 100%; filter: blur(10px);" alt="@juego.Nombre" loading="lazy">
                                                </div>
                                            }

                                            i += 1;
                                        }
                                    }
                                </div>
                            }
                        </div>
                    }
                }
            }

            <div class="descripcion-datos" style="display: grid; gap: 30px;">
                @if (juego.Caracteristicas != null)
                {
                    @if (string.IsNullOrEmpty(juego.Caracteristicas.Descripcion) == false)
                    {
                        <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
                            @WebUtility.HtmlDecode(juego.Caracteristicas.Descripcion)
                        </div>
                    }

                    @if (juego.Caracteristicas.Desarrolladores != null || juego.Caracteristicas.Publishers != null || juego.Generos != null)
                    {
                        <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px; display: flex; flex-direction: column; gap: 15px;">
                            @if (juego.Caracteristicas.Desarrolladores != null)
                            {
                                if (juego.Caracteristicas.Desarrolladores.Count > 0)
                                {
                                    List<string> listaDesarrolladores = new List<string>();

                                    foreach (var desarrollador in juego.Caracteristicas.Desarrolladores)
                                    {
                                        if (string.IsNullOrEmpty(desarrollador) == false)
                                        {
                                            listaDesarrolladores.Add(desarrollador);
                                        }
                                    }

                                    if (listaDesarrolladores.Count > 0)
                                    {
                                        <div>
                                            <div>@Idiomas.BuscarTexto(idioma, "String35", "Game")</div>

                                            <div>
                                                @{
                                                    int i = 0;

                                                    foreach (var desarrollador in listaDesarrolladores)
                                                    {
                                                        bool añadido = false;

                                                        if (i > 0)
                                                        {
                                                            <label style="margin-right: 5px;">,</label>
                                                        }

                                                        if (curators.Count > 0)
                                                        {
                                                            foreach (var curator in curators)
                                                            {
                                                                if (Herramientas.Buscador.LimpiarNombre(curator.Curator.Nombre, true) == Herramientas.Buscador.LimpiarNombre(desarrollador, true))
                                                                {
                                                                    añadido = true;
                                                                    <button onclick="moverScroll('curator-@curator.Curator.Id.ToString()')" class="boton" style="padding: 0px; background-color: transparent; color: var(--colorEnlace); text-decoration: underline; font-size: 16px; width: fit-content;">@desarrollador</button>
                                                                }
                                                                else
                                                                {
                                                                    if (Herramientas.Buscador.LimpiarNombre(curator.Curator.Slug, true) == Herramientas.Buscador.LimpiarNombre(desarrollador, true))
                                                                    {
                                                                        añadido = true;
                                                                        <button onclick="moverScroll('curator-@curator.Curator.Id.ToString()')" class="boton" style="padding: 0px; background-color: transparent; color: var(--colorEnlace); text-decoration: underline; font-size: 16px; width: fit-content;">@desarrollador</button>
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        if (añadido == false)
                                                        {
                                                            @desarrollador
                                                        }

                                                        i += 1;
                                                    }
                                                }
                                            </div>
                                        </div>									
                                    }
                                }
                            }

                            @if (juego.Caracteristicas.Publishers != null)
                            {
                                if (juego.Caracteristicas.Publishers.Count > 0)
                                {
                                    List<string> listaPublishers = new List<string>();

                                    foreach (var publisher in juego.Caracteristicas.Publishers)
                                    {
                                        if (string.IsNullOrEmpty(publisher) == false)
                                        {
                                            listaPublishers.Add(publisher);
                                        }
                                    }

                                    if (listaPublishers.Count > 0)
                                    {
                                        <div>
                                            <div>@Idiomas.BuscarTexto(idioma, "String36", "Game")</div>

                                            <div>
                                                @{
                                                    int i = 0;

                                                    foreach (var publisher in listaPublishers)
                                                    {
                                                        bool añadido = false;

                                                        if (i > 0)
                                                        {
                                                            <label style="margin-right: 5px;">,</label>
                                                        }

                                                        if (curators.Count > 0)
                                                        {
                                                            foreach (var curator in curators)
                                                            {
                                                                if (Herramientas.Buscador.LimpiarNombre(curator.Curator.Nombre, true) == Herramientas.Buscador.LimpiarNombre(publisher, true))
                                                                {
                                                                    añadido = true;
                                                                    <button onclick="moverScroll('curator-@curator.Curator.Id.ToString()')" class="boton" style="padding: 0px; background-color: transparent; color: var(--colorEnlace); text-decoration: underline; font-size: 16px; width: fit-content;">@publisher</button>
                                                                }
                                                                else
                                                                {
                                                                    if (Herramientas.Buscador.LimpiarNombre(curator.Curator.Slug, true) == Herramientas.Buscador.LimpiarNombre(publisher, true))
                                                                    {
                                                                        añadido = true;
                                                                        <button onclick="moverScroll('curator-@curator.Curator.Id.ToString()')" class="boton" style="padding: 0px; background-color: transparent; color: var(--colorEnlace); text-decoration: underline; font-size: 16px; width: fit-content;">@publisher</button>
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        if (añadido == false)
                                                        {
                                                            @publisher
                                                        }

                                                        i += 1;
                                                    }
                                                }
                                            </div>
                                        </div>	
                                    }
                                }
                            }

                            @if (juego.Generos != null)
                            {
                                if (juego.Generos.Count > 0)
                                {
                                    <div>
                                        <div>@Idiomas.BuscarTexto(idioma, "String44", "Game"):</div>

                                        <div>
                                            @{
                                                int i = 0;

                                                foreach (var genero in juego.Generos)
                                                {
                                                    if (i > 0)
                                                    {
                                                        <label style="margin-right: 5px;">,</label>
                                                    }

                                                    string cadenaGenero = Idiomas.BuscarTexto(idioma, genero, "Genres");

                                                    if (string.IsNullOrEmpty(cadenaGenero) == false)
                                                    {
                                                        string idGenero = "g" + genero;
                                                        <a href="/filter/@idGenero/">@cadenaGenero</a>
                                                    }
                                                    else
                                                    {
                                                        global::BaseDatos.Errores.Insertar.Mensaje("Género no encontrado", genero + " - " + juego.Nombre, "https://store.steampowered.com/api/appdetails/?appids=" + juego.IdSteam.ToString() + "&l=english");
                                                    }

                                                    i += 1;
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    }

                    @if (juego.Categorias != null)
                    {
                        if (juego.Categorias.Count > 0)
                        {
                            <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 30px; width: 100%;">
                                <div style="margin-bottom: 5px;">
                                    @Idiomas.BuscarTexto(idioma, "String49", "Game")
                                </div>
                                <div style="font-size: 14px;">
                                    @Idiomas.BuscarTexto(idioma, "String50", "Game")
                                </div>
                                <hr />

                                <div style="display: flex; align-items: center; flex-flow: wrap; grid-gap: 10px;">
                                    @foreach (var categoria in juego.Categorias)
                                    {
                                        string cadenaCategoria = Idiomas.BuscarTexto(idioma, categoria, "Categories");

                                        if (string.IsNullOrEmpty(cadenaCategoria) == false)
                                        {
                                            string imagenCategoria = "/imagenes/categorias/" + categoria + ".webp";
                                            string idCategoria = "c" + categoria;

                                            <a href="/filter/@idCategoria/" class="boton-expandir" style="color: var(--colorTexto); text-decoration: none;">
                                                <div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px; height: 100%;">
                                                    <img style="width: 26px; height: 16px;" src="@imagenCategoria" alt="@categoria" loading="lazy" />

                                                    <div style="width: 100%; font-size: 14px;">@cadenaCategoria</div>
                                                </div>
                                            </a>
                                        }
                                        else
                                        {
                                            global::BaseDatos.Errores.Insertar.Mensaje("Categoría no encontrada", categoria + " - " + juego.Nombre + ": https://store.steampowered.com/api/appdetails/?appids=" + juego.IdSteam.ToString() + "&l=english");
                                        }
                                    }
                                </div>
                            </div>
                        }
                    }

                    @if (juego.Etiquetas != null)
                    {
                        if (juego.Etiquetas.Count > 0)
                        {
                            <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 30px; width: 100%;">
                                <div style="margin-bottom: 5px;">
                                    @Idiomas.BuscarTexto(idioma, "String47", "Game")
                                </div>
                                <div style="font-size: 14px;">
                                    @Idiomas.BuscarTexto(idioma, "String48", "Game")
                                </div>
                                <hr />

                                <div style="display: flex; align-items: center; flex-flow: wrap; grid-gap: 10px;">
                                    @foreach (var etiqueta in juego.Etiquetas)
                                    {
                                        string cadenaEtiqueta = Idiomas.BuscarTexto(idioma, etiqueta, "Tags");

                                        if (string.IsNullOrEmpty(cadenaEtiqueta) == false)
                                        {
                                            string idEtiqueta = "t" + etiqueta;

                                            <a href="/filter/@idEtiqueta/" class="boton-expandir" style="color: var(--colorTexto); text-decoration: none;">
                                                <div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px; height: 100%;">
                                                    <div style="width: 100%; font-size: 14px;">@cadenaEtiqueta</div>
                                                </div>
                                            </a>
                                        }
                                        else
                                        {
                                            global::BaseDatos.Errores.Insertar.Mensaje("Etiqueta no encontrada", etiqueta + " - " + juego.Nombre, "https://store.steampowered.com/tagdata/populartags/spanish");
                                        }
                                    }
                                </div>
                            </div>
                        }
                    }
                }
            </div>

            @if (curators.Count > 0)
            {
                foreach (var curator in curators)
                {
                    List<Juegos.Juego> juegosCurator = global::BaseDatos.Juegos.Buscar.MultiplesJuegosSteam(curator.Curator.SteamIds);

                    if (juegosCurator.Count > 0)
                    {
                        int posicion = 0;

                        foreach (var juegoCurator in juegosCurator)
                        {
                            if (juegoCurator.IdSteam == juego.IdSteam)
                            {
                                break;
                            }

                            posicion += 1;
                        }

                        if (posicion < juegosCurator.Count)
                        {
                            juegosCurator.RemoveAt(posicion);
                        }

                        if (juegosCurator.Count > 0)
                        {
                            juegosCurator = juegosCurator.Where(x => x.Analisis != null).Where(x => x.Analisis.Cantidad != null).OrderByDescending(x => int.Parse(x.Analisis.Cantidad.Replace(",", null))).ThenBy(x => x.Nombre).ToList();

                            <div id="curator-@curator.Curator.Id.ToString()" style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 30px; display: flex; flex-direction: column; gap: 10px;">
                                <div>
                                    <div style="display: flex; align-items: center; gap: 20px;">
                                        <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(curator.Curator.Imagen, 60, 60)" alt="@curator.Curator.Nombre" style="width: 60px; height: 60px;" loading="lazy" />

                                        <a href="/curator/@curator.Curator.Slug.ToLower()/" target="_blank" style="text-decoration: none;">
                                            <div style="display: flex; flex-direction: column; gap: 10px;">
                                                <div style="font-size: 18px;">
                                                    @string.Format(Idiomas.BuscarTexto(idioma, "String89", "Game"), curator.Curator.Nombre)
                                                </div>
                                            </div>
                                        </a>
                                    </div>

                                    <hr />

                                    <div style="display: flex; align-items: center; justify-content: space-between; gap: 20px;">
                                        @{
                                            int i = curator.Posicion;

                                            @if (juegosCurator.Count > 4)
                                            {
                                                <button @onclick="@(e => CuratorAtras(e, curator, juegosCurator.Count))" class="boton-pequeño" style="width: auto; text-align: center; font-size: 23px; padding: 10px 20px;" title="Back">
                                                    <div style="max-width: 24px;">
                                                        <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                                            <path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z"/>
                                                        </svg>
                                                    </div>
                                                </button>
                                            }

                                            <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 20px; width: 100%;">
                                                @while (i < (curator.Posicion + 4))
                                                {
                                                    if (i < juegosCurator.Count)
                                                    {
                                                        bool usuarioTieneJuego = Herramientas.UsuarioJuegos.ComprobarSiTiene(juegosUsuario, juegosCurator[i]);
                                                        bool usuarioTieneDeseado = false;

                                                        string fondoColor = string.Empty;

                                                        if (usuarioTieneJuego == true)
                                                        {
                                                            fondoColor = "background-color: var(--fondoBien);";
                                                        }
                                                        else
                                                        {
                                                            usuarioTieneDeseado = Herramientas.Deseados.ComprobarSiEsta(usuario?.SteamWishlist, usuario?.Wishlist, usuario?.GogWishlist, juegosCurator[i], Juegos.JuegoDRM.NoEspecificado, true);

                                                            if (usuarioTieneDeseado == true)
                                                            {
                                                                fondoColor = "background-color: var(--fondoAlerta);";
                                                            }
                                                        }

                                                        if (string.IsNullOrEmpty(fondoColor) == true)
                                                        {
                                                            fondoColor = "background-color: var(--fondoBotonPequeño);";
                                                        }

                                                        <a href="/game/@juegosCurator[i].Id.ToString()/@Herramientas.EnlaceAdaptador.Nombre(juegosCurator[i].Nombre)/" target="_blank" class="boton-pequeño" style="padding: 0px; @fondoColor">
                                                            <div style="display: flex; flex-direction: column; padding: 2px; height: 100%;" title="@juegosCurator[i].Nombre">
                                                                <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(juegosCurator[i].Imagenes.Header_460x215, 255, 120)" style="max-width: 100vw; max-height: 100vh; object-fit: cover;" alt="@juegosCurator[i].Nombre" loading="lazy" />

                                                                <div style="font-size: 14px; display: flex; align-items: center; justify-content: center; height: 100%; padding: 10px; text-align: center;">
                                                                    @Herramientas.Buscador.GenerarMensaje(idioma, juegosCurator[i], true, true, true)
                                                                </div>
                                                            </div>
                                                        </a>
                                                    }

                                                    i += 1;
                                                }
                                            </div>

                                            @if (juegosCurator.Count > 4)
                                            {
                                                <button @onclick="@(e => CuratorAdelante(e, curator, juegosCurator.Count))" class="boton-pequeño" style="width: auto; text-align: center; font-size: 23px; padding: 10px 20px;" title="Next">
                                                    <div style="max-width: 24px;">
                                                        <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                                            <path d="M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z"/>
                                                        </svg>
                                                    </div>
                                                </button>
                                            }                                     
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                }
            }

            @if (juego.IdSteam > 0)
            {
                <div id="reviews" style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 30px; display: flex; flex-direction: column; gap: 10px;">
                    <div>
                        <div style="font-size: 18px; margin-bottom: 5px;">
                            @Idiomas.BuscarTexto(idioma, "String1", "Reviews")
                        </div>
                        <div style="font-size: 14px;">
                            @Idiomas.BuscarTexto(idioma, "String2", "Reviews")
                        </div>
                        <hr />
                    </div>

                    <div style="display: flex; align-items: flex-start; gap: 40px;">
                        @if ((Herramientas.Patreon.VerificarActivo(usuario?.PatreonLastCheck) || global::BaseDatos.Usuarios.Buscar.RolDios(usuarioId) == true) && juego.IdSteam > 0)
                        {
                            <div style="width: 25%; display: flex; flex-direction: column; gap: 10px;">
                                @{
                                    string idiomaGlobal = "global";
                                    string subrayadoGlobal = string.Empty;

                                    if (idiomaAnalisis == idiomaGlobal)
                                    {
                                        subrayadoGlobal = "border-bottom: 1px solid var(--colorEnlace);";
                                    }
                                }

                                <button @onclick="(e => AnalisisIdioma(e, idiomaGlobal))" style="color: var(--colorEnlace); border: 0; background: transparent; padding: 0px;">
                                    <div style="@subrayadoGlobal padding-bottom: 5px;">
                                        @Idiomas.BuscarTexto(idioma, "String8", "Reviews")
                                    </div>
                                </button>

                                @{
                                    List<IdiomaClase> listadoIdiomas = new List<IdiomaClase>();

                                    foreach (var idioma2 in Idiomas.ListadoIdiomasGenerar())
                                    {
                                        if (idioma2.SteamReseñas == true)
                                        {
                                            idioma2.Traduccion = Idiomas.BuscarTexto(idioma, idioma2.Id, "Languages");
                                            listadoIdiomas.Add(idioma2);
                                        }
                                    }

                                    if (listadoIdiomas.Count > 0)
                                    {
                                        listadoIdiomas = listadoIdiomas.OrderBy(x => x.Traduccion).ToList();
                                    }

                                    foreach (var idioma2 in listadoIdiomas)
                                    {
                                        if (idioma2.SteamReseñas == true)
                                        {
                                            string subrayado = string.Empty;

                                            if (idiomaAnalisis == idioma2.SteamAPI)
                                            {
                                                subrayado = "border-bottom: 1px solid var(--colorEnlace);";
                                            }

                                            <button @onclick="(e => AnalisisIdioma(e, idioma2.SteamAPI))" style="color: var(--colorEnlace); border: 0; background: transparent; padding: 0px;">
                                                <div style="@subrayado padding-bottom: 5px;">
                                                    @idioma2.Traduccion
                                                </div>
                                            </button>
                                        }
                                    }
                                }
                            </div>
                        }

                        @if (idiomaAnalisis == "global")
                        {
                            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(130px, 1fr)); gap: 20px; width: 100%;">
                                @foreach (var analisisRegion in analisisRegiones)
                                {
                                    if (analisisRegion != null)
                                    {
                                        int totalRegion = analisisRegion.CantidadPositivos + analisisRegion.CantidadNegativos;
                                        int porcentajeRegion = Calculadora.SacarDescuento(analisisRegion.CantidadPositivos + analisisRegion.CantidadNegativos, analisisRegion.CantidadNegativos);

                                        if (analisisRegion.CantidadPositivos > 0 && analisisRegion.CantidadNegativos == 0)
                                        {
                                            porcentajeRegion = 99;
                                        }

                                        string imagenRegion = "/imagenes/banderas/" + analisisRegion.Idioma + ".svg";

                                        <div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); padding: 10px; display: flex; align-items: center; gap: 10px; justify-content: center;">
                                            <img src="@imagenRegion" style="height: 26px;" loading="lazy" />

                                            <div>
                                                @if (porcentajeRegion > 74)
                                                {
                                                    <img src="/imagenes/analisis/positivo3.svg" style="width: 26px; height: 26px;" alt="Reviews" loading="lazy" />
                                                }

                                                @if (porcentajeRegion > 49 && porcentajeRegion < 75)
                                                {
                                                    <img src="/imagenes/analisis/meh3.svg" style="width: 26px; height: 26px;" alt="Reviews" loading="lazy" />
                                                }

                                                @if (porcentajeRegion < 50)
                                                {
                                                    <img src="/imagenes/analisis/negativo3.svg" style="width: 26px; height: 26px;" alt="Reviews" loading="lazy" />
                                                }
                                            </div>

                                            <div>
                                                @porcentajeRegion%
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        }
                        else
                        {
                            if (analisisAmpliado.CantidadPositivos > 0)
                            {
                                <div style="width: 100%; display: flex; flex-direction: column; gap: 20px;">
                                    <div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); padding: 20px;">
                                        <div style="margin-bottom: 10px;">
                                            @{
                                                string idiomaTraduccion = idiomaAnalisis;

                                                foreach (var idioma2 in Idiomas.ListadoIdiomasGenerar())
                                                {
                                                    if (idioma2.SteamAPI == idiomaAnalisis)
                                                    {
                                                        idiomaTraduccion = Idiomas.BuscarTexto(idioma, idioma2.Id, "Languages");
                                                    }
                                                }
                                            }

                                            @string.Format(Idiomas.BuscarTexto(idioma, "String3", "Reviews"), idiomaTraduccion.ToLower())
                                        </div>

                                        <div style="display: flex; align-items: center; gap: 20px;">
                                            @{
                                                int total = analisisAmpliado.CantidadPositivos + analisisAmpliado.CantidadNegativos;
                                                int porcentaje = Calculadora.SacarDescuento(analisisAmpliado.CantidadPositivos + analisisAmpliado.CantidadNegativos, analisisAmpliado.CantidadNegativos);

                                                if (analisisAmpliado.CantidadPositivos > 0 && analisisAmpliado.CantidadNegativos == 0)
                                                {
                                                    porcentaje = 99;
                                                }
                                            }

                                            <div style="display: flex; align-items: center; gap: 10px;">
                                                <div>
                                                    @if (porcentaje > 74)
                                                    {
                                                        <img src="/imagenes/analisis/positivo3.svg" style="width: 26px; height: 26px;" alt="Reviews" loading="lazy" />
                                                    }

                                                    @if (porcentaje > 49 && porcentaje < 75)
                                                    {
                                                        <img src="/imagenes/analisis/meh3.svg" style="width: 26px; height: 26px;" alt="Reviews" loading="lazy" />
                                                    }

                                                    @if (porcentaje < 50)
                                                    {
                                                        <img src="/imagenes/analisis/negativo3.svg" style="width: 26px; height: 26px;" alt="Reviews" loading="lazy" />
                                                    }
                                                </div>

                                                <div>
                                                    @porcentaje%
                                                </div>
                                            </div>

                                            <div>
                                                @string.Format(Idiomas.BuscarTexto(idioma, "String4", "Reviews"), total.ToString("N0"))
                                            </div>

                                            <div style="color: var(--deckVerificado); display: flex; align-items: center; gap: 10px;">
                                                <div style="max-width: 16px;">
                                                    <svg class="svg-boton" style="fill: var(--deckVerificado);" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                                        <path d="M313.4 32.9c26 5.2 42.9 30.5 37.7 56.5l-2.3 11.4c-5.3 26.7-15.1 52.1-28.8 75.2l144 0c26.5 0 48 21.5 48 48c0 18.5-10.5 34.6-25.9 42.6C497 275.4 504 288.9 504 304c0 23.4-16.8 42.9-38.9 47.1c4.4 7.3 6.9 15.8 6.9 24.9c0 21.3-13.9 39.4-33.1 45.6c.7 3.3 1.1 6.8 1.1 10.4c0 26.5-21.5 48-48 48l-97.5 0c-19 0-37.5-5.6-53.3-16.1l-38.5-25.7C176 420.4 160 390.4 160 358.3l0-38.3 0-48 0-24.9c0-29.2 13.3-56.7 36-75l7.4-5.9c26.5-21.2 44.6-51 51.2-84.2l2.3-11.4c5.2-26 30.5-42.9 56.5-37.7zM32 192l64 0c17.7 0 32 14.3 32 32l0 224c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32L0 224c0-17.7 14.3-32 32-32z"/>
                                                    </svg>
                                                </div>

                                                @analisisAmpliado.CantidadPositivos.ToString("N0")
                                            </div>

                                            <div style="color: var(--colorTextoPeligro); display: flex; align-items: center; gap: 10px;">
                                                <div style="max-width: 16px;">
                                                    <svg class="svg-boton" style="fill: var(--colorTextoPeligro);" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                                        <path d="M313.4 479.1c26-5.2 42.9-30.5 37.7-56.5l-2.3-11.4c-5.3-26.7-15.1-52.1-28.8-75.2l144 0c26.5 0 48-21.5 48-48c0-18.5-10.5-34.6-25.9-42.6C497 236.6 504 223.1 504 208c0-23.4-16.8-42.9-38.9-47.1c4.4-7.3 6.9-15.8 6.9-24.9c0-21.3-13.9-39.4-33.1-45.6c.7-3.3 1.1-6.8 1.1-10.4c0-26.5-21.5-48-48-48l-97.5 0c-19 0-37.5 5.6-53.3 16.1L202.7 73.8C176 91.6 160 121.6 160 153.7l0 38.3 0 48 0 24.9c0 29.2 13.3 56.7 36 75l7.4 5.9c26.5 21.2 44.6 51 51.2 84.2l2.3 11.4c5.2 26 30.5 42.9 56.5 37.7zM32 384l64 0c17.7 0 32-14.3 32-32l0-224c0-17.7-14.3-32-32-32L32 96C14.3 96 0 110.3 0 128L0 352c0 17.7 14.3 32 32 32z"/>
                                                    </svg>
                                                </div>

                                                @analisisAmpliado.CantidadNegativos.ToString("N0")
                                            </div>
                                        </div>
                                    </div>

                                    @if (analisisAmpliado != null)
                                    {
                                        if (analisisAmpliado.Contenido != null)
                                        {
                                            foreach (var analisis in analisisAmpliado.Contenido)
                                            {
                                                <a href="https://steamcommunity.com/profiles/@analisis.Autor.SteamID/recommended/@juego.IdSteam/" target="_blank" style="color: var(--colorTexto); text-decoration: none;">
                                                    <div class="boton-expandir2" style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); padding: 20px;">
                                                        <div style="display: flex; align-items: center; gap: 20px;">
                                                            @if (analisis.Positiva == true)
                                                            {
                                                                <div style="max-width: 16px;">
                                                                    <svg class="svg-boton" style="fill: var(--deckVerificado);" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                                                        <path d="M313.4 32.9c26 5.2 42.9 30.5 37.7 56.5l-2.3 11.4c-5.3 26.7-15.1 52.1-28.8 75.2l144 0c26.5 0 48 21.5 48 48c0 18.5-10.5 34.6-25.9 42.6C497 275.4 504 288.9 504 304c0 23.4-16.8 42.9-38.9 47.1c4.4 7.3 6.9 15.8 6.9 24.9c0 21.3-13.9 39.4-33.1 45.6c.7 3.3 1.1 6.8 1.1 10.4c0 26.5-21.5 48-48 48l-97.5 0c-19 0-37.5-5.6-53.3-16.1l-38.5-25.7C176 420.4 160 390.4 160 358.3l0-38.3 0-48 0-24.9c0-29.2 13.3-56.7 36-75l7.4-5.9c26.5-21.2 44.6-51 51.2-84.2l2.3-11.4c5.2-26 30.5-42.9 56.5-37.7zM32 192l64 0c17.7 0 32 14.3 32 32l0 224c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32L0 224c0-17.7 14.3-32 32-32z" />
                                                                    </svg>
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                <div style="max-width: 16px;">
                                                                    <svg class="svg-boton" style="fill: var(--colorTextoPeligro);" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                                                        <path d="M313.4 479.1c26-5.2 42.9-30.5 37.7-56.5l-2.3-11.4c-5.3-26.7-15.1-52.1-28.8-75.2l144 0c26.5 0 48-21.5 48-48c0-18.5-10.5-34.6-25.9-42.6C497 236.6 504 223.1 504 208c0-23.4-16.8-42.9-38.9-47.1c4.4-7.3 6.9-15.8 6.9-24.9c0-21.3-13.9-39.4-33.1-45.6c.7-3.3 1.1-6.8 1.1-10.4c0-26.5-21.5-48-48-48l-97.5 0c-19 0-37.5 5.6-53.3 16.1L202.7 73.8C176 91.6 160 121.6 160 153.7l0 38.3 0 48 0 24.9c0 29.2 13.3 56.7 36 75l7.4 5.9c26.5 21.2 44.6 51 51.2 84.2l2.3 11.4c5.2 26 30.5 42.9 56.5 37.7zM32 384l64 0c17.7 0 32-14.3 32-32l0-224c0-17.7-14.3-32-32-32L32 96C14.3 96 0 110.3 0 128L0 352c0 17.7 14.3 32 32 32z" />
                                                                    </svg>
                                                                </div>
                                                            }

                                                            <div>
                                                                @{
                                                                    TimeSpan tiempoSpan = TimeSpan.FromMinutes(analisis.Autor.TiempoJugadoSiempre);

                                                                    decimal tiempoD = Convert.ToDecimal(analisis.Autor.TiempoJugadoSiempre) / 60;
                                                                }

                                                                @string.Format(Idiomas.BuscarTexto(idioma, "String7", "Reviews"), tiempoD.ToString("N1"))
                                                            </div>

                                                            <div>
                                                                @{
                                                                    DateTimeOffset fecha = DateTimeOffset.FromUnixTimeSeconds(analisis.TicksCreado);
                                                                    DateTime fechaCreado = fecha.UtcDateTime;
                                                                }

                                                                @string.Format(Idiomas.BuscarTexto(idioma, "String6", "Reviews"), Calculadora.DiferenciaTiempo(fechaCreado, idioma))
                                                            </div>
                                                        </div>

                                                        <hr />

                                                        <div style="white-space: pre-line; max-width: 100%; overflow-wrap: anywhere;">
                                                            @analisis.Contenido
                                                        </div>
                                                    </div>
                                                </a>
                                            }
                                        }
                                    }
                                </div>
                            }
                            else
                            {
                                @Idiomas.BuscarTexto(idioma, "String5", "Reviews")
                            }
                        }
                    </div>
                </div>
            }

            @if (dlcs.Count > 0)
            {
                <div id="dlcs" style="padding: 30px 40px 20px 40px; background: color-mix(in srgb, var(--fondoOscuro), var(--fondoDlc) 60%); border: 1px solid var(--fondoBotonPequeño);">
                    <div>
                        <label style="font-size: 18px;">@Idiomas.BuscarTexto(idioma, "String34", "Game") (@dlcs.Count.ToString())</label>
                    </div>

                    <div style="display: flex; flex-direction: column; gap: 20px;">
                        <Virtualize Context="dlc" Items="dlcs" ItemSize="107">
                            <ItemContent>
                                <a href="/game/@dlc.Id/@Herramientas.EnlaceAdaptador.Nombre(dlc.Nombre)/" style="font-size: 16px; cursor: pointer; color: var(--colorTexto); text-decoration: none; padding: 0px;">
                                    <div class="boton-expandir" style="background: color-mix(in srgb, var(--fondoBotonPequeño), var(--fondoDlc) 30%); display: flex; align-items: center; gap: 20px;">
                                        <div>
                                            <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(dlc.Imagenes.Header_460x215)" style="max-width: 230px; max-height: 107px;" alt="@dlc.Nombre" loading="lazy" />
                                        </div>

                                        <div style="width: 100%;">
                                            <div>@dlc.Nombre</div>
                                            <div style="margin-top: 10px; font-size: 14px;">@PrecioMinimoActual(dlc, idioma)</div>
                                        </div>
                                    </div>
                                </a>
                            </ItemContent>
                        </Virtualize>
                    </div>
                </div>
            }

            @if ((Herramientas.Patreon.VerificarActivo(usuario?.PatreonLastCheck) || global::BaseDatos.Usuarios.Buscar.RolDios(usuarioId) == true) && juego.IdSteam > 0)
            {
                <div id="links" style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 30px; display: flex; flex-direction: column; gap: 10px;">
                    <div>
                        <div style="font-size: 18px; margin-bottom: 5px;">
                            @Idiomas.BuscarTexto(idioma, "String88", "Game")
                        </div>
                        <hr />
                    </div>

                    <div style="display: flex; align-items: center; gap: 10px;">
                        @if (juego.IdSteam > 0)
                        {
                            <a href="https://steamdb.info/app/@juego.IdSteam" target="_blank" class="boton-pequeño" title="SteamDB" style="width: fit-content; padding: 10px;"><img src="/imagenes/webs/steamdb.webp" style="width: 30px; height: 30px;" loading="lazy"/></a>
                            <a href="https://protondb.com/app/@juego.IdSteam" target="_blank" class="boton-pequeño" title="ProtonDB" style="width: fit-content; padding: 10px;"><img src="/imagenes/webs/protondb.webp" style="width: 30px; height: 30px;" loading="lazy" /></a>
                            <a href="https://pcgamingwiki.com/api/appid.php?appid=@juego.IdSteam" target="_blank" class="boton-pequeño" title="PCGamingWiki" style="width: fit-content; padding: 10px;"><img src="/imagenes/webs/pcgamingwiki.webp" style="width: 30px; height: 30px;" loading="lazy" /></a>
                            <a href="https://steambase.io/apps/@juego.IdSteam" target="_blank" class="boton-pequeño" title="SteamBase" style="width: fit-content; padding: 10px;"><img src="/imagenes/webs/steambase.webp" style="width: 30px; height: 30px;" loading="lazy" /></a>
                            <a href="https://isthereanydeal.com/steam/app/@juego.IdSteam" target="_blank" class="boton-pequeño" title="IsThereAnyDeal" style="width: fit-content; padding: 10px;"><img src="/imagenes/webs/isthereanydeal.webp" style="width: 30px; height: 30px;" loading="lazy" /></a>
                            <a href="https://gg.deals/steam/app/@juego.IdSteam" target="_blank" class="boton-pequeño" title="GG.deals" style="width: fit-content; padding: 10px;"><img src="/imagenes/webs/ggdeals.webp" style="width: 30px; height: 30px;" loading="lazy" /></a>
                        }

                        @if (juego.IdGog > 0)
                        {
                            <a href="https://www.gogdb.org/product/@juego.IdGog" target="_blank" class="boton-pequeño" title="GOG Database" style="width: fit-content; padding: 10px;"><img src="/imagenes/webs/gogdb.webp" style="width: 30px; height: 30px;" loading="lazy" /></a>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
}

@if (juego != null && bundleId > 0)
{
    <div class="opciones-panel">
        <div style="max-width: 1320px; margin: 20px auto; overflow-y: scroll; padding-right: 20px; scrollbar-color: var(--fondoCodigo) var(--fondoOscuro);">
            @{
                Bundles2.Bundle bundleSeleccionado = global::BaseDatos.Bundles.Buscar.UnBundle(bundleId);
            }

            <div style="margin-bottom: 20px;">
                <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 20px 30px; display: flex; align-items: center; flex-direction: row;">
                    <button @onclick="@(e => BundleCerrar(e))" class="boton-pequeño" style="width: fit-content; padding: 10px 15px;">
                        <div style="max-width: 24px; max-height: 24px;">
                            <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                <path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z" />
                            </svg>
                        </div>
                    </button>

                    <div style="display: flex; align-items: center; flex-direction: row;">
                        <a href="@Herramientas.EnlaceAcortador.Generar(bundleSeleccionado.Enlace, bundleSeleccionado.Tipo, usuarioPatreon)" style="width: auto;" target="_blank">
                            <div style="height: 60px; padding-left: 40px; padding-right: 20px;">
                                <img src="@Bundles2.BundlesCargar.DevolverBundle(bundleSeleccionado.Tipo).ImagenTienda" style="height: 100%;" alt="@bundleSeleccionado.NombreBundle" loading="lazy" />
                            </div>
                        </a>

                        <div style="padding-left: 20px; padding-right: 20px;">
                            <a href="@Herramientas.EnlaceAcortador.Generar(bundleSeleccionado.Enlace, bundleSeleccionado.Tipo, usuarioPatreon)" class="boton-pequeño" style="background-color: transparent; padding: 0px; font-size: 20px; margin-bottom: 10px;" target="_blank">
                                @bundleSeleccionado.NombreBundle
                            </a>

                            <div style="display: flex; align-items: center; gap: 20px; flex-direction: row; font-size: 14px;">
                                <a href="/bundle/@bundleSeleccionado.Id/@Herramientas.EnlaceAdaptador.Nombre(bundleSeleccionado.NombreBundle)/" class="boton-pequeño" style="padding: 0px; width: fit-content; background-color: transparent;">
                                    <div style="max-width: 20px; max-height: 20px;">
                                        <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512">
                                            <path d="M579.8 267.7c56.5-56.5 56.5-148 0-204.5c-50-50-128.8-56.5-186.3-15.4l-1.6 1.1c-14.4 10.3-17.7 30.3-7.4 44.6s30.3 17.7 44.6 7.4l1.6-1.1c32.1-22.9 76-19.3 103.8 8.6c31.5 31.5 31.5 82.5 0 114L422.3 334.8c-31.5 31.5-82.5 31.5-114 0c-27.9-27.9-31.5-71.8-8.6-103.8l1.1-1.6c10.3-14.4 6.9-34.4-7.4-44.6s-34.4-6.9-44.6 7.4l-1.1 1.6C206.5 251.2 213 330 263 380c56.5 56.5 148 56.5 204.5 0L579.8 267.7zM60.2 244.3c-56.5 56.5-56.5 148 0 204.5c50 50 128.8 56.5 186.3 15.4l1.6-1.1c14.4-10.3 17.7-30.3 7.4-44.6s-30.3-17.7-44.6-7.4l-1.6 1.1c-32.1 22.9-76 19.3-103.8-8.6C74 372 74 321 105.5 289.5L217.7 177.2c31.5-31.5 82.5-31.5 114 0c27.9 27.9 31.5 71.8 8.6 103.9l-1.1 1.6c-10.3 14.4-6.9 34.4 7.4 44.6s34.4 6.9 44.6-7.4l1.1-1.6C433.5 260.8 427 182 377 132c-56.5-56.5-148-56.5-204.5 0L60.2 244.3z" />
                                        </svg>
                                    </div>
                                </a>

                                @bundleSeleccionado.FechaEmpieza.Day.ToString()/@bundleSeleccionado.FechaEmpieza.Month.ToString()/@bundleSeleccionado.FechaEmpieza.Year.ToString() • @bundleSeleccionado.FechaTermina.Day.ToString()/@bundleSeleccionado.FechaTermina.Month.ToString()/@bundleSeleccionado.FechaTermina.Year.ToString()
                            </div>
                        </div>
                    </div>
                </div>

                @if (DateTime.Today < bundleSeleccionado.FechaTermina)
                {
                    <a href="@Herramientas.EnlaceAcortador.Generar(bundleSeleccionado.Enlace, bundleSeleccionado.Tipo, usuarioPatreon)" class="boton-pequeño" style="text-align: center; padding: 10px 15px;" target="_blank">
                        @Herramientas.Idiomas.BuscarTexto(idioma, "String3", "Bundle")
                    </a>
                }
            </div>

            <Bundle bundleId="@bundleId" idioma="@idioma" tipo="@Bundle.Tipo.Juego" usuarioId="@usuarioId"/>
        </div>		
    </div>
}

@if (juego != null && enseñarDeck == true)
{
    <div class="opciones-panel">
        <div style="max-width: 900px; background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px; overflow-y: scroll;">
            <div style="display: flex; align-items: start; flex-direction: row; gap: 40px;">
                <button @onclick="@(e => DeckCerrar(e))" class="boton-pequeño" style="width: fit-content; padding: 10px 15px;">
                    <div style="max-width: 24px; max-height: 24px;">
                        <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                            <path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z" />
                        </svg>
                    </div>
                </button>

                <div style="display: flex; flex-direction: column;">
                    <div style="display: flex; align-items: center; gap: 20px;">
                        <label style="font-size: 18px;">@Herramientas.Idiomas.BuscarTexto(idioma, "String1", "Deck")</label>

                        <div style="height: 24px;">
                            @if (juego.Deck == JuegoDeck.Verificado)
                            {
                                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.33342 11.9222L14.4945 5.76667L16.4556 7.72779L8.33342 15.8556L3.26675 10.7833L5.22786 8.82223L8.33342 11.9222Z" fill="var(--deckVerificado)"></path></svg>
                            }

                            @if (juego.Deck == JuegoDeck.Jugable)
                            {
                                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.61079 9.44444V15H11.3886V9.44444H8.61079ZM9.07372 8.05245C9.34781 8.23558 9.67004 8.33333 9.99967 8.33333C10.4417 8.33333 10.8656 8.15774 11.1782 7.84518C11.4907 7.53262 11.6663 7.10869 11.6663 6.66667C11.6663 6.33703 11.5686 6.0148 11.3855 5.74072C11.2023 5.46663 10.942 5.25301 10.6375 5.12687C10.3329 5.00072 9.99783 4.96771 9.67452 5.03202C9.35122 5.09633 9.05425 5.25507 8.82116 5.48815C8.58808 5.72124 8.42934 6.01821 8.36503 6.34152C8.30072 6.66482 8.33373 6.99993 8.45988 7.30447C8.58602 7.60902 8.79964 7.86931 9.07372 8.05245Z" fill="var(--deckJugable)"></path></svg>
                            }

                            @if (juego.Deck == JuegoDeck.NoSoportado)
                            {
                                <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M14.193 15.606a7 7 0 0 1-9.799-9.799l9.8 9.8Zm1.414-1.414a7 7 0 0 0-9.799-9.799l9.8 9.8ZM19.001 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" fill="var(--colorTexto)"></path></svg>
                            }
                        </div>
                    </div>

                    <hr />

                    @if (juego.Deck == JuegoDeck.Verificado)
                    {
                        <label>@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String2", "Deck"), juego.Nombre)</label>
                    }

                    @if (juego.Deck == JuegoDeck.Jugable)
                    {
                        <label>@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String3", "Deck"), juego.Nombre)</label>
                    }

                    @if (juego.Deck == JuegoDeck.NoSoportado)
                    {
                        <label>@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String4", "Deck"), juego.Nombre)</label>
                    }

                    @if (juego.DeckTokens != null)
                    {
                        if (juego.DeckTokens.Count > 0)
                        {
                            <hr />

                            <div style="display: flex; flex-direction: column; gap: 20px;">
                                @foreach (var token in juego.DeckTokens)
                                {
                                    if (token.Tipo == 1)
                                    {
                                        <div style="background-color: var(--fondoAlerta); padding: 8px 16px;">
                                            @{
                                                string cadenaMensaje = Idiomas.BuscarTexto(idioma, token.Mensaje, "Deck");

                                                if (string.IsNullOrEmpty(cadenaMensaje) == false)
                                                {
                                                    <label style="font-size: 15px;">@cadenaMensaje</label>
                                                }
                                                else
                                                {
                                                    global::BaseDatos.Errores.Insertar.Mensaje("Deck no encontrado", token.Mensaje, "https://store.steampowered.com/app/" + juego.IdSteam);

                                                    <label>@token.Mensaje (No Check)</label>
                                                }
                                            }
                                        </div>
                                    }
                                }

                                @foreach (var token in juego.DeckTokens)
                                {
                                    if (token.Tipo != 1)
                                    {
                                        <div style="display: flex; align-items: center; gap: 15px;">
                                            <div style="max-height: 20px; max-width: 20px;">
                                                @if (token.Tipo == 2)
                                                {
                                                    <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M14.193 15.606a7 7 0 0 1-9.799-9.799l9.8 9.8Zm1.414-1.414a7 7 0 0 0-9.799-9.799l9.8 9.8ZM19.001 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" fill="var(--colorTexto)"></path></svg>
                                                }

                                                @if (token.Tipo == 3)
                                                {
                                                    <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.61079 9.44444V15H11.3886V9.44444H8.61079ZM9.07372 8.05245C9.34781 8.23558 9.67004 8.33333 9.99967 8.33333C10.4417 8.33333 10.8656 8.15774 11.1782 7.84518C11.4907 7.53262 11.6663 7.10869 11.6663 6.66667C11.6663 6.33703 11.5686 6.0148 11.3855 5.74072C11.2023 5.46663 10.942 5.25301 10.6375 5.12687C10.3329 5.00072 9.99783 4.96771 9.67452 5.03202C9.35122 5.09633 9.05425 5.25507 8.82116 5.48815C8.58808 5.72124 8.42934 6.01821 8.36503 6.34152C8.30072 6.66482 8.33373 6.99993 8.45988 7.30447C8.58602 7.60902 8.79964 7.86931 9.07372 8.05245Z" fill="var(--deckJugable)"></path></svg>
                                                }

                                                @if (token.Tipo == 4)
                                                {
                                                    <svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.33342 11.9222L14.4945 5.76667L16.4556 7.72779L8.33342 15.8556L3.26675 10.7833L5.22786 8.82223L8.33342 11.9222Z" fill="var(--deckVerificado)"></path></svg>
                                                }
                                            </div>

                                            @{
                                                string cadenaMensaje = Idiomas.BuscarTexto(idioma, token.Mensaje, "Deck");

                                                if (string.IsNullOrEmpty(cadenaMensaje) == false)
                                                {
                                                    <label style="font-size: 15px;">@cadenaMensaje</label>
                                                }
                                                else
                                                {
                                                    global::BaseDatos.Errores.Insertar.Mensaje("Deck no encontrado", token.Mensaje, "https://store.steampowered.com/app/" + juego.IdSteam);

                                                    <label>@token.Mensaje (No Check)</label>
                                                }
                                            }
                                        </div>
                                    }
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

@if (juego != null && enseñarHistorico == true)
{
    <div class="opciones-panel">
        <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px; display: flex; align-items: start; gap: 30px; width: 100%; height: 100%; overflow-y: scroll; padding-right: 20px; scrollbar-color: var(--fondoCodigo) var(--fondoOscuro);">
            <button @onclick="@(e => HistoricoCerrar(e))" class="boton-pequeño" style="width: fit-content; padding: 10px 15px;">
                <div style="max-width: 24px; max-height: 24px;">
                    <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                        <path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z" />
                    </svg>
                </div>
            </button>

            <div style="width: 100%; height: 100%;">
                @{
                    string nombre = juego.Nombre + " (" + JuegoDRM2.DevolverDRM(drmGrafico) + ")";
                }

                <ApexChart TItem="PuntoGrafico" Title="@nombre" Options="@opcionesGrafico" >
                    <ApexPointTooltip>
                        <div style="background-color: var(--fondoOscuro); color: var(--colorTexto); padding: 10px; border: 1px solid var(--fondoCodigo)">
                            @{
                                var puntosDatos = context.DataPoint;

                                string icono = string.Empty;
                                string nombre = string.Empty;
                                List<Tiendas2.Tienda> tiendas = Tiendas2.TiendasCargar.GenerarListado();

                                foreach (var tienda in tiendas)
                                {
                                    if (tienda.Id == puntosDatos.Items.FirstOrDefault()?.Tienda)
                                    {
                                        icono = "https://pepeizqdeals.com/" + tienda.ImagenIcono;
                                        nombre = tienda.Nombre;
                                    }
                                }

                                <div style="display: flex; align-items: center; gap: 10px;">
                                    <img src="@icono" style="width: 20px; height: 20px;" loading="lazy" />
                                    <label>@nombre</label>
                                </div>
                            }

                            <div style="margin-top: 5px;">
                                @{
                                    decimal? precio = puntosDatos.Items.FirstOrDefault()?.Precio;

                                    if (precio > 0)
                                    {
                                        string precioTexto = Herramientas.Precios.Euro(precio);
                                        string fechaTexto = puntosDatos.Items.FirstOrDefault()?.DiaMes.Day.ToString() + "/" + puntosDatos.Items.FirstOrDefault()?.DiaMes.Month.ToString() + "/" + puntosDatos.Items.FirstOrDefault()?.Año.ToString();

                                        <div>
                                            <strong>@precioTexto</strong> - @fechaTexto
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </ApexPointTooltip>

                    <ChildContent>
                        @foreach (var punto in puntos)
                        {
                            List<PuntoGrafico> datos = new List<PuntoGrafico>();

                            foreach (var subpunto in punto.Puntos)
                            {
                                datos.Add(new PuntoGrafico { 
                                    DiaMes = subpunto.Fecha, 
                                    Precio = (decimal)subpunto.Precio, 
                                    Año = punto.Año.ToString(), 
                                    Tienda = subpunto.Tienda
                                });
                            }

                            <ApexPointSeries TItem="PuntoGrafico"
                            Items="datos"
                            Name="@punto.Año.ToString()"
                            SeriesType="SeriesType.Line"
                            XValue="e => e.DiaMes"
                            YValue="e => e.Precio"
                            ShowDataLabels="true"/>
                        }
                    </ChildContent>
                </ApexChart>
            </div>
        </div>
    </div>
}

@if (enseñarLogear == true)
{
    <div class="opciones-panel">
        <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px; display: flex; align-items: start; gap: 40px;">
            <button @onclick="@(e => LogearCerrar(e))" class="boton-pequeño" style="width: auto; text-align: center; font-size: 23px; padding: 10px 20px;">
                <div style="max-width: 24px; max-height: 24px;">
                    <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                        <path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z" />
                    </svg>
                </div>
            </button>

            <div style="display: flex; flex-direction: column; gap: 30px; max-width: 600px;">
                @Herramientas.Idiomas.BuscarTexto(idioma, "String63", "Game")

                <div style="display: flex; align-items: center; gap: 20px;">
                    <a href="/account/register" class="boton-pequeño" style="width: auto; text-align: center; padding: 10px 20px;">
                        @Herramientas.Idiomas.BuscarTexto(idioma, "Register", "Header")
                    </a>

                    <a href="/account/login" class="boton-pequeño" style="width: auto; text-align: center; padding: 10px 20px;">
                        @Herramientas.Idiomas.BuscarTexto(idioma, "Login", "Header")
                    </a>
                </div>
            </div>
        </div>
    </div>
}

@if (juego != null && enseñarIdiomas == true)
{
    <div class="opciones-panel">
        <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px; display: flex; align-items: start; gap: 40px;">
            <button @onclick="@(e => IdiomasCerrar(e))" class="boton-pequeño" style="width: fit-content; padding: 10px 15px;">
                <div style="max-width: 24px; max-height: 24px;">
                    <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                        <path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z" />
                    </svg>
                </div>
            </button>

            <div style="display: flex; flex-direction: column; gap: 30px; width: 600px;">
                <div>
                    @juego.Nombre (@idiomaDrmSeleccionadoTexto)
                </div>

                <div>
                    @Idiomas.BuscarTexto(idioma, "String91", "Game")
                    <hr/>

                    <div style="display: flex; align-items: center; gap: 10px; flex-wrap: wrap;">
                        @if (juego.Idiomas != null)
                        {
                            if (juego.Idiomas.Count > 0)
                            {
                                foreach (var idioma in juego.Idiomas)
                                {
                                    if (idioma.DRM == idiomaDrmSeleccionado && idioma.Audio == true)
                                    {
                                        string imagenIdioma = "/imagenes/banderas/" + Herramientas.Idiomas.EncontrarIdiomaImagen(idioma.Idioma) + ".svg";

                                        if (string.IsNullOrEmpty(Herramientas.Idiomas.EncontrarIdiomaImagen(idioma.Idioma)) == false)
                                        {
                                            <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(imagenIdioma)" style="max-width: 25px; max-height: 25px;" loading="lazy" />
                                        }
                                        else
                                        {
                                            @idioma.Idioma
                                        }
                                    }
                                }
                            }
                        }
                    </div>
                </div>

                <div>
                    @Idiomas.BuscarTexto(idioma, "String92", "Game")
                    <hr/>

                    <div style="display: flex; align-items: center; gap: 10px; flex-wrap: wrap;">
                        @if (juego.Idiomas != null)
                        {
                            if (juego.Idiomas.Count > 0)
                            {
                                foreach (var idioma in juego.Idiomas)
                                {
                                    if (idioma.DRM == idiomaDrmSeleccionado && idioma.Texto == true)
                                    {
                                        string imagenIdioma = "/imagenes/banderas/" + Herramientas.Idiomas.EncontrarIdiomaImagen(idioma.Idioma) + ".svg";

                                        if (string.IsNullOrEmpty(Herramientas.Idiomas.EncontrarIdiomaImagen(idioma.Idioma)) == false)
                                        {
                                            <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(imagenIdioma)" style="max-width: 25px; max-height: 25px;" loading="lazy" />
                                        }
                                        else
                                        {
                                            @idioma.Idioma
                                        }
                                    }
                                }
                            }
                        }
                    </div>
                </div>

                @if (string.IsNullOrEmpty(idiomaAdminContenido) == false)
                {
                    <div>
                        @idiomaAdminContenido
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {

    #nullable disable

    [Parameter]
    public string idioma { get; set; }

    [Parameter]
    public string usuarioId { get; set; }

    [Parameter]
    public bool usuarioLogeado { get; set; }

    private Usuario usuario = new Usuario();
    private bool usuarioPatreon = false;
    private Herramientas.UsuarioListadosJuegos juegosUsuario = new Herramientas.UsuarioListadosJuegos();
    private List<JuegoRazorUsuario> usuarioTieneDesea = new List<JuegoRazorUsuario>();

    private PersistingComponentStateSubscription persistingSubscription;

    [Parameter]
    public Juegos.Juego juego { get; set; }

    [Parameter]
    public string userAgent { get; set; }

    private List<Juegos.Juego> dlcs = new List<Juegos.Juego>();
    private List<Juegos.JuegoDRM> drmsGeforceNOW = new List<JuegoDRM>();
    private List<global::BaseDatos.Curators.CuratorFicha> curators = new List<global::BaseDatos.Curators.CuratorFicha>();

    private ApexChartOptions<PuntoGrafico> opcionesGrafico;
    private JuegoDRM drmGrafico = JuegoDRM.NoEspecificado;

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (ApplicationState.TryTakeFromJson<List<JuegoRazorUsuario>>(nameof(usuarioTieneDesea), out var datosRestaurados) == true)
        {
            usuarioTieneDesea = datosRestaurados;
        }

        if (string.IsNullOrEmpty(usuarioId) == false)
        {
            usuario = await UserManager.FindByIdAsync(usuarioId);

            if (usuarioLogeado == true)
            {
                usuarioPatreon = Herramientas.Patreon.VerificarActivo(usuario.PatreonLastCheck);
                juegosUsuario = Herramientas.UsuarioJuegos.Cargar(usuario);

                if (usuarioTieneDesea.Count == 0)
                {
                    usuarioTieneDesea = new List<JuegoRazorUsuario>();

                    foreach (DRM drm in JuegoDRM2.GenerarListado())
                    {
                        if (drm.Id != JuegoDRM.NoEspecificado)
                        {
                            if (VerificarMostrarDRM(idioma, drm.Id, juego) == true)
                            {
                                bool usuarioTieneDRM = false;

                                if (drm.Id == JuegoDRM.Steam && juego.IdSteam > 0)
                                {
                                    if (string.IsNullOrEmpty(usuario.SteamGames) == false)
                                    {
                                        List<string> juegosSteam = Herramientas.Listados.Generar(usuario.SteamGames);

                                        if (juegosSteam.Count > 0)
                                        {
                                            if (juego.Tipo == JuegoTipo.Game && drm.Id == JuegoDRM.Steam)
                                            {
                                                foreach (var juegoUsuario in juegosSteam)
                                                {
                                                    if (juegoUsuario == juego.IdSteam.ToString())
                                                    {
                                                        JuegoRazorUsuario nuevoJuegoUsuario = new JuegoRazorUsuario();
                                                        nuevoJuegoUsuario.DRM = JuegoDRM.Steam;
                                                        nuevoJuegoUsuario.Tiene = true;
                                                        usuarioTieneDesea.Add(nuevoJuegoUsuario);
                                                        usuarioTieneDRM = true;

                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (drm.Id == JuegoDRM.GOG && juego.IdGog > 0)
                                {
                                    if (string.IsNullOrEmpty(usuario.GogGames) == false)
                                    {
                                        List<string> juegosGog = Herramientas.Listados.Generar(usuario.GogGames);

                                        if (juegosGog.Count > 0)
                                        {
                                            if (juego.Tipo == JuegoTipo.Game && drm.Id == JuegoDRM.GOG)
                                            {
                                                foreach (var juegoUsuario in juegosGog)
                                                {
                                                    if (juegoUsuario == juego.IdGog.ToString())
                                                    {
                                                        JuegoRazorUsuario nuevoJuegoUsuario = new JuegoRazorUsuario();
                                                        nuevoJuegoUsuario.DRM = JuegoDRM.GOG;
                                                        nuevoJuegoUsuario.Tiene = true;
                                                        usuarioTieneDesea.Add(nuevoJuegoUsuario);
                                                        usuarioTieneDRM = true;

                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (drm.Id == JuegoDRM.Amazon && string.IsNullOrEmpty(juego.IdAmazon) == false)
                                {
                                    if (string.IsNullOrEmpty(usuario.AmazonGames) == false)
                                    {
                                        List<string> juegosAmazon = Herramientas.Listados.Generar(usuario.AmazonGames);

                                        if (juegosAmazon.Count > 0)
                                        {
                                            if (juego.Tipo == JuegoTipo.Game && drm.Id == JuegoDRM.Amazon)
                                            {
                                                foreach (var juegoUsuario in juegosAmazon)
                                                {
                                                    if (juegoUsuario == juego.IdAmazon.ToString())
                                                    {
                                                        JuegoRazorUsuario nuevoJuegoUsuario = new JuegoRazorUsuario();
                                                        nuevoJuegoUsuario.DRM = JuegoDRM.Amazon;
                                                        nuevoJuegoUsuario.Tiene = true;
                                                        usuarioTieneDesea.Add(nuevoJuegoUsuario);
                                                        usuarioTieneDRM = true;

                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (drm.Id == JuegoDRM.Epic && string.IsNullOrEmpty(juego.ExeEpic) == false)
                                {
                                    if (string.IsNullOrEmpty(usuario.EpicGames) == false)
                                    {
                                        List<string> juegosEpic = Herramientas.Listados.Generar(usuario.EpicGames);

                                        if (juegosEpic.Count > 0)
                                        {
                                            if (juego.Tipo == JuegoTipo.Game && drm.Id == JuegoDRM.Epic)
                                            {
                                                foreach (var juegoUsuario in juegosEpic)
                                                {
                                                    if (juegoUsuario == juego.ExeEpic)
                                                    {
                                                        JuegoRazorUsuario nuevoJuegoUsuario = new JuegoRazorUsuario();
                                                        nuevoJuegoUsuario.DRM = JuegoDRM.Epic;
                                                        nuevoJuegoUsuario.Tiene = true;
                                                        usuarioTieneDesea.Add(nuevoJuegoUsuario);
                                                        usuarioTieneDRM = true;

                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (drm.Id == JuegoDRM.Ubisoft && string.IsNullOrEmpty(juego.ExeUbisoft) == false)
                                {
                                    if (string.IsNullOrEmpty(usuario.UbisoftGames) == false)
                                    {
                                        List<string> juegosUbisoft = Herramientas.Listados.Generar(usuario.UbisoftGames);

                                        if (juegosUbisoft.Count > 0)
                                        {
                                            if (juego.Tipo == JuegoTipo.Game && drm.Id == JuegoDRM.Ubisoft)
                                            {
                                                foreach (var juegoUsuario in juegosUbisoft)
                                                {
                                                    if (juegoUsuario == juego.ExeUbisoft)
                                                    {
                                                        JuegoRazorUsuario nuevoJuegoUsuario = new JuegoRazorUsuario();
                                                        nuevoJuegoUsuario.DRM = JuegoDRM.Ubisoft;
                                                        nuevoJuegoUsuario.Tiene = true;
                                                        usuarioTieneDesea.Add(nuevoJuegoUsuario);
                                                        usuarioTieneDRM = true;

                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (drm.Id == JuegoDRM.EA && string.IsNullOrEmpty(juego.ExeEA) == false)
                                {
                                    if (string.IsNullOrEmpty(usuario.EaGames) == false)
                                    {
                                        List<string> juegosEa = Herramientas.Listados.Generar(usuario.EaGames);

                                        if (juegosEa.Count > 0)
                                        {
                                            if (juego.Tipo == JuegoTipo.Game && drm.Id == JuegoDRM.EA)
                                            {
                                                foreach (var juegoUsuario in juegosEa)
                                                {
                                                    if (juegoUsuario == juego.ExeEA)
                                                    {
                                                        JuegoRazorUsuario nuevoJuegoUsuario = new JuegoRazorUsuario();
                                                        nuevoJuegoUsuario.DRM = JuegoDRM.EA;
                                                        nuevoJuegoUsuario.Tiene = true;
                                                        usuarioTieneDesea.Add(nuevoJuegoUsuario);
                                                        usuarioTieneDRM = true;

                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (usuarioTieneDRM == false)
                                {
                                    bool usuarioDeseaDRM = false;

                                    if (drm.Id == JuegoDRM.Steam)
                                    {
                                        if (string.IsNullOrEmpty(usuario.SteamWishlist) == false)
                                        {
                                            List<string> deseadosSteam = Listados.Generar(usuario.SteamWishlist);

                                            if (deseadosSteam.Count > 0)
                                            {
                                                foreach (var deseado in deseadosSteam)
                                                {
                                                    if (juego.IdSteam > 0)
                                                    {
                                                        if (juego.IdSteam == int.Parse(deseado) && drm.Id == Juegos.JuegoDRM.Steam)
                                                        {
                                                            JuegoRazorUsuario nuevoDeseadoUsuario = new JuegoRazorUsuario();
                                                            nuevoDeseadoUsuario.DRM = JuegoDRM.Steam;
                                                            nuevoDeseadoUsuario.Desea = true;
                                                            nuevoDeseadoUsuario.ImportadoDesea = true;
                                                            usuarioTieneDesea.Add(nuevoDeseadoUsuario);

                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (drm.Id == JuegoDRM.GOG)
                                    {
                                        if (string.IsNullOrEmpty(usuario.GogWishlist) == false)
                                        {
                                            List<string> deseadosGog = Listados.Generar(usuario.GogWishlist);

                                            if (deseadosGog.Count > 0)
                                            {
                                                foreach (var deseado in deseadosGog)
                                                {
                                                    if (juego.IdGog > 0)
                                                    {
                                                        if (juego.IdGog == int.Parse(deseado) && drm.Id == Juegos.JuegoDRM.GOG)
                                                        {
                                                            JuegoRazorUsuario nuevoDeseadoUsuario = new JuegoRazorUsuario();
                                                            nuevoDeseadoUsuario.DRM = JuegoDRM.GOG;
                                                            nuevoDeseadoUsuario.Desea = true;
                                                            nuevoDeseadoUsuario.ImportadoDesea = true;
                                                            usuarioTieneDesea.Add(nuevoDeseadoUsuario);

                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (usuarioDeseaDRM == false)
                                    {
                                        bool deseadoWeb = Herramientas.Deseados.ComprobarSiEsta(usuario?.Wishlist, juego, drm.Id);

                                        if (deseadoWeb == true)
                                        {
                                            JuegoRazorUsuario nuevoDeseadoUsuario = new JuegoRazorUsuario();
                                            nuevoDeseadoUsuario.DRM = drm.Id;
                                            nuevoDeseadoUsuario.Desea = true;
                                            usuarioTieneDesea.Add(nuevoDeseadoUsuario);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }     

        if (juego != null)
        {
            if (juego.Media != null)
            {
                if (string.IsNullOrEmpty(juego.Media.Video) == false)
                {
                    bool cargar = true;

                    if (usuarioLogeado == false)
                    {
                        if (string.IsNullOrEmpty(juego.MayorEdad) == false)
                        {
                            if (juego.MayorEdad.ToLower() == "true")
                            {
                                cargar = false;
                            }
                        }
                    }

                    if (cargar == true)
                    {
                        mediaMostrar = juego.Media.Video;
                        mediaMostrar = mediaMostrar.Replace("http://", "https://");
                        mediaMostrarPosicion = 99999;
                    }
                }

                if (mediaMostrarPosicion == 0)
                {
                    if (juego.Media.Capturas != null)
                    {
                        if (juego.Media.Capturas.Count > 0)
                        {
                            mediaMostrar = juego.Media.Capturas[0];
                            mediaMostrarPosicion = 1;
                        }
                    }
                }
            }	
        }
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(usuarioTieneDesea), usuarioTieneDesea);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool primerRender)
    {
        if (primerRender == true)
        {
            if (juego != null)
            {	
                await JavaScript.InvokeVoidAsync("ChangeUrl", "/game/" + juego.Id.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(juego.Nombre) + "/");

                dlcs = global::BaseDatos.Juegos.Buscar.DLCs(juego.Id.ToString());

                if (juego.Tipo == JuegoTipo.Game)
                {
                    drmsGeforceNOW = global::BaseDatos.Streaming.Buscar.GeforceNOWDRMs(juego.Id);
                }

                if (juego.IdSteam > 0)
                {
                    #region API

                    bool actualizarDatosAPI = false;

                    if (juego.FechaSteamAPIComprobacion + TimeSpan.FromDays(60) < DateTime.Now)
                    {
                        actualizarDatosAPI = true;
                    }

                    if (juego.Categorias == null && juego.Generos == null)
                    {
                        actualizarDatosAPI = true;

                        if (juego.Tipo == JuegoTipo.Music)
                        {
                            actualizarDatosAPI = false;
                        }
                    }

                    if (actualizarDatosAPI == true)
                    {
                        global::Juegos.Juego nuevoJuego = await APIs.Steam.Juego.CargarDatosJuego(juego.IdSteam.ToString());

                        if (nuevoJuego != null)
                        {
                            global::BaseDatos.Juegos.Actualizar.Media(nuevoJuego, juego);
                        }
                    }

                    #endregion

                    if (juego.Tipo == JuegoTipo.Game)
                    {
                        #region Cantidad Jugadores

                        bool actualizarCantidadJugadores = false;

                        if (juego.CantidadJugadores == null)
                        {
                            actualizarCantidadJugadores = true;
                        }
                        else
                        {
                            if (juego.CantidadJugadores.Fecha.AddMinutes(5) < DateTime.Now)
                            {
                                actualizarCantidadJugadores = true;
                            }
                        }

                        if (actualizarCantidadJugadores == true)
                        {
                            JuegoCantidadJugadoresSteam cantidadNueva = new JuegoCantidadJugadoresSteam();
                            cantidadNueva.Cantidad = await APIs.Steam.Juego.CargarCantidadJugadores(juego.IdSteam.ToString());
                            cantidadNueva.Fecha = DateTime.Now;

                            juego.CantidadJugadores = cantidadNueva;

                            global::BaseDatos.Juegos.Actualizar.CantidadJugadoresSteam(juego);
                        }

                        #endregion

                        #region Deck API

                        bool actualizarDeckAPI = false;

                        if (juego.DeckComprobacion == null)
                        {
                            actualizarDeckAPI = true;
                        }
                        else
                        {
                            if (juego.DeckComprobacion + TimeSpan.FromDays(180) < DateTime.Now)
                            {
                                actualizarDeckAPI = true;
                            }
                        }

                        if (juego.DeckTokens == null)
                        {
                            actualizarDeckAPI = true;
                        }

                        if (actualizarDeckAPI == true)
                        {
                            APIs.Steam.SteamDeckAPI deckAPI = await APIs.Steam.Juego.CargarDatosDeck(juego.IdSteam);
                            bool vacio = true;

                            if (deckAPI != null)
                            {
                                if (deckAPI.Datos != null)
                                {
                                    if (deckAPI.Datos.Resultado != null)
                                    {
                                        juego.Deck = (JuegoDeck)int.Parse(deckAPI.Datos.Resultado.ToString());
                                        juego.DeckComprobacion = DateTime.Now;

                                        if (deckAPI.Datos.Tokens != null)
                                        {
                                            if (deckAPI.Datos.Tokens.Count > 0)
                                            {
                                                List<JuegoDeckToken> tokens = new List<JuegoDeckToken>();

                                                foreach (var token in deckAPI.Datos.Tokens)
                                                {
                                                    if (string.IsNullOrEmpty(token.Token) == false)
                                                    {
                                                        JuegoDeckToken nuevoToken = new JuegoDeckToken();
                                                        nuevoToken.Tipo = int.Parse(token.Tipo.ToString());
                                                        nuevoToken.Mensaje = token.Token;

                                                        tokens.Add(nuevoToken);
                                                    }
                                                }

                                                juego.DeckTokens = tokens;
                                            }
                                        }

                                        vacio = false;
                                        global::BaseDatos.Juegos.Actualizar.Deck(juego);
                                    }
                                }
                            }

                            if (vacio == true)
                            {
                                juego.DeckComprobacion = DateTime.Now;
                                global::BaseDatos.Juegos.Actualizar.DeckVacio(juego);
                            }
                        }

                        #endregion
                    }

                    #region Reseñas

                    if (Herramientas.RobotsUserAgents.EsBotVerificado(userAgent) == false)
                    {
                        string idiomaSteam = "english";

                        if (string.IsNullOrEmpty(idioma) == false)
                        {
                            foreach (var idioma2 in Idiomas.ListadoIdiomasGenerar())
                            {
                                if (idioma2.SteamReseñas == true)
                                {
                                    if (idioma2.Id.ToLower() == idioma.ToLower())
                                    {
                                        idiomaSteam = idioma2.SteamAPI;
                                    }

                                    foreach (var codigo in idioma2.Codigos)
                                    {
                                        if (codigo.ToLower() == idioma.ToLower())
                                        {
                                            idiomaSteam = idioma2.SteamAPI;
                                        }
                                    }
                                }
                            }
                        }

                        idiomaAnalisis = idiomaSteam;

                        if (global::BaseDatos.Analisis.Buscar.DebeModificarse(juego.Id, idiomaSteam) == true)
                        {
                            APIs.Steam.SteamAnalisisAPI analisis = await APIs.Steam.Juego.CargarDatosAnalisis(juego.IdSteam, idiomaSteam);

                            if (analisis != null)
                            {
                                if (analisis.Analisis != null)
                                {
                                    global::BaseDatos.Analisis.Insertar.Ejecutar(juego.Id, analisis.Sumario.TotalPositivas, analisis.Sumario.TotalNegativas, idiomaSteam, JsonSerializer.Serialize(analisis.Analisis));

                                    analisisAmpliado = global::BaseDatos.Analisis.Buscar.Cargar(juego.Id, idiomaSteam);
                                }
                            }
                        }
                        else
                        {
                            analisisAmpliado = global::BaseDatos.Analisis.Buscar.Cargar(juego.Id, idiomaSteam);
                        }
                    }

                    #endregion
                }

                if (juego.IdGog > 0)
                {
                    if (juego.GalaxyGOG == null)
                    {
                        juego.GalaxyGOG = await APIs.GOG.Juego.GalaxyDatos(juego.IdGog.ToString());
                        juego.Idiomas = await APIs.GOG.Juego.GalaxyIdiomas(juego.IdGog.ToString(), juego.Idiomas);

                        global::BaseDatos.Juegos.Actualizar.GalaxyGOG(juego);
                    }
                    else
                    {
                        if (juego.GalaxyGOG.Fecha + TimeSpan.FromDays(120) < DateTime.Now)
                        {
                            juego.GalaxyGOG = await APIs.GOG.Juego.GalaxyDatos(juego.IdGog.ToString());
                            juego.Idiomas = await APIs.GOG.Juego.GalaxyIdiomas(juego.IdGog.ToString(), juego.Idiomas);

                            global::BaseDatos.Juegos.Actualizar.GalaxyGOG(juego);
                        }
                    }
                }

                if (string.IsNullOrEmpty(juego.SlugEpic) == false)
                {
                    if (juego.EpicGames == null)
                    {
                        juego.EpicGames = await APIs.EpicGames.Juego.EpicGamesDatos(juego.SlugEpic);
                        juego.Idiomas = await APIs.EpicGames.Juego.EpicGamesIdiomas(juego.SlugEpic, juego.Idiomas);

                        global::BaseDatos.Juegos.Actualizar.EpicGames(juego);
                    }
                    else
                    {
                        if (juego.EpicGames.Fecha + TimeSpan.FromDays(240) < DateTime.Now)
                        {
                            juego.EpicGames = await APIs.EpicGames.Juego.EpicGamesDatos(juego.SlugEpic);
                            juego.Idiomas = await APIs.EpicGames.Juego.EpicGamesIdiomas(juego.SlugEpic, juego.Idiomas);

                            global::BaseDatos.Juegos.Actualizar.EpicGames(juego);
                        }
                    }
                }

                if (string.IsNullOrEmpty(juego.IdXbox) == false)
                {
                    if (juego.Xbox == null)
                    {
                        juego.Xbox = await APIs.Xbox.Juego.XboxDatos(juego.IdXbox);
                        juego.Idiomas = await APIs.Xbox.Juego.XboxIdiomas(juego.IdXbox, juego.Idiomas);

                        global::BaseDatos.Juegos.Actualizar.Xbox(juego);
                    }
                    else
                    {
                        if (juego.Xbox.Fecha + TimeSpan.FromDays(120) < DateTime.Now)
                        {
                            juego.Xbox = await APIs.Xbox.Juego.XboxDatos(juego.IdXbox);
                            juego.Idiomas = await APIs.Xbox.Juego.XboxIdiomas(juego.IdXbox, juego.Idiomas);

                            global::BaseDatos.Juegos.Actualizar.Xbox(juego);
                        }
                    }
                }

                if (juego.CuratorsSteam != null)
                {
                    if (juego.CuratorsSteam.Count > 0)
                    {
                        foreach (var curator in juego.CuratorsSteam)
                        {
                            if (string.IsNullOrEmpty(curator) == false)
                            {
                                global::BaseDatos.Curators.Curator curator2 = global::BaseDatos.Curators.Buscar.Uno(int.Parse(curator));

                                if (curator2 == null)
                                {
                                    global::BaseDatos.Curators.Insertar.Ejecutar(await APIs.Steam.Curator.Extraer(curator));
                                }
                                else
                                {
                                    if (curator2.Fecha == null)
                                    {
                                        global::BaseDatos.Curators.Actualizar.Ejecutar(curator2);
                                    }
                                    else
                                    {
                                        if (curator2.Fecha?.Subtract(DateTime.Now) > TimeSpan.FromDays(90))
                                        {
                                            global::BaseDatos.Curators.Actualizar.Ejecutar(curator2);
                                        }
                                    }

                                    global::BaseDatos.Curators.CuratorFicha ficha = new global::BaseDatos.Curators.CuratorFicha();
                                    ficha.Curator = curator2;
                                    ficha.Posicion = 0;

                                    curators.Add(ficha);
                                }
                            }
                        }
                    }
                }

                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
        }
    }

    public static string LimpiarImagenJuego(string enlace)
    {
        if (enlace.Contains("/header_alt_") == true)
        {
            int int1 = enlace.IndexOf("/header_alt_");
            enlace = enlace.Remove(int1, enlace.Length - int1);

            enlace = enlace + "/header.jpg";
        }

        return enlace;
    }

    public bool VerificarMostrarDRM(string idioma, JuegoDRM drm, global::Juegos.Juego juego)
    {
        bool mostrar = false;

        if (CogerMinimoDRM(idioma, drm, juego.PrecioMinimosHistoricos, juego.PrecioActualesTiendas, juego.Historicos) != null)
        {
            mostrar = true;
        }
        else if (BundlesComprobar(juego.Bundles, drm) != null)
        {
            mostrar = true;
        }
        else if (GratisComprobar(juego.Gratis, drm) != null)
        {
            mostrar = true;
        }
        else if (SuscripcionesComprobar(juego.Suscripciones, drm) != null)
        {
            mostrar = true;
        }

        return mostrar;
    }

    public static string CogerMinimoDRM(string idioma, JuegoDRM drm, List<JuegoPrecio> historicos, List<JuegoPrecio> actuales, List<JuegoHistorico> listaHistoricos)
    {
        string drmPreparado = null;

        List<JuegoPrecio> historicosOrdenados = new List<JuegoPrecio>();

        if (historicos != null)
        {
            if (historicos.Count > 0)
            {
                foreach (JuegoPrecio historico in historicos)
                {
                    if (historico.DRM == drm)
                    {
                        historicosOrdenados.Add(historico);
                    }
                }
            }
        }

        if (historicosOrdenados.Count == 0)
        {
            if (actuales != null)
            {
                if (actuales.Count > 0)
                {
                    historicosOrdenados = OrdenarPrecios(actuales, drm);
                }
            }			
        }

        if (historicosOrdenados.Count > 0)
        {
            if (historicosOrdenados[0] != null)
            {
                List<Tienda> tiendas = TiendasCargar.GenerarListado();
                string tiendaFinal = string.Empty;

                foreach (var tienda in tiendas)
                {
                    if (tienda.Id == historicosOrdenados[0].Tienda)
                    {
                        tiendaFinal = tienda.Nombre;
                    }
                }

                TimeSpan tiempo = TimeSpan.FromHours(11);

                if (historicosOrdenados[0].Tienda == APIs.Humble.Tienda.Generar().Id || historicosOrdenados[0].Tienda == APIs.Humble.Tienda.GenerarChoice().Id)
                {
                    tiempo = TimeSpan.FromHours(24);
                }

                if (historicosOrdenados[0].FechaActualizacion + tiempo > DateTime.Now && historicosOrdenados[0].Descuento > 0)
                {
                    drmPreparado = drmPreparado + " (" + string.Format(Idiomas.BuscarTexto(idioma, "String11", "Game"), tiendaFinal) + ")";
                }
                else
                {
                    string mensaje = string.Empty;

                    if (listaHistoricos != null)
                    {
                        if (listaHistoricos.Count > 0)
                        {
                            bool generarMensaje = false;
                            JuegoHistorico ultimo = new JuegoHistorico();
                            ultimo.Fecha = DateTime.Now - TimeSpan.FromDays(900);

                            foreach (var historico in listaHistoricos)
                            {
                                if (historico.DRM == drm)
                                {
                                    if (ultimo.Fecha < historico.Fecha)
                                    {
                                        ultimo = historico;
                                        generarMensaje = true;
                                    }
                                }
                            }

                            if (generarMensaje == true)
                            {
                                mensaje = " (" + string.Format(Idiomas.BuscarTexto(idioma, "String13", "Game"), Calculadora.DiferenciaTiempo(ultimo.Fecha, idioma), tiendaFinal) + ")";
                            }
                        }
                    }                 

                    if (string.IsNullOrEmpty(mensaje) == true)
                    {
                        mensaje = " (" + string.Format(Idiomas.BuscarTexto(idioma, "String13", "Game"), Calculadora.DiferenciaTiempo(historicosOrdenados[0].FechaDetectado, idioma), tiendaFinal) + ")";
                    }

                    drmPreparado = drmPreparado + mensaje;
                }

                if (listaHistoricos != null)
                {
                    if (listaHistoricos.Count > 0)
                    {
                        bool tieneDRM = false;

                        foreach (var historico in listaHistoricos)
                        {
                            if (historico.DRM == drm)
                            {
                                tieneDRM = true;
                                break;
                            }
                        }

                        if (tieneDRM == true)
                        {
                            List<JuegoHistorico> mismoPrecio = new List<JuegoHistorico>();

                            foreach (var historico in listaHistoricos)
                            {
                                if (historico.DRM == drm && historico.Precio == historicosOrdenados[0].Precio)
                                {
                                    bool sePuedeAñadir = true;

                                    if (mismoPrecio.Count > 0)
                                    {
                                        foreach (var mismo in mismoPrecio)
                                        {
                                            if (historico.Fecha.Subtract(mismo.Fecha) < TimeSpan.FromDays(22))
                                            {
                                                sePuedeAñadir = false;
                                            }
                                        }
                                    }

                                    if (sePuedeAñadir == true)
                                    {
                                        mismoPrecio.Add(historico);
                                    }
                                }
                            }

                            if (mismoPrecio.Count > 0)
                            {
                                if (mismoPrecio.Count == 1)
                                {
                                    drmPreparado = drmPreparado + " (" + string.Format(Idiomas.BuscarTexto(idioma, "String85", "Game"), mismoPrecio.Count.ToString()) + ")";
                                }
                                else
                                {
                                    drmPreparado = drmPreparado + " (" + string.Format(Idiomas.BuscarTexto(idioma, "String86", "Game"), mismoPrecio.Count.ToString()) + ")";
                                }
                            }
                        }
                    }
                }
            }		
        }

        return drmPreparado;
    }

    public static string PrepararPrecio(List<JuegoPrecio> precios, JuegoDRM drm, bool historico)
    {
        if (precios != null)
        {
            if (precios.Count > 0)
            {
                foreach (var precio in precios)
                {
                    if (precio.DRM == drm)
                    {
                        return PrepararPrecio(precio, historico);
                    }
                }
            }
        }

        return null;
    }

    public static string PrepararPrecio(JuegoPrecio precio, bool historico)
    {
        if (historico == true)
        {
            return Herramientas.Precios.Euro(precio.Precio);
        }
        else
        {
            if (precio.Moneda != JuegoMoneda.Euro)
            {
                return Herramientas.Precios.Euro(precio.PrecioCambiado);
            }
            else
            {
                return Herramientas.Precios.Euro(precio.Precio);
            }
        }
    }

    public static List<JuegoPrecio> OrdenarPrecios(List<JuegoPrecio> precios, JuegoDRM drm)
    {
        List<JuegoPrecio> preciosOrdenados = new List<JuegoPrecio>();

        if (precios != null)
        {
            if (precios.Count > 0)
            {
                foreach (JuegoPrecio precio in precios)
                {
                    if (precio.DRM == drm && precio.Descuento > 0)
                    {
                        if (Herramientas.OfertaActiva.Verificar(precio) == true)
                        {
                            JuegoPrecio nuevoPrecio = precio;

                            if (nuevoPrecio != null)
                            {
                                if (nuevoPrecio.Moneda != JuegoMoneda.Euro)
                                {
                                    nuevoPrecio.PrecioCambiado = Divisas.Cambio(nuevoPrecio.Precio, nuevoPrecio.Moneda);
                                }
                            }

                            bool verificacionFinal = true;

                            if (preciosOrdenados.Count > 0)
                            {
                                foreach (var ordenado in preciosOrdenados)
                                {
                                    if (ordenado.Enlace == nuevoPrecio.Enlace && ordenado.Tienda == nuevoPrecio.Tienda && ordenado.DRM == nuevoPrecio.DRM)
                                    {
                                        verificacionFinal = false;
                                        break;
                                    }
                                }
                            }

                            if (drm == JuegoDRM.NoEspecificado)
                            {
                                verificacionFinal = false;
                            }

                            if (verificacionFinal == true)
                            {
                                preciosOrdenados.Add(nuevoPrecio);
                            }
                        }
                    }
                }
            }
        }

        if (preciosOrdenados.Count > 0)
        {
            preciosOrdenados.Sort(delegate (JuegoPrecio p1, JuegoPrecio p2)
            {
                decimal precio1 = 0;

                if (p1.Moneda != JuegoMoneda.Euro)
                {
                    precio1 = p1.PrecioCambiado;
                }
                else
                {
                    precio1 = p1.Precio;
                }

                decimal precio2 = 0;

                if (p2.Moneda != JuegoMoneda.Euro)
                {
                    precio2 = p2.PrecioCambiado;
                }
                else
                {
                    precio2 = p2.Precio;
                }

                if (precio1 == precio2)
                {
                    return p2.FechaDetectado.CompareTo(p1.FechaDetectado);
                }
                else
                {
                    return precio1.CompareTo(precio2);
                }
            });
        }

        return preciosOrdenados;
    }

    public static string SacarImagenTienda(string codigo)
    {
        string imagen = string.Empty;

        List<Tienda> tiendas = TiendasCargar.GenerarListado();

        foreach (var tienda in tiendas)
        {
            if (tienda.Id == codigo)
            {
                imagen = tienda.Imagen300x80;
            }
        }

        return imagen;
    }

    private static string ComprobarEdicion(string juego, string oferta)
    {
        if (string.IsNullOrEmpty(oferta) == false)
        {
            if (Buscador.LimpiarNombre(juego) != Buscador.LimpiarNombre(oferta))
            {
                string nuevoTexto = oferta.Replace(juego, null);
                nuevoTexto = nuevoTexto.Trim();

                int i = 0;
                while (i < 10)
                {
                    if (nuevoTexto.Contains("-") == true)
                    {
                        int int1 = nuevoTexto.IndexOf("-");

                        if (int1 == 0)
                        {
                            nuevoTexto = nuevoTexto.Remove(0, 1);
                            nuevoTexto = nuevoTexto.Trim();
                        }
                    }
                    i += 1;
                }

                i = 0;
                while (i < 10)
                {
                    if (nuevoTexto.Contains(":") == true)
                    {
                        int int1 = nuevoTexto.IndexOf(":");

                        if (int1 == 0)
                        {
                            nuevoTexto = nuevoTexto.Remove(0, 1);
                            nuevoTexto = nuevoTexto.Trim();
                        }
                    }
                    i += 1;
                }

                if (nuevoTexto.Contains("??") == true)
                {
                    nuevoTexto = nuevoTexto.Replace("/", null);
                    nuevoTexto = nuevoTexto.Replace("?", null);
                }

                nuevoTexto = nuevoTexto.Replace("(Steam)", null);
                nuevoTexto = nuevoTexto.Replace("(STEAM)", null);
                nuevoTexto = nuevoTexto.Replace("(Epic)", null);
                nuevoTexto = nuevoTexto.Replace("(EPIC)", null);
                nuevoTexto = nuevoTexto.Replace("(GOG)", null);
                nuevoTexto = nuevoTexto.Replace("(Giants)", null);
                nuevoTexto = nuevoTexto.Replace("(Microsoft Store)", null);
                nuevoTexto = nuevoTexto.Replace("(ROW)", null);
                nuevoTexto = nuevoTexto.Replace("(DLC)", null);

                if (nuevoTexto.Length > 1)
                {
                    nuevoTexto = Buscador.LimpiarNombre(nuevoTexto, true);
                    nuevoTexto = nuevoTexto.Trim();
                }

                if (Buscador.LimpiarNombre(juego, true) != nuevoTexto)
                {
                    string ofertaLimpiada = Buscador.LimpiarNombre(oferta, false);
                    string juegoLimpiado = Buscador.LimpiarNombre(juego, false);

                    if (ofertaLimpiada.Contains(juegoLimpiado) == true)
                    {
                        ofertaLimpiada = ofertaLimpiada.Replace(juegoLimpiado, null);
                        ofertaLimpiada = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(ofertaLimpiada);

                        nuevoTexto = ofertaLimpiada;

                        nuevoTexto = nuevoTexto.Replace("Steam", null);
                        nuevoTexto = nuevoTexto.Replace("Epic", null);
                        nuevoTexto = nuevoTexto.Replace("Gog", null);
                        nuevoTexto = nuevoTexto.Replace("Giants", null);
                        nuevoTexto = nuevoTexto.Replace("Microsoft Store", null);
                        nuevoTexto = nuevoTexto.Replace("Row", null);
                        nuevoTexto = nuevoTexto.Replace("Mac", null);
                    }
                    else
                    {
                        nuevoTexto = oferta;
                    }

                    if (nuevoTexto.Length > 4)
                    {
                        return nuevoTexto;
                    }
                }				
            }
        }

        return null;
    }

    #region Deseados

    private async void CambiarEstadoDeseado(MouseEventArgs e, bool estado, JuegoDRM drm)
    {
        usuarioTieneDesea = await Herramientas.Deseados.CambiarEstado(usuarioTieneDesea, UserManager, usuario, juego, estado, drm);

        await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Bundles

    public string BundlesComprobar(List<JuegoBundle> listaBundles, JuegoDRM drm)
    {
        if (listaBundles != null)
        {
            if (listaBundles.Count > 0)
            {
                foreach (var bundle in listaBundles)
                {
                    if (drm == bundle.DRM)
                    {
                        return "bundle";
                    }
                }
            }
        }

        return null;
    }

    public string BundlesPreparar(JuegoDRM drm, string idioma)
    {
        if (BundlesDisponibles(juego.Bundles, drm) != null)
        {
            List<JuegoBundle> bundlesDisponibles = BundlesDisponibles(juego.Bundles, drm);

            if (bundlesDisponibles.Count > 0)
            {
                if (bundlesDisponibles.Count == 1)
                {
                    return string.Format(Idiomas.BuscarTexto(idioma, "String53", "Game"), global::BaseDatos.Bundles.Buscar.UnBundle(bundlesDisponibles[0].BundleId).NombreBundle, Bundles2.BundlesCargar.DevolverBundle(bundlesDisponibles[0].Tipo).NombreTienda);
                }
                else if (bundlesDisponibles.Count > 1)
                {
                    return string.Format(Idiomas.BuscarTexto(idioma, "String54", "Game"), bundlesDisponibles.Count);
                }			
            }
        }

        if (BundlesAntiguos(juego.Bundles, drm) != null)
        {
            List<JuegoBundle> bundlesAntiguos = BundlesAntiguos(juego.Bundles, drm);

            if (bundlesAntiguos.Count > 0)
            {
                if (bundlesAntiguos.Count == 1)
                {
                    return string.Format(Idiomas.BuscarTexto(idioma, "String57", "Game"), global::BaseDatos.Bundles.Buscar.UnBundle(bundlesAntiguos[0].BundleId).NombreBundle, Bundles2.BundlesCargar.DevolverBundle(bundlesAntiguos[0].Tipo).NombreTienda);
                }
                else if (bundlesAntiguos.Count > 1)
                {
                    return string.Format(Idiomas.BuscarTexto(idioma, "String58", "Game"), bundlesAntiguos.Count);
                }
            }
        }

        return null;
    }

    public List<JuegoBundle> BundlesDisponibles(List<JuegoBundle> listaBundles, JuegoDRM drm = JuegoDRM.NoEspecificado)
    {
        List<JuegoBundle> bundlesDisponibles = new List<JuegoBundle>();

        if (listaBundles != null)
        {
            if (listaBundles.Count > 0)
            {
                foreach (var bundle in listaBundles)
                {
                    if (DateTime.Now >= bundle.FechaEmpieza && DateTime.Now <= bundle.FechaTermina)
                    {
                        if (drm != JuegoDRM.NoEspecificado && bundle.BundleId > 0)
                        {
                            if (bundle.DRM == drm)
                            {
                                bundlesDisponibles.Add(bundle);
                            }
                        }
                        else
                        {
                            bundlesDisponibles.Add(bundle);
                        }
                    }					
                }
            }
        }

        return bundlesDisponibles;
    }

    public List<JuegoBundle> BundlesAntiguos(List<JuegoBundle> listaBundles, JuegoDRM drm = JuegoDRM.NoEspecificado)
    {
        List<JuegoBundle> bundlesAntiguos = new List<JuegoBundle>();

        if (listaBundles != null)
        {
            if (listaBundles.Count > 0)
            {
                foreach (var bundle in listaBundles)
                {
                    if (DateTime.Now > bundle.FechaTermina)
                    {
                        if (drm != JuegoDRM.NoEspecificado)
                        {
                            if (bundle.DRM == drm)
                            {
                                bundlesAntiguos.Add(bundle);
                            }
                        }
                        else
                        {
                            bundlesAntiguos.Add(bundle);
                        }
                    }
                }
            }
        }

        if (bundlesAntiguos.Count > 0)
        {
            bundlesAntiguos = bundlesAntiguos.OrderByDescending(x => x.FechaTermina).ToList();
        }

        return bundlesAntiguos;
    }

    public string BundlesPrepararPrecio(Bundles2.Bundle bundle, int juegoId)
    {
        int tier = 0;

        foreach (var juego in bundle.Juegos)
        {
            if (juegoId.ToString() == juego.JuegoId)
            {
                tier = juego.Tier.Posicion;
                break;
            }
        }

        if (tier > 0 && bundle.Tiers.Count > 0)
        {
            foreach (var bundleTier in bundle.Tiers)
            {
                if (tier == bundleTier.Posicion)
                {
                    return Herramientas.Precios.Euro(decimal.Parse(bundleTier.Precio));
                }            
            }
        }

        return null;
    }

    public string BundlesPrepararInfo(Bundles2.Bundle bundle, int juegoId)
    {
        if (bundle.Pick == false)
        {
            int tier = 0;

            foreach (var juego in bundle.Juegos)
            {
                if (juegoId.ToString() == juego.JuegoId)
                {
                    tier = juego.Tier.Posicion;
                    break;
                }
            }

            return Herramientas.Idiomas.BuscarTexto(idioma, "String39", "Game") + " " + tier.ToString();
        }
        else
        {
            if (bundle.Tiers[0].CantidadJuegos == 1)
            {
                return Herramientas.Idiomas.BuscarTexto(idioma, "String40", "Game");
            }
            else
            {
                return string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String41", "Game"), bundle.Tiers[0].CantidadJuegos.ToString());
            }
        }
    }

    private int bundleId = 0;

    private void BundleAbrir(MouseEventArgs e, int nuevoBundleId)
    {
        bundleId = nuevoBundleId;
    }

    private void BundleCerrar(MouseEventArgs e)
    {
        bundleId = 0;
    }

    #endregion 

    #region Gratis

    public string GratisComprobar(List<JuegoGratis> listaGratis, JuegoDRM drm)
    {
        if (listaGratis != null)
        {
            if (listaGratis.Count > 0)
            {
                foreach (var gratis in listaGratis)
                {
                    if (drm == gratis.DRM)
                    {
                        return "gratis";
                    }
                }
            }
        }

        return null;
    }

    public string GratisPreparar(JuegoDRM drm, string idioma)
    {
        if (GratisDisponibles(juego.Gratis, drm) != null)
        {
            List<JuegoGratis> gratis = GratisDisponibles(juego.Gratis, drm);

            if (gratis.Count > 0)
            {
                if (gratis.Count == 1)
                {
                    return string.Format(Idiomas.BuscarTexto(idioma, "String59", "Game"), Gratis2.GratisCargar.DevolverGratis(gratis[0].Tipo).Nombre);
                }
                else if (gratis.Count > 1)
                {
                    return string.Format(Idiomas.BuscarTexto(idioma, "String60", "Game"), gratis.Count);
                }
            }
        }

        if (GratisAntiguos(juego.Gratis, drm) != null)
        {
            List<JuegoGratis> gratis = GratisAntiguos(juego.Gratis, drm);

            if (gratis.Count > 0)
            {
                if (gratis.Count == 1)
                {
                    return string.Format(Idiomas.BuscarTexto(idioma, "String61", "Game"), Gratis2.GratisCargar.DevolverGratis(gratis[0].Tipo).Nombre);
                }
                else if (gratis.Count > 1)
                {
                    bool mismo = false;
                    GratisTipo nombreMismo = gratis[0].Tipo;

                    foreach (var subgratis in gratis)
                    {
                        if (subgratis.Tipo == nombreMismo)
                        {
                            mismo = true;
                        }
                        else
                        {
                            mismo = false;
                        }
                    }

                    if (mismo == false)
                    {
                        return string.Format(Idiomas.BuscarTexto(idioma, "String62", "Game"), gratis.Count);
                    }
                    else if (mismo == true)
                    {
                        return string.Format(Idiomas.BuscarTexto(idioma, "String68", "Game"), gratis.Count, Gratis2.GratisCargar.DevolverGratis(gratis[0].Tipo).Nombre);
                    }
                }
            }
        }

        return null;
    }

    public List<JuegoGratis> GratisDisponibles(List<JuegoGratis> listaGratis, JuegoDRM drm = JuegoDRM.NoEspecificado)
    {
        List<JuegoGratis> gratisDisponibles = new List<JuegoGratis>();

        if (listaGratis != null)
        {
            if (listaGratis.Count > 0)
            {
                foreach (var gratis in listaGratis)
                {
                    if (DateTime.Now >= gratis.FechaEmpieza && DateTime.Now <= gratis.FechaTermina)
                    {
                        if (drm != JuegoDRM.NoEspecificado)
                        {
                            if (gratis.DRM == drm)
                            {
                                gratisDisponibles.Add(gratis);
                            }
                        }
                        else
                        {
                            gratisDisponibles.Add(gratis);
                        }
                    }
                }
            }
        }

        return gratisDisponibles;
    }

    public List<JuegoGratis> GratisAntiguos(List<JuegoGratis> listaGratis, JuegoDRM drm = JuegoDRM.NoEspecificado)
    {
        List<JuegoGratis> gratisAntiguos = new List<JuegoGratis>();

        if (listaGratis != null)
        {
            if (listaGratis.Count > 0)
            {
                foreach (var gratis in listaGratis)
                {
                    if (DateTime.Now > gratis.FechaTermina)
                    {
                        if (drm != JuegoDRM.NoEspecificado)
                        {
                            if (gratis.DRM == drm)
                            {
                                gratisAntiguos.Add(gratis);
                            }
                        }
                        else
                        {
                            gratisAntiguos.Add(gratis);
                        }
                    }
                }
            }
        }

        if (gratisAntiguos.Count > 0)
        {
            gratisAntiguos = gratisAntiguos.OrderByDescending(x => x.FechaEmpieza).ToList();
        }

        return gratisAntiguos;
    }

    #endregion

    #region Suscripciones

    public string SuscripcionesComprobar(List<JuegoSuscripcion> listaSuscripciones, JuegoDRM drm)
    {
        if (listaSuscripciones != null)
        {
            if (listaSuscripciones.Count > 0)
            {
                foreach (var suscripciones in listaSuscripciones)
                {
                    if (drm == suscripciones.DRM)
                    {
                        return "suscripcion";
                    }
                }
            }
        }

        return null;
    }

    public string SuscripcionesPreparar(JuegoDRM drm, string idioma)
    {
        if (SuscripcionesDisponibles(juego.Suscripciones, drm) != null)
        {
            List<JuegoSuscripcion> suscripciones = SuscripcionesDisponibles(juego.Suscripciones, drm);

            if (suscripciones.Count > 0)
            {
                if (suscripciones.Count == 1)
                {
                    return string.Format(Idiomas.BuscarTexto(idioma, "String51", "Game"), Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(suscripciones[0].Tipo).Nombre);
                }
                else if (suscripciones.Count > 1)
                {
                    return string.Format(Idiomas.BuscarTexto(idioma, "String52", "Game"), suscripciones.Count);
                }			
            }
        }

        if (SuscripcionesAntiguas(juego.Suscripciones, drm) != null)
        {
            List<JuegoSuscripcion> suscripciones = SuscripcionesAntiguas(juego.Suscripciones, drm);

            if (suscripciones.Count > 0)
            {
                if (suscripciones.Count == 1)
                {
                    return string.Format(Idiomas.BuscarTexto(idioma, "String55", "Game"), Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(suscripciones[0].Tipo).Nombre);
                }
                else if (suscripciones.Count > 1)
                {
                    bool misma = false;
                    SuscripcionTipo nombreMisma = suscripciones[0].Tipo;

                    foreach (var suscripcion in suscripciones)
                    {
                        if (suscripcion.Tipo == nombreMisma)
                        {
                            misma = true;
                        }
                        else
                        {
                            misma = false;
                        }
                    }

                    if (misma == false)
                    {
                        return string.Format(Idiomas.BuscarTexto(idioma, "String56", "Game"), suscripciones.Count);
                    }
                    else if (misma == true)
                    {
                        return string.Format(Idiomas.BuscarTexto(idioma, "String67", "Game"), Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(suscripciones[0].Tipo).Nombre, suscripciones.Count);
                    }
                }
            }
        }

        return null;
    }

    public List<JuegoSuscripcion> SuscripcionesDisponibles(List<JuegoSuscripcion> listaSuscripciones, JuegoDRM drm = JuegoDRM.NoEspecificado)
    {
        List<JuegoSuscripcion> suscripcionesDisponibles = new List<JuegoSuscripcion>();

        if (listaSuscripciones != null)
        {
            if (listaSuscripciones.Count > 0)
            {
                foreach (var suscripcion in listaSuscripciones)
                {
                    DateTime fechaTermina = suscripcion.FechaTermina;

                    if (Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(suscripcion.Tipo).ParaSiempre == false)
                    {
                        fechaTermina = fechaTermina.AddDays(1);
                    }

                    if (DateTime.Now >= suscripcion.FechaEmpieza && DateTime.Now <= fechaTermina)
                    {
                        if (drm != JuegoDRM.NoEspecificado)
                        {
                            if (suscripcion.DRM == drm)
                            {
                                suscripcionesDisponibles.Add(suscripcion);
                            }
                        }
                        else
                        {
                            suscripcionesDisponibles.Add(suscripcion);
                        }
                    }
                }
            }
        }

        if (suscripcionesDisponibles.Count > 0)
        {
            foreach (var suscripcion in Suscripciones2.SuscripcionesCargar.GenerarListado())
            {
                if (suscripcion.IncluyeSuscripcion != null)
                {
                    bool tieneIncluye = false;
                    bool tieneMaestro = false;

                    foreach (var suscripcionJuego in suscripcionesDisponibles)
                    {
                        if (suscripcionJuego.Tipo == suscripcion.IncluyeSuscripcion)
                        {
                            tieneIncluye = true;
                        }

                        if (suscripcionJuego.Tipo == suscripcion.Id)
                        {
                            tieneMaestro = true;
                        }
                    }

                    if (tieneIncluye == true && tieneMaestro == true)
                    {
                        int i = 0;

                        foreach (var suscripcionJuego in suscripcionesDisponibles)
                        {
                            if (suscripcionJuego.Tipo == suscripcion.Id)
                            {
                                break;
                            }

                            i += 1;
                        }

                        suscripcionesDisponibles.RemoveAt(i);
                    }
                }
            }
        }

        return suscripcionesDisponibles;
    }

    public List<JuegoSuscripcion> SuscripcionesAntiguas(List<JuegoSuscripcion> listaSuscripciones, JuegoDRM drm = JuegoDRM.NoEspecificado)
    {
        List<JuegoSuscripcion> suscripcionesAntiguas = new List<JuegoSuscripcion>();

        if (listaSuscripciones != null)
        {
            if (listaSuscripciones.Count > 0)
            {
                foreach (var suscripcion in listaSuscripciones)
                {
                    DateTime fechaTermina = suscripcion.FechaTermina;

                    if (Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(suscripcion.Tipo).ParaSiempre == false)
                    {
                        fechaTermina = fechaTermina.AddDays(1);
                    }

                    if (DateTime.Now > fechaTermina)
                    {
                        if (drm != JuegoDRM.NoEspecificado)
                        {
                            if (suscripcion.DRM == drm)
                            {
                                suscripcionesAntiguas.Add(suscripcion);
                            }
                        }
                        else
                        {
                            suscripcionesAntiguas.Add(suscripcion);
                        }
                    }
                }
            }
        }

        if (suscripcionesAntiguas.Count > 0)
        {
            suscripcionesAntiguas = suscripcionesAntiguas.OrderByDescending(x => x.FechaEmpieza).ToList();
        }

        return suscripcionesAntiguas;
    }

    #endregion

    #region Caracteristicas

    private int mediaMostrarPosicion = 0;
    private string mediaMostrar = string.Empty;

    private void CambiarMediaMostrar(MouseEventArgs e, int nuevaCaptura)
    {
        if (nuevaCaptura < 0)
        {
            nuevaCaptura = juego.Media.Capturas.Count - 1;
        }
        else if (nuevaCaptura >= juego.Media.Capturas.Count && nuevaCaptura != 99999)
        {
            nuevaCaptura = 0;
        }

        mediaMostrarPosicion = nuevaCaptura;

        if (nuevaCaptura == 99999)
        {
            mediaMostrar = juego.Media.Video;
        }
        else
        {
            if (nuevaCaptura >= 0 && nuevaCaptura < juego.Media.Capturas.Count)
            {
                mediaMostrar = juego.Media.Capturas[mediaMostrarPosicion];
            }
        }
    }

    #endregion

    #region Minimo

    public static string PrecioMinimoActual(global::Juegos.Juego minimo, string idioma)
    {
        decimal minimoCantidad = 10000000;

        if (minimo.PrecioActualesTiendas != null)
        {
            foreach (var precio in minimo.PrecioActualesTiendas)
            {
                if (Herramientas.OfertaActiva.Verificar(precio) == true)
                {
                    decimal tempPrecio = precio.Precio;

                    if (precio.Moneda != JuegoMoneda.Euro)
                    {
                        tempPrecio = Divisas.Cambio(tempPrecio, precio.Moneda);
                    }

                    if (tempPrecio < minimoCantidad)
                    {
                        minimoCantidad = tempPrecio;
                    }
                }
            }
        }

        if (minimoCantidad > 0 && minimoCantidad < 10000000)
        {
            return string.Format(Idiomas.BuscarTexto(idioma, "SearchMessage1", "Header"), Herramientas.Precios.Euro(minimoCantidad));
        }

        return Idiomas.BuscarTexto(idioma, "SearchMessage2", "Header");
    }

    #endregion

    #region Descuentos Bajos

    private bool mostrarDescuentosBajos = false;

    private void DescuentosBajosMostrar(MouseEventArgs e)
    {
        if (mostrarDescuentosBajos == false)
        {
            mostrarDescuentosBajos = true;
        }
        else
        {
            mostrarDescuentosBajos = false;
        }
    }

    #endregion

    #region Deck

    private bool enseñarDeck = false;

    private void DeckEnseñar(MouseEventArgs e)
    {
        if (enseñarDeck == false)
        {
            enseñarDeck = true;
        }
        else
        {
            enseñarDeck = false;
        }
    }

    private void DeckCerrar(MouseEventArgs e)
    {
        enseñarDeck = false;
    }

    #endregion

    #region Historico

    private bool enseñarHistorico = false;

    private bool HistoricoComprobar(JuegoDRM drm)
    {
        bool tiene = false;

        if (juego.Historicos != null)
        {
            if (juego.Historicos.Count > 0)
            {
                foreach (var historico in juego.Historicos)
                {
                    if (historico.DRM == drm)
                    {
                        tiene = true;
                        break;
                    }
                }
            }
        }

        return tiene;
    }

    private void HistoricoEnseñar(MouseEventArgs e, JuegoDRM drm)
    {
        if (enseñarHistorico == false)
        {
            enseñarHistorico = true;
            HistoricoCargar(drm);
        }
        else
        {
            enseñarHistorico = false;
        }
    }

    private void HistoricoCerrar(MouseEventArgs e)
    {
        enseñarHistorico = false;
    }

    List<Punto> puntos = new List<Punto>();

    private class Punto
    {
        public int Año { get; set; }
        public List<PuntoDatos> Puntos { get; set; }
    }

    private class PuntoDatos
    {
        public DateTime Fecha { get; set; }
        public double Precio { get; set; }
        public string Tienda { get; set; }
    }


    public class PuntoGrafico
    {
        public DateTime DiaMes { get; set; }
        public decimal Precio { get; set; }
        public string Año { get; set; }
        public string Tienda { get; set; }
    }

    private void HistoricoCargar(JuegoDRM drm)
    {
        puntos.Clear();

        if (juego.Historicos != null)
        {
            if (juego.Historicos.Count > 0)
            {
                drmGrafico = drm;

                #region Añadir Años

                foreach (var historico in juego.Historicos)
                {
                    if (drm == historico.DRM)
                    {
                        if (puntos.Count == 0)
                        {
                            Punto año = new Punto();
                            año.Año = historico.Fecha.Year;
                            año.Puntos = new List<PuntoDatos>();

                            puntos.Add(año);
                        }		
                        else if (puntos.Count > 0)
                        {
                            bool añadirAño = true;

                            foreach (var punto in puntos)
                            {
                                if (punto.Año == historico.Fecha.Year)
                                {
                                    añadirAño = false;
                                }
                            }

                            if (añadirAño == true)
                            {
                                Punto año = new Punto();
                                año.Año = historico.Fecha.Year;
                                año.Puntos = new List<PuntoDatos>();

                                puntos.Add(año);
                            }
                        }
                    }
                }

                #endregion

                #region Añadir Puntos

                foreach (var historico in juego.Historicos)
                {
                    if (drm == historico.DRM)
                    {
                        bool añadir = true;

                        var historico2 = historico;

                        foreach (var historico3 in juego.Historicos)
                        {
                            if (drm == historico3.DRM && drm == historico2.DRM && 
                                historico3.Fecha.Day == historico2.Fecha.Day && 
                                historico3.Fecha.Month == historico2.Fecha.Month && 
                                historico3.Fecha.Year == historico2.Fecha.Year &&
                                historico3.Precio != historico2.Precio)
                            {
                                if (historico3.Precio < historico2.Precio)
                                {
                                    añadir = false;
                                }
                            }
                        }

                        if (añadir == true)
                        {
                            foreach (var punto in puntos)
                            {
                                if (historico2.Fecha.Year == punto.Año)
                                {
                                    bool duplicado = false;

                                    PuntoDatos nuevoPunto = new PuntoDatos
                                    {
                                        Fecha = new DateTime(2000, historico2.Fecha.Month, historico2.Fecha.Day),
                                        Precio = (double)historico2.Precio,
                                        Tienda = historico2.Tienda
                                    };

                                    foreach (var puntoPuesto in punto.Puntos)
                                    {
                                        if (puntoPuesto.Precio == nuevoPunto.Precio && puntoPuesto.Fecha.AddDays(21) > nuevoPunto.Fecha)
                                        {
                                            duplicado = true;
                                        }
                                    }

                                    if (duplicado == false)
                                    {
                                        punto.Puntos.Add(nuevoPunto);
                                    }
                                }
                            }
                        }
                    }
                }

                #endregion
            }
        }

        opcionesGrafico = new ApexChartOptions<PuntoGrafico>
        {
            Xaxis = new XAxis
            {
                Labels = new XAxisLabels
                {
                    Formatter = @"function (value) {
                                return new Date(value).toLocaleString('" + idioma + "',{month:'short'})}",
                    Style = new AxisLabelStyle
                    {
                        FontSize = "14px",
                        FontFamily = "Motiva Sans"
                    }
                },
                Type = XAxisType.Datetime
            },
            Yaxis = new List<YAxis>() {
                (new YAxis
                {
                    Labels = new YAxisLabels
                    {
                        Formatter = @"function (value) {
                                        let Euro = new Intl.NumberFormat('es-ES', {
                                            style: 'currency',
                                            currency: 'EUR',
                                        });
                                    return Euro.format(value)}",
                        Style = new AxisLabelStyle
                        {
                            FontSize = "14px",
                            FontFamily = "Motiva Sans"
                        }
                    }
                }
            )},
            Theme = new Theme
            {
                Mode = Mode.Dark
            },
            Title = new Title
            {
                Style = new TitleStyle
                {
                    FontSize = "16px",
                    FontFamily = "Motiva Sans",
                    FontWeight = "300"
                },
            },
            Chart = new Chart
            {
                Toolbar = new Toolbar
                {
                    Show = false
                },
                Background = "transparent",
                FontFamily = "Motiva Sans",
                Zoom = new Zoom
                {
                    Enabled = false
                },
                Width = "100%",
                Height = "100%"
            },
            DataLabels = new ApexCharts.DataLabels
            {
                OffsetY = -8d,
                Formatter = @"function (value) {
                                let Euro = new Intl.NumberFormat('es-ES', {
                                    style: 'currency',
                                    currency: 'EUR',
                                });
                            return Euro.format(value)}",
                Style = new DataLabelsStyle
                {
                    FontSize = "14px",
                    FontFamily = "Motiva Sans"
                }
            },
            Grid = new Grid
            {
                Row = new GridRow
                {
                    Colors = new List<string> { "transparent" }
                },
                Padding = new Padding
                {
                    Right = 30,
                    Left = 30
                }
            },
            Markers = new Markers { Shape = ShapeEnum.Circle, Size = 5, FillOpacity = new Opacity(0.8d) },
            Stroke = new Stroke { Curve = Curve.Smooth },
            Colors = new List<string> { "#345884", "#5C799C" },
            Legend = new Legend
            {
                Position = LegendPosition.Top,
                HorizontalAlign = ApexCharts.Align.Right,
                Floating = true,
                OffsetX = -5,
                OffsetY = -40,
                FontSize = "16px"
            }
        };
    }

    #endregion

    #region Ventana Logear

    private bool enseñarLogear = false;

    private void LogearEnseñar(MouseEventArgs e)
    {
        if (enseñarLogear == false)
        {
            enseñarLogear = true;
        }
        else
        {
            enseñarLogear = false;
        }
    }

    private void LogearCerrar(MouseEventArgs e)
    {
        enseñarLogear = false;
    }

    #endregion

    #region Analisis

    private JuegoAnalisisAmpliado analisisAmpliado = new JuegoAnalisisAmpliado();
    private List<JuegoAnalisisAmpliadoIdioma> analisisRegiones = new List<JuegoAnalisisAmpliadoIdioma>();
    private string idiomaAnalisis = string.Empty;

    private async Task AnalisisIdioma(MouseEventArgs e, string idiomaSteam)
    {
        idiomaAnalisis = idiomaSteam;

        if (idiomaAnalisis != "global")
        {
            analisisAmpliado = await AnalisisCargarIdioma(idiomaAnalisis);
        }
        else
        {
            analisisRegiones.Clear();

            foreach (var idioma2 in Idiomas.ListadoIdiomasGenerar())
            {
                if (idioma2.SteamReseñas == true && idiomaSteam == idioma2.SteamAPI)
                {
                    JuegoAnalisisAmpliado analisisRegion = await AnalisisCargarIdioma(idioma2.SteamAPI);
                    JuegoAnalisisAmpliadoIdioma analisisRegion2 = new JuegoAnalisisAmpliadoIdioma();
                    analisisRegion2.CantidadPositivos = analisisRegion.CantidadPositivos;
                    analisisRegion2.CantidadNegativos = analisisRegion.CantidadNegativos;
                    analisisRegion2.Idioma = idioma2.SteamAPI;
                    analisisRegiones.Add(analisisRegion2);
                }
            }
        }
    }

    private async Task<JuegoAnalisisAmpliado> AnalisisCargarIdioma(string idiomaSteam)
    {
        if (global::BaseDatos.Analisis.Buscar.DebeModificarse(juego.Id, idiomaSteam) == true)
        {
            APIs.Steam.SteamAnalisisAPI analisis = await APIs.Steam.Juego.CargarDatosAnalisis(juego.IdSteam, idiomaSteam);

            if (analisis != null)
            {
                if (analisis.Analisis != null)
                {
                    global::BaseDatos.Analisis.Insertar.Ejecutar(juego.Id, analisis.Sumario.TotalPositivas, analisis.Sumario.TotalNegativas, idiomaSteam, JsonSerializer.Serialize(analisis.Analisis));

                    return global::BaseDatos.Analisis.Buscar.Cargar(juego.Id, idiomaSteam);
                }
            }
        }
        else
        {
            return global::BaseDatos.Analisis.Buscar.Cargar(juego.Id, idiomaSteam);
        }

        return null;
    }

    #endregion

    #region Curator

    private void CuratorAtras(MouseEventArgs e, global::BaseDatos.Curators.CuratorFicha curator, int tope)
    {
        curator.Posicion = curator.Posicion - 4;

        if (curator.Posicion < 0)
        {
            curator.Posicion = tope - 4;
        }
    }

    private void CuratorAdelante(MouseEventArgs e, global::BaseDatos.Curators.CuratorFicha curator, int tope)
    {
        curator.Posicion = curator.Posicion + 4;

        if (curator.Posicion > tope - 1)
        {
            curator.Posicion = 0;
        }
    }

    #endregion

    #region Portapapeles

    private async Task CopiarAlClipboard(MouseEventArgs e, string texto)
    {
        await JavaScript.InvokeVoidAsync("clipboardCopy.copyText", texto);
    }

    #endregion

    #region Ventana Idiomas

    private bool enseñarIdiomas = false;
    private JuegoDRM idiomaDrmSeleccionado = JuegoDRM.NoEspecificado;
    private string idiomaDrmSeleccionadoTexto = string.Empty;
    private string idiomaAdminContenido = string.Empty;

    private void IdiomasEnseñar(MouseEventArgs e, JuegoDRM drm)
    {
        if (enseñarIdiomas == false)
        {
            enseñarIdiomas = true;

            idiomaDrmSeleccionado = drm;
            idiomaDrmSeleccionadoTexto = JuegoDRM2.DevolverDRM(drm);
        }
        else
        {
            enseñarIdiomas = false;
        }
    }

    private void IdiomasCerrar(MouseEventArgs e)
    {
        enseñarIdiomas = false;
    }

    #endregion
}
