@using Blazored.Video
@using Blazored.Video.Support
@using Bundles2
@using Gratis2
@using Herramientas
@using Juegos
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using Microsoft.VisualBasic
@using Newtonsoft.Json
@using Suscripciones2
@using System.Net
@using Tiendas2
@using pepeizqs_deals_web.Areas.Identity.Data

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JavaScript
@inject NavigationManager NavManager

<script>
	window.ChangeUrl = function (url) {
		history.pushState(null, '', url);
	}
</script>

<script>
	function moverScroll(id) {
		const yOffset = -185;
		const element = document.getElementById(id);
		const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

		window.scrollTo({ top: y, behavior: 'smooth' });
	}
</script>

<style>
	.descripcion-datos {
		grid-template-columns: 1fr 1fr;
	}

	@@media(max-width: 1000px) {
		.descripcion-datos {
			grid-template-columns: 1fr;
		}
	}

	.boton-expandir {
		transition: transform .2s;
		background-color: var(--fondoBotonPequeño);
	}

		.boton-expandir:hover {
			transform: scale(1.01);
			background-color: var(--fondoBotonPequeñoHover);
		}
</style>

<div>
	@if (juego.Tipo == JuegoTipo.Game)
	{
		<img class="juego-fondo" src="@juego.Imagenes.Library_1920x620" alt="@juego.Nombre"/>
	}

	<div class="juego-contenido">
		<div class="perfil-espacio-bottom juego-cabecera" style="position: -webkit-sticky; position: sticky; top: 70px; z-index: 3;">
			<div class="perfil-flexible-centrado">
				<div class="juego-flexible-izquierda">
					<img src="@juego.Imagenes.Header_460x215" class="juego-imagen" alt="@juego.Nombre" />
				</div>
				
				<div class="juego-titulo">
					<h1 style="font-size: 20px; margin: 0px;">@juego.Nombre</h1>

					<div style="display: flex; align-items: center; gap: 15px;">
						@{
							bool mostrarDRMs = false;

							foreach (JuegoDRM drm in JuegoDRM2.CargarDRMs())
							{
								if (VerificarMostrarDRM(idioma, drm, juego) == true && drm != JuegoDRM.NoEspecificado)
								{
									mostrarDRMs = true;
									break;
								}
							}

							if (mostrarDRMs == true)
							{
								<div style="display: flex; align-items: center; gap: 10px;">
									@foreach (JuegoDRM drm in JuegoDRM2.CargarDRMs())
									{
										if (drm != JuegoDRM.NoEspecificado)
										{
											if (VerificarMostrarDRM(idioma, drm, juego) == true)
											{
												if (drm == JuegoDRM.DRMFree)
												{
													<button onclick="moverScroll('@drm')" class="boton-pequeño" style="width: 40px; height: 40px; text-align: center; padding: 7px;"><div style="font-weight: bold; font-size: 9px;">DRM Free</div></button>
												}
												else
												{
													<button onclick="moverScroll('@drm')" class="boton-pequeño" style="width: 40px; height: 40px; text-align: center; padding: 9px;">
														<div style="display: flex; align-items: center;">
															<img src="@JuegoDRM2.SacarImagen(drm)" style="max-width: 100%; max-height: 100%;" alt="DRM"/>
														</div>
													</button>
												}
											}
										}
									}
								</div>
							}
						}

						@if (juego.Bundles != null)
						{
							<div style="font-size: 16px;">
								<a onclick="moverScroll('bundles')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@Idiomas.CogerCadena(idioma, "Bundles", "Header")</a>
							</div>
						}

						@if (juego.Gratis != null)
						{
							<div style="font-size: 16px;">
								<a onclick="moverScroll('gratis')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@Idiomas.CogerCadena(idioma, "Free", "Header")</a>
							</div>
						}

						@if (juego.Suscripciones != null)
						{
							<div style="font-size: 16px;">
								<a onclick="moverScroll('suscripciones')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@Idiomas.CogerCadena(idioma, "Subscriptions", "Header")</a>
							</div>
						}

						@if (DLCs.Count > 0)
						{
							<div style="font-size: 16px; background: var(--fondoDlc); height: 40px;">
								<a onclick="moverScroll('dlcs')" style="color: var(--colorTextoDlc); text-decoration: none; cursor: pointer; padding: 8px 10px; vertical-align: middle; display: table-cell;">@Idiomas.CogerCadena(idioma, "String34", "Game") (@DLCs.Count.ToString())</a>
							</div>
						}
					</div>
				</div>

				<div style="text-align: right; padding: 10px 20px; display: flex; flex-direction: column; gap: 15px;">
					@if (juego.Analisis != null)
					{
						@if (string.IsNullOrEmpty(juego.Analisis.Cantidad) == false && string.IsNullOrEmpty(juego.Analisis.Porcentaje) == false)
						{
							<div style="font-size: 14px; flex: 0 0 auto;">
								<div class="tooltip-juego" onmousemove="hoverTooltip(event, 'tooltip-reviews')">
									<div style="display: flex; align-items: center; justify-content: right;">
										@if (int.Parse(juego.Analisis.Porcentaje) > 74)
										{
											<img src="/imagenes/analisis/positive2.webp" class="juego-analisis-imagen" alt="Reviews"/>
										}

										@if (int.Parse(juego.Analisis.Porcentaje) > 49 && int.Parse(juego.Analisis.Porcentaje) < 75)
										{
											<img src="/imagenes/analisis/mixed2.webp" class="juego-analisis-imagen" alt="Reviews" />
										}

										@if (int.Parse(juego.Analisis.Porcentaje) < 50)
										{
											<img src="/imagenes/analisis/negative2.webp" class="juego-analisis-imagen" alt="Reviews" />
										}

										<div style="margin-left: 10px;">@juego.Analisis.Porcentaje% • @Calculadora.RedondearAnalisis(idioma, juego.Analisis.Cantidad)</div>
									</div>

									<div id="tooltip-reviews" class="tooltip-relleno">
										<div style="margin: 8px;">@Idiomas.CogerCadena(idioma, "String2", "Game")</div>
									</div>
								</div>
							</div>
						}						
					}

					<div style="display: flex; align-items: center; justify-content: right; gap: 20px;">
						@if (juego.Caracteristicas != null)
						{
							<div style="display: flex; align-items: center; gap: 8px; padding: 5px 10px; height: 26px;">
								@if (juego.Caracteristicas.Windows == true)
								{
									<svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 15 15"><path d="M0 1h7v7H0zM0 9h7v7H0zM8 9h7v7H8zM8 1h7v7H8z" fill="var(--colorTexto)"></path></svg>
								}

								@if (juego.Caracteristicas.Mac == true)
								{
									<svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 410 410"><path d="M361.05 137.57c-61 66-57 118 13 165-11 33-29 63-54 89-17 18-38 25-60 14-32-15-62-14-93 1-18 9-35 5-51-8-49-40-95-150-72-219 18-55 75-99 137-69 21 10 40 6 61-2 51-19 87-10 119 29zm-153-45c0-50 26-80 78-92 5 51-28 91-78 92z" fill="var(--colorTexto)"></path></svg>
								}

								@if (juego.Caracteristicas.Linux == true)
								{
									<svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 16 16"><path d="M6.813.034C-.65.635 1.329 8.518 1.218 11.158 1.119 12.555.655 14.262 0 16h2.018c.207-.737.36-1.465.425-2.159.122.085.252.167.39.245.227.133.42.31.626.498.48.438 1.025.933 2.09.996.071.004.143.006.213.006 1.077 0 1.813-.471 2.404-.85.284-.181.529-.338.76-.413.654-.205 1.226-.536 1.654-.957.067-.066.128-.134.187-.202.238.873.565 1.855.926 2.835H16c-1.034-1.597-2.1-3.162-2.079-5.159.044-3.948.45-11.409-7.109-10.806zm3.17 10.145a12.94 12.94 0 0 0-.852-.328 2.08 2.08 0 0 0 .213-.894c.018-.819-.395-1.483-.922-1.485-.526 0-.967.662-.985 1.48v.08a4.609 4.609 0 0 0-.956-.324l-.004-.093c-.03-1.491.884-2.725 2.043-2.756C9.68 5.827 10.642 7.01 10.672 8.5a3.192 3.192 0 0 1-.474 1.777 3.108 3.108 0 0 0-.215-.099zm-1.276.488c.253.087.539.185.921.35l.007.002c.357.147.78.415.76.859-.03.68-.92 1.32-1.743 1.578l-.005.002c-.342.11-.647.306-.97.513-.543.347-1.104.706-1.915.706-.054 0-.107 0-.16-.004-.744-.043-1.09-.36-1.53-.76-.232-.212-.472-.43-.781-.612l-.007-.004c-.667-.377-1.081-.845-1.108-1.253-.013-.203.077-.379.269-.522.416-.312.695-.516.88-.651.204-.15.266-.195.312-.238l.106-.103c.382-.372 1.021-.993 2.002-.993.6 0 1.264.23 1.972.686.333.217.623.317.99.444zM5.6 12.046c-.954-.07-1.721-.33-2.058-.559a.455.455 0 0 0-.51.753c.542.367 1.501.64 2.503.712.17.013.356.02.557.02.871 0 1.978-.083 3.162-.634a.455.455 0 0 0-.383-.824c-1.28.596-2.471.59-3.27.532zM4.25 8.97c-.072-.732-.462-1.285-.873-1.234-.41.05-.686.684-.614 1.415.03.32.123.604.25.82-.031.025-.12.09-.224.166l-.286.21c-.312-.408-.524-.993-.562-1.654-.074-1.29.542-2.373 1.377-2.422.834-.048 1.57.957 1.645 2.245.004.07.006.139.006.207A3.25 3.25 0 0 0 4.25 9a.614.614 0 0 0-.001-.029z" fill="var(--colorTexto)"></path></svg>
								}
							</div>
						}
						
						@if (juego.Deck != JuegoDeck.Desconocido)
						{
							<button @onclick="(e => DeckEnseñar(e))" class="boton-expandir" style="color: var(--colorTexto); text-decoration: none; border: 0px;">
								<div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px; height: 32px;">
									<svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.84" fill-rule="evenodd" clip-rule="evenodd" d="M7.77715 4.30197C10.9241 4.30197 13.4752 6.85305 13.4752 9.99997C13.4752 13.1469 10.9241 15.698 7.77715 15.698V18.8889C12.6864 18.8889 16.666 14.9092 16.666 9.99997C16.666 5.09078 12.6864 1.11108 7.77715 1.11108V4.30197ZM7.77756 13.8889C9.92533 13.8889 11.6664 12.1477 11.6664 9.99997C11.6664 7.8522 9.92533 6.11108 7.77756 6.11108C5.62979 6.11108 3.88867 7.8522 3.88867 9.99997C3.88867 12.1477 5.62979 13.8889 7.77756 13.8889Z" fill="var(--colorTexto)"></path></svg>

									@if (juego.Deck == JuegoDeck.Verificado)
									{
										<svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.33342 11.9222L14.4945 5.76667L16.4556 7.72779L8.33342 15.8556L3.26675 10.7833L5.22786 8.82223L8.33342 11.9222Z" fill="var(--deckVerificado)"></path></svg>
									}

									@if (juego.Deck == JuegoDeck.Jugable)
									{
										<svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.61079 9.44444V15H11.3886V9.44444H8.61079ZM9.07372 8.05245C9.34781 8.23558 9.67004 8.33333 9.99967 8.33333C10.4417 8.33333 10.8656 8.15774 11.1782 7.84518C11.4907 7.53262 11.6663 7.10869 11.6663 6.66667C11.6663 6.33703 11.5686 6.0148 11.3855 5.74072C11.2023 5.46663 10.942 5.25301 10.6375 5.12687C10.3329 5.00072 9.99783 4.96771 9.67452 5.03202C9.35122 5.09633 9.05425 5.25507 8.82116 5.48815C8.58808 5.72124 8.42934 6.01821 8.36503 6.34152C8.30072 6.66482 8.33373 6.99993 8.45988 7.30447C8.58602 7.60902 8.79964 7.86931 9.07372 8.05245Z" fill="var(--deckJugable)"></path></svg>
									}

									@if (juego.Deck == JuegoDeck.NoSoportado)
									{
										<svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M14.193 15.606a7 7 0 0 1-9.799-9.799l9.8 9.8Zm1.414-1.414a7 7 0 0 0-9.799-9.799l9.8 9.8ZM19.001 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" fill="var(--colorTexto)"></path></svg>
									}
								</div>
							</button>
						}

						@if (usuario != null)
						{
							if (global::BaseDatos.Usuarios.Buscar.RolDios(usuario.UserName) == true)
							{
								if (juego.IdSteam > 0)
								{
									<div>
										<label>@Idiomas.CogerCadena(idioma, "String1", "Game")</label>

										@if (juego.IdSteam > 0)
										{
											<a class="juego-boton-pequeño" style="margin-left: 10px;" href="@EnlaceAcortador.Generar("https://store.steampowered.com/app/" + juego.IdSteam.ToString(), "steam")" target="_blank">Steam</a>
										}
									</div>
								}		
							}
						}					
					</div>
				</div>				
			</div>
		</div>

		@if (juego.Tipo == JuegoTipo.DLC)
		{
			if (string.IsNullOrEmpty(juego.Maestro) == false)
			{
				if (juego.Maestro != "no")
				{
					Juegos.Juego juegoMaestro = global::BaseDatos.Juegos.Buscar.UnJuego(juego.Maestro);

					<a href="/game/@juego.Maestro/@Herramientas.EnlaceAdaptador.Nombre(juegoMaestro.Nombre)/" style="text-decoration: none;">
						<div class="perfil perfil-espacio-bottom" style="padding: 20px 40px; flex-direction: row; align-items: center; background-color: var(--fondoDlc); color: var(--colorTextoDlc);">
							<i class="fa-solid fa-exclamation" style="font-size: 22px; margin-right: 30px;"></i>

							<div style="width: 100%;">
								@Idiomas.CogerCadena(idioma, "String32", "Game")
							</div>
						</div>
					</a>
				}				
			}

			if (string.IsNullOrEmpty(juego.MayorEdad) == false)
			{
				if (juego.MayorEdad.ToLower() == "true")
				{
					<div class="perfil" style="padding: 20px 40px; flex-direction: row; align-items: center; background-color: var(--fondoAlerta); margin-bottom: 50px;">
						<i class="fa-solid fa-exclamation" style="font-size: 22px; margin-right: 30px;"></i>

						<div style="width: 100%;">
							@Idiomas.CogerCadena(idioma, "String46", "Game")
						</div>
					</div>
				}
			}
		}
		else if (juego.Tipo == JuegoTipo.Game)
		{
			if (string.IsNullOrEmpty(juego.FreeToPlay) == false)
			{
				if (juego.FreeToPlay.ToLower() == "true")
				{
					<div class="perfil perfil-espacio-bottom" style="padding: 20px 40px; flex-direction: row; align-items: center;">
						<i class="fa-solid fa-circle-info" style="font-size: 22px; margin-right: 30px;"></i>

						<div style="width: 100%;">
							@Idiomas.CogerCadena(idioma, "String33", "Game")
						</div>
					</div>
				}
			}

			if (string.IsNullOrEmpty(juego.MayorEdad) == false)
			{
				if (juego.MayorEdad.ToLower() == "true")
				{
					<div class="perfil" style="padding: 20px 40px; flex-direction: row; align-items: center; background-color: var(--fondoAlerta); margin-bottom: 50px;">
						<i class="fa-solid fa-exclamation" style="font-size: 22px; margin-right: 30px;"></i>

						<div style="width: 100%;">
							@Idiomas.CogerCadena(idioma, "String45", "Game")
						</div>
					</div>
				}
			}
		}

		@foreach (JuegoDRM drm in JuegoDRM2.CargarDRMs())
		{
			if (drm != JuegoDRM.NoEspecificado)
			{
				if (VerificarMostrarDRM(idioma, drm, juego) == true)
				{
					<div id="@drm">
						@if (HttpContext == null)
						{
							if (usuario != null)
							{
								bool usuarioTieneJuego = false;

								if (string.IsNullOrEmpty(usuario.SteamGames) == false)
								{
									List<string> juegosSteam = Herramientas.Listados.Generar(usuario.SteamGames);

									if (juegosSteam.Count > 0)
									{
										if (juego.Tipo == JuegoTipo.Game && drm == JuegoDRM.Steam)
										{
											foreach (var juegoUsuario in juegosSteam)
											{
												if (juegoUsuario == juego.IdSteam.ToString())
												{
													usuarioTieneJuego = true;
													break;
												}
											}
										}
									}
								}
							
								bool usuarioTieneDeseado = false;

								string mensaje = string.Empty;

								if (usuarioTieneJuego == true)
								{
									if (juego.Tipo == Juegos.JuegoTipo.Game)
									{
										mensaje = Herramientas.Idiomas.CogerCadena(idioma, "String5", "Game");
									}
									else if (juego.Tipo == Juegos.JuegoTipo.DLC)
									{
										mensaje = Herramientas.Idiomas.CogerCadena(idioma, "String6", "Game");
									}

									<div class="perfil" style="padding: 20px 25px; background-color: var(--fondoBien);">
										<div class="perfil-flexible-centrado">
											<i class="fa-solid fa-check" style="font-size: 25px;"></i>

											<label style="text-align: left; padding-left: 25px; width: 100%;">@mensaje</label>
										</div>
									</div>
								}
								else
								{
									if (string.IsNullOrEmpty(usuario.SteamWishlist) == false)
									{
										List<string> deseadosSteam = Listados.Generar(usuario.SteamWishlist);

										if (deseadosSteam.Count > 0)
										{
											foreach (var deseado in deseadosSteam)
											{
												if (juego.IdSteam > 0)
												{
													if (juego.IdSteam == int.Parse(deseado) && drm == Juegos.JuegoDRM.Steam)
													{
														if (juego.Tipo == Juegos.JuegoTipo.Game)
														{
															mensaje = Herramientas.Idiomas.CogerCadena(idioma, "String7", "Game");
														}
														else if (juego.Tipo == Juegos.JuegoTipo.DLC)
														{
															mensaje = Herramientas.Idiomas.CogerCadena(idioma, "String8", "Game");
														}

														break;
													}
												}
											}
										}
									}
								
									if (string.IsNullOrEmpty(mensaje) == false)
									{
										<div class="perfil" style="padding: 20px 25px; background-color: var(--fondoAlerta);">
											<div class="perfil-flexible-centrado">
												<i class="fa-solid fa-exclamation" style="font-size: 25px;"></i>

												<label style="text-align: left; padding-left: 25px; width: 100%;">@mensaje</label>
											</div>
										</div>
									}
									else
									{
										usuarioTieneDeseado = Herramientas.Deseados.ComprobarSiEsta(usuario, juego, drm);

										if (usuarioTieneDeseado == true)
										{
											<button @onclick="(e => CambiarEstadoDeseado(e, false, drm))" class="boton-pequeño" style="width: auto; padding: 20px 40px;">
												<div class="perfil-flexible-centrado">
													<i class="fa-solid fa-check" style="font-size: 25px;"></i>

													<div style="text-align: left; padding-left: 25px; width: 100%;">@Herramientas.Idiomas.CogerCadena(idioma, "String3", "Game")</div>
												</div>
											</button>
										}
										else
										{
											<button @onclick="(e => CambiarEstadoDeseado(e, true, drm))" class="boton-pequeño" style="width: auto; padding: 20px 40px;">
												@Herramientas.Idiomas.CogerCadena(idioma, "String4", "Game")
											</button>
										}
									}								
								}
							}
						}

						<div class="juego-drm-centrado" style="margin-bottom: 50px;">
							<div class="perfil" style="width: 100%; padding: 0px;">
								@if (CogerMinimoDRM(idioma, drm, juego.PrecioMinimosHistoricos, juego.PrecioActualesTiendas) != null || BundlesComprobar(juego.Bundles, drm) != null || GratisComprobar(juego.Gratis, drm) != null || SuscripcionesComprobar(juego.Suscripciones, drm) != null)
								{
									<div style="text-align: left; background-color: var(--fondoMinimo); padding: 20px; display: flex; align-items: center; gap: 30px;">
										@if (drm == JuegoDRM.DRMFree)
										{
											<div style="font-weight: bold; font-size: 18px; max-width: 45px; text-align: center;">DRM Free</div>
										}
										else
										{
											<div style="max-width: 40px; max-height: 40px;">
												<img src="@JuegoDRM2.SacarImagen(drm)" alt="DRM" style="width: 100%; height: 100%;" />
											</div>
										}

										<div style="display: flex; flex-direction: column; gap: 20px; width: 100%;">
											@if (CogerMinimoDRM(idioma, drm, juego.PrecioMinimosHistoricos, juego.PrecioActualesTiendas) != null)
											{
												<div>
													<div>@Idiomas.CogerCadena(idioma, "String10", "Game") @JuegoDRM2.DevolverDRM(drm):</div>

													<div style="margin-top: 5px;">
														<label>@PrepararPrecio(juego.PrecioMinimosHistoricos, drm, true)</label>
														<label style="font-size: 14px;">@CogerMinimoDRM(idioma, drm, juego.PrecioMinimosHistoricos, juego.PrecioActualesTiendas)</label>
													</div>
												</div>
											}

											@if (BundlesComprobar(juego.Bundles, drm) != null || GratisComprobar(juego.Gratis, drm) != null || SuscripcionesComprobar(juego.Suscripciones, drm) != null)
											{
												<div style="display: flex; flex-direction: column; gap: 10px;">
													@if (BundlesComprobar(juego.Bundles, drm) != null)
													{
														<div>
															<a onclick="moverScroll('bundles')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@BundlesPreparar(drm, idioma)</a>
														</div>
													}

													@if (GratisComprobar(juego.Gratis, drm) != null)
													{
														<div>
															<a onclick="moverScroll('gratis')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@GratisPreparar(drm, idioma)</a>
														</div>
													}

													@if (SuscripcionesComprobar(juego.Suscripciones, drm) != null)
													{
														<div>
															<a onclick="moverScroll('suscripciones')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@SuscripcionesPreparar(drm, idioma)</a>
														</div>
													}
												</div>
											}
										</div>

										@if (drm == JuegoDRM.Steam)
										{
											if (juego.IdSteam > 0)
											{
												<a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar("https://store.steampowered.com/app/" + juego.IdSteam.ToString(), "steam")" target="_blank" style="width: 200px; text-align: center;">
													@string.Format("{0} {1}", Herramientas.Idiomas.CogerCadena(idioma, "String1", "Game"), "Steam")
												</a>
											}											
										}

										@if (drm == JuegoDRM.GOG)
										{
											if (string.IsNullOrEmpty(juego.SlugGOG) == false)
											{
												<a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar("https://www.gog.com/game/" + juego.SlugGOG, "gog")" target="_blank" style="width: 200px; text-align: center;">
													@string.Format("{0} {1}", Herramientas.Idiomas.CogerCadena(idioma, "String1", "Game"), "GOG")
												</a>
											}
										}

										@if (drm == JuegoDRM.Epic)
										{
											if (string.IsNullOrEmpty(juego.SlugEpic) == false)
											{
												<a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar("https://store.epicgames.com/p/" + juego.SlugEpic, "epicgamesstore")" target="_blank" style="width: 200px; text-align: center;">
													@string.Format("{0} {1}", Herramientas.Idiomas.CogerCadena(idioma, "String1", "Game"), "Epic Games")
												</a>
											}
										}
									</div>
								}

								@if (OrdenarPrecios(juego.PrecioActualesTiendas, drm).Count > 0)
								{									
									List<JuegoPrecio> preciosBajos = new List<JuegoPrecio>();
									int descuentoMaximo = 0;

									<div style="display: flex; flex-direction: column; gap: 10px; padding: 20px;">
										@foreach (JuegoPrecio precio in OrdenarPrecios(juego.PrecioActualesTiendas, drm))
										{
											if (precio.Descuento > descuentoMaximo)
											{
												descuentoMaximo = precio.Descuento;
											}

											if (precio.Descuento > descuentoMaximo - (descuentoMaximo / 2))
											{
												<a class="juego-boton-pequeño" style="display: block;" href="@EnlaceAcortador.Generar(precio.Enlace, precio.Tienda)" target="_blank">
													<div class="perfil-flexible-centrado">
														<div>
															<img src="@SacarImagenTienda(precio.Tienda)" class="juego-imagen-boton" alt="Store" />
															<span style="margin-left: 20px;">@ComprobarEdicion(juego.Nombre, precio.Nombre)</span>
														</div>

														<div class="juego-descuento-precio">
															<div style="font-size: 14px; margin: 20px;">
																@Calculadora.DiferenciaTiempo(precio.FechaDetectado, idioma)
															</div>

															<div style="width: 75px; text-align: center;" class="juego-descuento">
																@precio.Descuento.ToString()%
															</div>

															<div class="juego-precio" style="text-align: center;">
																@PrepararPrecio(precio, false)

																@if (precio.Moneda != JuegoMoneda.Euro)
																{
																	<br />

																	<label style="font-size: 13px;">@Divisas.DevolverSimbolo(precio.Precio, precio.Moneda)</label>
																}
															</div>
														</div>
													</div>
												</a>
											}
											else
											{
												preciosBajos.Add(precio);
											}
										}

										@if (preciosBajos.Count > 0)
										{
											<button class="juego-boton-pequeño" style="display: block;" @onclick="(e => DescuentosBajosMostrar(e))">
												<div style="display: flex; align-items: center; padding: 5px;">
													@if (mostrarDescuentosBajos == true)
													{
														<i class="fa-solid fa-angles-up"></i>

														<div style="width: 100%; text-align: center; font-size: 14px;">
															@Herramientas.Idiomas.CogerCadena(idioma, "String43", "Game")
														</div>

														<i class="fa-solid fa-angles-up"></i>
													}
													else
													{
														<i class="fa-solid fa-angles-down"></i>

														<div style="width: 100%; text-align: center; font-size: 14px;">
															@Herramientas.Idiomas.CogerCadena(idioma, "String42", "Game")
														</div>

														<i class="fa-solid fa-angles-down"></i>
													}
												</div>
											</button>

											if (mostrarDescuentosBajos == true)
											{
												foreach (var precioBajo in preciosBajos)
												{
													<a class="juego-boton-pequeño" style="display: block;" href="@EnlaceAcortador.Generar(precioBajo.Enlace, precioBajo.Tienda)" target="_blank">
														<div class="perfil-flexible-centrado">
															<div>
																<img src="@SacarImagenTienda(precioBajo.Tienda)" class="juego-imagen-boton" alt="Store" />
																<span style="margin-left: 20px;">@ComprobarEdicion(juego.Nombre, precioBajo.Nombre)</span>
															</div>

															<div class="juego-descuento-precio">
																<div style="font-size: 14px; margin: 20px;">
																	@Calculadora.DiferenciaTiempo(precioBajo.FechaDetectado, idioma)
																</div>

																<div style="width: 75px; text-align: center;" class="juego-descuento">
																	@precioBajo.Descuento.ToString()%
																</div>

																<div class="juego-precio" style="text-align: center;">
																	@PrepararPrecio(precioBajo, false)

																	@if (precioBajo.Moneda != JuegoMoneda.Euro)
																	{
																		<br />

																		<label style="font-size: 13px;">@Divisas.DevolverSimbolo(precioBajo.Precio, precioBajo.Moneda)</label>
																	}
																</div>
															</div>
														</div>
													</a>
												}
											}
										}
									</div>
								}
								else
								{
									<div style="padding: 20px;">@Idiomas.CogerCadena(idioma, "String12", "Game")</div>
								}
							</div>
						</div>
					</div>
				}
			}
		}

		@if (juego.Bundles != null)
		{
			<div id="bundles" class="perfil" style="margin-bottom: 50px;">
				@if (BundlesDisponibles(juego.Bundles).Count > 0)
				{
					<div style="margin-bottom: 10px;">
						<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String22", "Game")</label>
					</div>

					@foreach (var bundle2 in BundlesDisponibles(juego.Bundles))
					{
						if (bundle2.BundleId > 0)
						{
							var bundle3 = global::BaseDatos.Bundles.Buscar.UnBundle(bundle2.BundleId);

							if (bundle3 != null)
							{
								<a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar(bundle2.Enlace, bundle3.Tipo)" target="_blank" style="font-size: 16px; padding: 20px 25px; margin-top: 10px; margin-bottom: 10px; cursor: pointer;">
									<div style="display: flex; align-items: center;">
										<div style="margin-right: 15px;">
											<img src="@BundlesCargar.DevolverBundle(bundle3.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Bundle"/>
										</div>

										<div style="margin-right: 30px;">
											<img src="@JuegoDRM2.SacarImagen(bundle2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM"/>
										</div>

										<div style="margin-right: 20px; width: 100%;">
											<label style="cursor: pointer;">@bundle3.NombreBundle • @bundle3.NombreTienda</label><br />
											<label style="font-size: 13px; cursor: pointer;">@Calculadora.DiferenciaTiempo(bundle3.FechaTermina, idioma, 1)</label>
										</div>

										<div style="text-align: right;">
											<label style="cursor: pointer;">@BundlesPrepararPrecio(bundle3, juego.Id)</label>
											<label style="font-size: 13px; cursor: pointer;">@BundlesPrepararInfo(bundle3, juego.Id)</label>
										</div>
									</div>
								</a>
							}
						}						
					}
				}

				@if (BundlesAntiguos(juego.Bundles).Count > 0)
				{
					if (BundlesDisponibles(juego.Bundles).Count > 0)
					{
						<div style="margin-top: 40px; margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String23", "Game")</label>
						</div>
					}
					else
					{
						<div style="margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String23", "Game")</label>
						</div>
					}

					foreach (var bundle2 in BundlesAntiguos(juego.Bundles))
					{
						var bundle3 = global::BaseDatos.Bundles.Buscar.UnBundle(bundle2.BundleId);

						if (bundle3 != null)
						{
							<button @onclick="(e => BundleAbrir(e, bundle2.BundleId))" class="boton-pequeño" style="font-size: 17px; padding: 20px 25px; margin-top: 10px; margin-bottom: 10px;">
								<div style="display: flex; align-items: center;">
									<div style="margin-right: 15px;">
										<img src="@BundlesCargar.DevolverBundle(bundle3.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Bundle"/>
									</div>

									<div style="margin-right: 30px;">
										<img src="@JuegoDRM2.SacarImagen(bundle2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM"/>
									</div>

									<div style="margin-right: 20px; width: 100%;">
										<div style="cursor: pointer;">@bundle3.NombreBundle • @bundle3.NombreTienda</div>
										<div style="font-size: 13px; cursor: pointer;">@Calculadora.DiferenciaTiempo(bundle3.FechaTermina, idioma)</div>
									</div>

									<div style="text-align: right; width: 15%;">
										<div style="cursor: pointer;">@BundlesPrepararPrecio(bundle3, juego.Id)</div>
										<div style="font-size: 13px; cursor: pointer;">@BundlesPrepararInfo(bundle3, juego.Id)</div>
									</div>
								</div>
							</button>
						}
					}
				}			
			</div>
		}

		@if (juego.Gratis != null)
		{
			<div id="gratis" class="perfil" style="margin-bottom: 50px;">
				@if (GratisDisponibles(juego.Gratis).Count > 0)
				{
					<div style="margin-bottom: 10px;">
						<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String30", "Game")</label>
					</div>

					@foreach (var gratis2 in GratisDisponibles(juego.Gratis))
					{
						<a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar(gratis2.Enlace, gratis2.Tipo)" target="_blank" style="font-size: 16px; padding: 20px 25px; margin-top: 10px; margin-bottom: 10px; cursor: pointer;">
							<div style="display: flex; align-items: center;">
								<div style="margin-right: 15px;">
									<img src="@GratisCargar.DevolverGratis(gratis2.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Free"/>
								</div>

								<div style="margin-right: 30px;">
									<img src="@JuegoDRM2.SacarImagen(gratis2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM"/>
								</div>

								<div style="margin-right: 20px; width: 100%;">
									<label style="cursor: pointer;">@GratisCargar.DevolverGratis(gratis2.Tipo).Nombre</label>
								</div>
							</div>
						</a>
					}
				}

				@if (GratisAntiguos(juego.Gratis).Count > 0)
				{
					if (GratisDisponibles(juego.Gratis).Count > 0)
					{
						<div style="margin-top: 40px; margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String31", "Game")</label>
						</div>
					}
					else
					{
						<div style="margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String31", "Game")</label>
						</div>
					}

					foreach (var gratis2 in GratisAntiguos(juego.Gratis))
					{
						<hr/>
						<div style="display: flex; align-items: center; font-size: 16px; padding: 15px 5px;">
							<div style="margin-right: 15px; width: 22px; height: 22px;">
								<img src="@GratisCargar.DevolverGratis(gratis2.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Free"/>
							</div>

							<div style="margin-right: 30px; width: 22px; height: 22px;">
								<img src="@JuegoDRM2.SacarImagen(gratis2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM"/>
							</div>

							 <div style="padding-right: 20px; width: 15%;">
								<label>@GratisCargar.DevolverGratis(gratis2.Tipo).Nombre</label><br />
								<label style="font-size: 13px;">@Calculadora.DiferenciaTiempo(gratis2.FechaTermina, idioma)</label>
							</div>

							<div style="padding-right: 20px; width: 85%;">
								<label>@Idiomas.CogerCadena(idioma, "String37", "Game") @Calculadora.DiferenciaDuranteDias(gratis2.FechaEmpieza, gratis2.FechaTermina, idioma)</label><br />
								<label style="font-size: 13px;">@gratis2.FechaEmpieza.Day.ToString()/@gratis2.FechaEmpieza.Month.ToString()/@gratis2.FechaEmpieza.Year.ToString() • @gratis2.FechaTermina.Day.ToString()/@gratis2.FechaTermina.Month.ToString()/@gratis2.FechaTermina.Year.ToString()</label>
							</div> 
						</div>
					}
				}
			</div>
		}

		@if (juego.Suscripciones != null)
		{
			<div id="suscripciones" class="perfil" style="margin-bottom: 50px;">
				@if (SuscripcionesDisponibles(juego.Suscripciones).Count > 0)
				{
					<div style="margin-bottom: 10px;">
						<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String26", "Game")</label>
					</div>

					@foreach (var suscripcion2 in SuscripcionesDisponibles(juego.Suscripciones))
					{
						<a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar(suscripcion2.Enlace, suscripcion2.Tipo)" target="_blank" style="font-size: 16px; padding: 20px 25px; margin-top: 10px; margin-bottom: 10px; cursor: pointer;">
							<div style="display: flex; align-items: center;">
								<div style="margin-right: 15px;">
									<img src="@SuscripcionesCargar.DevolverSuscripcion(suscripcion2.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Subscription"/>
								</div>

								<div style="margin-right: 30px;">
									<img src="@JuegoDRM2.SacarImagen(suscripcion2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM"/>
								</div>

								<div style="margin-right: 20px; width: 100%;">
									<label style="cursor: pointer;">@SuscripcionesCargar.DevolverSuscripcion(suscripcion2.Tipo).Nombre</label><br/>
									<label style="font-size: 13px; cursor: pointer;">@Calculadora.DiferenciaTiempo(suscripcion2.FechaTermina, idioma, 1)</label>
								</div>
							</div>
						</a>
					}
				}

				@if (SuscripcionesAntiguos(juego.Suscripciones).Count > 0)
				{
					if (SuscripcionesDisponibles(juego.Suscripciones).Count > 0)
					{
						<div style="margin-top: 40px; margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String27", "Game")</label>
						</div>
					}
					else
					{
						<div style="margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String27", "Game")</label>
						</div>
					}

					foreach (var suscripcion2 in SuscripcionesAntiguos(juego.Suscripciones))
					{
						<hr />
						<div style="display: flex; align-items: center; font-size: 16px; padding: 15px 5px;">
							<div style="margin-right: 15px; width: 22px; height: 22px;">
								<img src="@SuscripcionesCargar.DevolverSuscripcion(suscripcion2.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Subscription" />
							</div>

							<div style="margin-right: 30px; width: 22px; height: 22px;">
								<img src="@JuegoDRM2.SacarImagen(suscripcion2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM"/>
							</div>

							<div style="padding-right: 20px; width: 15%;">
								<label>@SuscripcionesCargar.DevolverSuscripcion(suscripcion2.Tipo).Nombre</label><br />
								<label style="font-size: 13px;">@Calculadora.DiferenciaTiempo(suscripcion2.FechaTermina, idioma)</label>
							</div>

							<div style="padding-right: 20px; width: 85%;">
								<label>@Idiomas.CogerCadena(idioma, "String38", "Game") @Calculadora.DiferenciaDuranteDias(suscripcion2.FechaEmpieza, suscripcion2.FechaTermina, idioma)</label><br />
								<label style="font-size: 13px;">@suscripcion2.FechaEmpieza.Day.ToString()/@suscripcion2.FechaEmpieza.Month.ToString()/@suscripcion2.FechaEmpieza.Year.ToString() • @suscripcion2.FechaTermina.Day.ToString()/@suscripcion2.FechaTermina.Month.ToString()/@suscripcion2.FechaTermina.Year.ToString()</label>
							</div>
						</div>
					}
				}
			</div>
		}

		@if (juego.Media != null)
		{
			if (juego.Media.Capturas != null)
			{
				if (juego.Media.Capturas.Count > 0)
				{
					<div class="juego-galeria-contenedor" style="margin-top: 50px;">
						@if (mediaMostrarPosicion == 99999)
						{
							<BlazoredVideo style="width: 100vw; height: calc(100vh - 190px); cursor: pointer; max-width: 1320px; max-height: 742.50px;" controls="controls" preload="metadata">
								<source src="@mediaMostrar" type="video/mp4" />
								<source src="@mediaMostrar.Replace(".mp4", ".webm")" type="video/webm" />
							</BlazoredVideo>
						}
						else
						{
							<div>
								<div class="juego-galeria-numero">@(mediaMostrarPosicion + 1) / @(juego.Media.Capturas.Count)</div>
								<img src="@mediaMostrar" style="width: 100vw; height: calc(100vh - 190px); max-width: 1320px; max-height: 742.50px; object-fit: contain;" alt="@juego.Nombre">
							</div>

							<a class="juego-galeria-atras" @onclick="@(e => CambiarMediaMostrar(e, mediaMostrarPosicion - 1))">&#10094;</a>
							<a class="juego-galeria-siguiente" @onclick="@(e => CambiarMediaMostrar(e, mediaMostrarPosicion + 1))">&#10095;</a>
						}

						@if (juego.Media.Miniaturas != null)
						{
							string añadirMargin = string.Empty;

							if (string.IsNullOrEmpty(juego.Media.Video) == false)
							{
								añadirMargin = "margin-top: -5px;";
							}

							<div class="juego-galeria-fila" style="scrollbar-color: var(--fondoCodigo) var(--fondoOscuro); @añadirMargin">
								@{
									if (string.IsNullOrEmpty(juego.Media.Video) == false)
									{
										<div class="juego-galeria-columna" @onclick="@(e => CambiarMediaMostrar(e, 99999))" style="position: relative;">
											<img class="juego-galeria-capturas juego-galeria-cursor" src="@juego.Imagenes.Header_460x215" style="width: 100%;" alt="@juego.Nombre">
											<i class="fa-solid fa-circle-play" style="position: absolute; font-size: 40px; top: 50%; left: 50%; transform: translate(-50%, -50%); cursor: pointer;"></i>
										</div>
									}

									int i = 0;
									while (i < juego.Media.Miniaturas.Count)
									{
										int nuevaPosicion = i;

										<div class="juego-galeria-columna" @onclick="@(e => CambiarMediaMostrar(e, nuevaPosicion))">
											<img class="juego-galeria-capturas juego-galeria-cursor" src="@juego.Media.Miniaturas[i]" style="width: 100%;" alt="@juego.Nombre">
										</div>

										i += 1;
									}
								}
							</div>
						}
					</div>
				}
			}
		}

		<div class="descripcion-datos" style="display: grid; margin-top: 50px; gap: 30px;">
			@if (juego.Caracteristicas != null)
			{
				@if (string.IsNullOrEmpty(juego.Caracteristicas.Descripcion) == false)
				{
					<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
						@WebUtility.HtmlDecode(juego.Caracteristicas.Descripcion)
					</div>
				}

				@if (juego.Caracteristicas.Desarrolladores != null || juego.Caracteristicas.Publishers != null || juego.Generos != null)
				{
					<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px; display: flex; flex-direction: column; gap: 15px;">
						@if (juego.Caracteristicas.Desarrolladores != null)
						{
							if (juego.Caracteristicas.Desarrolladores.Count > 0)
							{
								List<string> listaDesarrolladores = new List<string>();

								foreach (var desarrollador in juego.Caracteristicas.Desarrolladores)
								{
									if (string.IsNullOrEmpty(desarrollador) == false)
									{
										listaDesarrolladores.Add(desarrollador);
									}
								}

								if (listaDesarrolladores.Count > 0)
								{
									<div>
										<div>@Idiomas.CogerCadena(idioma, "String35", "Game")</div>

										<div>
											@{
												int i = 0;

												foreach (var desarrollador in listaDesarrolladores)
												{
													if (i > 0)
													{
														<label style="margin-right: 5px;">,</label>
													}

													<label>@desarrollador</label>

													i += 1;
												}
											}
										</div>
									</div>									
								}
							}
						}

						@if (juego.Caracteristicas.Publishers != null)
						{
							if (juego.Caracteristicas.Publishers.Count > 0)
							{
								List<string> listaPublishers = new List<string>();

								foreach (var publisher in juego.Caracteristicas.Publishers)
								{
									if (string.IsNullOrEmpty(publisher) == false)
									{
										listaPublishers.Add(publisher);
									}
								}

								if (listaPublishers.Count > 0)
								{
									<div>
										<div>@Idiomas.CogerCadena(idioma, "String36", "Game")</div>
										
										<div>
                                            @{
                                                List<global::BaseDatos.Publishers.Publisher> publishersFinales = new List<global::BaseDatos.Publishers.Publisher>();

                                                foreach (var publisher in listaPublishers)
                                                {
                                                    string publisherLimpio = publisher;
													publisherLimpio = publisherLimpio.Replace(" ", null);
													publisherLimpio = publisherLimpio.Replace("(", null);
													publisherLimpio = publisherLimpio.Replace(")", null);
													publisherLimpio = publisherLimpio.Replace("?", null);
													publisherLimpio = publisherLimpio.Replace("/", null);
													publisherLimpio = publisherLimpio.Replace("\"", null);
													publisherLimpio = publisherLimpio.Replace("💘", null);
													publisherLimpio = publisherLimpio.ToLower();
													publisherLimpio = publisherLimpio.Trim();

													global::BaseDatos.Publishers.Publisher publisherFinal = global::BaseDatos.Publishers.Buscar.Id(publisherLimpio);

													if (publisherFinal == null)
													{
														publisherFinal = global::BaseDatos.Publishers.Buscar.NombreExacto(publisher.Trim());
													}

													if (publisherFinal == null)
													{
														publisherFinal = global::BaseDatos.Publishers.Buscar.NombreExacto(publisherLimpio.Trim());
													}

													if (publisherFinal == null)
													{
														publisherFinal = global::BaseDatos.Publishers.Buscar.Acepcion(publisher.Trim());
													}

													if (publisherFinal == null)
													{
														publisherFinal = global::BaseDatos.Publishers.Buscar.Acepcion(publisherLimpio.Trim());
													}

													string publisherLimpio2 = publisher;
													publisherLimpio2 = System.Text.RegularExpressions.Regex.Replace(publisherLimpio2, @"[^\u0000-\u007F]+", "");

													if (publisherFinal == null)
													{
														publisherFinal = global::BaseDatos.Publishers.Buscar.NombreExacto(publisherLimpio2.Trim());
													}

													if (publisherFinal == null)
													{
														publisherFinal = global::BaseDatos.Publishers.Buscar.Acepcion(publisherLimpio2.Trim());
													}

													if (publisherFinal != null)
													{
														bool añadir = true;

														if (publishersFinales.Count > 0)
														{
															foreach (var publisherFinal2 in publishersFinales)
															{
																if (publisherFinal2.Id == publisherFinal.Id)
																{
																	añadir = false;
																}
															}
														}

														if (añadir == true)
														{
															publishersFinales.Add(publisherFinal);
														}
													}
													else
													{
														global::BaseDatos.Publishers.Publisher publisherFinal2 = new global::BaseDatos.Publishers.Publisher();
														publisherFinal2.Id = publisherLimpio;
														publisherFinal2.Nombre = publisher;

														publisherFinal2.Nombre = publisherFinal2.Nombre.Replace(")", null);
														publisherFinal2.Nombre = publisherFinal2.Nombre.Replace("(", null);

														if (publisherFinal2.Nombre.Contains("?") == true)
														{
															publisherFinal2.Nombre = publisherFinal2.Nombre.Replace("?", null);
															publisherFinal2.Nombre = publisherFinal2.Nombre.Trim();
														}

														if (publisherFinal2.Nombre == "China")
														{
															publisherFinal2.Nombre = null;
														}

														if (string.IsNullOrEmpty(publisherFinal2.Nombre) == false)
														{
															bool añadirError = false;

															if (juego.Analisis != null)
															{
																if (string.IsNullOrEmpty(juego.Analisis.Cantidad) == false)
																{
																	if (juego.Analisis.Cantidad.Length > 2)
																	{
																		añadirError = true;
																	}
																}
															}

															if (añadirError == true)
															{
																publisherFinal2.Nombre = publisherFinal2.Nombre + " (no check)";

																publishersFinales.Add(publisherFinal2);

																string userAgent = string.Empty;

																if (HttpContext != null)
																{
																	userAgent = Environment.NewLine + HttpContext.Request.Headers.UserAgent;
																}

																global::BaseDatos.Errores.Insertar.Mensaje("Publisher no encontrado", publisherFinal2.Nombre + " - " + juego.Nombre + userAgent, "/game/" + juego.Id.ToString() + "/");
															}
															else
															{
																publisherFinal2.Id = "noenlazar";

																publishersFinales.Add(publisherFinal2);
															}
														}
													}
												}

												int i = 0;

												foreach (var publisher in publishersFinales)
												{
													if (i > 0)
													{
														<label style="margin-right: 5px;">,</label>
													}

													if (string.IsNullOrEmpty(publisher.Id) == false)
													{
														if (publisher.Id != "noenlazar")
														{
															<a href="/publisher/@publisher.Id/">@publisher.Nombre</a>
														}
														else
														{
															@publisher.Nombre
														}
													}
													else
													{
														@publisher.Nombre
													}

													i += 1;
												}
											}
										</div>
									</div>	
								}
							}
						}

						@if (juego.Generos != null)
						{
							if (juego.Generos.Count > 0)
							{
								<div>
									<div>@Idiomas.CogerCadena(idioma, "String44", "Game"):</div>

									<div>
										@{
											int i = 0;

											foreach (var genero in juego.Generos)
											{
												if (i > 0)
												{
													<label style="margin-right: 5px;">,</label>
												}

												string cadenaGenero = Idiomas.CogerCadena(idioma, genero, "Genres");

												if (string.IsNullOrEmpty(cadenaGenero) == false)
												{
													string idGenero = "g" + genero;
													<a href="/filter/@idGenero/">@cadenaGenero</a>
												}
												else
												{
													global::BaseDatos.Errores.Insertar.Mensaje("Género no encontrado", genero + " - " + juego.Nombre, "https://store.steampowered.com/api/appdetails/?appids=" + juego.IdSteam.ToString() + "&l=english");
												}

												i += 1;
											}
										}
									</div>
								</div>
							}
						}
					</div>
				}

				@if (juego.Categorias != null)
				{
					if (juego.Categorias.Count > 0)
					{
						<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 30px; width: 100%;">
							<div style="margin-bottom: 5px;">
								@Idiomas.CogerCadena(idioma, "String49", "Game")
							</div>
							<div style="font-size: 14px;">
								@Idiomas.CogerCadena(idioma, "String50", "Game")
							</div>
							<hr />

							<div style="display: flex; align-items: center; flex-flow: wrap; grid-gap: 10px;">
								@foreach (var categoria in juego.Categorias)
								{
									string cadenaCategoria = Idiomas.CogerCadena(idioma, categoria, "Categories");

									if (string.IsNullOrEmpty(cadenaCategoria) == false)
									{
										string imagenCategoria = "/imagenes/categorias/" + categoria + ".webp";
										string idCategoria = "c" + categoria;

										<a href="/filter/@idCategoria/" class="boton-expandir" style="color: var(--colorTexto); text-decoration: none;">
											<div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px; height: 100%;">
												<img style="width: 26px; height: 16px;" src="@imagenCategoria" />

												<div style="width: 100%; font-size: 14px;">@cadenaCategoria</div>
											</div>
										</a>
									}
									else
									{
										global::BaseDatos.Errores.Insertar.Mensaje("Categoría no encontrada", categoria + " - " + juego.Nombre + ": https://store.steampowered.com/api/appdetails/?appids=" + juego.IdSteam.ToString() + "&l=english");
									}
								}
							</div>
						</div>
					}
				}

				@if (juego.Etiquetas != null)
				{
					if (juego.Etiquetas.Count > 0)
					{
						<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 30px; width: 100%;">
							<div style="margin-bottom: 5px;">
								@Idiomas.CogerCadena(idioma, "String47", "Game")
							</div>
							<div style="font-size: 14px;">
								@Idiomas.CogerCadena(idioma, "String48", "Game")
							</div>
							<hr />

							<div style="display: flex; align-items: center; flex-flow: wrap; grid-gap: 10px;">
								@foreach (var etiqueta in juego.Etiquetas)
								{
									string cadenaEtiqueta = Idiomas.CogerCadena(idioma, etiqueta, "Tags");

									if (string.IsNullOrEmpty(cadenaEtiqueta) == false)
									{
										string idEtiqueta = "t" + etiqueta;

										<a href="/filter/@idEtiqueta/" class="boton-expandir" style="color: var(--colorTexto); text-decoration: none;">
											<div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px; height: 100%;">
												<div style="width: 100%; font-size: 14px;">@cadenaEtiqueta</div>
											</div>
										</a>
									}
									else
									{
										global::BaseDatos.Errores.Insertar.Mensaje("Etiqueta no encontrada", etiqueta + " - " + juego.Nombre, "https://store.steampowered.com/tagdata/populartags/spanish");
									}
								}
							</div>
						</div>
					}
				}
			}
		</div>

		@if (DLCs.Count > 0)
		{
			<div id="dlcs" class="perfil" style="margin-top: 50px;">
				<div style="margin-bottom: 10px;">
					<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String34", "Game") (@DLCs.Count.ToString())</label>
				</div>

				@foreach (var dlc in DLCs)
				{
					<a class="juego-boton-pequeño" href="/game/@dlc.Id/@Herramientas.EnlaceAdaptador.Nombre(dlc.Nombre)/" target="_blank" style="font-size: 16px; margin-top: 10px; margin-bottom: 10px; cursor: pointer; padding: 0px;">
						<div style="display: flex; align-items: center;">
							<div style="margin-right: 20px;">
								<img src="@dlc.Imagenes.Header_460x215" style="max-width: 230px; max-height: 107px;" alt="@dlc.Nombre" />
							</div>

							<div style="margin-right: 20px; width: 100%;">
								<div>@dlc.Nombre</div>
								<div style="margin-top: 10px; font-size: 14px;">@PrecioMinimoActual(dlc, idioma)</div>
							</div>
						</div>
					</a>
				}
			</div>
		}
	</div>
</div>

@if (bundleId > 0)
{
	<div class="opciones-panel">
		<div style="max-width: 1320px; margin: 20px auto; overflow-y: scroll; padding-right: 20px; scrollbar-color: var(--fondoCodigo) var(--fondoOscuro);">
			@{
				Bundles2.Bundle bundleSeleccionado = global::BaseDatos.Bundles.Buscar.UnBundle(bundleId);
			}

			<div style="margin-bottom: 20px;">
				<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 20px 30px; display: flex; align-items: center; flex-direction: row;">
					<button @onclick="@(e => BundleCerrar(e))" class="boton-pequeño" style="width: auto; text-align: center; font-size: 23px; padding: 10px 20px;">
						<i class="fa-solid fa-arrow-left"></i>
					</button>

					<div style="display: flex; align-items: center; flex-direction: row;">
						<a href="@Herramientas.EnlaceAcortador.Generar(bundleSeleccionado.Enlace, bundleSeleccionado.Tipo)" style="width: auto;" target="_blank">
							<div style="height: 60px; padding-left: 40px; padding-right: 20px;">
								<img src="@Bundles2.BundlesCargar.DevolverBundle(bundleSeleccionado.Tipo).ImagenTienda" style="height: 100%;" alt="@bundleSeleccionado.NombreBundle" />
							</div>
						</a>

						<div style="padding-left: 20px; padding-right: 20px;">
							<a href="@Herramientas.EnlaceAcortador.Generar(bundleSeleccionado.Enlace, bundleSeleccionado.Tipo)" class="boton-pequeño" style="background-color: transparent; padding: 0px; font-size: 20px; margin-bottom: 10px;" target="_blank">
								@bundleSeleccionado.NombreBundle
							</a>

							<div style="display: flex; align-items: center; flex-direction: row; font-size: 14px;">
								<a href="/bundle/@bundleSeleccionado.Id/@Herramientas.EnlaceAdaptador.Nombre(bundleSeleccionado.NombreBundle)/" class="boton-pequeño" style="width: auto; text-align: center; padding: 4px 8px; margin-right: 20px; font-size: 14px;">
									<i class="fa-solid fa-link"></i>
								</a>

								@bundleSeleccionado.FechaEmpieza.Day.ToString()/@bundleSeleccionado.FechaEmpieza.Month.ToString()/@bundleSeleccionado.FechaEmpieza.Year.ToString() • @bundleSeleccionado.FechaTermina.Day.ToString()/@bundleSeleccionado.FechaTermina.Month.ToString()/@bundleSeleccionado.FechaTermina.Year.ToString()
							</div>
						</div>
					</div>
				</div>

				@if (DateTime.Today < bundleSeleccionado.FechaTermina)
				{
					<a href="@Herramientas.EnlaceAcortador.Generar(bundleSeleccionado.Enlace, bundleSeleccionado.Tipo)" class="boton-pequeño" style="text-align: center; padding: 10px 15px;" target="_blank">
						@Herramientas.Idiomas.CogerCadena(idioma, "String3", "Bundle")
					</a>
				}
			</div>

			<Bundle bundleId="@bundleId" idioma="@idioma" tipo="@Bundle.Tipo.Juego" />
		</div>		
	</div>
}

@if (enseñarDeck == true)
{
	<div class="opciones-panel">
		<div style="max-width: 900px; background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px; overflow-y: scroll;">
			<div style="display: flex; align-items: start; flex-direction: row; gap: 40px;">
				<button @onclick="@(e => DeckCerrar(e))" class="boton-pequeño" style="width: auto; text-align: center; font-size: 23px; padding: 10px 20px;">
					<i class="fa-solid fa-arrow-left"></i>
				</button>

				<div style="display: flex; flex-direction: column;">
					<div style="display: flex; align-items: center; gap: 20px;">
						<label style="font-size: 18px;">@Herramientas.Idiomas.CogerCadena(idioma, "String1", "Deck")</label>

						<div style="height: 24px;">
							@if (juego.Deck == JuegoDeck.Verificado)
							{
								<svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.33342 11.9222L14.4945 5.76667L16.4556 7.72779L8.33342 15.8556L3.26675 10.7833L5.22786 8.82223L8.33342 11.9222Z" fill="var(--deckVerificado)"></path></svg>
							}

							@if (juego.Deck == JuegoDeck.Jugable)
							{
								<svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.61079 9.44444V15H11.3886V9.44444H8.61079ZM9.07372 8.05245C9.34781 8.23558 9.67004 8.33333 9.99967 8.33333C10.4417 8.33333 10.8656 8.15774 11.1782 7.84518C11.4907 7.53262 11.6663 7.10869 11.6663 6.66667C11.6663 6.33703 11.5686 6.0148 11.3855 5.74072C11.2023 5.46663 10.942 5.25301 10.6375 5.12687C10.3329 5.00072 9.99783 4.96771 9.67452 5.03202C9.35122 5.09633 9.05425 5.25507 8.82116 5.48815C8.58808 5.72124 8.42934 6.01821 8.36503 6.34152C8.30072 6.66482 8.33373 6.99993 8.45988 7.30447C8.58602 7.60902 8.79964 7.86931 9.07372 8.05245Z" fill="var(--deckJugable)"></path></svg>
							}

							@if (juego.Deck == JuegoDeck.NoSoportado)
							{
								<svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M14.193 15.606a7 7 0 0 1-9.799-9.799l9.8 9.8Zm1.414-1.414a7 7 0 0 0-9.799-9.799l9.8 9.8ZM19.001 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" fill="var(--colorTexto)"></path></svg>
							}
						</div>
					</div>

					<hr />

					@if (juego.Deck == JuegoDeck.Verificado)
					{
						<label>@string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String2", "Deck"), juego.Nombre)</label>
					}

					@if (juego.Deck == JuegoDeck.Jugable)
					{
						<label>@string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String3", "Deck"), juego.Nombre)</label>
					}

					@if (juego.Deck == JuegoDeck.NoSoportado)
					{
						<label>@string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String4", "Deck"), juego.Nombre)</label>
					}

					@if (juego.DeckTokens != null)
					{
						if (juego.DeckTokens.Count > 0)
						{
							<hr />

							<div style="display: flex; flex-direction: column; gap: 20px;">
								@foreach (var token in juego.DeckTokens)
								{
									if (token.Tipo == 1)
									{
										<div style="background-color: var(--fondoAlerta); padding: 8px 16px;">
											@{
												string cadenaMensaje = Idiomas.CogerCadena(idioma, token.Mensaje, "Deck");

												if (string.IsNullOrEmpty(cadenaMensaje) == false)
												{
													<label style="font-size: 15px;">@cadenaMensaje</label>
												}
												else
												{
													global::BaseDatos.Errores.Insertar.Mensaje("Deck no encontrado", token.Mensaje, "https://store.steampowered.com/app/" + juego.IdSteam);

													<label>@token.Mensaje (No Check)</label>
												}
											}
										</div>
									}
								}

								@foreach (var token in juego.DeckTokens)
								{
									if (token.Tipo != 1)
									{
										<div style="display: flex; align-items: center; gap: 15px;">
											<div style="max-height: 20px; max-width: 20px;">
												@if (token.Tipo == 2)
												{
													<svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M14.193 15.606a7 7 0 0 1-9.799-9.799l9.8 9.8Zm1.414-1.414a7 7 0 0 0-9.799-9.799l9.8 9.8ZM19.001 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" fill="var(--colorTexto)"></path></svg>
												}

												@if (token.Tipo == 3)
												{
													<svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.61079 9.44444V15H11.3886V9.44444H8.61079ZM9.07372 8.05245C9.34781 8.23558 9.67004 8.33333 9.99967 8.33333C10.4417 8.33333 10.8656 8.15774 11.1782 7.84518C11.4907 7.53262 11.6663 7.10869 11.6663 6.66667C11.6663 6.33703 11.5686 6.0148 11.3855 5.74072C11.2023 5.46663 10.942 5.25301 10.6375 5.12687C10.3329 5.00072 9.99783 4.96771 9.67452 5.03202C9.35122 5.09633 9.05425 5.25507 8.82116 5.48815C8.58808 5.72124 8.42934 6.01821 8.36503 6.34152C8.30072 6.66482 8.33373 6.99993 8.45988 7.30447C8.58602 7.60902 8.79964 7.86931 9.07372 8.05245Z" fill="var(--deckJugable)"></path></svg>
												}

												@if (token.Tipo == 4)
												{
													<svg style="display: block; width: 100%; height: 100%;" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.33342 11.9222L14.4945 5.76667L16.4556 7.72779L8.33342 15.8556L3.26675 10.7833L5.22786 8.82223L8.33342 11.9222Z" fill="var(--deckVerificado)"></path></svg>
												}
											</div>

											@{
												string cadenaMensaje = Idiomas.CogerCadena(idioma, token.Mensaje, "Deck");

												if (string.IsNullOrEmpty(cadenaMensaje) == false)
												{
													<label style="font-size: 15px;">@cadenaMensaje</label>
												}
												else
												{
													global::BaseDatos.Errores.Insertar.Mensaje("Deck no encontrado", token.Mensaje, "https://store.steampowered.com/app/" + juego.IdSteam);

													<label>@token.Mensaje (No Check)</label>
												}
											}
										</div>
									}
								}
							</div>
						}
					}
				</div>
			</div>
		</div>
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public Juegos.Juego juego { get; set; }

	private Usuario usuario = new Usuario();

	private List<Juegos.Juego> DLCs = new List<Juegos.Juego>();

	#nullable enable
	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }
	#nullable disable

	protected override async Task OnInitializedAsync()
	{
		if (HttpContext == null)
		{
			usuario = await Herramientas.UsuarioDatos.Actualizar(HttpContextAccessor.HttpContext.User, usuario, UserManager, idioma);

			//-------------------------------------------

			if (juego != null)
			{
				DLCs = global::BaseDatos.Juegos.Buscar.DLCs(juego.Id.ToString());

				if (juego.Media != null)
				{
					if (string.IsNullOrEmpty(juego.Media.Video) == false)
					{
						mediaMostrar = juego.Media.Video;
						mediaMostrar = mediaMostrar.Replace("http://", "https://");
						mediaMostrar = mediaMostrar.Replace("http://", "https://");
						mediaMostrarPosicion = 99999;
					}
					else
					{
						if (juego.Media.Capturas != null)
						{
							if (juego.Media.Capturas.Count > 0)
							{
								mediaMostrar = juego.Media.Capturas[0];
							}
						}
					}
				}

				if (juego.IdSteam > 0)
				{
					bool actualizarDatosAPI = false;

					if (juego.FechaSteamAPIComprobacion + TimeSpan.FromDays(60) < DateTime.Now)
					{
						actualizarDatosAPI = true;
					}

					if (juego.Categorias == null && juego.Generos == null)
					{
						actualizarDatosAPI = true;

						if (juego.Tipo == JuegoTipo.Music)
						{
							actualizarDatosAPI = false;
						}
					}

					if (actualizarDatosAPI == true)
					{
						global::Juegos.Juego nuevoJuego = await APIs.Steam.Juego.CargarDatos(juego.IdSteam.ToString());

						if (nuevoJuego != null)
						{
							global::BaseDatos.Juegos.Actualizar.Media(nuevoJuego, juego);
						}
					}

					if (juego.Tipo == JuegoTipo.Game)
					{
						bool actualizarDeckAPI = false;

						if (juego.DeckComprobacion == null)
						{
							actualizarDeckAPI = true;
						}
						else
						{
							if (juego.DeckComprobacion + TimeSpan.FromDays(180) < DateTime.Now)
							{
								actualizarDeckAPI = true;
							}
						}

						if (juego.DeckTokens == null)
						{
							actualizarDeckAPI = true;
						}

						if (actualizarDeckAPI == true)
						{
							APIs.Steam.SteamDeckAPI deckAPI = await APIs.Steam.Juego.CargarDatosDeck(juego.IdSteam);
							bool vacio = true;

							if (deckAPI != null)
							{
								if (deckAPI.Datos != null)
								{
									juego.Deck = (JuegoDeck)deckAPI.Datos.Resultado;
									juego.DeckComprobacion = DateTime.Now;

									if (deckAPI.Datos.Tokens != null)
									{
										if (deckAPI.Datos.Tokens.Count > 0)
										{
											List<JuegoDeckToken> tokens = new List<JuegoDeckToken>();

											foreach (var token in deckAPI.Datos.Tokens)
											{
												if (string.IsNullOrEmpty(token.Token) == false)
												{
													JuegoDeckToken nuevoToken = new JuegoDeckToken();
													nuevoToken.Tipo = token.Tipo;
													nuevoToken.Mensaje = token.Token;

													tokens.Add(nuevoToken);
												}
											}

											juego.DeckTokens = tokens;
										}
									}

									vacio = false;
									global::BaseDatos.Juegos.Actualizar.Deck(juego);
								}
							}

							if (vacio == true)
							{
								juego.DeckComprobacion = DateTime.Now;
								global::BaseDatos.Juegos.Actualizar.DeckVacio(juego);
							}
						}
					}
				}				
			}
		}
	}

	protected override async Task OnAfterRenderAsync(bool primerRender)
	{
		if (primerRender == true)
		{
			if (juego != null)
			{
				await JavaScript.InvokeVoidAsync("ChangeUrl", "/game/" + juego.Id.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(juego.Nombre) + "/");
			}
		}
	}

	public static string LimpiarImagenJuego(string enlace)
	{
		if (enlace.Contains("/header_alt_") == true)
		{
			int int1 = enlace.IndexOf("/header_alt_");
			enlace = enlace.Remove(int1, enlace.Length - int1);

			enlace = enlace + "/header.jpg";
		}

		return enlace;
	}

	public bool VerificarMostrarDRM(string idioma, JuegoDRM drm, global::Juegos.Juego juego)
	{
		bool mostrar = false;

		if (CogerMinimoDRM(idioma, drm, juego.PrecioMinimosHistoricos, juego.PrecioActualesTiendas) != null)
		{
			mostrar = true;
		}
		else if (BundlesComprobar(juego.Bundles, drm) != null)
		{
			mostrar = true;
		}
		else if (GratisComprobar(juego.Gratis, drm) != null)
		{
			mostrar = true;
		}
		else if (SuscripcionesComprobar(juego.Suscripciones, drm) != null)
		{
			mostrar = true;
		}

		return mostrar;
	}

	public static string CogerMinimoDRM(string idioma, JuegoDRM drm, List<JuegoPrecio> historicos, List<JuegoPrecio> actuales)
	{
		string drmPreparado = null;

		List<JuegoPrecio> historicosOrdenados = new List<JuegoPrecio>();

		if (historicos != null)
		{
			if (historicos.Count > 0)
			{
				foreach (JuegoPrecio historico in historicos)
				{
					if (historico.DRM == drm)
					{
						historicosOrdenados.Add(historico);
					}
				}
			}
		}

		if (historicosOrdenados.Count == 0)
		{
			if (actuales != null)
			{
				if (actuales.Count > 0)
				{
					historicosOrdenados = OrdenarPrecios(actuales, drm);
				}
			}			
		}

		if (historicosOrdenados.Count > 0)
		{
			if (historicosOrdenados[0] != null)
			{
				List<Tienda> tiendas = TiendasCargar.GenerarListado();
				string tiendaFinal = string.Empty;

				foreach (var tienda in tiendas)
				{
					if (tienda.Id == historicosOrdenados[0].Tienda)
					{
						tiendaFinal = tienda.Nombre;
					}
				}

				if (historicosOrdenados[0].FechaActualizacion + TimeSpan.FromHours(23) > DateTime.Now && historicosOrdenados[0].Descuento > 0)
				{
					drmPreparado = drmPreparado + " (" + Idiomas.CogerCadena(idioma, "String11", "Game") + " " + Idiomas.CogerCadena(idioma, "String13", "Game") + " " + tiendaFinal + ")";
				}
				else
				{
					drmPreparado = drmPreparado + " (" + Calculadora.DiferenciaTiempo(historicosOrdenados[0].FechaDetectado, idioma) + " " + Idiomas.CogerCadena(idioma, "String13", "Game") + " " + tiendaFinal + ")";
				}

			}		
		}

		return drmPreparado;
	}

	public static string PrepararPrecio(List<JuegoPrecio> precios, JuegoDRM drm, bool historico)
	{
		if (precios != null)
		{
			if (precios.Count > 0)
			{
				foreach (var precio in precios)
				{
					if (precio.DRM == drm)
					{
						return PrepararPrecio(precio, historico);
					}
				}
			}
		}

		return null;
	}

	public static string PrepararPrecio(JuegoPrecio precio, bool historico)
	{
		string precioTexto = string.Empty;

		if (historico == true)
		{
			precioTexto = precio.Precio.ToString();
		}
		else
		{
			if (precio.Moneda != JuegoMoneda.Euro)
			{
				precioTexto = precio.PrecioCambiado.ToString();
			}
			else
			{
				precioTexto = precio.Precio.ToString();
			}
		}

		precioTexto = precioTexto.Replace(".", ",");

		int int1 = precioTexto.IndexOf(",");

		if (int1 == precioTexto.Length - 2)
		{
			precioTexto = precioTexto + "0";
		}

		if (precioTexto.Length > int1 + 3)
		{
			precioTexto = precioTexto.Remove(int1 + 3, precioTexto.Length - int1 - 3);
		}

		precioTexto = precioTexto + "€";

		return precioTexto;
	}

	public static List<JuegoPrecio> OrdenarPrecios(List<JuegoPrecio> precios, JuegoDRM drm)
	{
		List<JuegoPrecio> preciosOrdenados = new List<JuegoPrecio>();

		if (precios != null)
		{
			if (precios.Count > 0)
			{
				foreach (JuegoPrecio precio in precios)
				{
					if (precio.DRM == drm && precio.Descuento > 0)
					{
						TimeSpan actualizado = DateTime.Now.Subtract(precio.FechaActualizacion);

						if (actualizado.Days == 0)
						{
							JuegoPrecio nuevoPrecio = precio;

							if (nuevoPrecio != null)
							{
								if (nuevoPrecio.Moneda != JuegoMoneda.Euro)
								{
									nuevoPrecio.PrecioCambiado = Divisas.Cambio(nuevoPrecio.Precio, nuevoPrecio.Moneda);
								}
							}

							bool verificacionFinal = true;

							if (preciosOrdenados.Count > 0)
							{
								foreach (var ordenado in preciosOrdenados)
								{
									if (ordenado.Enlace == nuevoPrecio.Enlace && ordenado.Tienda == nuevoPrecio.Tienda && ordenado.DRM == nuevoPrecio.DRM)
									{
										verificacionFinal = false;
										break;
									}
								}
							}

							if (drm == JuegoDRM.NoEspecificado)
							{
								verificacionFinal = false;
							}

							if (verificacionFinal == true)
							{
								preciosOrdenados.Add(nuevoPrecio);
							}
						}
					}
				}
			}
		}

		if (preciosOrdenados.Count > 0)
		{
			preciosOrdenados.Sort(delegate (JuegoPrecio p1, JuegoPrecio p2)
			{
				decimal precio1 = 0;

				if (p1.Moneda != JuegoMoneda.Euro)
				{
					precio1 = p1.PrecioCambiado;
				}
				else
				{
					precio1 = p1.Precio;
				}

				decimal precio2 = 0;

				if (p2.Moneda != JuegoMoneda.Euro)
				{
					precio2 = p2.PrecioCambiado;
				}
				else
				{
					precio2 = p2.Precio;
				}

				if (precio1 == precio2)
				{
					return p2.FechaDetectado.CompareTo(p1.FechaDetectado);
				}
				else
				{
					return precio1.CompareTo(precio2);
				}
			});
		}

		return preciosOrdenados;
	}

	public static string SacarImagenTienda(string codigo)
	{
		string imagen = string.Empty;

		List<Tienda> tiendas = TiendasCargar.GenerarListado();

		foreach (var tienda in tiendas)
		{
			if (tienda.Id == codigo)
			{
				imagen = tienda.Imagen300x80;
			}
		}

		return imagen;
	}

	private static string ComprobarEdicion(string juego, string oferta)
	{
		if (string.IsNullOrEmpty(oferta) == false)
		{
			if (Buscador.LimpiarNombre(juego) != Buscador.LimpiarNombre(oferta))
			{
				string nuevoTexto = oferta.Replace(juego, null);
				nuevoTexto = nuevoTexto.Trim();

				int i = 0;
				while (i < 10)
				{
					if (nuevoTexto.Contains("-") == true)
					{
						int int1 = nuevoTexto.IndexOf("-");

						if (int1 == 0)
						{
							nuevoTexto = nuevoTexto.Remove(0, 1);
							nuevoTexto = nuevoTexto.Trim();
						}
					}
					i += 1;
				}

				i = 0;
				while (i < 10)
				{
					if (nuevoTexto.Contains(":") == true)
					{
						int int1 = nuevoTexto.IndexOf(":");

						if (int1 == 0)
						{
							nuevoTexto = nuevoTexto.Remove(0, 1);
							nuevoTexto = nuevoTexto.Trim();
						}
					}
					i += 1;
				}

				if (nuevoTexto.Contains("??") == true)
				{
					nuevoTexto = nuevoTexto.Replace("/", null);
					nuevoTexto = nuevoTexto.Replace("?", null);
				}

				nuevoTexto = nuevoTexto.Replace("(Steam)", null);
				nuevoTexto = nuevoTexto.Replace("(STEAM)", null);
				nuevoTexto = nuevoTexto.Replace("(Epic)", null);
				nuevoTexto = nuevoTexto.Replace("(EPIC)", null);
				nuevoTexto = nuevoTexto.Replace("(GOG)", null);
				nuevoTexto = nuevoTexto.Replace("(Giants)", null);
				nuevoTexto = nuevoTexto.Replace("(Microsoft Store)", null);
				nuevoTexto = nuevoTexto.Replace("(ROW)", null);

				nuevoTexto = nuevoTexto.Trim();

				if (Buscador.LimpiarNombre(juego) != Buscador.LimpiarNombre(nuevoTexto))
				{
					string ofertaLimpiada = Buscador.LimpiarNombre(oferta, false);
					string juegoLimpiado = Buscador.LimpiarNombre(juego, false);

					if (ofertaLimpiada.Contains(juegoLimpiado) == true)
					{
						ofertaLimpiada = ofertaLimpiada.Replace(juegoLimpiado, null);
						ofertaLimpiada = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(ofertaLimpiada);

						nuevoTexto = ofertaLimpiada;

						nuevoTexto = nuevoTexto.Replace("Steam", null);
						nuevoTexto = nuevoTexto.Replace("Epic", null);
						nuevoTexto = nuevoTexto.Replace("Gog", null);
						nuevoTexto = nuevoTexto.Replace("Giants", null);
						nuevoTexto = nuevoTexto.Replace("Microsoft Store", null);
						nuevoTexto = nuevoTexto.Replace("Row", null);
						nuevoTexto = nuevoTexto.Replace("Mac", null);
					}

					return nuevoTexto;
				}				
			}
		}

		return null;
	}

	#region Deseados

	private void CambiarEstadoDeseado(MouseEventArgs e, bool estado, JuegoDRM drm)
	{
		Herramientas.Deseados.CambiarEstado(UserManager, usuario, juego, estado, drm);
	}

	#endregion

	#region Bundles

	public string BundlesComprobar(List<JuegoBundle> listaBundles, JuegoDRM drm)
	{
		if (listaBundles != null)
		{
			if (listaBundles.Count > 0)
			{
				foreach (var bundle in listaBundles)
				{
					if (drm == bundle.DRM)
					{
						return "bundle";
					}
				}
			}
		}

		return null;
	}

	public string BundlesPreparar(JuegoDRM drm, string idioma)
	{
		if (BundlesDisponibles(juego.Bundles, drm) != null)
		{
			if (BundlesDisponibles(juego.Bundles, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "String20", "Game");
			}
		}

		if (BundlesAntiguos(juego.Bundles, drm) != null)
		{
			if (BundlesAntiguos(juego.Bundles, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "String21", "Game");
			}
		}

		return null;
	}

	public List<JuegoBundle> BundlesDisponibles(List<JuegoBundle> listaBundles, JuegoDRM drm = 0)
	{
		List<JuegoBundle> bundlesDisponibles = new List<JuegoBundle>();

		if (listaBundles != null)
		{
			if (listaBundles.Count > 0)
			{
				foreach (var bundle in listaBundles)
				{
					if (DateTime.Now >= bundle.FechaEmpieza && DateTime.Now <= bundle.FechaTermina)
					{
						if (drm != 0 && bundle.BundleId > 0)
						{
							if (bundle.DRM == drm)
							{
								bundlesDisponibles.Add(bundle);
							}
						}
						else
						{
							bundlesDisponibles.Add(bundle);
						}
					}					
				}
			}
		}

		return bundlesDisponibles;
	}

	public List<JuegoBundle> BundlesAntiguos(List<JuegoBundle> listaBundles, JuegoDRM drm = 0)
	{
		List<JuegoBundle> bundlesAntiguos = new List<JuegoBundle>();

		if (listaBundles != null)
		{
			if (listaBundles.Count > 0)
			{
				foreach (var bundle in listaBundles)
				{
					if (DateTime.Now > bundle.FechaTermina)
					{
						if (drm != 0)
						{
							if (bundle.DRM == drm)
							{
								bundlesAntiguos.Add(bundle);
							}
						}
						else
						{
							bundlesAntiguos.Add(bundle);
						}
					}
				}
			}
		}

		if (bundlesAntiguos.Count > 0)
		{
			bundlesAntiguos = bundlesAntiguos.OrderByDescending(x => x.FechaTermina).ToList();
		}

		return bundlesAntiguos;
	}

	public string BundlesPrepararPrecio(Bundles2.Bundle bundle, int juegoId)
	{
		foreach (var juego in bundle.Juegos)
		{
			if (juegoId.ToString() == juego.JuegoId)
			{
				string precioTexto = juego.Tier.Precio;

				if (precioTexto != null)
				{
					precioTexto = precioTexto.Replace(".", ",");

					if (precioTexto.Contains(",") == true)
					{
						int int1 = precioTexto.IndexOf(",");

						if (int1 == precioTexto.Length - 2)
						{
							precioTexto = precioTexto + "0";
						}
					}

					precioTexto = precioTexto + "€";
					return precioTexto;
				}
			}
		}

		return null;
	}

	public string BundlesPrepararInfo(Bundles2.Bundle bundle, int juegoId)
	{
		if (bundle.Pick == false)
		{
			int tier = 0;

			foreach (var juego in bundle.Juegos)
			{
				if (juegoId.ToString() == juego.JuegoId)
				{
					tier = juego.Tier.Posicion;
					break;
				}
			}

			return Herramientas.Idiomas.CogerCadena(idioma, "String39", "Game") + " " + tier.ToString();
		}
		else
		{
			if (bundle.Tiers[0].CantidadJuegos == 1)
			{
				return Herramientas.Idiomas.CogerCadena(idioma, "String40", "Game");
			}
			else
			{
				return string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String41", "Game"), bundle.Tiers[0].CantidadJuegos.ToString());
			}
		}
	}

	private int bundleId = 0;

	private void BundleAbrir(MouseEventArgs e, int nuevoBundleId)
	{
		bundleId = nuevoBundleId;
	}

	private void BundleCerrar(MouseEventArgs e)
	{
		bundleId = 0;
	}

	#endregion 

	#region Gratis

	public string GratisComprobar(List<JuegoGratis> listaGratis, JuegoDRM drm)
	{
		if (listaGratis != null)
		{
			if (listaGratis.Count > 0)
			{
				foreach (var gratis in listaGratis)
				{
					if (drm == gratis.DRM)
					{
						return "gratis";
					}
				}
			}
		}

		return null;
	}

	public string GratisPreparar(JuegoDRM drm, string idioma)
	{
		if (GratisDisponibles(juego.Gratis, drm) != null)
		{
			if (GratisDisponibles(juego.Gratis, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "String28", "Game");
			}
		}

		if (GratisAntiguos(juego.Gratis, drm) != null)
		{
			if (GratisAntiguos(juego.Gratis, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "String29", "Game");
			}
		}

		return null;
	}

	public List<JuegoGratis> GratisDisponibles(List<JuegoGratis> listaGratis, JuegoDRM drm = 0)
	{
		List<JuegoGratis> gratisDisponibles = new List<JuegoGratis>();

		if (listaGratis != null)
		{
			if (listaGratis.Count > 0)
			{
				foreach (var gratis in listaGratis)
				{
					if (DateTime.Now >= gratis.FechaEmpieza && DateTime.Now <= gratis.FechaTermina)
					{
						if (drm != 0)
						{
							if (gratis.DRM == drm)
							{
								gratisDisponibles.Add(gratis);
							}
						}
						else
						{
							gratisDisponibles.Add(gratis);
						}
					}
				}
			}
		}

		return gratisDisponibles;
	}

	public List<JuegoGratis> GratisAntiguos(List<JuegoGratis> listaGratis, JuegoDRM drm = 0)
	{
		List<JuegoGratis> gratisAntiguos = new List<JuegoGratis>();

		if (listaGratis != null)
		{
			if (listaGratis.Count > 0)
			{
				foreach (var gratis in listaGratis)
				{
					if (DateTime.Now > gratis.FechaTermina)
					{
						if (drm != 0)
						{
							if (gratis.DRM == drm)
							{
								gratisAntiguos.Add(gratis);
							}
						}
						else
						{
							gratisAntiguos.Add(gratis);
						}
					}
				}
			}
		}

		if (gratisAntiguos.Count > 0)
		{
			gratisAntiguos = gratisAntiguos.OrderByDescending(x => x.FechaEmpieza).ToList();
		}

		return gratisAntiguos;
	}

	#endregion

	#region Suscripciones

	public string SuscripcionesComprobar(List<JuegoSuscripcion> listaSuscripciones, JuegoDRM drm)
	{
		if (listaSuscripciones != null)
		{
			if (listaSuscripciones.Count > 0)
			{
				foreach (var suscripciones in listaSuscripciones)
				{
					if (drm == suscripciones.DRM)
					{
						return "suscripcion";
					}
				}
			}
		}

		return null;
	}

	public string SuscripcionesPreparar(JuegoDRM drm, string idioma)
	{
		if (SuscripcionesDisponibles(juego.Suscripciones, drm) != null)
		{
			if (SuscripcionesDisponibles(juego.Suscripciones, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "String24", "Game");
			}
		}

		if (SuscripcionesAntiguos(juego.Suscripciones, drm) != null)
		{
			if (SuscripcionesAntiguos(juego.Suscripciones, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "String25", "Game");
			}
		}

		return null;
	}

	public List<JuegoSuscripcion> SuscripcionesDisponibles(List<JuegoSuscripcion> listaSuscripciones, JuegoDRM drm = 0)
	{
		List<JuegoSuscripcion> suscripcionesDisponibles = new List<JuegoSuscripcion>();

		if (listaSuscripciones != null)
		{
			if (listaSuscripciones.Count > 0)
			{
				foreach (var suscripcion in listaSuscripciones)
				{
					if (DateTime.Now >= suscripcion.FechaEmpieza && DateTime.Now <= suscripcion.FechaTermina)
					{
						if (drm != 0)
						{
							if (suscripcion.DRM == drm)
							{
								suscripcionesDisponibles.Add(suscripcion);
							}
						}
						else
						{
							suscripcionesDisponibles.Add(suscripcion);
						}
					}
				}
			}
		}

		return suscripcionesDisponibles;
	}

	public List<JuegoSuscripcion> SuscripcionesAntiguos(List<JuegoSuscripcion> listaSuscripciones, JuegoDRM drm = 0)
	{
		List<JuegoSuscripcion> suscripcionesAntiguas = new List<JuegoSuscripcion>();

		if (listaSuscripciones != null)
		{
			if (listaSuscripciones.Count > 0)
			{
				foreach (var suscripcion in listaSuscripciones)
				{
					if (DateTime.Now > suscripcion.FechaTermina)
					{
						if (drm != 0)
						{
							if (suscripcion.DRM == drm)
							{
								suscripcionesAntiguas.Add(suscripcion);
							}
						}
						else
						{
							suscripcionesAntiguas.Add(suscripcion);
						}
					}
				}
			}
		}

		if (suscripcionesAntiguas.Count > 0)
		{
			suscripcionesAntiguas = suscripcionesAntiguas.OrderByDescending(x => x.FechaEmpieza).ToList();
		}

		return suscripcionesAntiguas;
	}

	#endregion

	#region Caracteristicas

	private int mediaMostrarPosicion = 0;
	private string mediaMostrar = string.Empty;

	private void CambiarMediaMostrar(MouseEventArgs e, int nuevaCaptura)
	{
		if (nuevaCaptura < 0)
		{
			nuevaCaptura = juego.Media.Capturas.Count - 1;
		}
		else if (nuevaCaptura >= juego.Media.Capturas.Count && nuevaCaptura != 99999)
		{
			nuevaCaptura = 0;
		}

		mediaMostrarPosicion = nuevaCaptura;

		if (nuevaCaptura == 99999)
		{
			mediaMostrar = juego.Media.Video;
		}
		else
		{
			if (nuevaCaptura >= 0 && nuevaCaptura < juego.Media.Capturas.Count)
			{
				mediaMostrar = juego.Media.Capturas[mediaMostrarPosicion];
			}
		}
	}

	#endregion

	#region Minimo

	public static string PrecioMinimoActual(global::Juegos.Juego minimo, string idioma)
	{
		decimal minimoCantidad = 10000000;

		if (minimo.PrecioActualesTiendas != null)
		{
			foreach (var precio in minimo.PrecioActualesTiendas)
			{
				bool fechaEncaja = Calculadora.CalcularAntiguedad(precio);

				if (fechaEncaja == true)
				{
					decimal tempPrecio = precio.Precio;

					if (precio.Moneda != JuegoMoneda.Euro)
					{
						tempPrecio = Divisas.Cambio(tempPrecio, precio.Moneda);
					}

					if (tempPrecio < minimoCantidad)
					{
						minimoCantidad = tempPrecio;
					}
				}
			}
		}

		if (minimoCantidad > 0 && minimoCantidad < 10000000)
		{
			string precioTexto = string.Empty;

			precioTexto = minimoCantidad.ToString();
			precioTexto = precioTexto.Replace(".", ",");

			int int1 = precioTexto.IndexOf(",");

			if (int1 == precioTexto.Length - 2)
			{
				precioTexto = precioTexto + "0";
			}

			precioTexto = precioTexto + "€";

			return string.Format(Idiomas.CogerCadena(idioma, "SearchMessage1", "Header"), precioTexto);
		}

		return Idiomas.CogerCadena(idioma, "SearchMessage2", "Header");
	}

	#endregion

	#region Descuentos Bajos

	private bool mostrarDescuentosBajos = false;

	private void DescuentosBajosMostrar(MouseEventArgs e)
	{
		if (mostrarDescuentosBajos == false)
		{
			mostrarDescuentosBajos = true;
		}
		else
		{
			mostrarDescuentosBajos = false;
		}
	}

	#endregion

	#region Deck

	private bool enseñarDeck = false;

	private void DeckEnseñar(MouseEventArgs e)
	{
		if (enseñarDeck == false)
		{
			enseñarDeck = true;
		}
		else
		{
			enseñarDeck = false;
		}
	}

	private void DeckCerrar(MouseEventArgs e)
	{
		enseñarDeck = false;
	}

	#endregion
}
