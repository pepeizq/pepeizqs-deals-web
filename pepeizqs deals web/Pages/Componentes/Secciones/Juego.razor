@using Bundles2
@using Gratis2
@using Herramientas
@using Juegos
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity
@using Microsoft.VisualBasic
@using Newtonsoft.Json
@using Suscripciones2
@using System.Net
@using Tiendas2
@using pepeizqs_deals_web.Areas.Identity.Data

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor

<div>
	@if (juego.Tipo == JuegoTipo.Game)
	{
		<img class="juego-fondo" src="@Imagenes.DescargarYGuardar(juego.Imagenes.Library_1920x620, "juegos", juego.Id.ToString(), "library_1920x620", dominio).Result"/>
	}

	<div class="juego-contenido">
		<div class="perfil-espacio-bottom juego-cabecera" style="position: -webkit-sticky; position: sticky; top: 70px; z-index: 3;">
			<div class="perfil-flexible-centrado">
				<div class="juego-flexible-izquierda">
					<img src="@Imagenes.DescargarYGuardar(LimpiarImagenJuego(juego.Imagenes.Header_460x215), "juegos", juego.Id.ToString(), "header_460x215", dominio).Result" class="juego-imagen" />
				</div>
				
				<div class="juego-titulo">
					<div>@juego.Nombre</div>

					<div style="margin-right: 10px; margin-top: 10px; display: flex; align-items: center;">
						<div style="margin-right: 5px; display: flex; align-items: center;">
							@foreach (JuegoDRM drm in JuegoDRM2.CargarDRMs())
							{
								@if (drm != JuegoDRM.NoEspecificado)
								{
									@if (VerificarMostrarDRM(idioma, drm, juego) == true)
									{
										@if (drm == JuegoDRM.DRMFree)
										{
											<button onclick="moverScroll('@drm')" class="boton-pequeño" style="width: 40px; height: 40px; text-align: center; padding: 7px; margin-right: 10px;"><div style="font-weight: bold; font-size: 9px;">DRM Free</div></button>
										}
										else
										{
											<button onclick="moverScroll('@drm')" class="boton-pequeño" style="width: 40px; height: 40px; text-align: center; padding: 9px; margin-right: 10px">
												<div style="display: flex; align-items: center;">
													<img src="@JuegoDRM2.SacarImagen(drm)" style="max-width: 100%; max-height: 100%;" />
												</div>
											</button>
										}
									}
								}
							}
						</div>
						
						@if (juego.Bundles != null)
						{
							<div style="margin-right: 15px; font-size: 16px;">
								<a onclick="moverScroll('bundles')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@Idiomas.CogerCadena(idioma, "Layout.Bundles")</a>
							</div>
						}

						@if (juego.Gratis != null)
						{
							<div style="margin-right: 15px; font-size: 16px;">
								<a onclick="moverScroll('gratis')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@Idiomas.CogerCadena(idioma, "Layout.Free")</a>
							</div>
						}

						@if (juego.Suscripciones != null)
						{
							<div style="margin-right: 15px; font-size: 16px;">
								<a onclick="moverScroll('suscripciones')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@Idiomas.CogerCadena(idioma, "Layout.Subscriptions")</a>
							</div>
						}

						@if (DLCs.Count > 0)
						{
							<div style="margin-right: 15px; font-size: 16px; background: var(--fondoDlc); height: 40px;">
								<a onclick="moverScroll('dlcs')" style="color: var(--colorTextoDlc); text-decoration: none; cursor: pointer; padding: 8px 10px; vertical-align: middle; display: table-cell;">@Idiomas.CogerCadena(idioma, "Game.String34") (@DLCs.Count.ToString())</a>
							</div>
						}
					</div>
				</div>

				<div style="text-align: right; min-width: 350px; margin: 10px 20px;">
					@if (juego.Analisis != null)
					{
						@if (string.IsNullOrEmpty(juego.Analisis.Cantidad) == false && string.IsNullOrEmpty(juego.Analisis.Porcentaje) == false)
						{
							<div style="font-size: 14px; margin-bottom: 15px;">
								<div class="tooltip2 juego-analisis-display">
									<div style="display: flex; align-items: center;">
										@if (int.Parse(juego.Analisis.Porcentaje) > 74)
										{
											<img src="/imagenes/analisis/positive2.webp" class="juego-analisis-imagen" />
										}

										@if (int.Parse(juego.Analisis.Porcentaje) > 49 && int.Parse(juego.Analisis.Porcentaje) < 75)
										{
											<img src="/imagenes/analisis/mixed2.webp" class="juego-analisis-imagen" />
										}

										@if (int.Parse(juego.Analisis.Porcentaje) < 50)
										{
											<img src="/imagenes/analisis/negative2.webp" class="juego-analisis-imagen" />
										}

										<div style="margin-left: 10px;">@juego.Analisis.Porcentaje% • @Calculadora.RedondearAnalisis(idioma, juego.Analisis.Cantidad)</div>
									</div>

									<div class="tooltip-abrir tooltip-abajo" style="padding: 20px; width: 100%;">
										<div class="juego-analisis-texto2">@Idiomas.CogerCadena(idioma, "Game.String2")</div>
									</div>
								</div>
							</div>
						}						
					}

					<div style="display: flex; align-items: center; justify-content: right;">
						@if (juego.Caracteristicas != null)
						{
							<div>
								@if (juego.Caracteristicas.Windows == true)
								{
									<img src="/imagenes/sistemas/windows.webp" />
								}

								@if (juego.Caracteristicas.Mac == true)
								{
									<img src="/imagenes/sistemas/mac.webp" />
								}

								@if (juego.Caracteristicas.Linux == true)
								{
									<img src="/imagenes/sistemas/linux.webp" />
								}
							</div>
						}												

						@if (juego.IdSteam > 0 || string.IsNullOrEmpty(juego.SlugGOG) == false)
						{
							<div style="margin-left: 20px;">
								<label>@Idiomas.CogerCadena(idioma, "Game.String1")</label>

								@if (juego.IdSteam > 0)
								{
									<a class="juego-boton-pequeño" style="margin-left: 10px;" href="@EnlaceAcortador.Generar("https://store.steampowered.com/app/" + juego.IdSteam.ToString(), "steam")" target="_blank">Steam</a>
								}

								@if (string.IsNullOrEmpty(juego.SlugGOG) == false)
								{
									<a class="juego-boton-pequeño" style="margin-left: 10px;" href="@EnlaceAcortador.Generar("https://www.gog.com/game/" + juego.SlugGOG, "gog")" target="_blank">GOG</a>
								}
							</div>
						}						
					</div>
				</div>				
			</div>
		</div>

		@if (juego.Tipo == JuegoTipo.DLC)
		{
			@if (string.IsNullOrEmpty(juego.Maestro) == false)
			{
				@if (juego.Maestro != "no")
				{
					<a href="/game/@juego.Maestro" style="text-decoration: none;">
						<div class="perfil perfil-espacio-bottom" style="padding: 20px 40px; flex-direction: row; align-items: center; background-color: var(--fondoDlc); color: var(--colorTextoDlc);">
							<i class="fa-solid fa-exclamation" style="font-size: 22px; margin-right: 30px;"></i>

							<div style="width: 100%;">
								@Idiomas.CogerCadena(idioma, "Game.String32")
							</div>
						</div>
					</a>
				}				
			}
		}
		else if (juego.Tipo == JuegoTipo.Game)
		{
			@if (string.IsNullOrEmpty(juego.FreeToPlay) == false)
			{
				@if (juego.FreeToPlay == "true")
				{
					<div class="perfil perfil-espacio-bottom" style="padding: 20px 40px; flex-direction: row; align-items: center;">
						<i class="fa-solid fa-circle-info" style="font-size: 22px; margin-right: 30px;"></i>

						<div style="width: 100%;">
							@Idiomas.CogerCadena(idioma, "Game.String33")
						</div>
					</div>
				}
			}
		}

		@foreach (JuegoDRM drm in JuegoDRM2.CargarDRMs())
		{
			if (drm != JuegoDRM.NoEspecificado)
			{
				if (VerificarMostrarDRM(idioma, drm, juego) == true)
				{
					<div id="@drm">
						@if (usuarioLogeado == true)
						{
							bool usuarioTieneJuego = Herramientas.Tooltip.ComprobarUsuarioTieneJuego(usuario, juegosUsuario, juego, drm);
							bool usuarioTieneDeseado = false;

							string mensaje = string.Empty;

							if (usuarioTieneJuego == true)
							{
								if (juego.Tipo == Juegos.JuegoTipo.Game)
								{
									mensaje = Herramientas.Idiomas.CogerCadena(idioma, "Game.String5");
								}
								else if (juego.Tipo == Juegos.JuegoTipo.DLC)
								{
									mensaje = Herramientas.Idiomas.CogerCadena(idioma, "Game.String6");
								}

								<div class="perfil" style="padding: 20px 40px; background-color: var(--fondoBien);">
									<div class="perfil-flexible-centrado">
										<i class="fa-solid fa-check" style="font-size: 25px;"></i>

										<label style="text-align: left; padding-left: 25px; width: 100%;">@mensaje</label>
									</div>
								</div>
							}
							else
							{
								if (string.IsNullOrEmpty(usuario.SteamWishlist) == false)
								{
									List<string> deseadosSteam = Listados.Generar(usuario.SteamWishlist);

									if (deseadosSteam.Count > 0)
									{
										foreach (var deseado in deseadosSteam)
										{
											if (juego.IdSteam > 0)
											{
												if (juego.IdSteam == int.Parse(deseado) && drm == Juegos.JuegoDRM.Steam)
												{
													if (juego.Tipo == Juegos.JuegoTipo.Game)
													{
														mensaje = Herramientas.Idiomas.CogerCadena(idioma, "Game.String7");
													}
													else if (juego.Tipo == Juegos.JuegoTipo.DLC)
													{
														mensaje = Herramientas.Idiomas.CogerCadena(idioma, "Game.String8");
													}

													break;
												}
											}
										}
									}
								}
								
								if (string.IsNullOrEmpty(mensaje) == false)
								{
									<div class="perfil" style="padding: 20px 40px; background-color: var(--fondoAlerta);">
										<div class="perfil-flexible-centrado">
											<i class="fa-solid fa-exclamation" style="font-size: 25px;"></i>

											<label style="text-align: left; padding-left: 25px; width: 100%;">@mensaje</label>
										</div>
									</div>
								}
								else
								{
									usuarioTieneDeseado = Herramientas.Deseados.ComprobarSiEsta(usuario, juego, drm);

									if (usuarioTieneDeseado == true)
									{
										<button @onclick="(e => CambiarEstadoDeseado(e, false, drm))" class="boton-pequeño" style="width: auto; padding: 20px 40px;">
											<div class="perfil-flexible-centrado">
												<i class="fa-solid fa-check" style="font-size: 25px;"></i>

												<div style="text-align: left; padding-left: 25px; width: 100%;">@Herramientas.Idiomas.CogerCadena(idioma, "Game.String3")</div>
											</div>
										</button>
									}
									else
									{
										<button @onclick="(e => CambiarEstadoDeseado(e, true, drm))" class="boton-pequeño" style="width: auto; padding: 20px 40px;">
											@Herramientas.Idiomas.CogerCadena(idioma, "Game.String4")
										</button>
									}
								}								
							}
						}

						<div class="juego-drm-centrado" style="margin-bottom: 50px;">
							<div class="perfil juego-drm-imagen">
								@if (drm == JuegoDRM.DRMFree)
								{
									<div style="font-weight: bold; font-size: 18px;">DRM Free</div>
								}
								else
								{
									<img src="@JuegoDRM2.SacarImagen(drm)" />
								}


							</div>

							<div class="perfil" style="width: 90%;">
								@if (CogerMinimoDRM(idioma, drm, juego.PrecioMinimosHistoricos, juego.PrecioActualesTiendas) != null)
								{
									<div class="juego-minimo">
										@CogerMinimoDRM(idioma, drm, juego.PrecioMinimosHistoricos, juego.PrecioActualesTiendas)
									</div>
								}

								@if (BundlesComprobar(juego.Bundles, drm) != null)
								{
									<div class="juego-minimo">
										<a onclick="moverScroll('bundles')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@BundlesPreparar(drm, idioma)</a>
									</div>
								}

								@if (GratisComprobar(juego.Gratis, drm) != null)
								{
									<div class="juego-minimo">
										<a onclick="moverScroll('gratis')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@GratisPreparar(drm, idioma)</a>
									</div>
								}

								@if (SuscripcionesComprobar(juego.Suscripciones, drm) != null)
								{
									<div class="juego-minimo">
										<a onclick="moverScroll('suscripciones')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@SuscripcionesPreparar(drm, idioma)</a>
									</div>
								}

								@if (OrdenarPrecios(juego.PrecioActualesTiendas, drm).Count > 0)
								{
									foreach (JuegoPrecio precio in OrdenarPrecios(juego.PrecioActualesTiendas, drm))
									{
										<a class="juego-boton-pequeño juego-imagen-boton-espacio" href="@EnlaceAcortador.Generar(precio.Enlace, precio.Tienda)" target="_blank">
											<div class="perfil-flexible-centrado">
												<div>
													<img src="@SacarImagenTienda(precio.Tienda)" class="juego-imagen-boton" />
													<span style="margin-left: 15px;">@ComprobarEdicion(juego.Nombre, precio.Nombre)</span>
												</div>
												
												<div class="juego-descuento-precio">
													<div style="font-size: 14px; margin: 20px;">
														@Calculadora.DiferenciaTiempo(precio.FechaDetectado, idioma)
													</div>

													<div style="width: 75px; text-align: center;" class="juego-descuento">
														@precio.Descuento.ToString()%
													</div>

													<div class="juego-precio" style="text-align: center;">
														@PrepararPrecio(precio, false)

														@if (precio.Moneda != JuegoMoneda.Euro)
														{
															<br />

															<label style="font-size: 13px;">@Divisas.DevolverSimbolo(precio.Precio, precio.Moneda)</label>
														}
													</div>
												</div>
											</div>
										</a>
									}
								}
								else
								{
									<div>@Idiomas.CogerCadena(idioma, "Game.String12")</div>
								}
							</div>
						</div>
					</div>
				}
			}
		}

		@if (juego.Bundles != null)
		{
			<div id="bundles" class="perfil" style="margin-bottom: 50px;">
				@if (BundlesDisponibles(juego.Bundles).Count > 0)
				{
					<div style="margin-bottom: 10px;">
						<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "Game.String22")</label>
					</div>

					@foreach (var bundle2 in BundlesDisponibles(juego.Bundles))
					{
						if (bundle2.BundleId > 0)
						{
							var bundle3 = global::BaseDatos.Bundles.Buscar.UnBundle(bundle2.BundleId);

							if (bundle3 != null)
							{
								<a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar(bundle2.Enlace, bundle3.Tipo)" target="_blank" style="font-size: 16px; padding: 20px 25px; margin-top: 10px; margin-bottom: 10px; cursor: pointer;">
									<div style="display: flex; align-items: center;">
										<div style="margin-right: 15px;">
											<img src="@BundlesCargar.DevolverBundle(bundle3.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" />
										</div>

										<div style="margin-right: 30px;">
											<img src="@JuegoDRM2.SacarImagen(bundle2.DRM)" style="max-width: 22px; max-height: 22px;" />
										</div>

										<div style="margin-right: 20px; width: 100%;">
											<label style="cursor: pointer;">@bundle3.NombreBundle • @bundle3.NombreTienda</label><br />
											<label style="font-size: 13px; cursor: pointer;">@Calculadora.DiferenciaTiempo(bundle3.FechaTermina, idioma, 1)</label>
										</div>

										<div style="text-align: right;">
											<label style="cursor: pointer;">@BundlesPrepararPrecio(bundle3, juego.Id)</label>
											<label style="font-size: 13px; cursor: pointer;">@BundlesPrepararInfo(bundle3, juego.Id)</label>
										</div>
									</div>
								</a>
							}
						}						
					}
				}

				@if (BundlesAntiguos(juego.Bundles).Count > 0)
				{
					@if (BundlesDisponibles(juego.Bundles).Count > 0)
					{
						<div style="margin-top: 40px; margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "Game.String23")</label>
						</div>
					}
					else
					{
						<div style="margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "Game.String23")</label>
						</div>
					}

					@foreach (var bundle2 in BundlesAntiguos(juego.Bundles))
					{
						var bundle3 = global::BaseDatos.Bundles.Buscar.UnBundle(bundle2.BundleId);

						if (bundle3 != null)
						{
							<a class="juego-boton-pequeño" href="/bundle/@bundle2.BundleId.ToString()" style="font-size: 17px; padding: 20px 25px; margin-top: 10px; margin-bottom: 10px;">
								<div style="display: flex; align-items: center;">
									<div style="margin-right: 15px;">
										<img src="@BundlesCargar.DevolverBundle(bundle3.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" />
									</div>

									<div style="margin-right: 30px;">
										<img src="@JuegoDRM2.SacarImagen(bundle2.DRM)" style="max-width: 22px; max-height: 22px;" />
									</div>

									<div style="margin-right: 20px; width: 100%;">
										<label style="cursor: pointer;">@bundle3.NombreBundle • @bundle3.NombreTienda</label><br />
										<label style="font-size: 13px; cursor: pointer;">@Calculadora.DiferenciaTiempo(bundle3.FechaTermina, idioma)</label>
									</div>

									<div style="text-align: right;">
										<label style="cursor: pointer;">@BundlesPrepararPrecio(bundle3, juego.Id)</label>
										<label style="font-size: 13px; cursor: pointer;">@BundlesPrepararInfo(bundle3, juego.Id)</label>
									</div>
								</div>
							</a>
						}
					}
				}			
			</div>
		}

		@if (juego.Gratis != null)
		{
			<div id="gratis" class="perfil" style="margin-bottom: 50px;">
				@if (GratisDisponibles(juego.Gratis).Count > 0)
				{
					<div style="margin-bottom: 10px;">
						<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "Game.String30")</label>
					</div>

					@foreach (var gratis2 in GratisDisponibles(juego.Gratis))
					{
						<a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar(gratis2.Enlace, gratis2.Tipo)" target="_blank" style="font-size: 16px; padding: 20px 25px; margin-top: 10px; margin-bottom: 10px; cursor: pointer;">
							<div style="display: flex; align-items: center;">
								<div style="margin-right: 15px;">
									<img src="@GratisCargar.DevolverGratis(gratis2.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" />
								</div>

								<div style="margin-right: 30px;">
									<img src="@JuegoDRM2.SacarImagen(gratis2.DRM)" style="max-width: 22px; max-height: 22px;" />
								</div>

								<div style="margin-right: 20px; width: 100%;">
									<label style="cursor: pointer;">@GratisCargar.DevolverGratis(gratis2.Tipo).Nombre</label>
								</div>
							</div>
						</a>
					}
				}

				@if (GratisAntiguos(juego.Gratis).Count > 0)
				{
					@if (GratisDisponibles(juego.Gratis).Count > 0)
					{
						<div style="margin-top: 40px; margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "Game.String31")</label>
						</div>
					}
					else
					{
						<div style="margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "Game.String31")</label>
						</div>
					}

					@foreach (var gratis2 in GratisAntiguos(juego.Gratis))
					{
						<hr/>
						<div style="display: flex; align-items: center; font-size: 16px; padding: 15px 5px;">
							<div style="margin-right: 15px; width: 22px; height: 22px;">
								<img src="@GratisCargar.DevolverGratis(gratis2.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" />
							</div>

							<div style="margin-right: 30px; width: 22px; height: 22px;">
								<img src="@JuegoDRM2.SacarImagen(gratis2.DRM)" style="max-width: 22px; max-height: 22px;" />
							</div>

							<div style="padding-right: 20px; width: 15%;">
								<label>@GratisCargar.DevolverGratis(gratis2.Tipo).Nombre</label><br />
								<label style="font-size: 13px;">@Calculadora.DiferenciaTiempo(gratis2.FechaTermina, idioma)</label>
							</div>

							<div style="padding-right: 20px; width: 85%;">
								<label>@Idiomas.CogerCadena(idioma, "Game.String37") @Calculadora.DiferenciaDuranteDias(gratis2.FechaEmpieza, gratis2.FechaTermina, idioma)</label><br />
								<label style="font-size: 13px;">@gratis2.FechaEmpieza.Day.ToString()/@gratis2.FechaEmpieza.Month.ToString()/@gratis2.FechaEmpieza.Year.ToString() • @gratis2.FechaTermina.Day.ToString()/@gratis2.FechaTermina.Month.ToString()/@gratis2.FechaTermina.Year.ToString()</label>
							</div>
						</div>
					}
				}
			</div>
		}

		@if (juego.Suscripciones != null)
		{
			<div id="suscripciones" class="perfil" style="margin-bottom: 50px;">
				@if (SuscripcionesDisponibles(juego.Suscripciones).Count > 0)
				{
					<div style="margin-bottom: 10px;">
						<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "Game.String26")</label>
					</div>

					@foreach (var suscripcion2 in SuscripcionesDisponibles(juego.Suscripciones))
					{
						<a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar(suscripcion2.Enlace, suscripcion2.Tipo)" target="_blank" style="font-size: 16px; padding: 20px 25px; margin-top: 10px; margin-bottom: 10px; cursor: pointer;">
							<div style="display: flex; align-items: center;">
								<div style="margin-right: 15px;">
									<img src="@SuscripcionesCargar.DevolverSuscripcion(suscripcion2.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" />
								</div>

								<div style="margin-right: 30px;">
									<img src="@JuegoDRM2.SacarImagen(suscripcion2.DRM)" style="max-width: 22px; max-height: 22px;" />
								</div>

								<div style="margin-right: 20px; width: 100%;">
									<label style="cursor: pointer;">@SuscripcionesCargar.DevolverSuscripcion(suscripcion2.Tipo).Nombre</label><br/>
									<label style="font-size: 13px; cursor: pointer;">@Calculadora.DiferenciaTiempo(suscripcion2.FechaTermina, idioma, 1)</label>
								</div>
							</div>
						</a>
					}
				}

				@if (SuscripcionesAntiguos(juego.Suscripciones).Count > 0)
				{
					@if (SuscripcionesDisponibles(juego.Suscripciones).Count > 0)
					{
						<div style="margin-top: 40px; margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "Game.String27")</label>
						</div>
					}
					else
					{
						<div style="margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "Game.String27")</label>
						</div>
					}

					@foreach (var suscripcion2 in SuscripcionesAntiguos(juego.Suscripciones))
					{
						<hr />
						<div style="display: flex; align-items: center; font-size: 16px; padding: 15px 5px;">
							<div style="margin-right: 15px; width: 22px; height: 22px;">
								<img src="@SuscripcionesCargar.DevolverSuscripcion(suscripcion2.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" />
							</div>

							<div style="margin-right: 30px; width: 22px; height: 22px;">
								<img src="@JuegoDRM2.SacarImagen(suscripcion2.DRM)" style="max-width: 22px; max-height: 22px;" />
							</div>

							<div style="padding-right: 20px; width: 15%;">
								<label>@SuscripcionesCargar.DevolverSuscripcion(suscripcion2.Tipo).Nombre</label><br />
								<label style="font-size: 13px;">@Calculadora.DiferenciaTiempo(suscripcion2.FechaTermina, idioma)</label>
							</div>

							<div style="padding-right: 20px; width: 85%;">
								<label>@Idiomas.CogerCadena(idioma, "Game.String38") @Calculadora.DiferenciaDuranteDias(suscripcion2.FechaEmpieza, suscripcion2.FechaTermina, idioma)</label><br />
								<label style="font-size: 13px;">@suscripcion2.FechaEmpieza.Day.ToString()/@suscripcion2.FechaEmpieza.Month.ToString()/@suscripcion2.FechaEmpieza.Year.ToString() • @suscripcion2.FechaTermina.Day.ToString()/@suscripcion2.FechaTermina.Month.ToString()/@suscripcion2.FechaTermina.Year.ToString()</label>
							</div>
						</div>
					}
				}
			</div>
		}

		<div class="perfil" style="display: flex; flex-direction: row; margin-top: 50px;">
			<div style="width: 70%;">
				@if (juego.Media != null)
				{
					@if (juego.Media.Capturas != null)
					{
						@if (juego.Media.Capturas.Count > 0)
						{
							<div class="juego-galeria-contenedor">
								@if (mediaMostrarPosicion == 99999)
								{
									<video src="@mediaMostrar" controls autoplay="autoplay" loop muted poster="@juego.Imagenes.Header_460x215" preload="none" style="width: 854px; height: 480px; object-fit: cover;" />
								}
								else
								{
									<div>
										<div class="juego-galeria-numero">@(mediaMostrarPosicion + 1) / @(juego.Media.Capturas.Count)</div>
										<img src="@Imagenes.DescargarYGuardar(mediaMostrar, "juegos", juego.Id.ToString(), "captura" + mediaMostrarPosicion.ToString(), dominio).Result" style="width: 100%;">
									</div>

									<a class="juego-galeria-atras" @onclick="@(e => CambiarMediaMostrar(e, mediaMostrarPosicion - 1))">&#10094;</a>
									<a class="juego-galeria-siguiente" @onclick="@(e => CambiarMediaMostrar(e, mediaMostrarPosicion + 1))">&#10095;</a>
								}

								@if (juego.Media.Miniaturas != null)
								{
									<div class="juego-galeria-fila">
										@{
											if (juego.Media.Video != null)
											{
												<div class="juego-galeria-columna" @onclick="@(e => CambiarMediaMostrar(e, 99999))" style="position: relative;">
													<img class="juego-galeria-capturas juego-galeria-cursor" src="@Imagenes.DescargarYGuardar(juego.Imagenes.Header_460x215, "juegos", juego.Id.ToString(), "miniaturaVideo", dominio).Result" style="width: 100%;">
													<i class="fa-solid fa-circle-play" style="position: absolute; font-size: 40px; top: 50%; left: 50%; transform: translate(-50%, -50%); cursor: pointer;"></i>
												</div>
											}

											int i = 0;
											while (i < juego.Media.Miniaturas.Count)
											{
												int nuevaPosicion = i;

												<div class="juego-galeria-columna" @onclick="@(e => CambiarMediaMostrar(e, nuevaPosicion))">
													<img class="juego-galeria-capturas juego-galeria-cursor" src="@Imagenes.DescargarYGuardar(juego.Media.Miniaturas[i], "juegos", juego.Id.ToString(), "miniatura" + i.ToString(), dominio).Result" style="width: 100%;">
												</div>

												i += 1;
											}
										}
									</div>
								}
							</div>
						}
					}
				}
			</div>

			<div style="width: 30%; padding-left: 30px;">
				@if (juego.Caracteristicas != null)
				{
					@if (juego.Caracteristicas.Descripcion != null)
					{
						<div style="width: 100%;">
							@WebUtility.HtmlDecode(juego.Caracteristicas.Descripcion)
						</div>
					}

					@if (juego.Caracteristicas.Desarrolladores != null || juego.Caracteristicas.Publishers != null)
					{
						@if (juego.Caracteristicas.Descripcion != null)
						{
							<hr/>
						}

						@if (juego.Caracteristicas.Desarrolladores != null)
						{
							@if (juego.Caracteristicas.Desarrolladores.Count > 0)
							{
								<div>
									@{
										List<string> listaDesarrolladores = new List<string>();

										foreach (var desarrollador in juego.Caracteristicas.Desarrolladores)
										{
											if (string.IsNullOrEmpty(desarrollador) == false)
											{
												listaDesarrolladores.Add(desarrollador);
											}
										}

										if (listaDesarrolladores.Count > 0)
										{
											<div>@Idiomas.CogerCadena(idioma, "Game.String35")</div>
											<ul>
												@foreach (var desarrollador in listaDesarrolladores)
												{
													<li>@desarrollador</li>
												}
											</ul>
										}
									}
								</div>
							}
						}

						@if (juego.Caracteristicas.Publishers != null)
						{
							@if (juego.Caracteristicas.Publishers.Count > 0)
							{
								<div>
									@{
										List<string> listaPublishers = new List<string>();

										foreach (var publisher in juego.Caracteristicas.Publishers)
										{
											if (string.IsNullOrEmpty(publisher) == false)
											{
												listaPublishers.Add(publisher);
											}
										}

										if (listaPublishers.Count > 0)
										{
											<div>@Idiomas.CogerCadena(idioma, "Game.String36")</div>
											<ul>
												@foreach (var publisher in listaPublishers)
												{
													<li>@publisher</li>
												}
											</ul>
										}
									}
								</div>
							}
						}
					}
				}
			</div>
		</div>

		@if (DLCs.Count > 0)
		{
			<div id="dlcs" class="perfil" style="margin-top: 50px;">
				<div style="margin-bottom: 10px;">
					<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "Game.String34") (@DLCs.Count.ToString())</label>
				</div>

				@foreach (var dlc in DLCs)
				{
					<a class="juego-boton-pequeño" href="/game/@dlc.Id" target="_blank" style="font-size: 16px; margin-top: 10px; margin-bottom: 10px; cursor: pointer; padding: 0px;">
						<div style="display: flex; align-items: center;">
							<div style="margin-right: 20px;">
								<img src="@dlc.Imagenes.Header_460x215" style="max-width: 230px; max-height: 107px;" />
							</div>

							<div style="margin-right: 20px; width: 100%;">
								<div>@dlc.Nombre</div>
								<div style="margin-top: 10px; font-size: 14px;">@PrecioMinimoActual(dlc, idioma)</div>
							</div>
						</div>
					</a>
				}
			</div>
		}
	</div>
</div>

<script>
	function moverScroll(id) {
		const yOffset = -175;
		const element = document.getElementById(id);
		const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

		window.scrollTo({ top: y, behavior: 'smooth' });
	}
</script>

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string dominio { get; set; }

	[Parameter]
	public Juegos.Juego juego { get; set; }

	private Usuario usuario = new Usuario();
	private List<string> juegosUsuario = new List<string>();
	private bool usuarioLogeado = false;

	private List<Juegos.Juego> DLCs = new List<Juegos.Juego>();

	protected override void OnInitialized()
	{
		usuario = UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User).Result;

		if (usuario != null)
		{
			usuarioLogeado = true;

			juegosUsuario = Herramientas.Listados.Generar(usuario.SteamGames);
		}

		//-------------------------------------------

		if (juego != null)
		{
			DLCs = global::BaseDatos.Juegos.Buscar.DLCs(juego.Id.ToString());

			if (juego.Media != null)
			{
				if (string.IsNullOrEmpty(juego.Media.Video) == false)
				{
					mediaMostrar = juego.Media.Video;
					mediaMostrar = mediaMostrar.Replace("http://", "https://");
					mediaMostrarPosicion = 99999;
				}
				else
				{
					if (juego.Media.Capturas != null)
					{
						mediaMostrar = juego.Media.Capturas[0];
					}
				}
			}			
		}
	}

	public static string LimpiarImagenJuego(string enlace)
	{
		if (enlace.Contains("/header_alt_") == true)
		{
			int int1 = enlace.IndexOf("/header_alt_");
			enlace = enlace.Remove(int1, enlace.Length - int1);

			enlace = enlace + "/header.jpg";
		}

		return enlace;
	}

	public bool VerificarMostrarDRM(string idioma, JuegoDRM drm, global::Juegos.Juego juego)
	{
		bool mostrar = false;

		if (CogerMinimoDRM(idioma, drm, juego.PrecioMinimosHistoricos, juego.PrecioActualesTiendas) != null)
		{
			mostrar = true;
		}
		else if (BundlesComprobar(juego.Bundles, drm) != null)
		{
			mostrar = true;
		}
		else if (GratisComprobar(juego.Gratis, drm) != null)
		{
			mostrar = true;
		}
		else if (SuscripcionesComprobar(juego.Suscripciones, drm) != null)
		{
			mostrar = true;
		}

		return mostrar;
	}

	public static string CogerMinimoDRM(string idioma, JuegoDRM drm, List<JuegoPrecio> historicos, List<JuegoPrecio> actuales)
	{
		string drmPreparado = null;

		List<JuegoPrecio> historicosOrdenados = new List<JuegoPrecio>();

		if (historicos != null)
		{
			if (historicos.Count > 0)
			{
				foreach (JuegoPrecio historico in historicos)
				{
					if (historico.DRM == drm)
					{
						historicosOrdenados.Add(historico);
					}
				}
			}
		}

		if (historicosOrdenados.Count == 0)
		{
			if (actuales != null)
			{
				if (actuales.Count > 0)
				{
					historicosOrdenados = OrdenarPrecios(actuales, drm);
				}
			}			
		}

		if (historicosOrdenados.Count > 0)
		{
			if (historicosOrdenados[0] != null)
			{
				drmPreparado = Idiomas.CogerCadena(idioma, "Game.String10") + " " + JuegoDRM2.DevolverDRM(drm) + ": " + PrepararPrecio(historicosOrdenados[0], true);

				bool incluirTiempo = true;

				List<JuegoPrecio> actualesOrdenados = OrdenarPrecios(actuales, drm);

				if (actualesOrdenados != null)
				{
					if (actualesOrdenados.Count > 0)
					{
						if (actuales.Count > 0)
						{
							foreach (JuegoPrecio actual in actualesOrdenados)
							{
								if (actual.DRM == drm)
								{
									if (actual.Precio == historicosOrdenados[0].Precio)
									{
										incluirTiempo = false;
									}
								}
							}
						}
					}
				}

				if (incluirTiempo == true)
				{
					List<Tienda> tiendas = TiendasCargar.GenerarListado();
					string tiendaFinal = string.Empty;

					foreach (var tienda in tiendas)
					{
						if (tienda.Id == historicosOrdenados[0].Tienda)
						{
							tiendaFinal = tienda.Nombre;
						}
					}

					drmPreparado = drmPreparado + " (" + Calculadora.DiferenciaTiempo(historicosOrdenados[0].FechaDetectado, idioma) + " " + Idiomas.CogerCadena(idioma, "Game.String13") + " " + tiendaFinal + ")";
				}
				else
				{
					drmPreparado = drmPreparado + " (" + Idiomas.CogerCadena(idioma, "Game.String11") + ")";
				}
			}		
		}

		return drmPreparado;
	}

	public static string PrepararPrecio(JuegoPrecio precio, bool historico)
	{
		string precioTexto = string.Empty;

		if (historico == true)
		{
			precioTexto = precio.Precio.ToString();
		}
		else
		{
			if (precio.Moneda != JuegoMoneda.Euro)
			{
				precioTexto = precio.PrecioCambiado.ToString();
			}
			else
			{
				precioTexto = precio.Precio.ToString();
			}
		}

		precioTexto = precioTexto.Replace(".", ",");

		int int1 = precioTexto.IndexOf(",");

		if (int1 == precioTexto.Length - 2)
		{
			precioTexto = precioTexto + "0";
		}

		if (precioTexto.Length > int1 + 3)
		{
			precioTexto = precioTexto.Remove(int1 + 3, precioTexto.Length - int1 - 3);
		}

		precioTexto = precioTexto + "€";

		return precioTexto;
	}

	public static List<JuegoPrecio> OrdenarPrecios(List<JuegoPrecio> precios, JuegoDRM drm)
	{
		List<JuegoPrecio> preciosOrdenados = new List<JuegoPrecio>();

		if (precios != null)
		{
			if (precios.Count > 0)
			{
				foreach (JuegoPrecio precio in precios)
				{
					if (precio.DRM == drm && precio.Descuento > 0)
					{
						bool fechaEncaja = JuegoFicha.CalcularAntiguedad(precio);

						if (fechaEncaja == true)
						{
							JuegoPrecio nuevoPrecio = precio;

							if (nuevoPrecio != null)
							{
								if (nuevoPrecio.Moneda != JuegoMoneda.Euro)
								{
									nuevoPrecio.PrecioCambiado = Divisas.Cambio(nuevoPrecio.Precio, nuevoPrecio.Moneda);
								}
							}

							bool verificacionFinal = true;

							if (preciosOrdenados.Count > 0)
							{
								foreach (var ordenado in preciosOrdenados)
								{
									if (ordenado.Enlace == nuevoPrecio.Enlace && ordenado.Tienda == nuevoPrecio.Tienda && ordenado.DRM == nuevoPrecio.DRM)
									{
										verificacionFinal = false;
										break;
									}
								}
							}

							if (drm == JuegoDRM.NoEspecificado)
							{
								verificacionFinal = false;
							}

							if (verificacionFinal == true)
							{
								preciosOrdenados.Add(nuevoPrecio);
							}
						}
					}
				}
			}
		}

		if (preciosOrdenados.Count > 0)
		{
			preciosOrdenados.Sort(delegate (JuegoPrecio p1, JuegoPrecio p2)
			{
				decimal precio1 = 0;

				if (p1.Moneda != JuegoMoneda.Euro)
				{
					precio1 = p1.PrecioCambiado;
				}
				else
				{
					precio1 = p1.Precio;
				}

				decimal precio2 = 0;

				if (p2.Moneda != JuegoMoneda.Euro)
				{
					precio2 = p2.PrecioCambiado;
				}
				else
				{
					precio2 = p2.Precio;
				}

				if (precio1 == precio2)
				{
					return p2.FechaDetectado.CompareTo(p1.FechaDetectado);
				}
				else
				{
					return precio1.CompareTo(precio2);
				}
			});
		}

		return preciosOrdenados;
	}

	public static string SacarImagenTienda(string codigo)
	{
		string imagen = string.Empty;

		List<Tienda> tiendas = TiendasCargar.GenerarListado();

		foreach (var tienda in tiendas)
		{
			if (tienda.Id == codigo)
			{
				imagen = tienda.Imagen300x80;
			}
		}

		return imagen;
	}

	private static string ComprobarEdicion(string juego, string oferta)
	{
		if (string.IsNullOrEmpty(oferta) == false)
		{
			if (Buscador.LimpiarNombre(juego) != Buscador.LimpiarNombre(oferta))
			{
				string nuevoTexto = oferta.Replace(juego, null);
				nuevoTexto = nuevoTexto.Trim();

				int i = 0;
				while (i < 10)
				{
					if (nuevoTexto.Contains("-") == true)
					{
						int int1 = nuevoTexto.IndexOf("-");

						if (int1 == 0)
						{
							nuevoTexto = nuevoTexto.Remove(0, 1);
							nuevoTexto = nuevoTexto.Trim();
						}
					}
					i += 1;
				}

				i = 0;
				while (i < 10)
				{
					if (nuevoTexto.Contains(":") == true)
					{
						int int1 = nuevoTexto.IndexOf(":");

						if (int1 == 0)
						{
							nuevoTexto = nuevoTexto.Remove(0, 1);
							nuevoTexto = nuevoTexto.Trim();
						}
					}
					i += 1;
				}

				if (nuevoTexto.Contains("??") == true)
				{
					nuevoTexto = nuevoTexto.Replace("/", null);
					nuevoTexto = nuevoTexto.Replace("?", null);
				}

				nuevoTexto = nuevoTexto.Replace("(Steam)", null);
				nuevoTexto = nuevoTexto.Replace("(STEAM)", null);
				nuevoTexto = nuevoTexto.Replace("(Epic)", null);
				nuevoTexto = nuevoTexto.Replace("(EPIC)", null);
				nuevoTexto = nuevoTexto.Replace("(GOG)", null);
				nuevoTexto = nuevoTexto.Replace("(Giants)", null);
				nuevoTexto = nuevoTexto.Replace("(Microsoft Store)", null);

				nuevoTexto = nuevoTexto.Trim();

				if (Buscador.LimpiarNombre(juego) != Buscador.LimpiarNombre(nuevoTexto))
				{
					return nuevoTexto;
				}				
			}
		}

		return null;
	}

	#region Deseados

	private async void CambiarEstadoDeseado(MouseEventArgs e, bool estado, JuegoDRM drm)
	{
		List<Juegos.JuegoDeseado> deseados = new List<Juegos.JuegoDeseado>();

		if (usuario.Wishlist != null)
		{
			deseados = JsonConvert.DeserializeObject<List<Juegos.JuegoDeseado>>(usuario.Wishlist);
		}

		Herramientas.Deseados.ActualizarJuegoConUsuarios(juego, drm, usuario, estado);

		if (estado == true)
		{
			bool añadir = true;

			if (deseados.Count > 0)
			{
				foreach (var deseado in deseados)
				{
					if (int.Parse(deseado.IdBaseDatos) == juego.Id && deseado.DRM == drm)
					{
						añadir = false;
					}
				}
			}

			if (añadir == true)
			{
				Juegos.JuegoDeseado deseado = new Juegos.JuegoDeseado();
				deseado.IdBaseDatos = juego.Id.ToString();
				deseado.DRM = drm;

				deseados.Add(deseado);
			}

			usuario.Wishlist = JsonConvert.SerializeObject(deseados);

			await UserManager.UpdateAsync(usuario);
		}
		else
		{
			int posicion = -1;

			if (deseados.Count > 0)
			{
				for (int i = 0; i < deseados.Count; i += 1)
				{
					if (int.Parse(deseados[i].IdBaseDatos) == juego.Id && deseados[i].DRM == drm)
					{
						posicion = i;
					}
				}
			}

			if (posicion >= 0)
			{
				deseados.RemoveAt(posicion);
			}

			usuario.Wishlist = JsonConvert.SerializeObject(deseados);

			await UserManager.UpdateAsync(usuario);
		}
	}

	#endregion

	#region Bundles

	public string BundlesComprobar(List<JuegoBundle> listaBundles, JuegoDRM drm)
	{
		if (listaBundles != null)
		{
			if (listaBundles.Count > 0)
			{
				foreach (var bundle in listaBundles)
				{
					if (drm == bundle.DRM)
					{
						return "bundle";
					}
				}
			}
		}

		return null;
	}

	public string BundlesPreparar(JuegoDRM drm, string idioma)
	{
		if (BundlesDisponibles(juego.Bundles, drm) != null)
		{
			if (BundlesDisponibles(juego.Bundles, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "Game.String20");
			}
		}

		if (BundlesAntiguos(juego.Bundles, drm) != null)
		{
			if (BundlesAntiguos(juego.Bundles, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "Game.String21");
			}
		}

		return null;
	}

	public List<JuegoBundle> BundlesDisponibles(List<JuegoBundle> listaBundles, JuegoDRM drm = 0)
	{
		List<JuegoBundle> bundlesDisponibles = new List<JuegoBundle>();

		if (listaBundles != null)
		{
			if (listaBundles.Count > 0)
			{
				foreach (var bundle in listaBundles)
				{
					if (DateTime.Now >= bundle.FechaEmpieza && DateTime.Now <= bundle.FechaTermina)
					{
						if (drm != 0 && bundle.BundleId > 0)
						{
							if (bundle.DRM == drm)
							{
								bundlesDisponibles.Add(bundle);
							}
						}
						else
						{
							bundlesDisponibles.Add(bundle);
						}
					}					
				}
			}
		}

		return bundlesDisponibles;
	}

	public List<JuegoBundle> BundlesAntiguos(List<JuegoBundle> listaBundles, JuegoDRM drm = 0)
	{
		List<JuegoBundle> bundlesAntiguos = new List<JuegoBundle>();

		if (listaBundles != null)
		{
			if (listaBundles.Count > 0)
			{
				foreach (var bundle in listaBundles)
				{
					if (DateTime.Now > bundle.FechaTermina)
					{
						if (drm != 0)
						{
							if (bundle.DRM == drm)
							{
								bundlesAntiguos.Add(bundle);
							}
						}
						else
						{
							bundlesAntiguos.Add(bundle);
						}
					}
				}
			}
		}

		if (bundlesAntiguos.Count > 0)
		{
			bundlesAntiguos.Sort(delegate (JuegoBundle j1, JuegoBundle j2)
			{
				if (j1 != null && j2 != null)
				{
					return j2.FechaTermina.CompareTo(j1.FechaTermina);
				}
				else
				{
					if (j1 != null)
					{
						return 0;
					}

					if (j2 != null)
					{
						return 1;
					}

					return 0;
				}
			});
		}

		return bundlesAntiguos;
	}

	public string BundlesPrepararPrecio(Bundles2.Bundle bundle, int juegoId)
	{
		foreach (var juego in bundle.Juegos)
		{
			if (juegoId.ToString() == juego.JuegoId)
			{
				string precioTexto = juego.Tier.Precio;

				if (precioTexto != null)
				{
					precioTexto = precioTexto.Replace(".", ",");

					if (precioTexto.Contains(",") == true)
					{
						int int1 = precioTexto.IndexOf(",");

						if (int1 == precioTexto.Length - 2)
						{
							precioTexto = precioTexto + "0";
						}
					}

					precioTexto = precioTexto + "€";
					return precioTexto;
				}
			}
		}

		return null;
	}

	public string BundlesPrepararInfo(Bundles2.Bundle bundle, int juegoId)
	{
		if (bundle.Pick == false)
		{
			int tier = 0;

			foreach (var juego in bundle.Juegos)
			{
				if (juegoId.ToString() == juego.JuegoId)
				{
					tier = juego.Tier.Posicion;
					break;
				}
			}

			return Herramientas.Idiomas.CogerCadena(idioma, "Game.String39") + " " + tier.ToString();
		}
		else
		{
			if (bundle.Tiers[0].CantidadJuegos == 1)
			{
				return Herramientas.Idiomas.CogerCadena(idioma, "Game.String40");
			}
			else
			{
				return string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Game.String41"), bundle.Tiers[0].CantidadJuegos.ToString());
			}
		}
	}

	#endregion 

	#region Gratis

	public string GratisComprobar(List<JuegoGratis> listaGratis, JuegoDRM drm)
	{
		if (listaGratis != null)
		{
			if (listaGratis.Count > 0)
			{
				foreach (var gratis in listaGratis)
				{
					if (drm == gratis.DRM)
					{
						return "gratis";
					}
				}
			}
		}

		return null;
	}

	public string GratisPreparar(JuegoDRM drm, string idioma)
	{
		if (GratisDisponibles(juego.Gratis, drm) != null)
		{
			if (GratisDisponibles(juego.Gratis, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "Game.String28");
			}
		}

		if (GratisAntiguos(juego.Gratis, drm) != null)
		{
			if (GratisAntiguos(juego.Gratis, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "Game.String29");
			}
		}

		return null;
	}

	public List<JuegoGratis> GratisDisponibles(List<JuegoGratis> listaGratis, JuegoDRM drm = 0)
	{
		List<JuegoGratis> gratisDisponibles = new List<JuegoGratis>();

		if (listaGratis != null)
		{
			if (listaGratis.Count > 0)
			{
				foreach (var gratis in listaGratis)
				{
					if (DateTime.Now >= gratis.FechaEmpieza && DateTime.Now <= gratis.FechaTermina)
					{
						if (drm != 0)
						{
							if (gratis.DRM == drm)
							{
								gratisDisponibles.Add(gratis);
							}
						}
						else
						{
							gratisDisponibles.Add(gratis);
						}
					}
				}
			}
		}

		return gratisDisponibles;
	}

	public List<JuegoGratis> GratisAntiguos(List<JuegoGratis> listaGratis, JuegoDRM drm = 0)
	{
		List<JuegoGratis> gratisAntiguos = new List<JuegoGratis>();

		if (listaGratis != null)
		{
			if (listaGratis.Count > 0)
			{
				foreach (var gratis in listaGratis)
				{
					if (DateTime.Now > gratis.FechaTermina)
					{
						if (drm != 0)
						{
							if (gratis.DRM == drm)
							{
								gratisAntiguos.Add(gratis);
							}
						}
						else
						{
							gratisAntiguos.Add(gratis);
						}
					}
				}
			}
		}

		if (gratisAntiguos.Count > 0)
		{
			gratisAntiguos.Sort(delegate (JuegoGratis j1, JuegoGratis j2)
			{
				if (j1 != null && j2 != null)
				{
					return j2.FechaEmpieza.CompareTo(j1.FechaEmpieza);
				}
				else
				{
					if (j1 != null)
					{
						return 0;
					}

					if (j2 != null)
					{
						return 1;
					}

					return 0;
				}
			});
		}

		return gratisAntiguos;
	}

	#endregion

	#region Suscripciones

	public string SuscripcionesComprobar(List<JuegoSuscripcion> listaSuscripciones, JuegoDRM drm)
	{
		if (listaSuscripciones != null)
		{
			if (listaSuscripciones.Count > 0)
			{
				foreach (var suscripciones in listaSuscripciones)
				{
					if (drm == suscripciones.DRM)
					{
						return "suscripcion";
					}
				}
			}
		}

		return null;
	}

	public string SuscripcionesPreparar(JuegoDRM drm, string idioma)
	{
		if (SuscripcionesDisponibles(juego.Suscripciones, drm) != null)
		{
			if (SuscripcionesDisponibles(juego.Suscripciones, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "Game.String24");
			}
		}

		if (SuscripcionesAntiguos(juego.Suscripciones, drm) != null)
		{
			if (SuscripcionesAntiguos(juego.Suscripciones, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "Game.String25");
			}
		}

		return null;
	}

	public List<JuegoSuscripcion> SuscripcionesDisponibles(List<JuegoSuscripcion> listaSuscripciones, JuegoDRM drm = 0)
	{
		List<JuegoSuscripcion> suscripcionesDisponibles = new List<JuegoSuscripcion>();

		if (listaSuscripciones != null)
		{
			if (listaSuscripciones.Count > 0)
			{
				foreach (var suscripcion in listaSuscripciones)
				{
					if (DateTime.Now >= suscripcion.FechaEmpieza && DateTime.Now <= suscripcion.FechaTermina)
					{
						if (drm != 0)
						{
							if (suscripcion.DRM == drm)
							{
								suscripcionesDisponibles.Add(suscripcion);
							}
						}
						else
						{
							suscripcionesDisponibles.Add(suscripcion);
						}
					}
				}
			}
		}

		return suscripcionesDisponibles;
	}

	public List<JuegoSuscripcion> SuscripcionesAntiguos(List<JuegoSuscripcion> listaSuscripciones, JuegoDRM drm = 0)
	{
		List<JuegoSuscripcion> suscripcionesAntiguas = new List<JuegoSuscripcion>();

		if (listaSuscripciones != null)
		{
			if (listaSuscripciones.Count > 0)
			{
				foreach (var suscripcion in listaSuscripciones)
				{
					if (DateTime.Now > suscripcion.FechaTermina)
					{
						if (drm != 0)
						{
							if (suscripcion.DRM == drm)
							{
								suscripcionesAntiguas.Add(suscripcion);
							}
						}
						else
						{
							suscripcionesAntiguas.Add(suscripcion);
						}
					}
				}
			}
		}

		if (suscripcionesAntiguas.Count > 0)
		{
			suscripcionesAntiguas.Sort(delegate (JuegoSuscripcion j1, JuegoSuscripcion j2)
			{
				if (j1 != null && j2 != null)
				{
					return j2.FechaEmpieza.CompareTo(j1.FechaEmpieza);
				}
				else
				{
					if (j1 != null)
					{
						return 0;
					}

					if (j2 != null)
					{
						return 1;
					}

					return 0;
				}
			});
		}

		return suscripcionesAntiguas;
	}

	#endregion

	#region Caracteristicas

	private int mediaMostrarPosicion = 0;
	private string mediaMostrar = string.Empty;

	private void CambiarMediaMostrar(MouseEventArgs e, int nuevaCaptura)
	{
		if (nuevaCaptura < 0)
		{
			nuevaCaptura = juego.Media.Capturas.Count - 1;
		}
		else if (nuevaCaptura >= juego.Media.Capturas.Count && nuevaCaptura != 99999)
		{
			nuevaCaptura = 0;
		}

		mediaMostrarPosicion = nuevaCaptura;

		if (nuevaCaptura == 99999)
		{
			mediaMostrar = juego.Media.Video;
		}
		else
		{
			if (nuevaCaptura >= 0 && nuevaCaptura < juego.Media.Capturas.Count)
			{
				mediaMostrar = juego.Media.Capturas[mediaMostrarPosicion];
			}
		}
	}

	#endregion

	#region Minimo

	public static string PrecioMinimoActual(global::Juegos.Juego minimo, string idioma)
	{
		decimal minimoCantidad = 10000000;

		if (minimo.PrecioActualesTiendas != null)
		{
			foreach (var precio in minimo.PrecioActualesTiendas)
			{
				bool fechaEncaja = JuegoFicha.CalcularAntiguedad(precio);

				if (fechaEncaja == true)
				{
					decimal tempPrecio = precio.Precio;

					if (precio.Moneda != JuegoMoneda.Euro)
					{
						tempPrecio = Divisas.Cambio(tempPrecio, precio.Moneda);
					}

					if (tempPrecio < minimoCantidad)
					{
						minimoCantidad = tempPrecio;
					}
				}
			}
		}
		
		if (minimoCantidad > 0 && minimoCantidad < 10000000)
		{
			string precioTexto = string.Empty;

			precioTexto = minimoCantidad.ToString();
			precioTexto = precioTexto.Replace(".", ",");

			int int1 = precioTexto.IndexOf(",");

			if (int1 == precioTexto.Length - 2)
			{
				precioTexto = precioTexto + "0";
			}

			precioTexto = precioTexto + "€";

			return string.Format(Idiomas.CogerCadena(idioma, "Search.String1"), precioTexto);
		}

		return Idiomas.CogerCadena(idioma, "Search.String2");
	}

	#endregion
}
