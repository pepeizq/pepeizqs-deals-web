@using Bundles2
@using Gratis2
@using Herramientas
@using Juegos
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.JSInterop
@using Microsoft.VisualBasic
@using Suscripciones2
@using System.Net
@using Tiendas2

@inject IJSRuntime JS

<div>
	@if (juego.Tipo == JuegoTipo.Game)
	{
		<img class="juego-fondo" src="@Imagenes.DescargarYGuardar(juego.Imagenes.Library_1920x620, "juegos", juego.Id.ToString(), "library_1920x620", dominio).Result"/>
	}

	<div class="juego-contenido">
		<div class="perfil-espacio-bottom juego-cabecera" style="position: -webkit-sticky; position: sticky; top: 70px; z-index: 3;">
			<div class="perfil-flexible-centrado">
				<div class="juego-flexible-izquierda">
					<img src="@Imagenes.DescargarYGuardar(LimpiarImagenJuego(juego.Imagenes.Header_460x215), "juegos", juego.Id.ToString(), "header_460x215", dominio).Result" class="juego-imagen" />
				</div>
				
				<div class="juego-titulo">
					@juego.Nombre <br />

					<div style="margin-top: 10px;">
						@foreach (JuegoDRM drm in JuegoDRM2.CargarDRMs())
						{
							@if (drm != JuegoDRM.NoEspecificado)
							{
								@if (VerificarMostrarDRM(idioma, drm, juego) == true)
								{
									@if (drm == JuegoDRM.DRMFree)
									{
										<button onclick="moverScroll('@drm')" class="boton-pequeño" style="width: 40px; height: 40px; text-align: center; padding: 7px; margin-right: 10px;"><div style="font-weight: bold; font-size: 10px;">DRM Free</div></button>
									}
									else
									{
										<button onclick="moverScroll('@drm')" class="boton-pequeño" style="width: 40px; height: 40px; text-align: center; padding: 9px; margin-right: 10px">					
											<div style="display: flex; align-items: center;">
												<img src="@JuegoDRM2.SacarImagen(drm)" style="max-width: 100%; max-height: 100%;" />
											</div>
										</button>
									}
								}
							}
						}
					</div>					
				</div>

				<div style="text-align: center;">
					@if (juego.Analisis != null)
					{
						<div style="font-size: 14px; min-width: 250px;">
							<div class="tooltip2 juego-analisis-display">
								<div style="display: flex; align-items: center;">
									@if (int.Parse(juego.Analisis.Porcentaje) > 74)
									{
										<img src="/imagenes/analisis/positive2.webp" class="juego-analisis-imagen" />
									}

									@if (int.Parse(juego.Analisis.Porcentaje) > 49 && int.Parse(juego.Analisis.Porcentaje) < 75)
									{
										<img src="/imagenes/analisis/mixed2.webp" class="juego-analisis-imagen" />
									}

									@if (int.Parse(juego.Analisis.Porcentaje) < 50)
									{
										<img src="/imagenes/analisis/negative2.webp" class="juego-analisis-imagen" />
									}

									<div style="margin-left: 10px;">@juego.Analisis.Porcentaje% • @Calculadora.RedondearAnalisis(idioma, juego.Analisis.Cantidad)</div>
								</div>

								<div class="tooltip-abrir tooltip-abajo" style="padding: 20px; width: 100%;">
									<div class="juego-analisis-texto2">@Idiomas.CogerCadena(idioma, "Game.String2")</div>
								</div>
							</div>
						</div>
					}

					<div style="display: flex; align-items: center; justify-content: center; margin-top: 15px;">
						<div>
							@if (juego.Caracteristicas.Windows == true)
							{
								<img src="/imagenes/sistemas/windows.webp" />
							}

							@if (juego.Caracteristicas.Mac == true)
							{
								<img src="/imagenes/sistemas/mac.webp" />
							}

							@if (juego.Caracteristicas.Linux == true)
							{
								<img src="/imagenes/sistemas/linux.webp" />
							}
						</div>						

						<div style="margin-left: 20px;">
							<label>@Idiomas.CogerCadena(idioma, "Game.String1")</label>

							@if (juego.IdSteam > 0)
							{
								<a class="juego-boton-pequeño" style="margin-left: 10px;" href="@EnlaceAcortador.Generar("https://store.steampowered.com/app/" + juego.IdSteam.ToString(), "steam")" target="_blank">Steam</a>
							}

							@if (string.IsNullOrEmpty(juego.SlugGOG) == false)
							{
								<a class="juego-boton-pequeño" style="margin-left: 10px;" href="@EnlaceAcortador.Generar("https://www.gog.com/game/" + juego.SlugGOG, "gog")" target="_blank">GOG</a>
							}
						</div>
					</div>
				</div>				
			</div>
		</div>

		@foreach (JuegoDRM drm in JuegoDRM2.CargarDRMs())
		{
			@if (drm != JuegoDRM.NoEspecificado)
			{
				@if (VerificarMostrarDRM(idioma, drm, juego) == true)
				{
					<div id="@drm">
						@* @if (SignInManager.IsSignedIn(User))
						{
							@(await Html.RenderComponentAsync<Componentes.Secciones.JuegoFichaDeseado>(RenderMode.ServerPrerendered, new { idioma = Model.idioma, juego = Model.juego, drm = drm }))
						} *@

						<div class="juego-drm-centrado perfil-espacio-bottom">
							<div class="perfil juego-drm-imagen">
								@if (drm == JuegoDRM.DRMFree)
								{
									<div style="font-weight: bold; font-size: 18px;">DRM Free</div>
								}
								else
								{
									<img src="@JuegoDRM2.SacarImagen(drm)" />
								}
							</div>

							<div class="perfil" style="width: 90%;">
								<div class="juego-minimo">@CogerMinimoDRM(idioma, drm, juego.PrecioMinimosHistoricos, juego.PrecioActualesTiendas)</div>

								@PrepararBundles(idioma, juego.Bundles, drm)

								@PrepararGratis(idioma, juego.Gratis, drm)

								@PrepararSuscripcion(idioma, juego.Suscripciones, drm)

								@if (OrdenarPrecios(juego.PrecioActualesTiendas, drm).Count > 0)
								{
									@foreach (JuegoPrecio precio in OrdenarPrecios(juego.PrecioActualesTiendas, drm))
									{
										@if (precio.Descuento > 0)
										{
											<a class="juego-boton-pequeño juego-imagen-boton-espacio" href="@EnlaceAcortador.Generar(precio.Enlace, precio.Tienda)" target="_blank">
												<div class="perfil-flexible-centrado">
													<img src="@SacarImagenTienda(precio.Tienda)" class="juego-imagen-boton" />

													<div class="juego-descuento-precio">
														<div style="font-size: 14px; margin: 20px;">
															@Calculadora.HaceTiempo(precio.FechaDetectado, idioma)
														</div>

														<div style="width: 75px; text-align: center;" class="juego-descuento">
															@precio.Descuento.ToString()%
														</div>

														<div class="juego-precio" style="text-align: center;">
															@PrepararPrecio(precio)

															@if (precio.Moneda != JuegoMoneda.Euro)
															{
																<br />

																<label style="font-size: 13px;">@Divisas.DevolverSimbolo(precio.Precio, precio.Moneda)</label>
															}
														</div>
													</div>
												</div>
											</a>
										}									
									}
								}
								else
								{
									<div>@Idiomas.CogerCadena(idioma, "Game.String12")</div>
								}
							</div>
						</div>
					</div>
				}
			}
		}

		@if (juego.Caracteristicas.Descripcion != null)
		{
			<div class="perfil perfil-flexible-centrado perfil-espacio-bottom">
				<div style="width: 100%; padding: 10px;">
					@WebUtility.HtmlDecode(juego.Caracteristicas.Descripcion)
				</div>
			</div>
		}

		@if (juego.Media != null)
		{
			@if (juego.Media.Capturas != null)
			{
				@if (juego.Media.Capturas.Count > 0)
				{
					<div class="perfil">
						<div class="juego-galeria-contenedor">
							@for (int i = 0; i < juego.Media.Capturas.Count; i++)
							{
								<div class="juego-galeria-imagenes">
									<div class="juego-galeria-numero">@(i + 1) / @juego.Media.Capturas.Count</div>
									<img src="@Imagenes.DescargarYGuardar(juego.Media.Capturas[i], "juegos", juego.Id.ToString(), "captura" + i.ToString(), dominio).Result" style="width: 100%;">
								</div>
							}

							<a class="juego-galeria-atras" onclick="siguienteAtras(-1)">&#10094;</a>
							<a class="juego-galeria-siguiente" onclick="siguienteAtras(1)">&#10095;</a>

							<div class="juego-galeria-contenedor-texto">
								<p id="juego-galeria-texto"></p>
							</div>

							@if (juego.Media.Miniaturas != null)
							{
								<div class="juego-galeria-fila">
									@for (int i = 0; i < juego.Media.Miniaturas.Count; i++)
									{
										<div class="juego-galeria-columna">
											<img class="juego-galeria-capturas juego-galeria-cursor" src="@Imagenes.DescargarYGuardar(juego.Media.Miniaturas[i], "juegos", juego.Id.ToString(), "miniatura" + i.ToString(), dominio).Result" style="width: 100%;" onclick="cambiarImagen(@i + 1)">
										</div>
									}
								</div>
							}
						</div>
					</div>
				}
			}
		}
	</div>
</div>

<script>
	let imagenPosicion = 1;
	cargarImagen(imagenPosicion);

	function siguienteAtras(n) {
		cargarImagen(imagenPosicion += n);
	}

	function cambiarImagen(n) {
		cargarImagen(imagenPosicion = n);
	}

	function cargarImagen(n) {
		let i;
		let imagenes = document.getElementsByClassName("juego-galeria-imagenes");
		let capturas = document.getElementsByClassName("juego-galeria-capturas");
		let texto = document.getElementById("juego-galeria-texto");

		if (n > imagenes.length) {
			imagenPosicion = 1
		}

		if (n < 1) {
			imagenPosicion = imagenes.length
		}

		for (i = 0; i < imagenes.length; i++) {
			imagenes[i].style.display = "none";
		}

		for (i = 0; i < capturas.length; i++) {
			capturas[i].className = capturas[i].className.replace(" juego-galeria-activo", "");
		}

		imagenes[imagenPosicion - 1].style.display = "block";
		capturas[imagenPosicion - 1].className += " juego-galeria-activo";
		texto.innerHTML = capturas[imagenPosicion - 1].alt;
	}

	function moverScroll(id) {
		const yOffset = -190;
		const element = document.getElementById(id);
		const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

		window.scrollTo({ top: y, behavior: 'smooth' });
	}
</script>

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string dominio { get; set; }

	[Parameter]
	public Juegos.Juego juego { get; set; }

	protected override async void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		await JS.InvokeAsync<string>("cargarImagen", "1");
	}

	public static string LimpiarImagenJuego(string enlace)
	{
		if (enlace.Contains("/header_alt_") == true)
		{
			int int1 = enlace.IndexOf("/header_alt_");
			enlace = enlace.Remove(int1, enlace.Length - int1);

			enlace = enlace + "/header.jpg";
		}

		return enlace;
	}

	public bool VerificarMostrarDRM(string idioma, JuegoDRM drm, global::Juegos.Juego juego)
	{
		bool mostrar = false;

		if (CogerMinimoDRM(idioma, drm, juego.PrecioMinimosHistoricos, juego.PrecioActualesTiendas) != null)
		{
			mostrar = true;
		}
		else if (PrepararBundles(idioma, juego.Bundles, drm) != null)
		{
			mostrar = true;
		}
		else if (PrepararGratis(idioma, juego.Gratis, drm) != null)
		{
			mostrar = true;
		}
		else if (PrepararSuscripcion(idioma, juego.Suscripciones, drm) != null)
		{
			mostrar = true;
		}

		return mostrar;
	}

	public string PrepararBundles(string idioma, List<JuegoBundle> listaBundles, JuegoDRM drm)
	{
		if (listaBundles != null)
		{
			if (listaBundles.Count > 0)
			{
				string mensaje = null;
				List<JuegoBundle> bundlesDisponibles = new List<JuegoBundle>();

				foreach (var bundle in listaBundles)
				{
					if (drm == bundle.DRM)
					{
						if (DateTime.Now >= bundle.FechaEmpieza && DateTime.Now <= bundle.FechaTermina)
						{
							bundlesDisponibles.Add(bundle);
						}
					}
				}

				if (bundlesDisponibles.Count > 0)
				{
					if (bundlesDisponibles.Count == 1)
					{
						mensaje = Idiomas.CogerCadena(idioma, "Game.String19") + " <a href=" + Strings.ChrW(34) + EnlaceAcortador.Generar(bundlesDisponibles[0].Enlace, bundlesDisponibles[0].Tipo) + Strings.ChrW(34) + " target=" + Strings.ChrW(34) + "_blank" + Strings.ChrW(34) + ">" + global::BaseDatos.Bundles.Buscar.UnBundle(bundlesDisponibles[0].BundleId).NombreBundle + " (" + BundlesCargar.DevolverBundle(bundlesDisponibles[0].Tipo).NombreTienda + ")</a>";
					}
					else if (bundlesDisponibles.Count > 1)
					{
						mensaje = Idiomas.CogerCadena(idioma, "Game.String20") + " <ul>";

						foreach (var bundle in bundlesDisponibles)
						{
							mensaje = mensaje + "<li><a href=" + Strings.ChrW(34) + EnlaceAcortador.Generar(bundle.Enlace, bundle.Tipo) + Strings.ChrW(34) + " target=" + Strings.ChrW(34) + "_blank" + Strings.ChrW(34) + ">" + global::BaseDatos.Bundles.Buscar.UnBundle(bundle.BundleId).NombreBundle + " (" + BundlesCargar.DevolverBundle(bundle.Tipo).NombreTienda + ")</a></li>";
						}

						mensaje = mensaje + "</ul>";
					}
				}

				if (mensaje == null)
				{
					List<JuegoBundle> bundlesAntiguos = new List<JuegoBundle>();

					foreach (var bundle in listaBundles)
					{
						if (drm == bundle.DRM)
						{
							if (DateTime.Now > bundle.FechaTermina)
							{
								bundlesAntiguos.Add(bundle);
							}
						}
					}

					if (bundlesAntiguos.Count > 0)
					{
						mensaje = Idiomas.CogerCadena(idioma, "Game.String21") + " ";

						for (int i = 0; i < bundlesAntiguos.Count; i += 1)
						{
							if (i > 0)
							{
								mensaje = mensaje + ", ";
							}

							mensaje = mensaje + "<a href=" + Strings.ChrW(34) + "/bundle/" + bundlesAntiguos[i].BundleId + Strings.ChrW(34) + " target=" + Strings.ChrW(34) + "_blank" + Strings.ChrW(34) + ">" + global::BaseDatos.Bundles.Buscar.UnBundle(bundlesAntiguos[i].BundleId).NombreBundle + " (" + BundlesCargar.DevolverBundle(bundlesAntiguos[i].Tipo).NombreTienda + ")</a></li>";
						}
					}
				}

				if (mensaje != null)
				{
					mensaje = "<div class=" + Strings.ChrW(34) + "juego-minimo" + Strings.ChrW(34) + ">" + mensaje + "</div>";
				}

				return mensaje;
			}
		}

		return null;
	}

	public string PrepararGratis(string idioma, List<JuegoGratis> listaGratis, JuegoDRM drm)
	{
		if (listaGratis != null)
		{
			if (listaGratis.Count > 0)
			{
				int veces = 0;
				string mensaje = null;

				foreach (var gratis in listaGratis)
				{
					if (drm == gratis.DRM)
					{
						if (DateTime.Now >= gratis.FechaEmpieza && DateTime.Now <= gratis.FechaTermina)
						{
							mensaje = "<a href=" + Strings.ChrW(34) + EnlaceAcortador.Generar(gratis.Enlace, gratis.Tipo) + Strings.ChrW(34) + " target=" + Strings.ChrW(34) + "_blank" + Strings.ChrW(34) + ">" + Idiomas.CogerCadena(idioma, "Game.String16") + " " + GratisCargar.DevolverGratis(gratis.Tipo.ToString()).Nombre + "</a>";
						}
						else
						{
							veces += 1;

							if (veces == 1)
							{
								mensaje = Idiomas.CogerCadena(idioma, "Game.String17") + " " + GratisCargar.DevolverGratis(gratis.Tipo.ToString()).Nombre + " " + Calculadora.HaceTiempo(gratis.FechaTermina, idioma);
							}
							else if (veces > 1)
							{
								mensaje = string.Format(Idiomas.CogerCadena(idioma, "Game.String18"), veces);
							}
						}
					}
				}

				if (mensaje != null)
				{
					mensaje = "<div class=" + Strings.ChrW(34) + "juego-minimo" + Strings.ChrW(34) + ">" + mensaje + "</div>";
				}

				return mensaje;
			}
		}

		return null;
	}

	public string PrepararSuscripcion(string idioma, List<JuegoSuscripcion> listaSuscripciones, JuegoDRM drm)
	{
		if (listaSuscripciones != null)
		{
			if (listaSuscripciones.Count > 0)
			{
				string mensaje = null;

				foreach (var suscripcion in listaSuscripciones)
				{
					if (drm == suscripcion.DRM)
					{
						if (DateTime.Now >= suscripcion.FechaEmpieza && DateTime.Now <= suscripcion.FechaTermina)
						{
							mensaje = "<a href=" + Strings.ChrW(34) + EnlaceAcortador.Generar(suscripcion.Enlace, suscripcion.Tipo) + Strings.ChrW(34) + " target=" + Strings.ChrW(34) + "_blank" + Strings.ChrW(34) + ">" + Idiomas.CogerCadena(idioma, "Game.String14") + " " + SuscripcionesCargar.DevolverSuscripcion(suscripcion.Tipo.ToString()).Nombre + "</a>";
						}
						else
						{
							mensaje = Idiomas.CogerCadena(idioma, "Game.String15") + " " + SuscripcionesCargar.DevolverSuscripcion(suscripcion.Tipo).Nombre + " " + Calculadora.HaceTiempo(suscripcion.FechaTermina, idioma);
						}

						break;
					}
				}

				if (mensaje != null)
				{
					mensaje = "<div class=" + Strings.ChrW(34) + "juego-minimo" + Strings.ChrW(34) + ">" + mensaje + "</div>";
				}

				return mensaje;
			}
		}

		return null;
	}

	public static string CogerMinimoDRM(string idioma, JuegoDRM drm, List<JuegoPrecio> minimos, List<JuegoPrecio> preciosActuales)
	{
		string drmPreparado = null;

		List<JuegoPrecio> minimosOrdenados = new List<JuegoPrecio>();

		if (minimos != null)
		{
			if (minimos.Count > 0)
			{
				foreach (JuegoPrecio minimo in minimos)
				{
					if (minimo.DRM == drm)
					{
						minimosOrdenados.Add(minimo);
					}
				}
			}
		}

		if (minimosOrdenados.Count == 0)
		{
			if (preciosActuales != null)
			{
				if (preciosActuales.Count > 0)
				{
					minimosOrdenados = OrdenarPrecios(preciosActuales, drm);
				}
			}			
		}

		if (minimosOrdenados.Count > 0)
		{
			if (minimosOrdenados.Count > 1)
			{
				minimosOrdenados = OrdenarPrecios(minimosOrdenados, drm);
			}			

			JuegoPrecio minimoOrdenado = minimosOrdenados[0];

			drmPreparado = Idiomas.CogerCadena(idioma, "Game.String10") + " " + JuegoDRM2.DevolverDRM(drm) + ": " + PrepararPrecio(minimoOrdenado);

			bool incluirTiempo = true;

			List<JuegoPrecio> preciosActualesOrdenados = OrdenarPrecios(preciosActuales, drm);

			if (preciosActualesOrdenados != null)
			{
				if (preciosActualesOrdenados.Count > 0)
				{
					if (preciosActuales.Count > 0)
					{
						foreach (JuegoPrecio actual in preciosActualesOrdenados)
						{
							if (actual.DRM == drm)
							{
								if (actual.Precio == minimosOrdenados[0].Precio)
								{
									incluirTiempo = false;
								}
							}
						}
					}
				}
			}

			if (incluirTiempo == true)
			{
				List<Tienda> tiendas = TiendasCargar.GenerarListado();
				string tiendaFinal = string.Empty;

				foreach (var tienda in tiendas)
				{
					if (tienda.Id == minimosOrdenados[0].Tienda)
					{
						tiendaFinal = tienda.Nombre;
					}
				}

				drmPreparado = drmPreparado + " (" + Calculadora.HaceTiempo(minimosOrdenados[0].FechaDetectado, idioma) + " " + Idiomas.CogerCadena(idioma, "Game.String13") + " " + tiendaFinal + ")";
			}
			else
			{
				drmPreparado = drmPreparado + " (" + Idiomas.CogerCadena(idioma, "Game.String11") + ")";
			}
		}

		return drmPreparado;
	}

	public static string PrepararPrecio(JuegoPrecio precio)
	{
		string precioTexto = string.Empty;

		if (precio.Moneda != JuegoMoneda.Euro)
		{
			precioTexto = precio.PrecioCambiado.ToString();
		}
		else
		{
			precioTexto = precio.Precio.ToString();
		}

		precioTexto = precioTexto.Replace(".", ",");

		int int1 = precioTexto.IndexOf(",");

		if (int1 == precioTexto.Length - 2)
		{
			precioTexto = precioTexto + "0";
		}

		precioTexto = precioTexto + "€";

		return precioTexto;
	}

	public static List<JuegoPrecio> OrdenarPrecios(List<JuegoPrecio> precios, JuegoDRM drm)
	{
		List<JuegoPrecio> preciosOrdenados = new List<JuegoPrecio>();

		if (precios != null)
		{
			if (precios.Count > 0)
			{
				foreach (JuegoPrecio precio in precios)
				{
					if (precio.DRM == drm)
					{
						bool fechaEncaja = JuegoFicha.CalcularAntiguedad(precio);

						if (fechaEncaja == true)
						{
							JuegoPrecio nuevoPrecio = precio;

							if (nuevoPrecio != null)
							{
								if (nuevoPrecio.Moneda != JuegoMoneda.Euro)
								{
									nuevoPrecio.PrecioCambiado = Divisas.Cambio(nuevoPrecio.Precio, nuevoPrecio.Moneda);
								}
							}

							bool verificacionFinal = true;

							if (preciosOrdenados.Count > 0)
							{
								foreach (var ordenado in preciosOrdenados)
								{
									if (ordenado.Enlace == nuevoPrecio.Enlace && ordenado.Tienda == nuevoPrecio.Tienda && ordenado.DRM == nuevoPrecio.DRM)
									{
										verificacionFinal = false;
										break;
									}
								}
							}

							if (drm == JuegoDRM.NoEspecificado)
							{
								verificacionFinal = false;
							}

							if (verificacionFinal == true)
							{
								preciosOrdenados.Add(nuevoPrecio);
							}
						}
					}
				}
			}
		}

		if (preciosOrdenados.Count > 0)
		{
			preciosOrdenados.Sort(delegate (JuegoPrecio p1, JuegoPrecio p2)
			{
				decimal precio1 = p1.Precio;

				if (p1.Moneda != JuegoMoneda.Euro)
				{
					precio1 = p1.PrecioCambiado;
				}

				decimal precio2 = p2.Precio;

				if (p2.Moneda != JuegoMoneda.Euro)
				{
					precio2 = p2.PrecioCambiado;
				}

				if (precio1 == precio2)
				{
					return p2.FechaDetectado.CompareTo(p1.FechaDetectado);
				}
				else
				{
					return precio1.CompareTo(precio2);
				}
			});
		}

		return preciosOrdenados;
	}

	public static string SacarImagenTienda(string codigo)
	{
		string imagen = string.Empty;

		List<Tienda> tiendas = TiendasCargar.GenerarListado();

		foreach (var tienda in tiendas)
		{
			if (tienda.Id == codigo)
			{
				imagen = tienda.Imagen300x80;
			}
		}

		return imagen;
	}
}
