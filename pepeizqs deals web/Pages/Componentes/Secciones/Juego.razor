@using Blazored.Video
@using Blazored.Video.Support
@using Bundles2
@using Gratis2
@using Herramientas
@using Juegos
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using Microsoft.VisualBasic
@using Newtonsoft.Json
@using Suscripciones2
@using System.Net
@using Tiendas2
@using pepeizqs_deals_web.Areas.Identity.Data

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JavaScript
@inject NavigationManager NavManager

<script>
	window.ChangeUrl = function (url) {
		history.pushState(null, '', url);
	}
</script>

<script>
	function moverScroll(id) {
		const yOffset = -175;
		const element = document.getElementById(id);
		const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

		window.scrollTo({ top: y, behavior: 'smooth' });
	}
</script>

<style>
	.drm-icono {
		visibility: visible;
		padding: 40px;
		width: 10%;
	}

	@@media(max-width: 1000px) {
		.drm-icono {
			visibility: hidden;
			padding: 0px;
			width: 0%;
		}
	}

	.descripcion-datos {
		grid-template-columns: 1fr 1fr 1fr;
	}

	@@media(max-width: 1000px) {
		.descripcion-datos {
			grid-template-columns: 1fr;
		}
	}
}
</style>

<div>
	@if (juego.Tipo == JuegoTipo.Game)
	{
		<img class="juego-fondo" src="@juego.Imagenes.Library_1920x620" alt="@juego.Nombre"/>
	}

	<div class="juego-contenido">
		<div class="perfil-espacio-bottom juego-cabecera" style="position: -webkit-sticky; position: sticky; top: 70px; z-index: 3;">
			<div class="perfil-flexible-centrado">
				<div class="juego-flexible-izquierda">
					<img src="@juego.Imagenes.Header_460x215" class="juego-imagen" alt="@juego.Nombre" />
				</div>
				
				<div class="juego-titulo">
					<h1 style="font-size: 20px;">@juego.Nombre</h1>

					<div style="margin-right: 10px; margin-top: 10px; display: flex; align-items: center;">
						<div style="margin-right: 5px; display: flex; align-items: center;">
							@foreach (JuegoDRM drm in JuegoDRM2.CargarDRMs())
							{
								@if (drm != JuegoDRM.NoEspecificado)
								{
									@if (VerificarMostrarDRM(idioma, drm, juego) == true)
									{
										@if (drm == JuegoDRM.DRMFree)
										{
											<button onclick="moverScroll('@drm')" class="boton-pequeño" style="width: 40px; height: 40px; text-align: center; padding: 7px; margin-right: 10px;"><div style="font-weight: bold; font-size: 9px;">DRM Free</div></button>
										}
										else
										{
											<button onclick="moverScroll('@drm')" class="boton-pequeño" style="width: 40px; height: 40px; text-align: center; padding: 9px; margin-right: 10px">
												<div style="display: flex; align-items: center;">
													<img src="@JuegoDRM2.SacarImagen(drm)" style="max-width: 100%; max-height: 100%;" alt="DRM"/>
												</div>
											</button>
										}
									}
								}
							}
						</div>
						
						@if (juego.Bundles != null)
						{
							<div style="margin-right: 15px; font-size: 16px;">
								<a onclick="moverScroll('bundles')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@Idiomas.CogerCadena(idioma, "Bundles", "Header")</a>
							</div>
						}

						@if (juego.Gratis != null)
						{
							<div style="margin-right: 15px; font-size: 16px;">
								<a onclick="moverScroll('gratis')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@Idiomas.CogerCadena(idioma, "Free", "Header")</a>
							</div>
						}

						@if (juego.Suscripciones != null)
						{
							<div style="margin-right: 15px; font-size: 16px;">
								<a onclick="moverScroll('suscripciones')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@Idiomas.CogerCadena(idioma, "Subscriptions", "Header")</a>
							</div>
						}

						@if (DLCs.Count > 0)
						{
							<div style="margin-right: 15px; font-size: 16px; background: var(--fondoDlc); height: 40px;">
								<a onclick="moverScroll('dlcs')" style="color: var(--colorTextoDlc); text-decoration: none; cursor: pointer; padding: 8px 10px; vertical-align: middle; display: table-cell;">@Idiomas.CogerCadena(idioma, "String34", "Game") (@DLCs.Count.ToString())</a>
							</div>
						}
					</div>
				</div>

				<div style="text-align: right; min-width: 350px; margin: 10px 20px;">
					@if (juego.Analisis != null)
					{
						@if (string.IsNullOrEmpty(juego.Analisis.Cantidad) == false && string.IsNullOrEmpty(juego.Analisis.Porcentaje) == false)
						{
							<div style="font-size: 14px; margin-bottom: 15px; flex: 0 0 auto;">
								<div class="tooltip-juego" onmousemove="hoverTooltip(event, 'tooltip-reviews')">
									<div style="display: flex; align-items: center; justify-content: right;">
										@if (int.Parse(juego.Analisis.Porcentaje) > 74)
										{
											<img src="/imagenes/analisis/positive2.webp" class="juego-analisis-imagen" alt="Reviews"/>
										}

										@if (int.Parse(juego.Analisis.Porcentaje) > 49 && int.Parse(juego.Analisis.Porcentaje) < 75)
										{
											<img src="/imagenes/analisis/mixed2.webp" class="juego-analisis-imagen" alt="Reviews" />
										}

										@if (int.Parse(juego.Analisis.Porcentaje) < 50)
										{
											<img src="/imagenes/analisis/negative2.webp" class="juego-analisis-imagen" alt="Reviews" />
										}

										<div style="margin-left: 10px;">@juego.Analisis.Porcentaje% • @Calculadora.RedondearAnalisis(idioma, juego.Analisis.Cantidad)</div>
									</div>

									<div id="tooltip-reviews" class="tooltip-relleno">
										<div style="margin: 8px;">@Idiomas.CogerCadena(idioma, "String2", "Game")</div>
									</div>
								</div>
							</div>
						}						
					}

					<div style="display: flex; align-items: center; justify-content: right;">
						@if (juego.Caracteristicas != null)
						{
							<div>
								@if (juego.Caracteristicas.Windows == true)
								{
									<img src="/imagenes/sistemas/windows.webp" alt="System" />
								}

								@if (juego.Caracteristicas.Mac == true)
								{
									<img src="/imagenes/sistemas/mac.webp" alt="System" />
								}

								@if (juego.Caracteristicas.Linux == true)
								{
									<img src="/imagenes/sistemas/linux.webp" alt="System" />
								}
							</div>
						}												

						@if (juego.IdSteam > 0 || string.IsNullOrEmpty(juego.SlugGOG) == false)
						{
							<div style="margin-left: 20px;">
								<label>@Idiomas.CogerCadena(idioma, "String1", "Game")</label>

								@if (juego.IdSteam > 0)
								{
									<a class="juego-boton-pequeño" style="margin-left: 10px;" href="@EnlaceAcortador.Generar("https://store.steampowered.com/app/" + juego.IdSteam.ToString(), "steam")" target="_blank">Steam</a>
								}

								@if (string.IsNullOrEmpty(juego.SlugGOG) == false)
								{
									<a class="juego-boton-pequeño" style="margin-left: 10px;" href="@EnlaceAcortador.Generar("https://www.gog.com/game/" + juego.SlugGOG, "gog")" target="_blank">GOG</a>
								}
							</div>
						}						
					</div>
				</div>				
			</div>
		</div>

		@if (juego.Tipo == JuegoTipo.DLC)
		{
			if (string.IsNullOrEmpty(juego.Maestro) == false)
			{
				if (juego.Maestro != "no")
				{
					Juegos.Juego juegoMaestro = global::BaseDatos.Juegos.Buscar.UnJuego(juego.Maestro);

					<a href="/game/@juego.Maestro/@Herramientas.EnlaceAdaptador.Nombre(juegoMaestro.Nombre)/" style="text-decoration: none;">
						<div class="perfil perfil-espacio-bottom" style="padding: 20px 40px; flex-direction: row; align-items: center; background-color: var(--fondoDlc); color: var(--colorTextoDlc);">
							<i class="fa-solid fa-exclamation" style="font-size: 22px; margin-right: 30px;"></i>

							<div style="width: 100%;">
								@Idiomas.CogerCadena(idioma, "String32", "Game")
							</div>
						</div>
					</a>
				}				
			}
		}
		else if (juego.Tipo == JuegoTipo.Game)
		{
			@if (string.IsNullOrEmpty(juego.FreeToPlay) == false)
			{
				@if (juego.FreeToPlay.ToLower() == "true")
				{
					<div class="perfil perfil-espacio-bottom" style="padding: 20px 40px; flex-direction: row; align-items: center;">
						<i class="fa-solid fa-circle-info" style="font-size: 22px; margin-right: 30px;"></i>

						<div style="width: 100%;">
							@Idiomas.CogerCadena(idioma, "String33", "Game")
						</div>
					</div>
				}
			}
		}

		@foreach (JuegoDRM drm in JuegoDRM2.CargarDRMs())
		{
			if (drm != JuegoDRM.NoEspecificado)
			{
				if (VerificarMostrarDRM(idioma, drm, juego) == true)
				{
					<div id="@drm">
						@if (HttpContext == null)
						{
							if (usuario != null)
							{
								bool usuarioTieneJuego = false;

								if (string.IsNullOrEmpty(usuario.SteamGames) == false)
								{
									List<string> juegosSteam = Herramientas.Listados.Generar(usuario.SteamGames);

									if (juegosSteam.Count > 0)
									{
										if (juego.Tipo == JuegoTipo.Game && drm == JuegoDRM.Steam)
										{
											foreach (var juegoUsuario in juegosSteam)
											{
												if (juegoUsuario == juego.IdSteam.ToString())
												{
													usuarioTieneJuego = true;
													break;
												}
											}
										}
									}
								}
							
								bool usuarioTieneDeseado = false;

								string mensaje = string.Empty;

								if (usuarioTieneJuego == true)
								{
									if (juego.Tipo == Juegos.JuegoTipo.Game)
									{
										mensaje = Herramientas.Idiomas.CogerCadena(idioma, "String5", "Game");
									}
									else if (juego.Tipo == Juegos.JuegoTipo.DLC)
									{
										mensaje = Herramientas.Idiomas.CogerCadena(idioma, "String6", "Game");
									}

									<div class="perfil" style="padding: 20px 40px; background-color: var(--fondoBien);">
										<div class="perfil-flexible-centrado">
											<i class="fa-solid fa-check" style="font-size: 25px;"></i>

											<label style="text-align: left; padding-left: 25px; width: 100%;">@mensaje</label>
										</div>
									</div>
								}
								else
								{
									if (string.IsNullOrEmpty(usuario.SteamWishlist) == false)
									{
										List<string> deseadosSteam = Listados.Generar(usuario.SteamWishlist);

										if (deseadosSteam.Count > 0)
										{
											foreach (var deseado in deseadosSteam)
											{
												if (juego.IdSteam > 0)
												{
													if (juego.IdSteam == int.Parse(deseado) && drm == Juegos.JuegoDRM.Steam)
													{
														if (juego.Tipo == Juegos.JuegoTipo.Game)
														{
															mensaje = Herramientas.Idiomas.CogerCadena(idioma, "String7", "Game");
														}
														else if (juego.Tipo == Juegos.JuegoTipo.DLC)
														{
															mensaje = Herramientas.Idiomas.CogerCadena(idioma, "String8", "Game");
														}

														break;
													}
												}
											}
										}
									}
								
									if (string.IsNullOrEmpty(mensaje) == false)
									{
										<div class="perfil" style="padding: 20px 40px; background-color: var(--fondoAlerta);">
											<div class="perfil-flexible-centrado">
												<i class="fa-solid fa-exclamation" style="font-size: 25px;"></i>

												<label style="text-align: left; padding-left: 25px; width: 100%;">@mensaje</label>
											</div>
										</div>
									}
									else
									{
										usuarioTieneDeseado = Herramientas.Deseados.ComprobarSiEsta(usuario, juego, drm);

										if (usuarioTieneDeseado == true)
										{
											<button @onclick="(e => CambiarEstadoDeseado(e, false, drm))" class="boton-pequeño" style="width: auto; padding: 20px 40px;">
												<div class="perfil-flexible-centrado">
													<i class="fa-solid fa-check" style="font-size: 25px;"></i>

													<div style="text-align: left; padding-left: 25px; width: 100%;">@Herramientas.Idiomas.CogerCadena(idioma, "String3", "Game")</div>
												</div>
											</button>
										}
										else
										{
											<button @onclick="(e => CambiarEstadoDeseado(e, true, drm))" class="boton-pequeño" style="width: auto; padding: 20px 40px;">
												@Herramientas.Idiomas.CogerCadena(idioma, "String4", "Game")
											</button>
										}
									}								
								}
							}
						}

						<div class="juego-drm-centrado" style="margin-bottom: 50px;">
							<div class="perfil drm-icono" style="text-align: center;">
								@if (drm == JuegoDRM.DRMFree)
								{
									<div style="font-weight: bold; font-size: 18px;">DRM Free</div>
								}
								else
								{
									<img src="@JuegoDRM2.SacarImagen(drm)" alt="DRM"/>
								}
							</div>

							<div class="perfil" style="width: 100%; gap: 10px;">
								@if (CogerMinimoDRM(idioma, drm, juego.PrecioMinimosHistoricos, juego.PrecioActualesTiendas) != null)
								{
									<div class="juego-minimo">
										@CogerMinimoDRM(idioma, drm, juego.PrecioMinimosHistoricos, juego.PrecioActualesTiendas)
									</div>
								}

								@if (BundlesComprobar(juego.Bundles, drm) != null)
								{
									<div class="juego-minimo">
										<a onclick="moverScroll('bundles')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@BundlesPreparar(drm, idioma)</a>
									</div>
								}

								@if (GratisComprobar(juego.Gratis, drm) != null)
								{
									<div class="juego-minimo">
										<a onclick="moverScroll('gratis')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@GratisPreparar(drm, idioma)</a>
									</div>
								}

								@if (SuscripcionesComprobar(juego.Suscripciones, drm) != null)
								{
									<div class="juego-minimo">
										<a onclick="moverScroll('suscripciones')" style="color: var(--colorTextoOscuro); text-decoration: underline; cursor: pointer;">@SuscripcionesPreparar(drm, idioma)</a>
									</div>
								}

								@if (OrdenarPrecios(juego.PrecioActualesTiendas, drm).Count > 0)
								{
									List<JuegoPrecio> preciosBajos = new List<JuegoPrecio>();
									int descuentoMaximo = 0;

									foreach (JuegoPrecio precio in OrdenarPrecios(juego.PrecioActualesTiendas, drm))
									{
										if (precio.Descuento > descuentoMaximo)
										{
											descuentoMaximo = precio.Descuento;
										}

										if (precio.Descuento > descuentoMaximo - (descuentoMaximo / 2))
										{
											<a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar(precio.Enlace, precio.Tienda)" target="_blank">
												<div class="perfil-flexible-centrado">
													<div>
														<img src="@SacarImagenTienda(precio.Tienda)" class="juego-imagen-boton" alt="Store" />
														<span style="margin-left: 20px;">@ComprobarEdicion(juego.Nombre, precio.Nombre)</span>
													</div>
												
													<div class="juego-descuento-precio">
														<div style="font-size: 14px; margin: 20px;">
															@Calculadora.DiferenciaTiempo(precio.FechaDetectado, idioma)
														</div>

														<div style="width: 75px; text-align: center;" class="juego-descuento">
															@precio.Descuento.ToString()%
														</div>

														<div class="juego-precio" style="text-align: center;">
															@PrepararPrecio(precio, false)

															@if (precio.Moneda != JuegoMoneda.Euro)
															{
																<br />

																<label style="font-size: 13px;">@Divisas.DevolverSimbolo(precio.Precio, precio.Moneda)</label>
															}
														</div>
													</div>
												</div>
											</a>
										}
										else
										{
											preciosBajos.Add(precio);
										}
									}

									if (preciosBajos.Count > 0)
									{
										<button class="juego-boton-pequeño" @onclick="(e => DescuentosBajosMostrar(e))">
											<div style="display: flex; align-items: center; padding: 5px;">
												@if (mostrarDescuentosBajos == true)
												{
													<i class="fa-solid fa-angles-up"></i>

													<div style="width: 100%; text-align: center; font-size: 14px;">
														@Herramientas.Idiomas.CogerCadena(idioma, "String43", "Game")
													</div>

													<i class="fa-solid fa-angles-up"></i>
												}
												else
												{
													<i class="fa-solid fa-angles-down"></i>

													<div style="width: 100%; text-align: center; font-size: 14px;">
														@Herramientas.Idiomas.CogerCadena(idioma, "String42", "Game")
													</div>

													<i class="fa-solid fa-angles-down"></i>
												}
											</div>
										</button>

										if (mostrarDescuentosBajos == true)
										{
											foreach (var precioBajo in preciosBajos)
											{
												<a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar(precioBajo.Enlace, precioBajo.Tienda)" target="_blank">
													<div class="perfil-flexible-centrado">
														<div>
															<img src="@SacarImagenTienda(precioBajo.Tienda)" class="juego-imagen-boton" alt="Store" />
															<span style="margin-left: 20px;">@ComprobarEdicion(juego.Nombre, precioBajo.Nombre)</span>
														</div>

														<div class="juego-descuento-precio">
															<div style="font-size: 14px; margin: 20px;">
																@Calculadora.DiferenciaTiempo(precioBajo.FechaDetectado, idioma)
															</div>

															<div style="width: 75px; text-align: center;" class="juego-descuento">
																@precioBajo.Descuento.ToString()%
															</div>

															<div class="juego-precio" style="text-align: center;">
																@PrepararPrecio(precioBajo, false)

																@if (precioBajo.Moneda != JuegoMoneda.Euro)
																{
																	<br />

																	<label style="font-size: 13px;">@Divisas.DevolverSimbolo(precioBajo.Precio, precioBajo.Moneda)</label>
																}
															</div>
														</div>
													</div>
												</a>
											}
										}
									}
								}
								else
								{
									<div>@Idiomas.CogerCadena(idioma, "String12", "Game")</div>
								}
							</div>
						</div>
					</div>
				}
			}
		}

		@if (juego.Bundles != null)
		{
			<div id="bundles" class="perfil" style="margin-bottom: 50px;">
				@if (BundlesDisponibles(juego.Bundles).Count > 0)
				{
					<div style="margin-bottom: 10px;">
						<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String22", "Game")</label>
					</div>

					@foreach (var bundle2 in BundlesDisponibles(juego.Bundles))
					{
						if (bundle2.BundleId > 0)
						{
							var bundle3 = global::BaseDatos.Bundles.Buscar.UnBundle(bundle2.BundleId);

							if (bundle3 != null)
							{
								<a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar(bundle2.Enlace, bundle3.Tipo)" target="_blank" style="font-size: 16px; padding: 20px 25px; margin-top: 10px; margin-bottom: 10px; cursor: pointer;">
									<div style="display: flex; align-items: center;">
										<div style="margin-right: 15px;">
											<img src="@BundlesCargar.DevolverBundle(bundle3.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Bundle"/>
										</div>

										<div style="margin-right: 30px;">
											<img src="@JuegoDRM2.SacarImagen(bundle2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM"/>
										</div>

										<div style="margin-right: 20px; width: 100%;">
											<label style="cursor: pointer;">@bundle3.NombreBundle • @bundle3.NombreTienda</label><br />
											<label style="font-size: 13px; cursor: pointer;">@Calculadora.DiferenciaTiempo(bundle3.FechaTermina, idioma, 1)</label>
										</div>

										<div style="text-align: right;">
											<label style="cursor: pointer;">@BundlesPrepararPrecio(bundle3, juego.Id)</label>
											<label style="font-size: 13px; cursor: pointer;">@BundlesPrepararInfo(bundle3, juego.Id)</label>
										</div>
									</div>
								</a>
							}
						}						
					}
				}

				@if (BundlesAntiguos(juego.Bundles).Count > 0)
				{
					if (BundlesDisponibles(juego.Bundles).Count > 0)
					{
						<div style="margin-top: 40px; margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String23", "Game")</label>
						</div>
					}
					else
					{
						<div style="margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String23", "Game")</label>
						</div>
					}

					foreach (var bundle2 in BundlesAntiguos(juego.Bundles))
					{
						var bundle3 = global::BaseDatos.Bundles.Buscar.UnBundle(bundle2.BundleId);

						if (bundle3 != null)
						{
							<button @onclick="(e => BundleAbrir(e, bundle2.BundleId))" class="boton-pequeño" style="font-size: 17px; padding: 20px 25px; margin-top: 10px; margin-bottom: 10px;">
								<div style="display: flex; align-items: center;">
									<div style="margin-right: 15px;">
										<img src="@BundlesCargar.DevolverBundle(bundle3.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Bundle"/>
									</div>

									<div style="margin-right: 30px;">
										<img src="@JuegoDRM2.SacarImagen(bundle2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM"/>
									</div>

									<div style="margin-right: 20px; width: 100%;">
										<div style="cursor: pointer;">@bundle3.NombreBundle • @bundle3.NombreTienda</div>
										<div style="font-size: 13px; cursor: pointer;">@Calculadora.DiferenciaTiempo(bundle3.FechaTermina, idioma)</div>
									</div>

									<div style="text-align: right;">
										<div style="cursor: pointer;">@BundlesPrepararPrecio(bundle3, juego.Id)</div>
										<div style="font-size: 13px; cursor: pointer;">@BundlesPrepararInfo(bundle3, juego.Id)</div>
									</div>
								</div>
							</button>
						}
					}
				}			
			</div>
		}

		@if (juego.Gratis != null)
		{
			<div id="gratis" class="perfil" style="margin-bottom: 50px;">
				@if (GratisDisponibles(juego.Gratis).Count > 0)
				{
					<div style="margin-bottom: 10px;">
						<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String30", "Game")</label>
					</div>

					@foreach (var gratis2 in GratisDisponibles(juego.Gratis))
					{
						<a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar(gratis2.Enlace, gratis2.Tipo)" target="_blank" style="font-size: 16px; padding: 20px 25px; margin-top: 10px; margin-bottom: 10px; cursor: pointer;">
							<div style="display: flex; align-items: center;">
								<div style="margin-right: 15px;">
									<img src="@GratisCargar.DevolverGratis(gratis2.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Free"/>
								</div>

								<div style="margin-right: 30px;">
									<img src="@JuegoDRM2.SacarImagen(gratis2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM"/>
								</div>

								<div style="margin-right: 20px; width: 100%;">
									<label style="cursor: pointer;">@GratisCargar.DevolverGratis(gratis2.Tipo).Nombre</label>
								</div>
							</div>
						</a>
					}
				}

				@if (GratisAntiguos(juego.Gratis).Count > 0)
				{
					if (GratisDisponibles(juego.Gratis).Count > 0)
					{
						<div style="margin-top: 40px; margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String31", "Game")</label>
						</div>
					}
					else
					{
						<div style="margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String31", "Game")</label>
						</div>
					}

					foreach (var gratis2 in GratisAntiguos(juego.Gratis))
					{
						<hr/>
						<div style="display: flex; align-items: center; font-size: 16px; padding: 15px 5px;">
							<div style="margin-right: 15px; width: 22px; height: 22px;">
								<img src="@GratisCargar.DevolverGratis(gratis2.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Free"/>
							</div>

							<div style="margin-right: 30px; width: 22px; height: 22px;">
								<img src="@JuegoDRM2.SacarImagen(gratis2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM"/>
							</div>

							 <div style="padding-right: 20px; width: 15%;">
								<label>@GratisCargar.DevolverGratis(gratis2.Tipo).Nombre</label><br />
								<label style="font-size: 13px;">@Calculadora.DiferenciaTiempo(gratis2.FechaTermina, idioma)</label>
							</div>

							<div style="padding-right: 20px; width: 85%;">
								<label>@Idiomas.CogerCadena(idioma, "String37", "Game") @Calculadora.DiferenciaDuranteDias(gratis2.FechaEmpieza, gratis2.FechaTermina, idioma)</label><br />
								<label style="font-size: 13px;">@gratis2.FechaEmpieza.Day.ToString()/@gratis2.FechaEmpieza.Month.ToString()/@gratis2.FechaEmpieza.Year.ToString() • @gratis2.FechaTermina.Day.ToString()/@gratis2.FechaTermina.Month.ToString()/@gratis2.FechaTermina.Year.ToString()</label>
							</div> 
						</div>
					}
				}
			</div>
		}

		@if (juego.Suscripciones != null)
		{
			<div id="suscripciones" class="perfil" style="margin-bottom: 50px;">
				@if (SuscripcionesDisponibles(juego.Suscripciones).Count > 0)
				{
					<div style="margin-bottom: 10px;">
						<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String26", "Game")</label>
					</div>

					@foreach (var suscripcion2 in SuscripcionesDisponibles(juego.Suscripciones))
					{
						<a class="juego-boton-pequeño" href="@EnlaceAcortador.Generar(suscripcion2.Enlace, suscripcion2.Tipo)" target="_blank" style="font-size: 16px; padding: 20px 25px; margin-top: 10px; margin-bottom: 10px; cursor: pointer;">
							<div style="display: flex; align-items: center;">
								<div style="margin-right: 15px;">
									<img src="@SuscripcionesCargar.DevolverSuscripcion(suscripcion2.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Subscription"/>
								</div>

								<div style="margin-right: 30px;">
									<img src="@JuegoDRM2.SacarImagen(suscripcion2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM"/>
								</div>

								<div style="margin-right: 20px; width: 100%;">
									<label style="cursor: pointer;">@SuscripcionesCargar.DevolverSuscripcion(suscripcion2.Tipo).Nombre</label><br/>
									<label style="font-size: 13px; cursor: pointer;">@Calculadora.DiferenciaTiempo(suscripcion2.FechaTermina, idioma, 1)</label>
								</div>
							</div>
						</a>
					}
				}

				@if (SuscripcionesAntiguos(juego.Suscripciones).Count > 0)
				{
					if (SuscripcionesDisponibles(juego.Suscripciones).Count > 0)
					{
						<div style="margin-top: 40px; margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String27", "Game")</label>
						</div>
					}
					else
					{
						<div style="margin-bottom: 10px;">
							<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String27", "Game")</label>
						</div>
					}

					foreach (var suscripcion2 in SuscripcionesAntiguos(juego.Suscripciones))
					{
						<hr />
						<div style="display: flex; align-items: center; font-size: 16px; padding: 15px 5px;">
							<div style="margin-right: 15px; width: 22px; height: 22px;">
								<img src="@SuscripcionesCargar.DevolverSuscripcion(suscripcion2.Tipo).ImagenIcono" style="max-width: 22px; max-height: 22px;" alt="Subscription" />
							</div>

							<div style="margin-right: 30px; width: 22px; height: 22px;">
								<img src="@JuegoDRM2.SacarImagen(suscripcion2.DRM)" style="max-width: 22px; max-height: 22px;" alt="DRM"/>
							</div>

							<div style="padding-right: 20px; width: 15%;">
								<label>@SuscripcionesCargar.DevolverSuscripcion(suscripcion2.Tipo).Nombre</label><br />
								<label style="font-size: 13px;">@Calculadora.DiferenciaTiempo(suscripcion2.FechaTermina, idioma)</label>
							</div>

							<div style="padding-right: 20px; width: 85%;">
								<label>@Idiomas.CogerCadena(idioma, "String38", "Game") @Calculadora.DiferenciaDuranteDias(suscripcion2.FechaEmpieza, suscripcion2.FechaTermina, idioma)</label><br />
								<label style="font-size: 13px;">@suscripcion2.FechaEmpieza.Day.ToString()/@suscripcion2.FechaEmpieza.Month.ToString()/@suscripcion2.FechaEmpieza.Year.ToString() • @suscripcion2.FechaTermina.Day.ToString()/@suscripcion2.FechaTermina.Month.ToString()/@suscripcion2.FechaTermina.Year.ToString()</label>
							</div>
						</div>
					}
				}
			</div>
		}

		@if (juego.Media != null)
		{
			if (juego.Media.Capturas != null)
			{
				if (juego.Media.Capturas.Count > 0)
				{
					<div class="juego-galeria-contenedor" style="margin-top: 50px;">
						@if (mediaMostrarPosicion == 99999)
						{
							<BlazoredVideo style="width: 100%; height: 100%;" controls="controls" preload="metadata">
								<source src="@mediaMostrar" type="video/mp4" />
							</BlazoredVideo>
						}
						else
						{
							<div>
								<div class="juego-galeria-numero">@(mediaMostrarPosicion + 1) / @(juego.Media.Capturas.Count)</div>
								<img src="@mediaMostrar" style="width: 100%;" alt="@juego.Nombre">
							</div>

							<a class="juego-galeria-atras" @onclick="@(e => CambiarMediaMostrar(e, mediaMostrarPosicion - 1))">&#10094;</a>
							<a class="juego-galeria-siguiente" @onclick="@(e => CambiarMediaMostrar(e, mediaMostrarPosicion + 1))">&#10095;</a>
						}

						@if (juego.Media.Miniaturas != null)
						{
							<div class="juego-galeria-fila" style="scrollbar-color: var(--fondoCodigo) var(--fondoOscuro);">
								@{
									if (juego.Media.Video != null)
									{
										<div class="juego-galeria-columna" @onclick="@(e => CambiarMediaMostrar(e, 99999))" style="position: relative;">
											<img class="juego-galeria-capturas juego-galeria-cursor" src="@juego.Imagenes.Header_460x215" style="width: 100%;" alt="@juego.Nombre">
											<i class="fa-solid fa-circle-play" style="position: absolute; font-size: 40px; top: 50%; left: 50%; transform: translate(-50%, -50%); cursor: pointer;"></i>
										</div>
									}

									int i = 0;
									while (i < juego.Media.Miniaturas.Count)
									{
										int nuevaPosicion = i;

										<div class="juego-galeria-columna" @onclick="@(e => CambiarMediaMostrar(e, nuevaPosicion))">
											<img class="juego-galeria-capturas juego-galeria-cursor" src="@juego.Media.Miniaturas[i]" style="width: 100%;" alt="@juego.Nombre">
										</div>

										i += 1;
									}
								}
							</div>
						}
					</div>
				}
			}
		}

		<div class="descripcion-datos" style="display: grid; margin-top: 50px; gap: 30px;">
			@if (juego.Caracteristicas != null)
			{
				@if (string.IsNullOrEmpty(juego.Caracteristicas.Descripcion) == false)
				{
					<div class="perfil" style="width: 100%;">
						@WebUtility.HtmlDecode(juego.Caracteristicas.Descripcion)
					</div>
				}

				@if (juego.Caracteristicas.Desarrolladores != null || juego.Caracteristicas.Publishers != null || juego.Generos != null)
				{
					<div class="perfil" style="width: 100%; gap: 20px;">
						@if (juego.Caracteristicas.Desarrolladores != null)
						{
							if (juego.Caracteristicas.Desarrolladores.Count > 0)
							{
								List<string> listaDesarrolladores = new List<string>();

								foreach (var desarrollador in juego.Caracteristicas.Desarrolladores)
								{
									if (string.IsNullOrEmpty(desarrollador) == false)
									{
										listaDesarrolladores.Add(desarrollador);
									}
								}

								if (listaDesarrolladores.Count > 0)
								{
									<div>
										<div>@Idiomas.CogerCadena(idioma, "String35", "Game")</div>

										<div>
											@{
												int i = 0;

												foreach (var desarrollador in listaDesarrolladores)
												{
													if (i > 0)
													{
														<label style="margin-right: 5px;">,</label>
													}

													<label>@desarrollador</label>

													i += 1;
												}
											}
										</div>
									</div>									
								}
							}
						}

						@if (juego.Caracteristicas.Publishers != null)
						{
							if (juego.Caracteristicas.Publishers.Count > 0)
							{
								List<string> listaPublishers = new List<string>();

								foreach (var publisher in juego.Caracteristicas.Publishers)
								{
									if (string.IsNullOrEmpty(publisher) == false)
									{
										listaPublishers.Add(publisher);
									}
								}

								if (listaPublishers.Count > 0)
								{
									<div>
										<div>@Idiomas.CogerCadena(idioma, "String36", "Game")</div>
										
										<div>
											@{
												int i = 0;

												foreach (var publisher in listaPublishers)
												{
													if (i > 0)
													{
														<label style="margin-right: 5px;">,</label>
													}

													<label>@publisher</label>

													i += 1;
												}
											}
										</div>
									</div>	
								}
							}
						}

						@if (juego.Generos != null)
						{
							if (juego.Generos.Count > 0)
							{
								<div>
									<div>@Idiomas.CogerCadena(idioma, "String44", "Game")</div>

									<div>
										@{
											int i = 0;

											foreach (var genero in juego.Generos)
											{
												if (i > 0)
												{
													<label style="margin-right: 5px;">,</label>
												}

												string cadenaGenero = Idiomas.CogerCadena(idioma, genero, "Genres");

												if (string.IsNullOrEmpty(cadenaGenero) == false)
												{
													<label>@cadenaGenero</label>
												}
												else
												{
													global::BaseDatos.Errores.Insertar.Mensaje("Género no encontrado", genero + " - " + juego.Nombre + ": https://store.steampowered.com/api/appdetails/?appids=" + juego.IdSteam.ToString() + "&l=english");
												}

												i += 1;
											}
										}
									</div>
								</div>
							}
						}
					</div>
				}

				@if (juego.Categorias != null)
				{
					if (juego.Categorias.Count > 0)
					{
						<div class="perfil" style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; width: 100%;">
							@foreach (var categoria in juego.Categorias)
							{
								string cadenaCategoria = Idiomas.CogerCadena(idioma, categoria, "Categories");

								if (string.IsNullOrEmpty(cadenaCategoria) == false)
								{
									string imagenCategoria = "/imagenes/categorias/" + categoria + ".webp";

									<div style="display: flex; align-items: center; gap: 10px;">
										<img style="width: 26px; height: 16px;" src="@imagenCategoria"/>

										<div style="width: 100%;">@cadenaCategoria</div>
									</div>
								}
								else
								{
									global::BaseDatos.Errores.Insertar.Mensaje("Categoría no encontrada", categoria + " - " + juego.Nombre + ": https://store.steampowered.com/api/appdetails/?appids=" + juego.IdSteam.ToString() + "&l=english");
								}
							}
						</div>	
					}
				}
			}
		</div>

		@if (DLCs.Count > 0)
		{
			<div id="dlcs" class="perfil" style="margin-top: 50px;">
				<div style="margin-bottom: 10px;">
					<label style="font-size: 18px;">@Idiomas.CogerCadena(idioma, "String34", "Game") (@DLCs.Count.ToString())</label>
				</div>

				@foreach (var dlc in DLCs)
				{
					<a class="juego-boton-pequeño" href="/game/@dlc.Id/@Herramientas.EnlaceAdaptador.Nombre(dlc.Nombre)/" target="_blank" style="font-size: 16px; margin-top: 10px; margin-bottom: 10px; cursor: pointer; padding: 0px;">
						<div style="display: flex; align-items: center;">
							<div style="margin-right: 20px;">
								<img src="@dlc.Imagenes.Header_460x215" style="max-width: 230px; max-height: 107px;" alt="@dlc.Nombre" />
							</div>

							<div style="margin-right: 20px; width: 100%;">
								<div>@dlc.Nombre</div>
								<div style="margin-top: 10px; font-size: 14px;">@PrecioMinimoActual(dlc, idioma)</div>
							</div>
						</div>
					</a>
				}
			</div>
		}
	</div>
</div>

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public Juegos.Juego juego { get; set; }

	private Usuario usuario = new Usuario();

	private List<Juegos.Juego> DLCs = new List<Juegos.Juego>();

	#nullable enable
	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }
	#nullable disable

	protected override async Task OnInitializedAsync()
	{
		if (HttpContext == null)
		{
			usuario = await Herramientas.UsuarioDatos.Actualizar(HttpContextAccessor.HttpContext.User, usuario, UserManager, idioma);

			//-------------------------------------------

			if (juego != null)
			{
				DLCs = global::BaseDatos.Juegos.Buscar.DLCs(juego.Id.ToString());

				if (juego.Media != null)
				{
					if (string.IsNullOrEmpty(juego.Media.Video) == false)
					{
						mediaMostrar = juego.Media.Video;
						mediaMostrar = mediaMostrar.Replace("http://", "https://");
						mediaMostrarPosicion = 99999;
					}
					else
					{
						if (juego.Media.Capturas != null)
						{
							if (juego.Media.Capturas.Count > 0)
							{
								mediaMostrar = juego.Media.Capturas[0];
							}
						}
					}
				}
			}
		}
	}

	protected override async Task OnAfterRenderAsync(bool primerRender)
	{
		if (primerRender == true)
		{
			if (juego != null)
			{
				await JavaScript.InvokeVoidAsync("ChangeUrl", "/game/" + juego.Id.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(juego.Nombre) + "/");
			}
		}
	}

	public static string LimpiarImagenJuego(string enlace)
	{
		if (enlace.Contains("/header_alt_") == true)
		{
			int int1 = enlace.IndexOf("/header_alt_");
			enlace = enlace.Remove(int1, enlace.Length - int1);

			enlace = enlace + "/header.jpg";
		}

		return enlace;
	}

	public bool VerificarMostrarDRM(string idioma, JuegoDRM drm, global::Juegos.Juego juego)
	{
		bool mostrar = false;

		if (CogerMinimoDRM(idioma, drm, juego.PrecioMinimosHistoricos, juego.PrecioActualesTiendas) != null)
		{
			mostrar = true;
		}
		else if (BundlesComprobar(juego.Bundles, drm) != null)
		{
			mostrar = true;
		}
		else if (GratisComprobar(juego.Gratis, drm) != null)
		{
			mostrar = true;
		}
		else if (SuscripcionesComprobar(juego.Suscripciones, drm) != null)
		{
			mostrar = true;
		}

		return mostrar;
	}

	public static string CogerMinimoDRM(string idioma, JuegoDRM drm, List<JuegoPrecio> historicos, List<JuegoPrecio> actuales)
	{
		string drmPreparado = null;

		List<JuegoPrecio> historicosOrdenados = new List<JuegoPrecio>();

		if (historicos != null)
		{
			if (historicos.Count > 0)
			{
				foreach (JuegoPrecio historico in historicos)
				{
					if (historico.DRM == drm)
					{
						historicosOrdenados.Add(historico);
					}
				}
			}
		}

		if (historicosOrdenados.Count == 0)
		{
			if (actuales != null)
			{
				if (actuales.Count > 0)
				{
					historicosOrdenados = OrdenarPrecios(actuales, drm);
				}
			}			
		}

		if (historicosOrdenados.Count > 0)
		{
			if (historicosOrdenados[0] != null)
			{
				drmPreparado = Idiomas.CogerCadena(idioma, "String10", "Game") + " " + JuegoDRM2.DevolverDRM(drm) + ": " + PrepararPrecio(historicosOrdenados[0], true);

				bool incluirTiempo = true;

				List<JuegoPrecio> actualesOrdenados = OrdenarPrecios(actuales, drm);

				if (actualesOrdenados != null)
				{
					if (actualesOrdenados.Count > 0)
					{
						if (actuales.Count > 0)
						{
							foreach (JuegoPrecio actual in actualesOrdenados)
							{
								if (actual.DRM == drm)
								{
									decimal actualPrecio = actual.Precio;

									if (actual.Moneda != JuegoMoneda.Euro)
									{
										actualPrecio = Divisas.Cambio(actual.Precio, actual.Moneda);
									}

									if (actualPrecio == historicosOrdenados[0].Precio)
									{
										incluirTiempo = false;
									}
								}
							}
						}
					}
				}

				if (incluirTiempo == true)
				{
					List<Tienda> tiendas = TiendasCargar.GenerarListado();
					string tiendaFinal = string.Empty;

					foreach (var tienda in tiendas)
					{
						if (tienda.Id == historicosOrdenados[0].Tienda)
						{
							tiendaFinal = tienda.Nombre;
						}
					}

					drmPreparado = drmPreparado + " (" + Calculadora.DiferenciaTiempo(historicosOrdenados[0].FechaDetectado, idioma) + " " + Idiomas.CogerCadena(idioma, "String13", "Game") + " " + tiendaFinal + ")";
				}
				else
				{
					drmPreparado = drmPreparado + " (" + Idiomas.CogerCadena(idioma, "String11", "Game") + ")";
				}
			}		
		}

		return drmPreparado;
	}

	public static string PrepararPrecio(JuegoPrecio precio, bool historico)
	{
		string precioTexto = string.Empty;

		if (historico == true)
		{
			precioTexto = precio.Precio.ToString();
		}
		else
		{
			if (precio.Moneda != JuegoMoneda.Euro)
			{
				precioTexto = precio.PrecioCambiado.ToString();
			}
			else
			{
				precioTexto = precio.Precio.ToString();
			}
		}

		precioTexto = precioTexto.Replace(".", ",");

		int int1 = precioTexto.IndexOf(",");

		if (int1 == precioTexto.Length - 2)
		{
			precioTexto = precioTexto + "0";
		}

		if (precioTexto.Length > int1 + 3)
		{
			precioTexto = precioTexto.Remove(int1 + 3, precioTexto.Length - int1 - 3);
		}

		precioTexto = precioTexto + "€";

		return precioTexto;
	}

	public static List<JuegoPrecio> OrdenarPrecios(List<JuegoPrecio> precios, JuegoDRM drm)
	{
		List<JuegoPrecio> preciosOrdenados = new List<JuegoPrecio>();

		if (precios != null)
		{
			if (precios.Count > 0)
			{
				foreach (JuegoPrecio precio in precios)
				{
					if (precio.DRM == drm && precio.Descuento > 0)
					{
						TimeSpan actualizado = DateTime.Now.Subtract(precio.FechaActualizacion);

						if (actualizado.Days == 0)
						{
							JuegoPrecio nuevoPrecio = precio;

							if (nuevoPrecio != null)
							{
								if (nuevoPrecio.Moneda != JuegoMoneda.Euro)
								{
									nuevoPrecio.PrecioCambiado = Divisas.Cambio(nuevoPrecio.Precio, nuevoPrecio.Moneda);
								}
							}

							bool verificacionFinal = true;

							if (preciosOrdenados.Count > 0)
							{
								foreach (var ordenado in preciosOrdenados)
								{
									if (ordenado.Enlace == nuevoPrecio.Enlace && ordenado.Tienda == nuevoPrecio.Tienda && ordenado.DRM == nuevoPrecio.DRM)
									{
										verificacionFinal = false;
										break;
									}
								}
							}

							if (drm == JuegoDRM.NoEspecificado)
							{
								verificacionFinal = false;
							}

							if (verificacionFinal == true)
							{
								preciosOrdenados.Add(nuevoPrecio);
							}
						}
					}
				}
			}
		}

		if (preciosOrdenados.Count > 0)
		{
			preciosOrdenados.Sort(delegate (JuegoPrecio p1, JuegoPrecio p2)
			{
				decimal precio1 = 0;

				if (p1.Moneda != JuegoMoneda.Euro)
				{
					precio1 = p1.PrecioCambiado;
				}
				else
				{
					precio1 = p1.Precio;
				}

				decimal precio2 = 0;

				if (p2.Moneda != JuegoMoneda.Euro)
				{
					precio2 = p2.PrecioCambiado;
				}
				else
				{
					precio2 = p2.Precio;
				}

				if (precio1 == precio2)
				{
					return p2.FechaDetectado.CompareTo(p1.FechaDetectado);
				}
				else
				{
					return precio1.CompareTo(precio2);
				}
			});
		}

		return preciosOrdenados;
	}

	public static string SacarImagenTienda(string codigo)
	{
		string imagen = string.Empty;

		List<Tienda> tiendas = TiendasCargar.GenerarListado();

		foreach (var tienda in tiendas)
		{
			if (tienda.Id == codigo)
			{
				imagen = tienda.Imagen300x80;
			}
		}

		return imagen;
	}

	private static string ComprobarEdicion(string juego, string oferta)
	{
		if (string.IsNullOrEmpty(oferta) == false)
		{
			if (Buscador.LimpiarNombre(juego) != Buscador.LimpiarNombre(oferta))
			{
				string nuevoTexto = oferta.Replace(juego, null);
				nuevoTexto = nuevoTexto.Trim();

				int i = 0;
				while (i < 10)
				{
					if (nuevoTexto.Contains("-") == true)
					{
						int int1 = nuevoTexto.IndexOf("-");

						if (int1 == 0)
						{
							nuevoTexto = nuevoTexto.Remove(0, 1);
							nuevoTexto = nuevoTexto.Trim();
						}
					}
					i += 1;
				}

				i = 0;
				while (i < 10)
				{
					if (nuevoTexto.Contains(":") == true)
					{
						int int1 = nuevoTexto.IndexOf(":");

						if (int1 == 0)
						{
							nuevoTexto = nuevoTexto.Remove(0, 1);
							nuevoTexto = nuevoTexto.Trim();
						}
					}
					i += 1;
				}

				if (nuevoTexto.Contains("??") == true)
				{
					nuevoTexto = nuevoTexto.Replace("/", null);
					nuevoTexto = nuevoTexto.Replace("?", null);
				}

				nuevoTexto = nuevoTexto.Replace("(Steam)", null);
				nuevoTexto = nuevoTexto.Replace("(STEAM)", null);
				nuevoTexto = nuevoTexto.Replace("(Epic)", null);
				nuevoTexto = nuevoTexto.Replace("(EPIC)", null);
				nuevoTexto = nuevoTexto.Replace("(GOG)", null);
				nuevoTexto = nuevoTexto.Replace("(Giants)", null);
				nuevoTexto = nuevoTexto.Replace("(Microsoft Store)", null);
				nuevoTexto = nuevoTexto.Replace("(ROW)", null);

				nuevoTexto = nuevoTexto.Trim();

				if (Buscador.LimpiarNombre(juego) != Buscador.LimpiarNombre(nuevoTexto))
				{
					string ofertaLimpiada = Buscador.LimpiarNombre(oferta, false);
					string juegoLimpiado = Buscador.LimpiarNombre(juego, false);

					if (ofertaLimpiada.Contains(juegoLimpiado) == true)
					{
						ofertaLimpiada = ofertaLimpiada.Replace(juegoLimpiado, null);
						ofertaLimpiada = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(ofertaLimpiada);

						nuevoTexto = ofertaLimpiada;
					}

					return nuevoTexto;
				}				
			}
		}

		return null;
	}

	#region Deseados

	private void CambiarEstadoDeseado(MouseEventArgs e, bool estado, JuegoDRM drm)
	{
		Herramientas.Deseados.CambiarEstado(UserManager, usuario, juego, estado, drm);
	}

	#endregion

	#region Bundles

	public string BundlesComprobar(List<JuegoBundle> listaBundles, JuegoDRM drm)
	{
		if (listaBundles != null)
		{
			if (listaBundles.Count > 0)
			{
				foreach (var bundle in listaBundles)
				{
					if (drm == bundle.DRM)
					{
						return "bundle";
					}
				}
			}
		}

		return null;
	}

	public string BundlesPreparar(JuegoDRM drm, string idioma)
	{
		if (BundlesDisponibles(juego.Bundles, drm) != null)
		{
			if (BundlesDisponibles(juego.Bundles, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "String20", "Game");
			}
		}

		if (BundlesAntiguos(juego.Bundles, drm) != null)
		{
			if (BundlesAntiguos(juego.Bundles, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "String21", "Game");
			}
		}

		return null;
	}

	public List<JuegoBundle> BundlesDisponibles(List<JuegoBundle> listaBundles, JuegoDRM drm = 0)
	{
		List<JuegoBundle> bundlesDisponibles = new List<JuegoBundle>();

		if (listaBundles != null)
		{
			if (listaBundles.Count > 0)
			{
				foreach (var bundle in listaBundles)
				{
					if (DateTime.Now >= bundle.FechaEmpieza && DateTime.Now <= bundle.FechaTermina)
					{
						if (drm != 0 && bundle.BundleId > 0)
						{
							if (bundle.DRM == drm)
							{
								bundlesDisponibles.Add(bundle);
							}
						}
						else
						{
							bundlesDisponibles.Add(bundle);
						}
					}					
				}
			}
		}

		return bundlesDisponibles;
	}

	public List<JuegoBundle> BundlesAntiguos(List<JuegoBundle> listaBundles, JuegoDRM drm = 0)
	{
		List<JuegoBundle> bundlesAntiguos = new List<JuegoBundle>();

		if (listaBundles != null)
		{
			if (listaBundles.Count > 0)
			{
				foreach (var bundle in listaBundles)
				{
					if (DateTime.Now > bundle.FechaTermina)
					{
						if (drm != 0)
						{
							if (bundle.DRM == drm)
							{
								bundlesAntiguos.Add(bundle);
							}
						}
						else
						{
							bundlesAntiguos.Add(bundle);
						}
					}
				}
			}
		}

		if (bundlesAntiguos.Count > 0)
		{
			bundlesAntiguos = bundlesAntiguos.OrderByDescending(x => x.FechaTermina).ToList();
		}

		return bundlesAntiguos;
	}

	public string BundlesPrepararPrecio(Bundles2.Bundle bundle, int juegoId)
	{
		foreach (var juego in bundle.Juegos)
		{
			if (juegoId.ToString() == juego.JuegoId)
			{
				string precioTexto = juego.Tier.Precio;

				if (precioTexto != null)
				{
					precioTexto = precioTexto.Replace(".", ",");

					if (precioTexto.Contains(",") == true)
					{
						int int1 = precioTexto.IndexOf(",");

						if (int1 == precioTexto.Length - 2)
						{
							precioTexto = precioTexto + "0";
						}
					}

					precioTexto = precioTexto + "€";
					return precioTexto;
				}
			}
		}

		return null;
	}

	public string BundlesPrepararInfo(Bundles2.Bundle bundle, int juegoId)
	{
		if (bundle.Pick == false)
		{
			int tier = 0;

			foreach (var juego in bundle.Juegos)
			{
				if (juegoId.ToString() == juego.JuegoId)
				{
					tier = juego.Tier.Posicion;
					break;
				}
			}

			return Herramientas.Idiomas.CogerCadena(idioma, "String39", "Game") + " " + tier.ToString();
		}
		else
		{
			if (bundle.Tiers[0].CantidadJuegos == 1)
			{
				return Herramientas.Idiomas.CogerCadena(idioma, "String40", "Game");
			}
			else
			{
				return string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String41", "Game"), bundle.Tiers[0].CantidadJuegos.ToString());
			}
		}
	}

	private void BundleAbrir(MouseEventArgs e, int bundleId)
	{
		NavManager.NavigateTo("/bundle/" + bundleId.ToString(), true);
	}

	#endregion 

	#region Gratis

	public string GratisComprobar(List<JuegoGratis> listaGratis, JuegoDRM drm)
	{
		if (listaGratis != null)
		{
			if (listaGratis.Count > 0)
			{
				foreach (var gratis in listaGratis)
				{
					if (drm == gratis.DRM)
					{
						return "gratis";
					}
				}
			}
		}

		return null;
	}

	public string GratisPreparar(JuegoDRM drm, string idioma)
	{
		if (GratisDisponibles(juego.Gratis, drm) != null)
		{
			if (GratisDisponibles(juego.Gratis, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "String28", "Game");
			}
		}

		if (GratisAntiguos(juego.Gratis, drm) != null)
		{
			if (GratisAntiguos(juego.Gratis, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "String29", "Game");
			}
		}

		return null;
	}

	public List<JuegoGratis> GratisDisponibles(List<JuegoGratis> listaGratis, JuegoDRM drm = 0)
	{
		List<JuegoGratis> gratisDisponibles = new List<JuegoGratis>();

		if (listaGratis != null)
		{
			if (listaGratis.Count > 0)
			{
				foreach (var gratis in listaGratis)
				{
					if (DateTime.Now >= gratis.FechaEmpieza && DateTime.Now <= gratis.FechaTermina)
					{
						if (drm != 0)
						{
							if (gratis.DRM == drm)
							{
								gratisDisponibles.Add(gratis);
							}
						}
						else
						{
							gratisDisponibles.Add(gratis);
						}
					}
				}
			}
		}

		return gratisDisponibles;
	}

	public List<JuegoGratis> GratisAntiguos(List<JuegoGratis> listaGratis, JuegoDRM drm = 0)
	{
		List<JuegoGratis> gratisAntiguos = new List<JuegoGratis>();

		if (listaGratis != null)
		{
			if (listaGratis.Count > 0)
			{
				foreach (var gratis in listaGratis)
				{
					if (DateTime.Now > gratis.FechaTermina)
					{
						if (drm != 0)
						{
							if (gratis.DRM == drm)
							{
								gratisAntiguos.Add(gratis);
							}
						}
						else
						{
							gratisAntiguos.Add(gratis);
						}
					}
				}
			}
		}

		if (gratisAntiguos.Count > 0)
		{
			gratisAntiguos = gratisAntiguos.OrderByDescending(x => x.FechaEmpieza).ToList();
		}

		return gratisAntiguos;
	}

	#endregion

	#region Suscripciones

	public string SuscripcionesComprobar(List<JuegoSuscripcion> listaSuscripciones, JuegoDRM drm)
	{
		if (listaSuscripciones != null)
		{
			if (listaSuscripciones.Count > 0)
			{
				foreach (var suscripciones in listaSuscripciones)
				{
					if (drm == suscripciones.DRM)
					{
						return "suscripcion";
					}
				}
			}
		}

		return null;
	}

	public string SuscripcionesPreparar(JuegoDRM drm, string idioma)
	{
		if (SuscripcionesDisponibles(juego.Suscripciones, drm) != null)
		{
			if (SuscripcionesDisponibles(juego.Suscripciones, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "String24", "Game");
			}
		}

		if (SuscripcionesAntiguos(juego.Suscripciones, drm) != null)
		{
			if (SuscripcionesAntiguos(juego.Suscripciones, drm).Count > 0)
			{
				return Idiomas.CogerCadena(idioma, "String25", "Game");
			}
		}

		return null;
	}

	public List<JuegoSuscripcion> SuscripcionesDisponibles(List<JuegoSuscripcion> listaSuscripciones, JuegoDRM drm = 0)
	{
		List<JuegoSuscripcion> suscripcionesDisponibles = new List<JuegoSuscripcion>();

		if (listaSuscripciones != null)
		{
			if (listaSuscripciones.Count > 0)
			{
				foreach (var suscripcion in listaSuscripciones)
				{
					if (DateTime.Now >= suscripcion.FechaEmpieza && DateTime.Now <= suscripcion.FechaTermina)
					{
						if (drm != 0)
						{
							if (suscripcion.DRM == drm)
							{
								suscripcionesDisponibles.Add(suscripcion);
							}
						}
						else
						{
							suscripcionesDisponibles.Add(suscripcion);
						}
					}
				}
			}
		}

		return suscripcionesDisponibles;
	}

	public List<JuegoSuscripcion> SuscripcionesAntiguos(List<JuegoSuscripcion> listaSuscripciones, JuegoDRM drm = 0)
	{
		List<JuegoSuscripcion> suscripcionesAntiguas = new List<JuegoSuscripcion>();

		if (listaSuscripciones != null)
		{
			if (listaSuscripciones.Count > 0)
			{
				foreach (var suscripcion in listaSuscripciones)
				{
					if (DateTime.Now > suscripcion.FechaTermina)
					{
						if (drm != 0)
						{
							if (suscripcion.DRM == drm)
							{
								suscripcionesAntiguas.Add(suscripcion);
							}
						}
						else
						{
							suscripcionesAntiguas.Add(suscripcion);
						}
					}
				}
			}
		}

		if (suscripcionesAntiguas.Count > 0)
		{
			suscripcionesAntiguas = suscripcionesAntiguas.OrderByDescending(x => x.FechaEmpieza).ToList();
		}

		return suscripcionesAntiguas;
	}

	#endregion

	#region Caracteristicas

	private int mediaMostrarPosicion = 0;
	private string mediaMostrar = string.Empty;

	private void CambiarMediaMostrar(MouseEventArgs e, int nuevaCaptura)
	{
		if (nuevaCaptura < 0)
		{
			nuevaCaptura = juego.Media.Capturas.Count - 1;
		}
		else if (nuevaCaptura >= juego.Media.Capturas.Count && nuevaCaptura != 99999)
		{
			nuevaCaptura = 0;
		}

		mediaMostrarPosicion = nuevaCaptura;

		if (nuevaCaptura == 99999)
		{
			mediaMostrar = juego.Media.Video;
		}
		else
		{
			if (nuevaCaptura >= 0 && nuevaCaptura < juego.Media.Capturas.Count)
			{
				mediaMostrar = juego.Media.Capturas[mediaMostrarPosicion];
			}
		}
	}

	#endregion

	#region Minimo

	public static string PrecioMinimoActual(global::Juegos.Juego minimo, string idioma)
	{
		decimal minimoCantidad = 10000000;

		if (minimo.PrecioActualesTiendas != null)
		{
			foreach (var precio in minimo.PrecioActualesTiendas)
			{
				bool fechaEncaja = Calculadora.CalcularAntiguedad(precio);

				if (fechaEncaja == true)
				{
					decimal tempPrecio = precio.Precio;

					if (precio.Moneda != JuegoMoneda.Euro)
					{
						tempPrecio = Divisas.Cambio(tempPrecio, precio.Moneda);
					}

					if (tempPrecio < minimoCantidad)
					{
						minimoCantidad = tempPrecio;
					}
				}
			}
		}

		if (minimoCantidad > 0 && minimoCantidad < 10000000)
		{
			string precioTexto = string.Empty;

			precioTexto = minimoCantidad.ToString();
			precioTexto = precioTexto.Replace(".", ",");

			int int1 = precioTexto.IndexOf(",");

			if (int1 == precioTexto.Length - 2)
			{
				precioTexto = precioTexto + "0";
			}

			precioTexto = precioTexto + "€";

			return string.Format(Idiomas.CogerCadena(idioma, "SearchMessage1", "Header"), precioTexto);
		}

		return Idiomas.CogerCadena(idioma, "SearchMessage2", "Header");
	}

	#endregion

	#region Descuentos Bajos

	private bool mostrarDescuentosBajos = false;

	private void DescuentosBajosMostrar(MouseEventArgs e)
	{
		if (mostrarDescuentosBajos == false)
		{
			mostrarDescuentosBajos = true;
		}
		else
		{
			mostrarDescuentosBajos = false;
		}
	}

	#endregion
}
