@using Bundles2
@using Gratis2
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Noticias
@using pepeizqs_deals_web.Areas.Identity.Data
@using Suscripciones2

@inject UserManager<Usuario> UserManager
@inject IJSRuntime JavaScript

<script>
	window.ChangeUrl = function (url) {
		history.pushState(null, '', url);
	}
</script>

@if (cambiarEnlace == true)
{
	<Seo idioma="@idioma" titulo="@titulo" enlace="@enlace" descripcion="@Herramientas.Idiomas.CogerCadena(idioma, "SEO", "News")" video="@video" />

	<div style="display: flex; align-items: center; gap: 30px; margin-bottom: 40px;">
		<a href="/last-news" class="boton-pequeño" style="color: var(--colorTextoVisitado); background-color: var(--fondoBotonPequeño); border: 0px; padding: 12px 20px; text-decoration: none; width: auto;">
			@Herramientas.Idiomas.CogerCadena(idioma, "Back", "News")
		</a>

		<a href="/" class="boton-pequeño" style="color: var(--colorTextoVisitado); background-color: var(--fondoBotonPequeño); border: 0px; padding: 12px 20px; text-decoration: none; width: auto;">
			@Herramientas.Idiomas.CogerCadena(idioma, "Back2", "News")
		</a>
	</div>
}

<div style="padding: 0px; overflow-x: hidden; overflow-y: auto;">
	@if (string.IsNullOrEmpty(imagenDestacada) == false)
	{
		<div style="display: flex; justify-content: center; align-items: center; overflow: hidden;">
			<img style="height: 170px; flex-shrink: 0; min-width: 100%; object-fit: cover;" src="@imagenDestacada" alt="Image" />
		</div>
	}

	@if (tipo != Tipo.Portada)
	{
		<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px; margin-bottom: 20px; display: flex; flex-direction: row; align-items: center;">
			@{
				string imagenCabecera = string.Empty;

				if (noticia.Tipo == NoticiaTipo.Bundles)
				{
					imagenCabecera = BundlesCargar.DevolverBundle(noticia.BundleTipo).ImagenTienda;
				}
				else if (noticia.Tipo == NoticiaTipo.Gratis)
				{
					imagenCabecera = GratisCargar.DevolverGratis(noticia.GratisTipo).ImagenLogo;
				}
				else if (noticia.Tipo == NoticiaTipo.Suscripciones)
				{
					imagenCabecera = SuscripcionesCargar.DevolverSuscripcion(noticia.SuscripcionTipo).ImagenLogo;
				}

				if (string.IsNullOrEmpty(imagenCabecera) == false)
				{
					<div>
						<img src="@imagenCabecera" style="max-width: 200px; max-height: 80px;" alt="Logo" />
					</div>
				}
			}

			<div style="padding-left: 40px;">
				<h1 style="font-size: 22px;">
					@titulo
				</h1>

				<div style="display: flex; align-items: center; font-size: 15px; margin-top: 20px; gap: 30px;">
					<div>@Herramientas.Idiomas.CogerCadena(idioma, "String9", "News") @Herramientas.Calculadora.DiferenciaTiempo(noticia.FechaEmpieza, idioma)</div>

					@{
						string fechaTermina = string.Empty;
						TimeSpan diferenciaTiempo = noticia.FechaTermina.Subtract(DateTime.Now);

						if (noticia.Tipo == NoticiaTipo.Bundles)
						{
							if (diferenciaTiempo.Days > 1)
							{
								fechaTermina = string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String5", "News"), diferenciaTiempo.Days);
							}
							else if (diferenciaTiempo.Days == 1)
							{
								fechaTermina = string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String6", "News"), diferenciaTiempo.Days);
							}
							else if (diferenciaTiempo.Days == 0)
							{
								fechaTermina = string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String7", "News"), diferenciaTiempo.Days);
							}
							else if (diferenciaTiempo.Days < 0)
							{
								fechaTermina = string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String8", "News"), diferenciaTiempo.Days);
							}
						}
						else
						{
							if (diferenciaTiempo.Days > 1)
							{
								fechaTermina = string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String1", "News"), diferenciaTiempo.Days);
							}
							else if (diferenciaTiempo.Days == 1)
							{
								fechaTermina = string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String2", "News"), diferenciaTiempo.Days);
							}
							else if (diferenciaTiempo.Days == 0)
							{
								fechaTermina = string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String3", "News"), diferenciaTiempo.Days);
							}
							else if (diferenciaTiempo.Days < 0)
							{
								fechaTermina = string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String4", "News"), diferenciaTiempo.Days);
							}
						}

						if (string.IsNullOrEmpty(fechaTermina) == false)
						{
							<div>
								@fechaTermina
							</div>
						}
					}
				</div>
			</div>
		</div>
	}

	@if (noticia.Tipo == NoticiaTipo.Bundles)
	{
		if (noticia.BundleId > 0)
		{
			<div>
				<Bundle bundleId="@noticia.BundleId" idioma="@idioma" tipo="Bundle.Tipo.Noticia" usuarioId="@usuario?.Id"/>
			</div>
		}
	}
	else if (noticia.Tipo == NoticiaTipo.Gratis)
	{
		string texto = Herramientas.Idiomas.MirarTexto(idioma, noticia.ContenidoEn, noticia.ContenidoEs);

		if (string.IsNullOrEmpty(texto) == false)
		{
			if (texto.Contains("</div>") == true)
			{
				int int1 = texto.IndexOf("</div>");
				texto = texto.Remove(int1, texto.Length - int1);

				if (texto.Contains("<div") == true)
				{
					int int2 = texto.IndexOf(">");
					texto = texto.Remove(0, int2 + 1);
				}
			}
			else
			{
				if (texto.Contains("<") == true)
				{
					int int1 = texto.IndexOf("<");
					texto = texto.Remove(int1, texto.Length - int1);
				}
			}
		}

		<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
			<div>
				@texto
			</div>

			@if (string.IsNullOrEmpty(noticia.GratisIds) == false)
			{
				<div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr; gap: 20px; margin-top: 30px;">
					@{
						List<string> ids = Herramientas.Listados.Generar(noticia.GratisIds);

						if (ids.Count > 0)
						{
							foreach (var id in ids)
							{
								var gratis = BaseDatos.Gratis.Buscar.UnJuego(int.Parse(id), null);

								<a href="@Herramientas.EnlaceAcortador.Generar(gratis.Enlace, gratis.Tipo, usuarioPatreon)" class="boton-pequeño" style="padding: 2px;" target="_blank">
									<div>
										<img src="@gratis.Imagen" style="max-width: 100%; max-height: 100%;" alt="@gratis.Nombre" />
									</div>
								</a>
							}
						}
					}
				</div>
			}
		</div>
	}
	else if (noticia.Tipo == NoticiaTipo.Suscripciones)
	{
		string texto = Herramientas.Idiomas.MirarTexto(idioma, noticia.ContenidoEn, noticia.ContenidoEs);

		if (string.IsNullOrEmpty(texto) == false)
		{
			if (texto.Contains("</div>") == true)
			{
				int int1 = texto.IndexOf("</div>");
				texto = texto.Remove(int1, texto.Length - int1);

				if (texto.Contains("<div") == true)
				{
					int int2 = texto.IndexOf(">");
					texto = texto.Remove(0, int2 + 1);
				}
			}
			else
			{
				if (texto.Contains("<") == true)
				{
					int int1 = texto.IndexOf("<");
					texto = texto.Remove(int1, texto.Length - int1);
				}
			}
		}

		<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
			<div>
				@texto
			</div>

			@if (string.IsNullOrEmpty(noticia.SuscripcionesIds) == false)
			{
				<div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr; gap: 20px; margin-top: 30px;">
					@{
						List<string> ids = Herramientas.Listados.Generar(noticia.SuscripcionesIds);

						if (ids.Count > 0)
						{
							foreach (var id in ids)
							{
								var suscripcion = BaseDatos.Suscripciones.Buscar.UnJuego(int.Parse(id), null);

								if (suscripcion != null)
								{
									var juego = BaseDatos.Juegos.Buscar.UnJuego(suscripcion.JuegoId);

									<a href="@Herramientas.EnlaceAcortador.Generar(suscripcion.Enlace, suscripcion.Tipo, usuarioPatreon)" class="boton-pequeño" style="padding: 2px;" target="_blank">
										<div>
											<img src="@juego.Imagenes.Library_600x900" style="max-width: 100%; max-height: 100%;" alt="@juego.Nombre" />
										</div>

										<div style="display: flex; align-items: center; justify-content: right; height: 40px;">
											<img src="@Juegos.JuegoDRM2.SacarImagen(suscripcion.DRM)" style="max-width: 24px; max-height: 24px; margin: 10px;" alt="DRM" />
										</div>
									</a>
								}
							}
						}
					}
				</div>
			}
		</div>
	}
	else
	{
		<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
			@((MarkupString)Herramientas.Idiomas.MirarTexto(idioma, noticia.ContenidoEn, noticia.ContenidoEs))
		</div>
	}

	@if (noticiaAnterior != null || noticiaPosterior != null)
	{
		<div style="display: flex; align-items: center; gap: 40px; margin-top: 40px;">
			@if (noticiaAnterior != null)
			{
				if (noticiaAnterior.Id > 0)
				{
					<a href="/news/@noticiaAnterior.Id/@Herramientas.EnlaceAdaptador.Nombre(Herramientas.Idiomas.MirarTexto(idioma, noticiaAnterior.TituloEn, noticiaAnterior.TituloEs))/" class="boton-pequeño" style="color: var(--colorTextoVisitado); background-color: var(--fondoBotonPequeño); border: 0px; padding: 12px 20px; text-decoration: none; width: 50%; display: flex; align-items: center; gap: 15px;">
						<i class="fa-solid fa-arrow-left"></i>
						@Herramientas.Idiomas.MirarTexto(idioma, noticiaAnterior.TituloEn, noticiaAnterior.TituloEs)
					</a>
				}
			}

			@if (noticiaPosterior != null)
			{
				if (noticiaPosterior.Id > 0)
				{
					<a href="/news/@noticiaPosterior.Id/@Herramientas.EnlaceAdaptador.Nombre(Herramientas.Idiomas.MirarTexto(idioma, noticiaPosterior.TituloEn, noticiaPosterior.TituloEs))/" class="boton-pequeño" style="color: var(--colorTextoVisitado); background-color: var(--fondoBotonPequeño); border: 0px; padding: 12px 20px; text-decoration: none; width: 50%; display: flex; align-items: center; gap: 15px; justify-content: flex-end;">
						@Herramientas.Idiomas.MirarTexto(idioma, noticiaPosterior.TituloEn, noticiaPosterior.TituloEs)
						<i class="fa-solid fa-arrow-right"></i>
					</a>
				}
			}
		</div>
	}
</div>

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string usuarioId { get; set; }

	private Usuario usuario = new Usuario();
	private bool usuarioPatreon = false;

	[Parameter]
	public int noticiaId { get; set; }

	[Parameter]
	public bool cambiarEnlace { get; set; } = true;

	[Parameter]
	public Tipo tipo { get; set; } = Tipo.UltimasNoticias;

	private Noticias.Noticia noticia = new Noticias.Noticia();
	private Noticias.Noticia noticiaAnterior = null;
	private Noticias.Noticia noticiaPosterior = null;

	private string titulo = string.Empty;
	private string enlace = string.Empty;
	private string video = string.Empty;
	private string imagenDestacada = string.Empty;

	private List<Juegos.Juego> juegos = new List<Juegos.Juego>();

	protected override async Task OnInitializedAsync()
	{
		usuario = await UserManager.FindByIdAsync(usuarioId);

		if (usuario != null)
		{
			usuarioPatreon = Herramientas.Patreon.VerificarComprobacion(usuario.PatreonLastCheck);
		}

		if (noticiaId > 0)
		{
			noticia = BaseDatos.Noticias.Buscar.UnaNoticia(noticiaId);

			if (noticia != null)
			{
				titulo = Herramientas.Idiomas.MirarTexto(idioma, noticia.TituloEn, noticia.TituloEs);
				enlace = "https://pepeizqdeals.com/news/" + noticiaId.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(titulo) + "/";

				List<string> juegosTexto = Herramientas.Listados.Generar(noticia.Juegos);

				if (juegosTexto != null)
				{
					foreach (var juego in juegosTexto)
					{
						juegos.Add(BaseDatos.Juegos.Buscar.UnJuego(juego));
					}
				}

				if (juegos != null)
				{
					if (juegos.Count == 1)
					{
						if (juegos[0].Media.Video != null)
						{
							video = juegos[0].Media.Video;
						}
					}
					else if (juegos.Count > 1)
					{
						int analisis = 0;

						foreach (var juego in juegos)
						{
							if (juego.Analisis != null)
							{
								if (string.IsNullOrEmpty(juego.Analisis.Cantidad) == false)
								{
									string temp = juego.Analisis.Cantidad;
									temp = temp.Replace(",", null);
									int analisisJuego = int.Parse(temp);

									if (analisisJuego > analisis)
									{
										analisis = analisisJuego;
										imagenDestacada = juego.Imagenes.Library_1920x620;
									}
								}
							}
							
						}
					}
				}

				noticiaAnterior = BaseDatos.Noticias.Buscar.UnaNoticia(noticiaId - 1);
				noticiaPosterior = BaseDatos.Noticias.Buscar.UnaNoticia(noticiaId + 1);
			}
		}
	}

	protected override async Task OnAfterRenderAsync(bool primerRender)
	{
		if (primerRender == true)
		{
			if (noticia != null)
			{
				if (cambiarEnlace == true)
				{
					await JavaScript.InvokeVoidAsync("ChangeUrl", "/news/" + noticia.Id.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(titulo) + "/");
				}				
			}
		}
	}

	public enum Tipo
	{
		Portada,
		UltimasNoticias
	}
}
