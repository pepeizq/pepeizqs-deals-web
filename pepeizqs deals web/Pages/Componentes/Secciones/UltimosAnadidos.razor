@using BaseDatos.Juegos;
@using Juegos;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient;
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

@if (juegosMostrar.Count > 0)
{
	<div style="background-color: var(--fondoCuerpo); position: sticky; position: -webkit-sticky; top: 70px; z-index: 1; margin: -10px; padding: 10px;">
		<div style="display: flex; align-items: center; width: 100%;">
			<div style="width: 70%; font-size: 23px; text-align: left;">
				@Herramientas.Idiomas.CogerCadena(idioma, "LastAdded.String1")
			</div>

			<div style="display: flex; align-items: center; width: 30%; justify-content: right;">
				<div style="font-size: 16px; text-align: right;">
					@minimo.ToString()/@juegos.Count.ToString()
				</div>

				@if (minimo >= 50)
				{
					<a @onclick="ClickearAtras" class="boton-pequeño" href="/LastAdded#top" target="_top" style="width: 50px; font-size: 20px; text-align: center; margin-left: 20px;"><i class="fa-solid fa-chevron-left"></i></a>
				}

				<a @onclick="ClickearAdelante" class="boton-pequeño" href="/LastAdded#top" target="_top" style="width: 50px; font-size: 20px; text-align: center; margin-left: 20px;"><i class="fa-solid fa-chevron-right"></i></a>
			</div>
		</div>
	</div>

	<hr />

	<div>
		@foreach (global::Juegos.Juego juego in juegosMostrar)
		{
			<div class="perfil-flexible-centrado" style="margin-top: 25px; margin-bottom: 25px;">
				<a class="boton-pequeño" style="padding: 0px;" href="/game/@juego.Id">
					<div class="perfil-flexible-centrado">
						<div>
							<img src="@juego.Imagenes.Capsule_231x87" style="width: 231px; height: 87px;" />
						</div>

						<div style="width: 100%; padding: 5px 20px;">
							<div style="font-size: 18px;">@juego.Nombre</div>

							@if (BaseDatos.Usuarios.Buscar.RolDios(UserManager.GetUserName(HttpContextAccessor.HttpContext!.User)) == true)
							{
								<div class="perfil-flexible-centrado" style="justify-content: left; margin-top: 10px;">
									<div style="font-size: 13px;">@juego.Id</div>
								</div>
							}							
						</div>

						<div style="width: 250px; padding: 5px 15px; text-align: center; font-size: 17px;">
							@Herramientas.JuegoFicha.PrecioMinimoActual(juego, true, idioma)
						</div>
					</div>
				</a>
			</div>
		}
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string dominio { get; set; }

	private List<global::Juegos.Juego> juegos = new List<global::Juegos.Juego>();
	private List<global::Juegos.Juego> juegosMostrar = new List<global::Juegos.Juego>();

	private int minimo = 0;
	private int maximo = 0;

	protected override async Task OnInitializedAsync()
	{
		minimo = 0;
		maximo = 50;

		SqlConnection conexion = Herramientas.BaseDatos.Conectar();

		using (conexion)
		{
			juegos = Buscar.Ultimos(conexion, "juegos", 500);

			if (juegos.Count > 0)
			{
				foreach (var juego in juegos)
				{
					juego.Imagenes.Capsule_231x87 = await Herramientas.Imagenes.DescargarYGuardar(juego.Imagenes.Capsule_231x87, "juegos", juego.Id.ToString(), "capsule_231x87", dominio);
				}

				juegos = juegos.OrderBy(x => x.Id).Reverse().ToList();
			}
		}

		conexion.Dispose();

		CargarJuegos(minimo, maximo);
	}

	private void CargarJuegos(int minimo2, int maximo2)
	{
		juegosMostrar.Clear();

		for (int i = minimo2; i < maximo2; i += 1)
		{
			juegosMostrar.Add(juegos[i]);
		}
	}

	private void ClickearAdelante()
	{
		if (minimo + 50 < juegos.Count && maximo + 50 < juegos.Count)
		{
			minimo = minimo + 50;
			maximo = maximo + 50;
		}

		CargarJuegos(minimo, maximo);
	}

	private void ClickearAtras()
	{
		if (minimo - 50 >= 0 && maximo - 50 >= 0)
		{
			minimo = minimo - 50;
			maximo = maximo - 50;
		}

		CargarJuegos(minimo, maximo);
	}
}
