@using BaseDatos.Juegos;
@using Juegos;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient;
@using Microsoft.JSInterop
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

@if (juegosMostrar.Count > 0)
{
	<div style="max-width: 1000px; margin: auto;">
		<div style="background-color: var(--fondoCuerpo);">
			<div style="display: flex; align-items: center; width: 100%;">
				<div style="width: 100%; font-size: 23px; text-align: left;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "String1", "LastAdded")
				</div>
			</div>
		</div>

		<hr />

		<div>
			<Virtualize Context="juego" Items="juegosMostrar" ItemSize="107" OverscanCount="6">
				<ItemContent>
					<div class="perfil-flexible-centrado" style="margin-top: 25px; margin-bottom: 25px;">
						<a class="boton-pequeño" style="padding: 0px;" href="/game/@juego.Id/@Herramientas.EnlaceAdaptador.Nombre(juego.Nombre)/">
							<div class="perfil-flexible-centrado">
								<div>
									<img src="@juego.Imagenes.Header_460x215" style="width: 230px; height: 107px;" />
								</div>

								<div style="width: 100%; padding: 5px 20px;">
									<div style="font-size: 18px;">@juego.Nombre</div>

									@if (usuario != null)
									{
										if (BaseDatos.Usuarios.Buscar.RolDios(usuario.Id) == true)
										{
											<div class="perfil-flexible-centrado" style="justify-content: left; margin-top: 10px;">
												<div style="font-size: 13px;">@juego.Id</div>
											</div>
										}
									}									
								</div>

								<div style="width: 250px; padding: 5px 15px; text-align: center; font-size: 17px;">
									@GenerarMensaje(juego)
								</div>
							</div>
						</a>
					</div>
				</ItemContent>
			</Virtualize>
		</div>
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	private List<Juegos.Juego> juegosMostrar = new List<Juegos.Juego>();

	private Usuario usuario = new Usuario();

	protected override async Task OnInitializedAsync()
	{
		SqlConnection conexion = Herramientas.BaseDatos.Conectar();

		using (conexion)
		{
			juegosMostrar = Buscar.Ultimos(conexion, "juegos", 500);

			if (juegosMostrar != null)
			{
				if (juegosMostrar.Count > 0)
				{
					juegosMostrar = juegosMostrar.OrderBy(x => x.Id).Reverse().ToList();
				}
			}
		}

		usuario = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
	}

	private string GenerarMensaje(Juegos.Juego juego)
	{
		string mensaje = string.Empty;

		if (string.IsNullOrEmpty(juego.FreeToPlay) == false)
		{
			if (juego.FreeToPlay.ToLower() == "true")
			{
				return Herramientas.Idiomas.BuscarTexto(idioma, "SearchMessage6", "Header");
			}
		}

		if (juego.Gratis != null)
		{
			if (juego.Gratis.Count > 0)
			{
				foreach (var gratis in juego.Gratis)
				{
					if (DateTime.Now >= gratis.FechaEmpieza && DateTime.Now <= gratis.FechaTermina)
					{
						return Herramientas.Idiomas.BuscarTexto(idioma, "SearchMessage5", "Header");
					}
				}
			}
		}

		if (juego.Bundles != null)
		{
			if (juego.Bundles.Count > 0)
			{
				foreach (var bundle in juego.Bundles)
				{
					if (DateTime.Now >= bundle.FechaEmpieza && DateTime.Now <= bundle.FechaTermina)
					{
						return Herramientas.Idiomas.BuscarTexto(idioma, "SearchMessage4", "Header");
					}
				}
			}
		}

		if (juego.Suscripciones != null)
		{
			if (juego.Suscripciones.Count > 0)
			{
				foreach (var suscripcion in juego.Suscripciones)
				{
					if (DateTime.Now >= suscripcion.FechaEmpieza && DateTime.Now <= suscripcion.FechaTermina)
					{
						return Herramientas.Idiomas.BuscarTexto(idioma, "SearchMessage3", "Header");
					}
				}
			}
		}

		decimal minimoCantidad = 10000000;
		Juegos.JuegoPrecio minimoFinal = new Juegos.JuegoPrecio();

		if (juego.PrecioActualesTiendas != null)
		{
			foreach (var precio in juego.PrecioActualesTiendas)
			{
				TimeSpan actualizado = DateTime.Now.Subtract(precio.FechaActualizacion);

				if (actualizado.Days == 0)
				{
					decimal tempPrecio = precio.Precio;

					if (precio.Moneda != Herramientas.JuegoMoneda.Euro)
					{
						tempPrecio = Herramientas.Divisas.Cambio(tempPrecio, precio.Moneda);
					}

					if (tempPrecio < minimoCantidad)
					{
						minimoCantidad = tempPrecio;
						minimoFinal = precio;
					}
				}
			}
		}

		if (minimoFinal != null)
		{
			if (minimoFinal.Precio > 0)
			{
				string precioTexto = string.Empty;

				precioTexto = minimoFinal.Precio.ToString();
				precioTexto = precioTexto.Replace(".", ",");

				int int1 = precioTexto.IndexOf(",");

				if (int1 == precioTexto.Length - 2)
				{
					precioTexto = precioTexto + "0";
				}

				precioTexto = precioTexto + "€";

				return string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "SearchMessage1", "Header"), precioTexto);
			}
			else
			{
				return Herramientas.Idiomas.BuscarTexto(idioma, "SearchMessage2", "Header");
			}
		}

		return Herramientas.Idiomas.BuscarTexto(idioma, "SearchMessage2", "Header");
	}
}
