@using APIs.Steam
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity;
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor

<style>
    .tooltip4 {
        text-decoration: none;
        position: relative;
    }

        .tooltip4 .tooltip-relleno {
            display: none;
        }

        .tooltip4:hover .tooltip-relleno {
            display: block;
            position: fixed;
            overflow: hidden;
            z-index: 1;
        }

    .tooltip-relleno {
        background-color: var(--fondoBotonPequeño);
        color: var(--colorTexto);
        border: 1px solid var(--fondoBoton);
        border-radius: 2px;
        z-index: 1;
    }
</style>

<script>
    function hover(e, id) {
        var x = e.clientX,
            y = e.clientY;

        var tooltip = document.getElementById(id);

        if (screen.width / 2 > x) {
            tooltip.style.top = (y + 10) + 'px';
            tooltip.style.left = (x + 20) + 'px';
        }
        else {
            tooltip.style.top = (y - 10) + 'px';
            tooltip.style.left = (x - 20 - tooltip.getBoundingClientRect().width) + 'px';
        };
    };

    function moverScroll(id) {
        const yOffset = -30;
        const element = document.getElementById(id);
        const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

        window.scrollTo({ top: y, behavior: 'smooth' });
    }
</script>

@if (gratisActuales.Count > 0)
{
	<div style="font-size: 23px;">
		@Herramientas.Idiomas.CogerCadena(idioma, "Free.String1")
	</div>

    <div>
        @foreach (var gratisActual in gratisActuales)
        {
            <hr>

            <div style="display: flex; align-items: start;">
                <div class="perfil" style="width: 20%;">
                    <img src="@gratisActual.Tipo.ImagenLogo" />
                </div>

                <div class="perfil" style="width: 80%; padding: 30px 40px;">
                    @foreach (var juego in gratisActual.Juegos)
                    {
                        <div class="tooltip4" onmousemove="hover(event, 'tooltip-@juego.JuegoId.ToString()')" @onmouseover="@(e => CargarTooltip(e, juego, gratisActual.Tipo.Tipo))">
                            <div id="tooltip-@juego.JuegoId.ToString()" class="tooltip-relleno">
                                @if (string.IsNullOrEmpty(tooltipVideo) == false)
                                {
                                    <video src="@tooltipVideo" autoplay="autoplay" loop muted style="width: 460px; height: 215px; object-fit: cover;" />
                                }

                                <div style="padding: 15px; text-align: center;">
                                    <label>@tooltipNombre</label>

                                    @if (string.IsNullOrEmpty(tooltipReviewsIcono) == false && string.IsNullOrEmpty(tooltipReviewsCantidad) == false)
                                    {
                                        <div style="display: flex; align-items: center; margin-top: 5px; margin-bottom: 5px; padding: 5px; text-align: center; justify-content: center;">
                                            <img src="@tooltipReviewsIcono" style="width: 20px; height: 20px; margin-right: 15px;" />
                                            <label style="font-size: 14px;">@tooltipReviewsCantidad</label>
                                        </div>
                                    }

                                    @if (string.IsNullOrEmpty(tooltipUsuarioTieneJuego) == false)
                                    {
                                        <div>
                                            <label style="font-size: 14px;">@tooltipUsuarioTieneJuego</label>
                                        </div>
                                    }
                                </div>
                            </div>

                            <a href="@Herramientas.EnlaceAcortador.Generar(juego.Enlace, juego.Tipo)" class="boton-pequeño" style="padding: 0px; margin-top: 10px; margin-bottom: 10px;" target="_blank">
                                <div style="display: flex; align-items: center; position: relative;">
                                    <div style="width: 33%;">
                                        <img src="@juego.Imagen" style="max-width: 100%; max-height: 100%;" />
                                    </div>

                                    <div style="width: 66%; margin-left: 25px;">
                                        <div style="font-size: 18px;">@juego.Nombre</div>

                                        @if (gratisActual.Tipo.DRMEnseñar == true)
                                        {
                                            <div style="height: 20px; margin-right: 15px; margin-top: 15px;">
                                                <img src="@Juegos.JuegoDRM2.SacarImagen(juego.DRM)" style="width: 20px; height: 20px;" />
                                            </div>
                                        }
                                    </div>
                                </div>
                            </a>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}

<div style="font-size: 23px; margin-top: 60px;">
    @Herramientas.Idiomas.CogerCadena(idioma, "Free.String2")
</div>

<div style="display: flex; align-items: start; margin-top: 10px;">
    @foreach (var año in años)
    {
        <div style="margin-right: 15px;">
            <button @onclick="@(e => CambiarAño(e, año))" class="boton-pequeño" style=" padding: 6px 10px; width: auto;">
                @año
            </button>

            @if (añoSeleccionado == año)
            {
                <div style="margin-top: 10px; background: var(--colorTexto); padding: 1px;">
                </div>

                <div style="position: absolute; margin-top: 15px; display: flex; align-items: center;">
                    @foreach (var gratisPasado in gratisPasados)
                    {
                        List<Juegos.JuegoGratis> gratisAño = new List<Juegos.JuegoGratis>();

                        foreach (var juego in gratisPasado.Juegos)
                        {
                            if (juego.FechaEmpieza.Year.ToString() == añoSeleccionado)
                            {
                                gratisAño.Add(juego);
                            }
                        }

                        if (gratisAño.Count > 0)
                        {
                            <div style="margin-right: 15px; font-size: 14px;">
                                <a onclick="moverScroll('pasado-@gratisPasado.Tipo.Nombre')" style="color: var(--colorTexto); text-decoration: none; cursor: pointer;"><img src="@gratisPasado.Tipo.ImagenIcono" style="width: 22px; height: 22px;" /> (@gratisAño.Count.ToString())</a>
                            </div>                           
                        }
                    }
                </div>
            }
        </div>
    }
</div>

<div style="margin-top: 55px;">
    @foreach (var gratisPasado in gratisPasados)
    {
        List<Juegos.JuegoGratis> gratisAño = new List<Juegos.JuegoGratis>();

        foreach (var juego in gratisPasado.Juegos)
        {
            if (juego.FechaEmpieza.Year.ToString() == añoSeleccionado)
            {
                gratisAño.Add(juego);
            }
        }

        if (gratisAño.Count > 0)
        {
            <hr>

            <div id="pasado-@gratisPasado.Tipo.Nombre" style="display: flex; align-items: start;">
                <div class="perfil" style="width: 20%;">
                    <img src="@gratisPasado.Tipo.ImagenLogo" />
                </div>

                <div class="perfil" style="width: 80%;">
                    @{
                        int i = 1;
                        while (i < 13)
                        {
                            List<Juegos.JuegoGratis> gratisMensual = new List<Juegos.JuegoGratis>();

                            foreach (var juego in gratisAño)
                            {
                                if (juego.FechaEmpieza.Month == i)
                                {
                                    gratisMensual.Add(juego);
                                }
                            }

                            if (gratisMensual.Count > 0)
                            {
                                <label>@Herramientas.Idiomas.CogerCadena(idioma, "Month." + i.ToString())</label>

                                <ul>
                                    @foreach (var juegoMensual in gratisMensual)
                                    {
                                        <li>
                                            <a href="/game/@juegoMensual.JuegoId" class="tooltip4" onmousemove="hover(event, 'pasado-@juegoMensual.FechaEmpieza.Ticks.ToString()')" @onmouseover="@(e => CargarTooltipPasado(e, juegoMensual))">
                                                <label style="cursor: pointer;">@juegoMensual.Nombre</label>

                                                @if (gratisPasado.Tipo.DRMEnseñar == true)
                                                {
                                                    <label style="cursor: pointer; margin-left: 5px;">(@Juegos.JuegoDRM2.DevolverDRM(juegoMensual.DRM))</label>
                                                }

                                                <div id="pasado-@juegoMensual.FechaEmpieza.Ticks.ToString()" class="tooltip-relleno" style="padding: 10px;">
                                                    @tooltipFecha
                                                </div>
                                            </a>
                                        </li>
                                    }
                                </ul>
                            }

                            i += 1;
                        }
                    }
                </div>
            </div>
        }
    }
</div>

@code {

    #nullable disable

    [Parameter]
    public string idioma { get; set; }

    [Parameter]
    public string dominio { get; set; }

    List<Gratis2.GratisComponente> gratisActuales = new List<Gratis2.GratisComponente>();
    List<Gratis2.GratisComponente> gratisPasados = new List<Gratis2.GratisComponente>();

    private Usuario usuario = new Usuario();
    private List<string> juegosUsuario = new List<string>();

    private List<string> años = new List<string>();
    private string añoSeleccionado = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        usuario = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);

        if (usuario != null)
        {
            if (string.IsNullOrEmpty(usuario.SteamAccount) == false && string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
            {
                bool tiempo = true;

                if (string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
                {
                    if (Convert.ToDateTime(usuario.SteamAccountLastCheck) + TimeSpan.FromDays(7) > DateTime.Now)
                    {
                        tiempo = false;
                    }
                }

                if (tiempo == true)
                {
                    SteamUsuario datos = await Cuenta.CargarDatos(usuario.SteamAccount);

                    usuario.SteamGames = datos.Juegos;
                    usuario.SteamWishlist = datos.Deseados;
                    usuario.Avatar = datos.Avatar;
                    usuario.Nickname = datos.Nombre;
                    usuario.SteamAccountLastCheck = DateTime.Now.ToString();
                    usuario.OfficialGroup = datos.GrupoPremium;
                    usuario.OfficialGroup2 = datos.GrupoNormal;

                    await UserManager.UpdateAsync(usuario);
                }
            }

            juegosUsuario =	Herramientas.Listados.Generar(usuario.SteamGames);
        }

        //--------------------------------------------------------------------

        DateTime arranque = new DateTime(2011, 1, 1);

        int i = 0;
        while (i < 100)
        {
            if (arranque.Year != DateTime.Now.Year)
            {
                años.Add(arranque.Year.ToString());
                arranque = arranque.AddYears(1);
            }
            i += 1;
        }

        años.Add(DateTime.Now.Year.ToString());
        años.Reverse();

        añoSeleccionado = DateTime.Now.Year.ToString();

        //--------------------------------------------------------------------

        List<Juegos.JuegoGratis> juegosTodos = BaseDatos.Gratis.Buscar.Todos();

        if (juegosTodos.Count > 0)
        {
            List<Juegos.JuegoGratis> juegosActuales = new List<Juegos.JuegoGratis>();
            List<Juegos.JuegoGratis> juegosPasados = new List<Juegos.JuegoGratis>();

            foreach (var juego in juegosTodos)
            {
                if (DateTime.Now >= juego.FechaEmpieza && DateTime.Now <= juego.FechaTermina)
                {
                    Juegos.Juego juego2 = BaseDatos.Juegos.Buscar.UnJuego(juego.JuegoId.ToString());

                    juego.Imagen = await Herramientas.Imagenes.DescargarYGuardar(juego2.Imagenes.Header_460x215, "juegos", juego2.Id.ToString(), "library_600x900", dominio);
                    juego.Juego = juego2;

                    juegosActuales.Add(juego);
                }
                else
                {
                    juegosPasados.Add(juego);
                }
            }

            if (juegosActuales.Count > 0)
            {
                juegosActuales = juegosActuales.OrderBy(x => x.Nombre).ToList();

                foreach (var gratis in Gratis2.GratisCargar.GenerarListado())
                {
                    List<Juegos.JuegoGratis> juegos2 = new List<Juegos.JuegoGratis>();

                    foreach (var juego in juegosActuales)
                    {
                        if (juego.Tipo == gratis.Tipo)
                        {
                            juegos2.Add(juego);
                        }
                    }

                    if (juegos2.Count > 0)
                    {
                        Gratis2.GratisComponente componente = new Gratis2.GratisComponente();
                        componente.Juegos = juegos2;
                        componente.Tipo = gratis;

                        gratisActuales.Add(componente);
                    }
                }			
            }

            if (juegosPasados.Count > 0)
            {
                juegosPasados = juegosPasados.OrderBy(x => x.Nombre).ToList();

                foreach (var gratis in Gratis2.GratisCargar.GenerarListado())
                {
                    List<Juegos.JuegoGratis> juegos2 = new List<Juegos.JuegoGratis>();

                    foreach (var juego in juegosPasados)
                    {
                        if (juego.Tipo == gratis.Tipo)
                        {
                            juegos2.Add(juego);
                        }
                    }

                    if (juegos2.Count > 0)
                    {
                        Gratis2.GratisComponente componente = new Gratis2.GratisComponente();
                        componente.Juegos = juegos2;
                        componente.Tipo = gratis;

                        gratisPasados.Add(componente);
                    }
                }
            }
        }
    }

    private void CambiarAño(MouseEventArgs e, string nuevoAño)
    {
        añoSeleccionado = nuevoAño;
    }

    private string ComprobarUsuarioJuego(Juegos.Juego juego, Gratis2.GratisTipo tipo)
    {
        if (usuario != null && juego.Tipo == Juegos.JuegoTipo.Game)
        {
            if (juegosUsuario.Count > 0)
            {
                foreach (var juegoUsuario in juegosUsuario)
                {
                    if (juegoUsuario == juego.IdSteam.ToString())
                    {
                        if (tipo == Gratis2.GratisTipo.Steam)
                        {
                            return "3";
                        }
                        else
                        {
                            return "5";
                        }
                    }
                }

                if (tipo == Gratis2.GratisTipo.Steam)
                {
                    return "4";
                }
                else
                {
                    return "6";
                }
            }
        }

        return null;
    }

    private string tooltipNombre = string.Empty;
    private string tooltipVideo = string.Empty;
    private string tooltipReviewsIcono = string.Empty;
    private string tooltipReviewsCantidad = string.Empty;
    private string tooltipUsuarioTieneJuego = string.Empty;

    private void CargarTooltip(MouseEventArgs args, Juegos.JuegoGratis juegoGratis, Gratis2.GratisTipo tipo)
    {
        Juegos.Juego juego = juegoGratis.Juego;

        tooltipNombre = juego.Nombre;
        tooltipVideo = null;
        tooltipReviewsIcono = null;
        tooltipReviewsCantidad = null;
        tooltipUsuarioTieneJuego = null;

        if (juego.Media != null)
        {
            if (string.IsNullOrEmpty(juego.Media.Video) == false)
            {
                int int1 = juego.Media.Video.LastIndexOf("/");
                string temp1 = juego.Media.Video.Remove(int1, juego.Media.Video.Length - int1);

                tooltipVideo = temp1 + "/microtrailer.webm";

                tooltipVideo = tooltipVideo.Replace("cdn.akamai.steamstatic.com/", "cdn.cloudflare.steamstatic.com/");
                tooltipVideo = tooltipVideo.Replace("http://", "https://");
            }
        }

        if (juego.Analisis != null)
        {
            if (int.Parse(juego.Analisis.Porcentaje) > 74)
            {
                tooltipReviewsIcono = "/imagenes/analisis/positive.webp";
            }
            else if (int.Parse(juego.Analisis.Porcentaje) > 49 && int.Parse(juego.Analisis.Porcentaje) < 75)
            {
                tooltipReviewsIcono = "/imagenes/analisis/mixed.webp";
            }
            else if (int.Parse(juego.Analisis.Porcentaje) < 50)
            {
                tooltipReviewsIcono = "/imagenes/analisis/negative.webp";
            }

            tooltipReviewsCantidad = juego.Analisis.Porcentaje.ToString() + "% • " + Herramientas.Calculadora.RedondearAnalisis(idioma, juego.Analisis.Cantidad);
        }

        if (usuario != null)
        {
            if (ComprobarUsuarioJuego(juego, tipo) != null)
            {
                if (ComprobarUsuarioJuego(juego, tipo) == "3" || ComprobarUsuarioJuego(juego, tipo) == "5")
                {
                    tooltipUsuarioTieneJuego = Herramientas.Idiomas.CogerCadena(idioma, "Free.String" + ComprobarUsuarioJuego(juego, tipo));
                }
                else
                {
                    tooltipUsuarioTieneJuego = Herramientas.Idiomas.CogerCadena(idioma, "Free.String" + ComprobarUsuarioJuego(juego, tipo));
                }
            }
        }
    }

    private string tooltipFecha = string.Empty;

    private void CargarTooltipPasado(MouseEventArgs args, Juegos.JuegoGratis juegoGratis)
    {
        tooltipFecha = juegoGratis.FechaEmpieza.Day.ToString() + "/" + juegoGratis.FechaEmpieza.Month.ToString() + "/" + juegoGratis.FechaEmpieza.Year.ToString() + " • " +
                       juegoGratis.FechaTermina.Day.ToString() + "/" + juegoGratis.FechaTermina.Month.ToString() + "/" + juegoGratis.FechaTermina.Year.ToString();
    }
}
