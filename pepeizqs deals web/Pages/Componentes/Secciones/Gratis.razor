@using APIs.Steam
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity;
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor

@if (gratisActuales.Count > 0)
{
	<div style="font-size: 23px;">
		@Herramientas.Idiomas.CogerCadena(idioma, "Free.String1")
	</div>

	@foreach (var gratisActual in gratisActuales)
	{
		<hr>

		<div style="display: flex; align-items: start;">
			<div class="perfil" style="width: 20%;">
				<img src="@gratisActual.Tipo.ImagenLogo" />
			</div>

			<div class="perfil" style="width: 80%; padding: 30px 40px;">
				@foreach (var juego in gratisActual.Juegos)
				{
					<a href="@Herramientas.EnlaceAcortador.Generar(juego.Enlace, juego.Tipo)" class="boton-pequeño" style="padding: 0px; margin-top: 10px; margin-bottom: 10px;" target="_blank">
                        <div style="display: flex; align-items: center; position: relative;">
							<div style="width: 25%;">
								<img src="@SacarImagen(juego.JuegoId)" style="max-width: 100%; max-height: 100%;" />
							</div>

							<div style="width: 75%; margin-left: 20px;">
								<span>@juego.Nombre</span>

								<div style="display: flex; align-items: center; margin-top: 10px;">
									@if (gratisActual.Tipo.DRMEnseñar == true)
									{
										<div style="height: 20px; margin-right: 15px;">
											<img src="@Juegos.JuegoDRM2.SacarImagen(juego.DRM)" style="max-width: 20px; max-height: 20px;" />
										</div>
									}

									@if (usuario != null)
									{
                                        @if (ComprobarUsuarioJuego(juego.JuegoId.ToString(), gratisActual.Tipo.Tipo) != null)
                                        {
                                            @if (ComprobarUsuarioJuego(juego.JuegoId.ToString(), gratisActual.Tipo.Tipo) == "3" || ComprobarUsuarioJuego(juego.JuegoId.ToString(), gratisActual.Tipo.Tipo) == "5")
                                            {
                                                <div style="padding: 8px 10px; font-size: 14px; background-color: var(--fondoBien); color: var(--colorTextoBien); position: absolute; bottom: 0px; right: 0px;">
                                                    <i class="fa-solid fa-check" style="margin-right: 10px;"></i>
                                                    <span>@Herramientas.Idiomas.CogerCadena(idioma, "Free.String" + ComprobarUsuarioJuego(juego.JuegoId.ToString(), gratisActual.Tipo.Tipo))</span>
                                                </div>
                                            }
                                            else
                                            {
                                                <div style="padding: 8px 10px; font-size: 14px; background-color: var(--fondoAlerta); color: var(--colorTextoAlerta); position: absolute; bottom: 0px; right: 0px;">
                                                    <i class="fa-solid fa-exclamation" style="margin-right: 10px;"></i>
                                                    <span>@Herramientas.Idiomas.CogerCadena(idioma, "Free.String" + ComprobarUsuarioJuego(juego.JuegoId.ToString(), gratisActual.Tipo.Tipo))</span>
                                                </div>
                                            }
                                        }
									}
								</div>
							</div>
						</div>					
					</a>
				}
			</div>
		</div>
	}
}

@if (gratisPasados.Count > 0)
{
	<div style="font-size: 23px; margin-top: 60px;">
		@Herramientas.Idiomas.CogerCadena(idioma, "Free.String2")
	</div>

	@foreach (var gratisPasado in gratisPasados)
	{
		<hr>

		<div style="display: flex; align-items: start;">
			<div class="perfil" style="width: 20%;">
				<img src="@gratisPasado.Tipo.ImagenLogo" />
			</div>

			<div class="perfil" style="width: 80%;">
				@foreach (var juego in gratisPasado.Juegos)
				{
					@if (gratisPasado.Tipo.DRMEnseñar == true)
					{
						<div>
							<a href="/game/@juego.JuegoId">@juego.Nombre</a> (@Juegos.JuegoDRM2.DevolverDRM(juego.DRM)) @juego.FechaTermina.Month.ToString()/@juego.FechaTermina.Year.ToString()
						</div>
					}
					else
					{
						<div>
							<a href="/game/@juego.JuegoId">@juego.Nombre</a> @juego.FechaTermina.Month.ToString()/@juego.FechaTermina.Year.ToString()
						</div>
					}
				}
			</div>
		</div>
	}
}

@code {

    #nullable disable

    [Parameter]
    public string idioma { get; set; }

    [Parameter]
    public string dominio { get; set; }

    List<Gratis2.GratisComponente> gratisActuales = new List<Gratis2.GratisComponente>();
    List<Gratis2.GratisComponente> gratisPasados = new List<Gratis2.GratisComponente>();

    private Usuario usuario = new Usuario();
    private List<string> juegosUsuario = new List<string>();

    private Juegos.Juego juegoUsuario = new Juegos.Juego();

    protected override async Task OnInitializedAsync()
    {
        usuario = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);

        if (usuario != null)
        {
            if (usuario.SteamGames != null)
            {
                bool tiempo = true;

                if (usuario.SteamAccountLastCheck != null)
                {
                    if (Convert.ToDateTime(usuario.SteamAccountLastCheck) + TimeSpan.FromDays(7) > DateTime.Now)
                    {
                        tiempo = false;
                    }
                }

                if (tiempo == true)
                {
                    SteamUsuario datos = await Cuenta.CargarDatos(usuario.SteamAccount);

                    usuario.SteamGames = datos.Juegos;
                    usuario.SteamWishlist = datos.Deseados;
                    usuario.Avatar = datos.Avatar;
                    usuario.Nickname = datos.Nombre;
                    usuario.SteamAccountLastCheck = DateTime.Now.ToString();
                    usuario.OfficialGroup = datos.GrupoOficial;

                    await UserManager.UpdateAsync(usuario);
                }
            }

            juegosUsuario =	Herramientas.Listados.Generar(usuario.SteamGames);
        }

        List<Juegos.JuegoGratis> juegosTodos = BaseDatos.Gratis.Buscar.Todos();

        if (juegosTodos.Count > 0)
        {
            List<Juegos.JuegoGratis> juegosActuales = new List<Juegos.JuegoGratis>();
            List<Juegos.JuegoGratis> juegosPasados = new List<Juegos.JuegoGratis>();

            foreach (var juego in juegosTodos)
            {
                if (DateTime.Now >= juego.FechaEmpieza && DateTime.Now <= juego.FechaTermina)
                {
                    Juegos.Juego juego2 = BaseDatos.Juegos.Buscar.UnJuego(juego.JuegoId.ToString());

                    juego.Imagen = await Herramientas.Imagenes.DescargarYGuardar(juego2.Imagenes.Header_460x215, "juegos", juego2.Id.ToString(), "library_600x900", dominio);

                    juegosActuales.Add(juego);
                }
                else
                {
                    juegosPasados.Add(juego);
                }
            }

            if (juegosActuales.Count > 0)
            {
                juegosActuales = juegosActuales.OrderBy(x => x.Nombre).ToList();

                foreach (var gratis in Gratis2.GratisCargar.GenerarListado())
                {
                    List<Juegos.JuegoGratis> juegos2 = new List<Juegos.JuegoGratis>();

                    foreach (var juego in juegosActuales)
                    {
                        if (juego.Tipo == gratis.Tipo)
                        {
                            juegos2.Add(juego);
                        }
                    }

                    if (juegos2.Count > 0)
                    {
                        Gratis2.GratisComponente componente = new Gratis2.GratisComponente();
                        componente.Juegos = juegos2;
                        componente.Tipo = gratis;

                        gratisActuales.Add(componente);
                    }
                }			
            }

            if (juegosPasados.Count > 0)
            {
                juegosPasados = juegosPasados.OrderBy(x => x.Nombre).ToList();

                foreach (var gratis in Gratis2.GratisCargar.GenerarListado())
                {
                    List<Juegos.JuegoGratis> juegos2 = new List<Juegos.JuegoGratis>();

                    foreach (var juego in juegosPasados)
                    {
                        if (juego.Tipo == gratis.Tipo)
                        {
                            juegos2.Add(juego);
                        }
                    }

                    if (juegos2.Count > 0)
                    {
                        Gratis2.GratisComponente componente = new Gratis2.GratisComponente();
                        componente.Juegos = juegos2;
                        componente.Tipo = gratis;

                        gratisPasados.Add(componente);
                    }
                }
            }
        }
    }

    private string SacarImagen(int id)
    {
        return BaseDatos.Juegos.Buscar.UnJuego(id.ToString()).Imagenes.Header_460x215;
    }

    private string ComprobarUsuarioJuego(string id, Gratis2.GratisTipo tipo)
    {
        if (usuario != null)
        {
            if (juegosUsuario.Count > 0)
            {
                juegoUsuario = BaseDatos.Juegos.Buscar.UnJuego(id.ToString());

                if (juego)
                if (juego.Tipo == Juegos.JuegoTipo.Game)
                {
                    string steamID = juego.IdSteam.ToString();

                    foreach (var juegoUsuario in juegosUsuario)
                    {
                        if (juegoUsuario == steamID)
                        {
                            if (tipo == Gratis2.GratisTipo.Steam)
                            {
                                return "3";
                            }
                            else
                            {
                                return "5";
                            } 
						}
					}

                    if (tipo == Gratis2.GratisTipo.Steam)
                    {
                        return "4";
                    }
                    else
                    {
                        return "6";
                    }
				}				
			}
		}

		return null;
	}
}
