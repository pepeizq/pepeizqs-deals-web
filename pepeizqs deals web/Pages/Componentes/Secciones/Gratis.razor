@using APIs.Steam
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity;
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor

@if (gratisActuales.Count > 0)
{
	<div style="font-size: 23px;">
		@Herramientas.Idiomas.CogerCadena(idioma, "Free.String1")
	</div>

	@foreach (var gratisActual in gratisActuales)
	{
		<hr>

		<div style="display: flex; align-items: start;">
			<div class="perfil" style="width: 20%;">
				<img src="@gratisActual.Tipo.ImagenLogo" />
			</div>

			<div class="perfil" style="width: 80%; padding: 30px 40px;">
				@foreach (var juego in gratisActual.Juegos)
				{
					<a href="@Herramientas.EnlaceAcortador.Generar(juego.Enlace, juego.Tipo)" class="boton-pequeño" style="padding: 0px; margin-top: 10px; margin-bottom: 10px;" target="_blank">
                        <div class="tooltip2" style="display: flex; align-items: center; position: relative;">
							<div style="width: 25%;">
								<img src="@juego.Imagen" style="max-width: 100%; max-height: 100%;" />
							</div>

							<div style="width: 75%; margin-left: 20px;">
								<div>@juego.Nombre</div>

								<div style="display: flex; align-items: start; margin-top: 10px;">
									@if (gratisActual.Tipo.DRMEnseñar == true)
									{
										<div style="height: 20px; margin-right: 15px;">
											<img src="@Juegos.JuegoDRM2.SacarImagen(juego.DRM)" style="width: 20px; height: 20px;" />
										</div>
									}

                                    @if (juego.Juego.Analisis != null)
                                    {
                                        <div style="display: flex; align-items: center; margin-right: 15px;">
                                            @if (int.Parse(juego.Juego.Analisis.Porcentaje) > 74)
                                            {
                                                <img src="/imagenes/analisis/positive2.webp" style="width: 25px; height: 25px;" />
                                            }

                                            @if (int.Parse(juego.Juego.Analisis.Porcentaje) > 49 && int.Parse(juego.Juego.Analisis.Porcentaje) < 75)
                                            {
                                                <img src="/imagenes/analisis/mixed2.webp" style="width: 25px; height: 25px;" />
                                            }

                                            @if (int.Parse(juego.Juego.Analisis.Porcentaje) < 50)
                                            {
                                                <img src="/imagenes/analisis/negative2.webp" style="width: 25px; height: 25px;" />
                                            }
                                        </div>
                                    }

									@if (usuario != null)
									{
                                        @if (ComprobarUsuarioJuego(juego.Juego, gratisActual.Tipo.Tipo) != null)
                                        {
                                            @if (ComprobarUsuarioJuego(juego.Juego, gratisActual.Tipo.Tipo) == "3" || ComprobarUsuarioJuego(juego.Juego, gratisActual.Tipo.Tipo) == "5")
                                            {
                                                <div style="padding: 8px 11px; font-size: 14px; background-color: var(--fondoBien); color: var(--colorTextoBien); position: absolute; bottom: 0px; right: 0px;">
                                                    <i class="fa-solid fa-check" style="font-size: 20px;"></i>
                                                </div>
                                            }
                                            else
                                            {
                                                <div style="padding: 8px 11px; font-size: 14px; background-color: var(--fondoAlerta); color: var(--colorTextoAlerta); position: absolute; bottom: 0px; right: 0px;">
                                                    <i class="fa-solid fa-xmark" style="font-size: 20px;"></i>
                                                </div>
                                            }
                                        }
									}
								</div>
							</div>

                            @if (juego.Juego.Tipo == Juegos.JuegoTipo.Game)
                            {
                                <div class="tooltip-abrir tooltip-abajo2" style="top: 50%; left: 50%; white-space: pre;">
                                    @if (usuario != null)
								    {
                                        @if (ComprobarUsuarioJuego(juego.Juego, gratisActual.Tipo.Tipo) != null)
                                        {
                                            @if (ComprobarUsuarioJuego(juego.Juego, gratisActual.Tipo.Tipo) == "3" || ComprobarUsuarioJuego(juego.Juego, gratisActual.Tipo.Tipo) == "5")
                                            {
                                                <div style="padding: 20px; font-size: 14px; background-color: var(--fondoBien); color: var(--colorTextoBien);">
                                                    <span>@Herramientas.Idiomas.CogerCadena(idioma, "Free.String" + ComprobarUsuarioJuego(juego.Juego, gratisActual.Tipo.Tipo))</span>
                                                </div>
                                            }
                                            else
                                            {
                                                <div style="padding: 20px; font-size: 14px; background-color: var(--fondoAlerta); color: var(--colorTextoAlerta);">
                                                    <span>@Herramientas.Idiomas.CogerCadena(idioma, "Free.String" + ComprobarUsuarioJuego(juego.Juego, gratisActual.Tipo.Tipo))</span>
                                                </div>
                                            }
                                        }
								    }
                                </div>
                            }                           
                        </div>
					</a>
				}
			</div>
		</div>
	}
}

<div style="font-size: 23px; margin-top: 60px;">
    @Herramientas.Idiomas.CogerCadena(idioma, "Free.String2")
</div>

<div style="display: flex; align-items: center; margin-top: 10px;">
    @foreach (var año in años)
    {
        <button @onclick="@(e => CambiarAño(e, año))" class="boton-pequeño" style="margin-right: 15px; padding: 6px 10px; width: auto;">
            @año
        </button>
    }
</div>

<div>
    @foreach (var gratisPasado in gratisPasados)
    {
        List<Juegos.JuegoGratis> gratisAño = new List<Juegos.JuegoGratis>();

        foreach (var juego in gratisPasado.Juegos)
        {
            if (juego.FechaEmpieza.Year.ToString() == añoSeleccionado)
            {
                gratisAño.Add(juego);
            }
        }

        if (gratisAño.Count > 0)
        {
            <hr>

            <div style="display: flex; align-items: start;">
                <div class="perfil" style="width: 20%;">
                    <img src="@gratisPasado.Tipo.ImagenLogo" />
                </div>

                <div class="perfil" style="width: 80%;">
                    @{
                        int i = 1;
                        while (i < 13)
                        {
                            List<Juegos.JuegoGratis> gratisMensual = new List<Juegos.JuegoGratis>();

                            foreach (var juego in gratisAño)
                            {
                                if (juego.FechaEmpieza.Month == i)
                                {
                                    gratisMensual.Add(juego);
                                }
                            }

                            if (gratisMensual.Count > 0)
                            {
                                <label>@Herramientas.Idiomas.CogerCadena(idioma, "Month." + i.ToString())</label>

                                <ul>
                                    @foreach (var juegoMensual in gratisMensual)
                                    {
                                        @if (gratisPasado.Tipo.DRMEnseñar == true)
                                        {
                                            <li>
                                                <div>
                                                    <a href="/game/@juegoMensual.JuegoId">@juegoMensual.Nombre</a> (@Juegos.JuegoDRM2.DevolverDRM(juegoMensual.DRM))
                                                </div>
                                            </li>
                                        }
                                        else
                                        {
                                            <li>
                                                <div>
                                                    <a href="/game/@juegoMensual.JuegoId">@juegoMensual.Nombre</a>
                                                </div>
                                            </li>
                                        }
                                    }
                                </ul>
                            }

                            i += 1;
                        }
                    }
                </div>
            </div>
        }
    }
</div>

@code {

    #nullable disable

    [Parameter]
    public string idioma { get; set; }

    [Parameter]
    public string dominio { get; set; }

    List<Gratis2.GratisComponente> gratisActuales = new List<Gratis2.GratisComponente>();
    List<Gratis2.GratisComponente> gratisPasados = new List<Gratis2.GratisComponente>();

    private Usuario usuario = new Usuario();
    private List<string> juegosUsuario = new List<string>();

    private List<string> años = new List<string>();
    private string añoSeleccionado = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        usuario = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);

        if (usuario != null)
        {
            if (string.IsNullOrEmpty(usuario.SteamAccount) == false && string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
            {
                bool tiempo = true;

                if (string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
                {
                    if (Convert.ToDateTime(usuario.SteamAccountLastCheck) + TimeSpan.FromDays(7) > DateTime.Now)
                    {
                        tiempo = false;
                    }
                }

                if (tiempo == true)
                {
                    SteamUsuario datos = await Cuenta.CargarDatos(usuario.SteamAccount);

                    usuario.SteamGames = datos.Juegos;
                    usuario.SteamWishlist = datos.Deseados;
                    usuario.Avatar = datos.Avatar;
                    usuario.Nickname = datos.Nombre;
                    usuario.SteamAccountLastCheck = DateTime.Now.ToString();
                    usuario.OfficialGroup = datos.GrupoPremium;
                    usuario.OfficialGroup2 = datos.GrupoNormal;

                    await UserManager.UpdateAsync(usuario);
                }
            }

            juegosUsuario =	Herramientas.Listados.Generar(usuario.SteamGames);
        }

        //--------------------------------------------------------------------

        DateTime arranque = new DateTime(2023, 9, 1);

        int i = 0;
        while (i < 100)
        {
            if (arranque.Year != DateTime.Now.Year)
            {
                años.Add(arranque.Year.ToString());
                arranque = arranque.AddYears(1);
            }
            i += 1;
        }

        años.Add(DateTime.Now.Year.ToString());
        años.Reverse();

        añoSeleccionado = DateTime.Now.Year.ToString();

        //--------------------------------------------------------------------

        List<Juegos.JuegoGratis> juegosTodos = BaseDatos.Gratis.Buscar.Todos();

        if (juegosTodos.Count > 0)
        {
            List<Juegos.JuegoGratis> juegosActuales = new List<Juegos.JuegoGratis>();
            List<Juegos.JuegoGratis> juegosPasados = new List<Juegos.JuegoGratis>();

            foreach (var juego in juegosTodos)
            {
                if (DateTime.Now >= juego.FechaEmpieza && DateTime.Now <= juego.FechaTermina)
                {
                    Juegos.Juego juego2 = BaseDatos.Juegos.Buscar.UnJuego(juego.JuegoId.ToString());

                    juego.Imagen = await Herramientas.Imagenes.DescargarYGuardar(juego2.Imagenes.Header_460x215, "juegos", juego2.Id.ToString(), "library_600x900", dominio);
                    juego.Juego = juego2;

                    juegosActuales.Add(juego);
                }
                else
                {
                    juegosPasados.Add(juego);
                }
            }

            if (juegosActuales.Count > 0)
            {
                juegosActuales = juegosActuales.OrderBy(x => x.Nombre).ToList();

                foreach (var gratis in Gratis2.GratisCargar.GenerarListado())
                {
                    List<Juegos.JuegoGratis> juegos2 = new List<Juegos.JuegoGratis>();

                    foreach (var juego in juegosActuales)
                    {
                        if (juego.Tipo == gratis.Tipo)
                        {
                            juegos2.Add(juego);
                        }
                    }

                    if (juegos2.Count > 0)
                    {
                        Gratis2.GratisComponente componente = new Gratis2.GratisComponente();
                        componente.Juegos = juegos2;
                        componente.Tipo = gratis;

                        gratisActuales.Add(componente);
                    }
                }			
            }

            if (juegosPasados.Count > 0)
            {
                juegosPasados = juegosPasados.OrderBy(x => x.Nombre).ToList();

                foreach (var gratis in Gratis2.GratisCargar.GenerarListado())
                {
                    List<Juegos.JuegoGratis> juegos2 = new List<Juegos.JuegoGratis>();

                    foreach (var juego in juegosPasados)
                    {
                        if (juego.Tipo == gratis.Tipo)
                        {
                            juegos2.Add(juego);
                        }
                    }

                    if (juegos2.Count > 0)
                    {
                        Gratis2.GratisComponente componente = new Gratis2.GratisComponente();
                        componente.Juegos = juegos2;
                        componente.Tipo = gratis;

                        gratisPasados.Add(componente);
                    }
                }
            }
        }
    }

    private void CambiarAño(MouseEventArgs e, string nuevoAño)
    {
        añoSeleccionado = nuevoAño;
    }

    private string ComprobarUsuarioJuego(Juegos.Juego juego, Gratis2.GratisTipo tipo)
    {
        if (usuario != null && juego.Tipo == Juegos.JuegoTipo.Game)
        {
            if (juegosUsuario.Count > 0)
            {
                foreach (var juegoUsuario in juegosUsuario)
                {
                    if (juegoUsuario == juego.IdSteam.ToString())
                    {
                        if (tipo == Gratis2.GratisTipo.Steam)
                        {
                            return "3";
                        }
                        else
                        {
                            return "5";
                        }
                    }
                }

                if (tipo == Gratis2.GratisTipo.Steam)
                {
                    return "4";
                }
                else
                {
                    return "6";
                }
            }
        }

        return null;
    }
}
