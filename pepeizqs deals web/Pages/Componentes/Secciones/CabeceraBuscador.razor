@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.Razor;
@using Microsoft.Data.SqlClient;
@using pepeizqs_deals_web.Areas.Identity.Data

@inherits Juegos.Juego

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

<input type="text" @oninput="TextoCambia" class="entrada-texto" />

@if (juegosMostrar != null)
{
    @if (juegosMostrar.Count > 0)
    {
        <div class="buscador-panel">
            @foreach (var juego in juegosMostrar)
            {
                <div class="perfil-flexible-centrado" style="margin-top: 10px;">
                    <a class="boton-pequeño" href="/game/@juego.Id" style="padding: 0px;">
                        <div class="perfil-flexible-centrado">
                            <div>
                                <img src="@juego.Imagenes.Capsule_231x87" style="width: 231px; height: 87px;" />
                            </div>

                            <div style="width: 100%; padding-left: 15px; padding-right: 15px;">
                                @juego.Nombre

                                @if (BaseDatos.Usuarios.Buscar.RolDios(UserManager.GetUserName(HttpContextAccessor.HttpContext!.User)) == true)
                                {
                                    <div style="font-size: 13px; margin-top: 5px;">
                                        @juego.Id
                                    </div>
                                }
                            </div>

                            <div style="width: 250px; text-align: center;">
                                @GenerarMensaje(juego)
                            </div>
                        </div>
                    </a>
                </div>
            }
        </div>
    }
}

@code {

    #nullable disable

    [Parameter]
    public string idioma { get; set; }

    List<Juegos.Juego> juegosMostrar = new List<Juegos.Juego>();

    Task<List<Juegos.Juego>> tarea;

    private void TextoCambia(ChangeEventArgs texto)
    {
        List<Juegos.Juego> juegosBuscador = new List<Juegos.Juego>();

        SqlConnection conexion = Herramientas.BaseDatos.Conectar();

        if (conexion.State == System.Data.ConnectionState.Open)
        {
            using (conexion)
            {
                if (texto.Value.ToString().Trim().Length > 1)
                {
                    if ((tarea != null) && (tarea.IsCompleted == false ||
                               tarea.Status == TaskStatus.Running ||
                               tarea.Status == TaskStatus.WaitingToRun ||
                               tarea.Status == TaskStatus.WaitingForActivation))
                    {
                        tarea.Dispose();
                        juegosBuscador = new List<Juegos.Juego>();
                    }
                    else
                    {
                        tarea = Task.Factory.StartNew(() =>
                        {
                            List<Juegos.Juego> juegos2 = new List<Juegos.Juego>();

                            juegos2 = BaseDatos.Juegos.Buscar.Nombre(texto.Value.ToString().Trim(), conexion);

                            return juegos2;
                        });

                        juegosBuscador = tarea.Result;

                        if (juegosBuscador.Count > 0)
                        {
                            foreach (var juego in juegosBuscador)
                            {
                                if (File.Exists(Directory.GetCurrentDirectory() + "\\imagenes\\juegos\\" + juego.Id.ToString() + "\\capsule_231x87.webp") == true)
                                {
                                    juego.Imagenes.Capsule_231x87 = "/imagenes/juegos/" + juego.Id.ToString() + "/capsule_231x87.webp";
                                }
                            }
                        }
                    }
                }
                else
                {
                    juegosBuscador = new List<Juegos.Juego>();
                }
            }
        }
        else
        {
            juegosBuscador = new List<Juegos.Juego>();
            conexion.Dispose();
        }

        if (juegosBuscador != null)
        {
            juegosMostrar.Clear();

            if (juegosBuscador.Count > 0)
            {
                juegosMostrar = juegosBuscador;
            }
        } 
    }

    private string GenerarMensaje(Juegos.Juego juego)
    {
        string mensaje = string.Empty;

        if (juego.Gratis != null)
        {
            if (juego.Gratis.Count > 0)
            {
                foreach (var gratis in juego.Gratis)
                {
                    if (DateTime.Now >= gratis.FechaEmpieza && DateTime.Now <= gratis.FechaTermina)
                    {
                        return Herramientas.Idiomas.CogerCadena(idioma, "Search.String5");
                    }
                }
            }
        }

        if (juego.Bundles != null)
        {
            if (juego.Bundles.Count > 0)
            {
                foreach (var bundle in juego.Bundles)
                {
                    if (DateTime.Now >= bundle.FechaEmpieza && DateTime.Now <= bundle.FechaTermina)
                    {
                        return Herramientas.Idiomas.CogerCadena(idioma, "Search.String4");
                    }
                }
            }
        }

        if (juego.Suscripciones != null)
        {
            if (juego.Suscripciones.Count > 0)
            {
                foreach (var suscripcion in juego.Suscripciones)
                {
                    if (DateTime.Now >= suscripcion.FechaEmpieza && DateTime.Now <= suscripcion.FechaTermina)
                    {
                        return Herramientas.Idiomas.CogerCadena(idioma, "Search.String3");
                    }
                }
            }
        }
        
        return Herramientas.JuegoFicha.PrecioMinimoActual(juego, true, idioma);
    }
}

