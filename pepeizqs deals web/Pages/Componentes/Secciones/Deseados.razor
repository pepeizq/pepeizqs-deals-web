@using APIs.Steam
@using Juegos
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using Newtonsoft.Json
@using Tiendas2
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JavaScript
@inject NavigationManager NavManager

<style>
	.deseado-imagen {
		min-width: 223px;
	}

	@@media (max-width: 800px) {
		.deseado-imagen {
			display: none;
		}
	}
</style>

<style>
	.cargando {
		width: 48px;
		height: 48px;
		border: 5px solid var(--colorTexto);
		border-bottom-color: transparent;
		border-radius: 50%;
		display: inline-block;
		box-sizing: border-box;
		animation: rotation 1s linear infinite;
	}

	@@keyframes rotation {
		0% {
			transform: rotate(0deg);
		}

		100% {
			transform: rotate(360deg);
		}
	}
</style>

@if (usuario != null)
{
	if (cargado == false)
	{
		<div style="text-align: center; width: 100%;">
			<div class="cargando" />
		</div>		
	}
	else
	{
		if (deseadosGestor.Count == 0)
		{
			<div style="max-width: 800px; margin: auto;">
				<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "String21", "Wishlist")
				</div>
			</div>
		}

		if (deseadosGestor.Count > 0)
		{
			<div style="max-width: 1000px; margin: auto;">
				<div style="background-color: var(--fondoCuerpo);">
					<div style="display: flex; align-items: center; width: 100%;">
						<div style="width: 100%; font-size: 23px; text-align: left;">
							@Herramientas.Idiomas.CogerCadena(idioma, "String1", "Wishlist")
						</div>

						<div style="display: flex; align-items: center; justify-content: right; width: 100%;">
							<div style="font-size: 14px;">
								@deseadosGestor.Count.ToString() @Herramientas.Idiomas.CogerCadena(idioma, "String8", "Wishlist") • @cantidadMinimos.ToString() @Herramientas.Idiomas.CogerCadena(idioma, "String11", "Wishlist")
							</div>
						</div>
					</div>

					<div style="display: flex; align-items: center; width: 100%; margin: 15px 0px;">
						<input type="text" @onchange="(e => TextoCambiaBusqueda(e))" class="entrada-texto" style="flex: 1; margin-right: 30px; min-width: 150px;" placeholder="@Herramientas.Idiomas.CogerCadena(idioma, "String7", "Wishlist")" />

						<button class="boton-pequeño" @onclick="EnseñarFiltrado" style="width: auto; padding: 10px 15px; margin-right: 30px; border: 0px; color: var(--colorTextoVisitado);">
							@Herramientas.Idiomas.CogerCadena(idioma, "String12", "Wishlist")
						</button>

						<div class="menu-dropdown" style="width: auto;">
							<button class="boton-pequeño" style="display: flex; align-items: center; width: 100%; padding: 10px 15px; margin: 0; border: 0px; color: var(--colorTextoVisitado);">
								<div style="padding-right: 5px;">
									@Herramientas.Idiomas.CogerCadena(idioma, "String2", "Wishlist"):
								</div>

								<div style="color: var(--colorEnlace); padding-right: 15px;">
									@ordenamientoElegido
								</div>

								<div>
									<i class="fa-solid fa-caret-down"></i>
								</div>
							</button>

							<div class="menu-dropdown-contenido" style="right: 0; width: 100%; background-color: var(--fondoBotonPequeño);">
								<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarReseñasPorcentaje">
									@Herramientas.Idiomas.CogerCadena(idioma, "String3", "Wishlist")
								</button>
								<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarReseñasCantidad">
									@Herramientas.Idiomas.CogerCadena(idioma, "String9", "Wishlist")
								</button>
								<hr />
								<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarNombreAZ">
									@Herramientas.Idiomas.CogerCadena(idioma, "String10", "Wishlist")
								</button>
								<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarNombreZA">
									@Herramientas.Idiomas.CogerCadena(idioma, "String14", "Wishlist")
								</button>
								<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarPrecio">
									@Herramientas.Idiomas.CogerCadena(idioma, "String4", "Wishlist")
								</button>
								<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarDescuento">
									@Herramientas.Idiomas.CogerCadena(idioma, "String5", "Wishlist")
								</button>
							</div>
						</div>
					</div>
				</div>

				<hr />

				@if (deseadosMostrar.Count > 0)
				{
					<Virtualize Context="juego" Items="deseadosMostrar" ItemSize="@alturaFila">
						<ItemContent>
							<div style="margin: 20px 0px;">
								<a class="boton-pequeño" style="padding: 2px;" href="@Herramientas.EnlaceAcortador.Generar(juego.Precio.Enlace, juego.Precio.Tienda)" target="_blank">
									<div style="display: flex; align-items: center;">
										<div class="deseado-imagen">
											<img src="@juego.Imagen" style="height: 100%; width: 100%;" />
										</div>

										<div style="width: 100%; padding: 5px 20px;">
											<div>@juego.Nombre</div>

											<div style="display: flex; align-items: center; margin-top: 5px;">
												<div style="width: 20px; height: 20px;">
													<img src="@Juegos.JuegoDRM2.SacarImagen(juego.DRM)" style="width: 100%; height: 100%;" />
												</div>

												@{
													if (juego.Precio.Precio > 0)
													{
														List<Tiendas2.Tienda> tiendas = TiendasCargar.GenerarListado();

														foreach (var tienda in tiendas)
														{
															if (tienda.Id == juego.Precio.Tienda)
															{
																<div style="width: 20px; height: 20px; margin-left: 10px;">
																	<img src="@tienda.ImagenIcono" style="width: 100%; height: 100%;" />
																</div>

																break;
															}
														}
													}
												}
											</div>
										</div>

										<div>
											<div style="display: flex; align-items: center;">
												<div style="text-align: center; padding: 10px 15px; margin: 0px; min-width: 65px;" class="juego-descuento">
													@juego.Precio.Descuento.ToString()%
												</div>

												<div style="padding: 5px 15px; min-width: 110px; text-align: center; font-size: 18px;">
													@MensajeMinimo(juego.Precio, false)
												</div>
											</div>

											@if (juego.Historico == true)
											{
												<div style="text-align: center; font-size: 14px; padding: 5px 15px; background-color: var(--fondoAlerta); margin-right: 3px;">
													@Herramientas.Idiomas.CogerCadena(idioma, "String6", "Wishlist")
												</div>
											}
											else
											{
												<div style="text-align: center; font-size: 14px; padding: 5px; background-color: var(--fondoOscuro); margin-right: 3px;">
													@juego.HistoricoPrecio
												</div>
											}
										</div>
									</div>
								</a>

								@if (usuario.WishlistOption2 == true)
								{
									<div style="font-size: 14px; margin-top: 5px; text-align: right">@Herramientas.Idiomas.CogerCadena(idioma, "String15", "Wishlist"): @juego.CantidadBundles.ToString() • @Herramientas.Idiomas.CogerCadena(idioma, "String16", "Wishlist"): @juego.CantidadGratis • @Herramientas.Idiomas.CogerCadena(idioma, "String17", "Wishlist"): @juego.CantidadSuscripciones</div>
								}
							</div>
						</ItemContent>
					</Virtualize>
				}
			</div>

			if (mostrarFiltrado == true)
			{
				<div class="opciones-panel">
					<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); max-width: 800px; padding: 30px; margin: 20px auto; overflow-y: scroll;">
						<div style="display: flex; align-items: center;">
							<button class="boton-pequeño" @onclick="OcultarFiltrado" style="width: auto; padding: 5px 15px; margin-right: 20px; border: 0px; color: var(--colorTextoVisitado); font-size: 22px;">
								<i class="fa-solid fa-arrow-left"></i>
							</button>

							<div style="font-size: 20px;">
								@Herramientas.Idiomas.CogerCadena(idioma, "String12", "Wishlist")
							</div>
						</div>

						<hr style="margin-top: 30px;">

						<div style="display: flex; align-items: center; margin-top: 30px;">
							<div class="checkbox-caja">
								<input type="checkbox" class="checkbox-interior" checked="@estadoEnseñarSoloMinimos" @onchange="EnseñarSoloMinimos">
							</div>

							<div style="margin-left: 20px; padding-bottom: 5px;">
								@Herramientas.Idiomas.CogerCadena(idioma, "String13", "Wishlist")
							</div>
						</div>

						<div style="display: flex; align-items: center; margin-top: 30px;">
							<div class="checkbox-caja">
								<input type="checkbox" class="checkbox-interior" checked="@estadoEnseñarHistorial" @onchange="EnseñarHistorial">
							</div>

							<div style="margin-left: 20px; padding-bottom: 5px;">
								@Herramientas.Idiomas.CogerCadena(idioma, "String18", "Wishlist")
							</div>
						</div>

						<hr style="margin-top: 30px;">

						<div style="margin-top: 30px;">
							<div style="padding-bottom: 15px;">
								@Herramientas.Idiomas.CogerCadena(idioma, "String19", "Wishlist")
							</div>

							<div style="display: flex; align-items: center;">
								<input type="range" min="1" max="91" value="@minimoDescuento" step="5" @onchange="@(e => CambiarMinimoDescuento(e))" class="deslizador">

								<label style="padding-left: 30px; min-width: 65px; text-align: center;">@minimoDescuento%</label>
							</div>
						</div>

						<div style="margin-top: 30px;">
							<div style="padding-bottom: 15px;">
								@Herramientas.Idiomas.CogerCadena(idioma, "String20", "Wishlist")
							</div>

							<div style="display: flex; align-items: center;">
								<input type="range" min="5" max="90" value="@maximoPrecio" step="1" @onchange="@(e => CambiarMaximoPrecio(e))" class="deslizador">

								<label style="padding-left: 30px; min-width: 65px; text-align: center;">@maximoPrecio€</label>
							</div>
						</div>
					</div>
				</div>
			}
		}

	}
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	private List<JuegoDeseadoMostrar> deseadosGestor = new List<JuegoDeseadoMostrar>();
	private List<JuegoDeseadoMostrar> deseadosMostrar = new List<JuegoDeseadoMostrar>();
	private List<string> deseadosSteam = new List<string>();
	private List<JuegoDeseado> deseadosWeb = new List<JuegoDeseado>();

	private int cantidadMinimos = 0;
	private string ordenamientoElegido = string.Empty;

	private int alturaFila = 88;

	private string textoBuscador { get; set; }

	private bool cargado = false;

	private Usuario usuario = new Usuario();

	#nullable enable
	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }
	#nullable disable

	protected override async Task OnInitializedAsync()
	{
		if (HttpContext == null)
		{
			usuario = await Herramientas.UsuarioDatos.Actualizar(HttpContextAccessor.HttpContext.User, usuario, UserManager, idioma);

			if (usuario != null)
			{
				deseadosGestor = new List<JuegoDeseadoMostrar>();

				#region Filtrado

				if (usuario.WishlistOption1 == true)
				{
					estadoEnseñarSoloMinimos = "checked";
				}
				else
				{
					estadoEnseñarSoloMinimos = null;
				}

				if (usuario.WishlistOption2 == true)
				{
					estadoEnseñarHistorial = "checked";
					alturaFila = 114;
				}
				else
				{
					estadoEnseñarHistorial = null;
					alturaFila = 88;
				}

				if (usuario.WishlistOption3 == null)
				{
					minimoDescuento = 1;
				}
				else
				{
					if (usuario.WishlistOption3 == 0 || usuario.WishlistOption3 == null)
					{
						minimoDescuento = 1;
					}
					else if (usuario.WishlistOption3 > 0)
					{
						minimoDescuento = usuario.WishlistOption3;
					}
				}

				if (usuario.WishlistOption4 == null)
				{
					maximoPrecio = 90;
				}
				else
				{
					if (usuario.WishlistOption4 == 0 || usuario.WishlistOption4 == null)
					{
						maximoPrecio = 90;
					}
					else if (usuario.WishlistOption4 > 0)
					{
						maximoPrecio = usuario.WishlistOption4;
					}
				}

				#endregion

				#region Deseados Steam

				if (string.IsNullOrEmpty(usuario.SteamWishlist) == false)
				{
					deseadosSteam = Herramientas.Listados.Generar(usuario.SteamWishlist);
				}

				if (deseadosSteam.Count > 0)
				{
					List<Juegos.Juego> juegos = BaseDatos.Juegos.Buscar.MultiplesJuegosSteam(deseadosSteam);

					if (juegos != null)
					{
						int i = 0;

						foreach (var juego in juegos)
						{
							i += 1;

							if (juego != null)
							{
								AñadirJuegoMostrar(juego, JuegoDRM.Steam);
							}
						}
					}
				}

				#endregion

				#region Deseados Web

				if (string.IsNullOrEmpty(usuario.Wishlist) == false)
				{
					deseadosWeb = JsonConvert.DeserializeObject<List<JuegoDeseado>>(usuario.Wishlist);
				}

				if (deseadosWeb != null)
				{
					if (deseadosWeb.Count > 0)
					{
						int i = 0;

						foreach (var deseadoWeb in deseadosWeb)
						{
							i += 1;

							Juegos.Juego juego = BaseDatos.Juegos.Buscar.UnJuego(deseadoWeb.IdBaseDatos);

							if (juego != null)
							{
								AñadirJuegoMostrar(juego, deseadoWeb.DRM);
							}
						}
					}
				}

				#endregion

				if (deseadosGestor != null)
				{
					if (deseadosGestor.Count > 0)
					{
						if (usuario != null)
						{
							if (usuario.WishlistSort == null)
							{
								usuario.WishlistSort = 3;
							}

							ElegirOrdenamiento();
						}
					}
				}

				cargado = true;
			}
			else
			{
				NavManager.NavigateTo("/", true);
			}

			deseadosSteam.Clear();
			deseadosWeb.Clear();
		}
	}

	private void AñadirJuegoMostrar(Juegos.Juego juego, JuegoDRM drm)
	{
		bool añadido = false;

		if (juego.PrecioMinimosHistoricos != null)
		{
			if (juego.PrecioMinimosHistoricos.Count > 0)
			{
				foreach (var historico in juego.PrecioMinimosHistoricos)
				{
					if (historico.DRM == drm)
					{
						TimeSpan actualizado = DateTime.Now.Subtract(historico.FechaActualizacion);

						if (actualizado.Days == 0)
						{
							JuegoDeseadoMostrar nuevoDeseado = new JuegoDeseadoMostrar();
							nuevoDeseado.Id = juego.Id;
							nuevoDeseado.Nombre = juego.Nombre;
							nuevoDeseado.Imagen = juego.Imagenes.Capsule_231x87;
							nuevoDeseado.DRM = drm;
							nuevoDeseado.Precio = historico;
							nuevoDeseado.Historico = true;

							if (juego.Analisis != null)
							{
								nuevoDeseado.ReseñasPorcentaje = juego.Analisis.Porcentaje.Replace("%", null);
								nuevoDeseado.ReseñasCantidad = juego.Analisis.Cantidad.Replace(",", null);
							}
							else
							{
								nuevoDeseado.ReseñasPorcentaje = "0";
								nuevoDeseado.ReseñasCantidad = "0";
							}

							if (juego.Bundles != null)
							{
								nuevoDeseado.CantidadBundles = juego.Bundles.Count;
							}

							if (juego.Gratis != null)
							{
								nuevoDeseado.CantidadGratis = juego.Gratis.Count;
							}

							if (juego.Suscripciones != null)
							{
								nuevoDeseado.CantidadSuscripciones = juego.Suscripciones.Count;
							}

							deseadosGestor.Add(nuevoDeseado);
							cantidadMinimos = cantidadMinimos + 1;
							añadido = true;
						}

						break;
					}
				}
			}
		}

		if (añadido == false)
		{
			if (juego.PrecioActualesTiendas != null)
			{
				if (juego.PrecioActualesTiendas.Count > 0)
				{
					JuegoPrecio precioFinal = null;
					decimal precioReferencia = 1000000;

					foreach (var actual in juego.PrecioActualesTiendas)
					{
						if (actual.DRM == drm)
						{
							TimeSpan actualizado = DateTime.Now.Subtract(actual.FechaActualizacion);

							if (actualizado.Days == 0)
							{
								decimal tempPrecio = actual.Precio;

								if (actual.Moneda != Herramientas.JuegoMoneda.Euro)
								{
									tempPrecio = Herramientas.Divisas.Cambio(tempPrecio, actual.Moneda);
								}

								if (precioReferencia > tempPrecio)
								{
									precioReferencia = tempPrecio;
									precioFinal = actual;
									precioFinal.Precio = precioReferencia;
									break;
								}
							}
						}
					}

					if (precioFinal != null)
					{
						JuegoDeseadoMostrar nuevoDeseado = new JuegoDeseadoMostrar();
						nuevoDeseado.Id = juego.Id;
						nuevoDeseado.Nombre = juego.Nombre;
						nuevoDeseado.Imagen = juego.Imagenes.Capsule_231x87;
						nuevoDeseado.DRM = drm;
						nuevoDeseado.Precio = precioFinal;
						nuevoDeseado.Historico = false;
						nuevoDeseado.HistoricoPrecio = MensajeMinimo(SacarMinimo(juego, drm), false);

						if (juego.Analisis != null)
						{
							nuevoDeseado.ReseñasPorcentaje = juego.Analisis.Porcentaje.Replace("%", null);
							nuevoDeseado.ReseñasCantidad = juego.Analisis.Cantidad.Replace(",", null);
						}
						else
						{
							nuevoDeseado.ReseñasPorcentaje = "0";
							nuevoDeseado.ReseñasCantidad = "0";
						}

						if (juego.Bundles != null)
						{
							nuevoDeseado.CantidadBundles = juego.Bundles.Count;
						}

						if (juego.Gratis != null)
						{
							nuevoDeseado.CantidadGratis = juego.Gratis.Count;
						}

						if (juego.Suscripciones != null)
						{
							nuevoDeseado.CantidadSuscripciones = juego.Suscripciones.Count;
						}

						deseadosGestor.Add(nuevoDeseado);
					}
				}
			}
		}
	}

	private JuegoPrecio SacarMinimo(Juegos.Juego juego, Juegos.JuegoDRM drm)
	{
		foreach (var minimo in juego.PrecioMinimosHistoricos)
		{
			if (drm == minimo.DRM)
			{
				return minimo;
			}
		}

		return null;
	}

	private string MensajeMinimo(JuegoPrecio precio, bool moneda)
	{
		if (precio.Precio >= 0)
		{
			decimal tempPrecio = precio.Precio;

			if (moneda == true)
			{
				if (precio.Moneda != Herramientas.JuegoMoneda.Euro)
				{
					tempPrecio = Herramientas.Divisas.Cambio(tempPrecio, precio.Moneda);
				}
			}

			string precioTexto = tempPrecio.ToString();
			precioTexto = precioTexto.Replace(".", ",");

			int int1 = precioTexto.IndexOf(",");

			if (int1 == precioTexto.Length - 2)
			{
				precioTexto = precioTexto + "0";
			}

			precioTexto = precioTexto + "€";

			return precioTexto;
		}

		return null;
	}

	#region Ordenar

	private async void OrdenarReseñasPorcentaje()
	{
		if (deseadosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "String3", "Wishlist");

			if (deseadosGestor.Count > 0)
			{
				deseadosMostrar.Clear();
				deseadosMostrar = Filtros();
				deseadosMostrar = deseadosMostrar.AsParallel().OrderByDescending(x => int.Parse(x.ReseñasPorcentaje)).ThenBy(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.WishlistSort = 0;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	private async void OrdenarReseñasCantidad()
	{
		if (deseadosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "String9", "Wishlist");

			if (deseadosGestor.Count > 0)
			{
				deseadosMostrar.Clear();
				deseadosMostrar = Filtros();
				deseadosMostrar = deseadosMostrar.AsParallel().OrderByDescending(x => int.Parse(x.ReseñasCantidad)).ThenBy(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.WishlistSort = 1;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	private async void OrdenarNombreAZ()
	{
		if (deseadosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "String10", "Wishlist");

			if (deseadosGestor.Count > 0)
			{
				deseadosMostrar.Clear();
				deseadosMostrar = Filtros();
				deseadosMostrar = deseadosMostrar.AsParallel().OrderBy(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.WishlistSort = 2;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	private async void OrdenarNombreZA()
	{
		if (deseadosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "String14", "Wishlist");

			if (deseadosGestor.Count > 0)
			{
				deseadosMostrar.Clear();
				deseadosMostrar = Filtros();
				deseadosMostrar = deseadosMostrar.AsParallel().OrderByDescending(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.WishlistSort = 5;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	private async void OrdenarPrecio()
	{
		if (deseadosGestor != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "String4", "Wishlist");

			if (deseadosGestor.Count > 0)
			{
				deseadosMostrar.Clear();
				deseadosMostrar = Filtros();
				deseadosMostrar = deseadosMostrar.AsParallel().OrderBy(x => x.Precio.Precio).ThenBy(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.WishlistSort = 3;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	private async void OrdenarDescuento()
	{
		if (deseadosMostrar != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "String5", "Wishlist");

			if (deseadosGestor.Count > 0)
			{
				deseadosMostrar.Clear();
				deseadosMostrar = Filtros();
				deseadosMostrar = deseadosMostrar.AsParallel().OrderByDescending(x => x.Precio.Descuento).ThenBy(x => x.Nombre).ToList();
			}

			if (usuario != null)
			{
				usuario.WishlistSort = 4;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch { }
			}
		}
	}

	#endregion

	#region Filtrado

	private List<JuegoDeseadoMostrar> Filtros()
	{
		List<JuegoDeseadoMostrar> juegosFiltrados = new List<JuegoDeseadoMostrar>();

		foreach (var juego in deseadosGestor)
		{
			bool buscador = false;

			if (string.IsNullOrEmpty(textoBuscador) == false)
			{
				if (Herramientas.Buscador.LimpiarNombre(juego.Nombre, true).Contains(Herramientas.Buscador.LimpiarNombre(textoBuscador, true)))
				{
					buscador = true;
				}
				else
				{
					buscador = false;
				}
			}
			else
			{
				buscador = true;
			}

			bool soloMinimos = false;

			if (usuario != null)
			{
				if (usuario.WishlistOption1 == true)
				{
					if (juego.Historico == true)
					{
						soloMinimos = true;
					}
					else
					{
						soloMinimos = false;
					}
				}
				else
				{
					soloMinimos = true;
				}
			}
			else
			{
				soloMinimos = true;
			}

			bool minimoDescuento2 = false;

			if (juego.Precio.Descuento >= minimoDescuento)
			{
				minimoDescuento2 = true;
			}

			bool maximoPrecio2 = false;

			if (juego.Precio.Precio <= maximoPrecio)
			{
				maximoPrecio2 = true;
			}

			if (buscador == true && soloMinimos == true && minimoDescuento2 == true && maximoPrecio2 == true)
			{
				juegosFiltrados.Add(juego);
			}
		}

		return juegosFiltrados;
	}

	private void ElegirOrdenamiento()
	{
		if (usuario.WishlistSort == 0)
		{
			OrdenarReseñasPorcentaje();
		}
		else if (usuario.WishlistSort == 1)
		{
			OrdenarReseñasCantidad();
		}
		else if (usuario.WishlistSort == 2)
		{
			OrdenarNombreAZ();
		}
		else if (usuario.WishlistSort == 5)
		{
			OrdenarNombreZA();
		}
		else if (usuario.WishlistSort == 3)
		{
			OrdenarPrecio();
		}
		else if (usuario.WishlistSort == 4)
		{
			OrdenarDescuento();
		}
	}

	private void TextoCambiaBusqueda(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			textoBuscador = texto.Value.ToString().Trim();
		}
		else
		{
			textoBuscador = null;
		}

		ElegirOrdenamiento();
	}

	private bool mostrarFiltrado = false;

	private void EnseñarFiltrado()
	{
		mostrarFiltrado = true;
	}

	private void OcultarFiltrado()
	{
		mostrarFiltrado = false;
	}

	private string estadoEnseñarSoloMinimos = null;

	private async void EnseñarSoloMinimos()
	{
		if (usuario != null)
		{
			if (usuario.WishlistOption1 == true)
			{
				usuario.WishlistOption1 = false;
				estadoEnseñarSoloMinimos = null;
			}
			else
			{
				usuario.WishlistOption1 = true;
				estadoEnseñarSoloMinimos = "checked";
			}

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }

			ElegirOrdenamiento();
		}
	}

	private string estadoEnseñarHistorial = null;

	private async void EnseñarHistorial()
	{
		if (usuario != null)
		{
			if (usuario.WishlistOption2 == true)
			{
				usuario.WishlistOption2 = false;
				estadoEnseñarHistorial = null;
				alturaFila = 88;
			}
			else
			{
				usuario.WishlistOption2 = true;
				estadoEnseñarHistorial = "checked";
				alturaFila = 114;
			}

			try
			{
				await UserManager.UpdateAsync(usuario);
			}
			catch { }

			ElegirOrdenamiento();
		}
	}

	private int? minimoDescuento = 1;

	private async void CambiarMinimoDescuento(ChangeEventArgs e)
	{
		minimoDescuento = int.Parse(e.Value.ToString());

		if (minimoDescuento != 1)
		{
			minimoDescuento = minimoDescuento - 1;
		}

		usuario.WishlistOption3 = minimoDescuento;

		try
		{
			await UserManager.UpdateAsync(usuario);
		}
		catch { }

		ElegirOrdenamiento();
	}

	private decimal? maximoPrecio = 90;

	private async void CambiarMaximoPrecio(ChangeEventArgs e)
	{
		maximoPrecio = decimal.Parse(e.Value.ToString());

		usuario.WishlistOption4 = maximoPrecio;

		try
		{
			await UserManager.UpdateAsync(usuario);
		}
		catch { }

		ElegirOrdenamiento();
	}

	#endregion
}
