@using APIs.Steam;
@using Juegos;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity;
@using Newtonsoft.Json;
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor

@if (SignInManager.IsSignedIn(HttpContextAccessor.HttpContext!.User) == true)
{
	<div class="perfil" style="padding: 15px 20px;">
		@foreach (var juego in deseadosMostrar)
		{
			<div class="perfil-flexible-centrado" style="margin-top: 15px; margin-bottom: 15px;">
				<a class="boton-pequeño" style="padding: 0px;" href="@Herramientas.EnlaceAcortador.Generar(juego.Precio.Enlace, juego.Precio.Tienda)" target="_blank">
					<div class="perfil-flexible-centrado">
						<div style="width: 15%;">
							<img src="@juego.Juego.Imagenes.Capsule_231x87" style="max-height: 100%; max-width: 100%;" />
						</div>

						<div style="width: 69%; padding: 4px 15px;">
							<div>@juego.Juego.Nombre</div>

							<div class="perfil-flexible-centrado" style="justify-content: left;">
								<div style="width: 20px; height: 20px;"><img src="@Juegos.JuegoDRM2.SacarImagen(juego.DRM)" style="max-width: 100%; max-height: 100%;" /></div>

								<div style="width: 20px; height: 20px; margin-left: 10px;"><img src="@Herramientas.JuegoFicha.IconoTiendaMinimoActualUnDRM(juego.Precio)" style="max-width: 100%; max-height: 100%;" /></div>

								@if (BaseDatos.Usuarios.Buscar.RolDios(UserManager.GetUserName(HttpContextAccessor.HttpContext!.User)) == true)
								{
									<div style="margin-left: 10px;">@juego.Juego.Id</div>
								}
							</div>
						</div>

						<div style="width: 6%; text-align: center;" class="juego-descuento">
							@juego.Precio.Descuento.ToString()%
						</div>

						<div style="width: 10%; padding: 4px 15px 4px 15px; text-align: center; font-size: 18px;">
							@Herramientas.JuegoFicha.PrepararPrecio(juego.Precio.Precio, false, Herramientas.JuegoMoneda.Euro)
						</div>
					</div>
				</a>
			</div>
		}
	</div>
}

@code {

    #nullable disable

    private List<JuegoDeseadoMostrar> deseadosMostrar = new List<JuegoDeseadoMostrar>();
    private Usuario usuario = new Usuario();

    private int cantidad = 0;

    protected override void OnInitialized()
    {
        usuario = UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User).Result;

        if (usuario != null)
        {
            deseadosMostrar = new List<JuegoDeseadoMostrar>();
            List<JuegoDeseado> deseados = new List<JuegoDeseado>();
            List<string> deseadosSteam = new List<string>();

            if (string.IsNullOrEmpty(usuario.SteamWishlist) == false)
            {
                deseadosSteam = LeerSteamDeseados(usuario.SteamWishlist);
            }

            if (string.IsNullOrEmpty(usuario.Wishlist) == false)
            {
                try
                {
                    deseados = JsonConvert.DeserializeObject<List<JuegoDeseado>>(usuario.Wishlist);
                }
                catch { }          
            }

            if (deseadosSteam.Count > 0)
            {
                foreach (var deseadoSteam in deseadosSteam)
                {
                    bool añadir = true;

                    foreach (var deseado in deseados)
                    {
                        if (deseado.IdSteam == deseadoSteam)
                        {
                            añadir = false;
                        }
                    }

                    if (añadir == true)
                    {
                        Juegos.Juego juego = BaseDatos.Juegos.Buscar.UnJuego(null, deseadoSteam);

                        if (juego != null)
                        {
                            JuegoDeseado nuevoDeseado = new JuegoDeseado();
                            nuevoDeseado.IdBaseDatos = juego.Id.ToString();
                            nuevoDeseado.IdSteam = deseadoSteam;
                            nuevoDeseado.DRM = Juegos.JuegoDRM.Steam;

                            deseados.Add(nuevoDeseado);
                        }
                    }
                }
            }
            
            cantidad = deseados.Count;

            usuario.Wishlist = JsonConvert.SerializeObject(deseados);

            if (deseados.Count > 0)
            {
                foreach (var deseado in deseados)
                {
                    Juegos.Juego juego = BaseDatos.Juegos.Buscar.UnJuego(deseado.IdBaseDatos);

                    bool añadir = false;

                    List<Juegos.JuegoPrecio> ordenados = Herramientas.JuegoFicha.OrdenarPrecios(juego.PrecioActualesTiendas, deseado.DRM, true);

                    if (ordenados.Count > 0)
                    {
                        añadir = true;
                    }

                    if (añadir == true)
                    {
                        Juegos.Juego nuevoJuego = juego;
                        nuevoJuego.PrecioActualesTiendas = ordenados;

                        JuegoDeseadoMostrar nuevoDeseado = new JuegoDeseadoMostrar();
                        nuevoDeseado.Juego = nuevoJuego;
                        nuevoDeseado.DRM = deseado.DRM;
                        nuevoDeseado.Precio = ordenados[0];

                        deseadosMostrar.Add(nuevoDeseado);
                    }
                }

                if (deseadosMostrar.Count > 0)
                {
                    deseadosMostrar.Sort(delegate (JuegoDeseadoMostrar p1, JuegoDeseadoMostrar p2)
                    {
                        if (p1.Juego.PrecioActualesTiendas[0].Precio == p2.Juego.PrecioActualesTiendas[0].Precio)
                        {
                            return p2.Juego.PrecioActualesTiendas[0].FechaDetectado.CompareTo(p1.Juego.PrecioActualesTiendas[0].FechaDetectado);
                        }
                        else
                        {
                            return p1.Juego.PrecioActualesTiendas[0].Precio.CompareTo(p2.Juego.PrecioActualesTiendas[0].Precio);
                        }
                    });
                }
            }

            GuardarUsuario();
        }      
    }

    private async void GuardarUsuario()
    {
        await UserManager.UpdateAsync(usuario);
    }

	private List<string> LeerSteamDeseados(string datos)
	{
		if (datos != null)
		{
			List<string> deseados = new List<string>();
			string juegos = datos;

			int i = 0;
			int j = 100000;

			while (i < j)
			{
				if (juegos.Contains(",") == true)
				{
					int int1 = juegos.IndexOf(",");

					string añadir = juegos.Remove(int1, juegos.Length - int1);
					deseados.Add(añadir);

					juegos = juegos.Remove(0, int1 + 1);
				}
				else
				{
					break;
				}

				i += 1;
			}

			if (deseados.Count > 0)
			{
				return deseados;
			}
		}

		return null;
	}
}
