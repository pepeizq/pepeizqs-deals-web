@using APIs.Steam;
@using Juegos;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.JSInterop
@using Newtonsoft.Json;
@using Tiendas2
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JavaScript

@if (usuario != null)
{
    if (deseadosMostrar.Count > 0)
    {
        <div style="background-color: var(--fondoCuerpo); position: sticky; position: -webkit-sticky; top: 70px; z-index: 1; margin: -10px; padding: 10px;">
            <div style="display: flex; align-items: center; width: 100%;">
                <div style="width: 100%; font-size: 23px; text-align: left;">
                    @Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String1")
                </div>

				<div style="display: flex; align-items: center; justify-content: right; width: 100%;">
					<input type="text" @oninput="TextoCambiaBuscador" class="entrada-texto" />


					<div style="margin-right: 20px; font-size: 14px;">
						@{
							int total = deseadosSteam.Count + deseadosWeb.Count;
							string mensajeTotal = deseadosMostrar.Count.ToString() + "/" + total.ToString();

							<label>@mensajeTotal</label>
						}
					</div>

                    <div class="menu-dropdown">
                        <button class="boton-pequeño" style="padding: 9px 12px; margin: 0; border: 0px; color: var(--colorTextoVisitado);"><i class="fa-solid fa-sort" style="margin-right: 10px; font-size: 19px;"></i>@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String2")</button>
                        <div class="menu-dropdown-contenido" style="right: 0;">
                            <button class="texto-cabecera menu-dropdown-item" style="text-align: right; width: 100%; border: 0px;" @onclick="OrdenarReseñas">@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String3")</button>
                            <button class="texto-cabecera menu-dropdown-item" style="text-align: right; width: 100%; border: 0px;" @onclick="OrdenarPrecio">@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String4")</button>
                            <button class="texto-cabecera menu-dropdown-item" style="text-align: right; width: 100%; border: 0px;" @onclick="OrdenarDescuento">@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String5")</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

		<hr />

		@foreach (var juego in deseadosMostrar)
		{
			<div style="margin: 20px auto; max-width: 1000px;">
				<a class="boton-pequeño" style="padding: 2px;" href="@Herramientas.EnlaceAcortador.Generar(juego.Precio.Enlace, juego.Precio.Tienda)" target="_blank">
					<div style="display: flex; align-items: center;">
						<div style="min-width: 223px;">
							<img src="@juego.Juego.Imagenes.Capsule_231x87" style="height: 100%; width: 100%;" />
						</div>

						<div style="width: 100%; padding: 5px 20px;">
							<div>@juego.Juego.Nombre</div>

							<div style="display: flex; align-items: center; margin-top: 5px;">
								<div style="width: 20px; height: 20px;">
									<img src="@Juegos.JuegoDRM2.SacarImagen(juego.DRM)" style="width: 100%; height: 100%;" />
								</div>

								@{
									if (juego.Precio.Precio > 0)
									{
										List<Tiendas2.Tienda> tiendas = TiendasCargar.GenerarListado();

										foreach (var tienda in tiendas)
										{
											if (tienda.Id == juego.Precio.Tienda)
											{
												<div style="width: 20px; height: 20px; margin-left: 10px;">
													<img src="@tienda.ImagenIcono" style="width: 100%; height: 100%;" />
												</div>

												break;
											}
										}
									}
								}
							</div>
						</div>

						<div>
							<div style="display: flex; align-items: center;">
								<div style="text-align: center; padding: 10px 15px; margin: 0px;" class="juego-descuento">
									@juego.Precio.Descuento.ToString()%
								</div>

								<div style="padding: 5px 15px; min-width: 110px; text-align: center; font-size: 18px;">
									@MensajeMinimo(juego.Precio, true)
								</div>
							</div>

							@if (DetectarMinimo(juego.Juego, juego.Precio.Precio, juego.DRM) == true)
							{
								<div style="text-align: center; font-size: 14px; padding: 5px 15px; background-color: var(--fondoAlerta); margin-right: 3px;">
									@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String6")
								</div>
							}
							else
							{
								<div style="text-align: center; font-size: 14px; padding: 5px; background-color: var(--fondoOscuro); margin-right: 3px;">
									@MensajeMinimo(SacarMinimo(juego.Juego, juego.DRM), false)
								</div>
							}
						</div>						
					</div>
				</a>
			</div>
		}
    }  
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string cargando { get; set; }

	private List<JuegoDeseadoMostrar> deseadosMostrar = new List<JuegoDeseadoMostrar>();
	private List<string> deseadosSteam = new List<string>();
	private List<JuegoDeseado> deseadosWeb = new List<JuegoDeseado>();

	private Usuario usuario = new Usuario();

	private int cantidad = 0;

	protected override async Task OnInitializedAsync()
	{
		usuario = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);

		if (usuario != null)
		{
			deseadosMostrar = new List<JuegoDeseadoMostrar>();

			#region Leer Cuenta Steam

			bool tiempo = true;

			if (string.IsNullOrEmpty(usuario.SteamAccount) == false && string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
			{
				if (Convert.ToDateTime(usuario.SteamAccountLastCheck) + TimeSpan.FromDays(2) > DateTime.Now)
				{
					tiempo = false;
				}
			}

			if (tiempo == true)
			{
				if (string.IsNullOrEmpty(usuario.SteamAccount) == false)
				{
					SteamUsuario datos = await APIs.Steam.Cuenta.CargarDatos(usuario.SteamAccount);

					usuario.SteamGames = datos.Juegos;
					usuario.SteamWishlist = datos.Deseados;
					usuario.Avatar = datos.Avatar;
					usuario.Nickname = datos.Nombre;
					usuario.SteamAccountLastCheck = DateTime.Now.ToString();
					usuario.OfficialGroup = datos.GrupoPremium;
					usuario.OfficialGroup2 = datos.GrupoNormal;

					await UserManager.UpdateAsync(usuario);
				}				
			}

			#endregion

			#region Deseados Steam

			if (string.IsNullOrEmpty(usuario.SteamWishlist) == false)
			{
				deseadosSteam = Herramientas.Listados.Generar(usuario.SteamWishlist);
			}

			if (deseadosSteam.Count > 0)
			{
				List<Juegos.Juego> juegos = BaseDatos.Juegos.Buscar.MultiplesJuegosSteam(deseadosSteam);

				if (juegos != null)
				{
					int i = 0;

					foreach (var juego in juegos)
					{
						i += 1;

						if (juego != null)
						{
							await JavaScript.InvokeVoidAsync("cargandoMensaje", i.ToString() + "/" + juegos.Count.ToString() + " (Steam)");
							AñadirJuegoMostrar(juego, JuegoDRM.Steam);
						}
					}
				}
			}

			#endregion

			#region Deseados Web

			if (string.IsNullOrEmpty(usuario.Wishlist) == false)
			{
				deseadosWeb = JsonConvert.DeserializeObject<List<JuegoDeseado>>(usuario.Wishlist);
			}

			if (deseadosWeb != null)
			{
				if (deseadosWeb.Count > 0)
				{
					int i = 0;

					foreach (var deseadoWeb in deseadosWeb)
					{
						i += 1;

						Juegos.Juego juego = BaseDatos.Juegos.Buscar.UnJuego(deseadoWeb.IdBaseDatos);

						if (juego != null)
						{
							await JavaScript.InvokeVoidAsync("cargandoMensaje", i.ToString() + "/" + deseadosWeb.Count.ToString() + " (Web)");
							AñadirJuegoMostrar(juego, deseadoWeb.DRM);
						}
					}
				}
			}

			#endregion

			if (deseadosMostrar != null)
			{
				if (deseadosMostrar.Count > 0)
				{
					OrdenarPrecio();
				}
			}
		}   

		await JavaScript.InvokeVoidAsync("ocultar", cargando);
	}

	private void AñadirJuegoMostrar(Juegos.Juego juego, JuegoDRM drm)
	{
		bool añadido = false;

		if (juego.PrecioMinimosHistoricos != null)
		{
			if (juego.PrecioMinimosHistoricos.Count > 0)
			{
				foreach (var historico in juego.PrecioMinimosHistoricos)
				{
					if (historico.DRM == drm)
					{
						TimeSpan actualizado = DateTime.Now.Subtract(historico.FechaActualizacion);

						if (actualizado.Days == 0)
						{
							JuegoDeseadoMostrar nuevoDeseado = new JuegoDeseadoMostrar();
							nuevoDeseado.Juego = juego;
							nuevoDeseado.DRM = drm;
							nuevoDeseado.Precio = historico;

							Herramientas.Deseados.ActualizarJuegoConUsuarios(nuevoDeseado.Juego.Id, nuevoDeseado.Juego.UsuariosInteresados, nuevoDeseado.DRM, usuario, true);

							deseadosMostrar.Add(nuevoDeseado);
							añadido = true;
						}

						break;
					}
				}
			}
		}

		if (añadido == false)
		{
			if (juego.PrecioActualesTiendas != null)
			{
				if (juego.PrecioActualesTiendas.Count > 0)
				{
					JuegoPrecio precioFinal = null;
					decimal precioReferencia = 1000000;

					foreach (var actual in juego.PrecioActualesTiendas)
					{
						if (actual.DRM == drm)
						{
							TimeSpan actualizado = DateTime.Now.Subtract(actual.FechaActualizacion);

							if (actualizado.Days == 0)
							{
								decimal tempPrecio = actual.Precio;

								if (actual.Moneda != Herramientas.JuegoMoneda.Euro)
								{
									tempPrecio = Herramientas.Divisas.Cambio(tempPrecio, actual.Moneda);
								}

								if (precioReferencia > tempPrecio)
								{
									precioReferencia = tempPrecio;
									precioFinal = actual;
								}
							}
						}
					}

					if (precioFinal != null)
					{
						JuegoDeseadoMostrar nuevoDeseado = new JuegoDeseadoMostrar();
						nuevoDeseado.Juego = juego;
						nuevoDeseado.DRM = drm;
						nuevoDeseado.Precio = precioFinal;

						Herramientas.Deseados.ActualizarJuegoConUsuarios(nuevoDeseado.Juego.Id, nuevoDeseado.Juego.UsuariosInteresados, nuevoDeseado.DRM, usuario, true);

						deseadosMostrar.Add(nuevoDeseado);
					}
				}
			}
		}
	}

	private bool DetectarMinimo(Juegos.Juego juego, decimal precio, Juegos.JuegoDRM drm)
	{
		foreach (var minimo in juego.PrecioMinimosHistoricos)
		{
			if (drm == minimo.DRM)
			{
				if (precio == minimo.Precio)
				{
					return true;
				}
			}
		}

		return false;
	}

	private JuegoPrecio SacarMinimo(Juegos.Juego juego, Juegos.JuegoDRM drm)
	{
		foreach (var minimo in juego.PrecioMinimosHistoricos)
		{
			if (drm == minimo.DRM)
			{
				return minimo;
			}
		}

		return null;
	}

	private string MensajeMinimo(JuegoPrecio precio, bool moneda)
	{
		if (precio.Precio >= 0)
		{
			decimal tempPrecio = precio.Precio;

			if (moneda == true)
			{
				if (precio.Moneda != Herramientas.JuegoMoneda.Euro)
				{
					tempPrecio = Herramientas.Divisas.Cambio(tempPrecio, precio.Moneda);
				}
			}

			string precioTexto = tempPrecio.ToString();
			precioTexto = precioTexto.Replace(".", ",");

			int int1 = precioTexto.IndexOf(",");

			if (int1 == precioTexto.Length - 2)
			{
				precioTexto = precioTexto + "0";
			}

			precioTexto = precioTexto + "€";

			return precioTexto;
		}

		return null;
	}

	#region Ordenar

	private void OrdenarReseñas()
	{
		if (deseadosMostrar != null)
		{
			if (deseadosMostrar.Count > 0)
			{
				deseadosMostrar.Sort(delegate (JuegoDeseadoMostrar j1, JuegoDeseadoMostrar j2)
				{					
					int j1Analisis = int.Parse(j1.Juego.Analisis.Cantidad.Replace(",", null));
					int j2Analisis = int.Parse(j2.Juego.Analisis.Cantidad.Replace(",", null));

					return j2Analisis.CompareTo(j1Analisis);
				});
			}
		}
	}

	private void OrdenarPrecio()
	{
		if (deseadosMostrar != null)
		{
			if (deseadosMostrar.Count > 0)
			{
				deseadosMostrar.Sort(delegate (JuegoDeseadoMostrar p1, JuegoDeseadoMostrar p2)
				{
					if (p1.Precio.Precio == p2.Precio.Precio)
					{
						return p1.Juego.Nombre.CompareTo(p2.Juego.Nombre);
					}
					else
					{
						return p1.Precio.Precio.CompareTo(p2.Precio.Precio);
					}
				});
			}
		}
	}

	private void OrdenarDescuento()
	{
		if (deseadosMostrar != null)
		{
			if (deseadosMostrar.Count > 0)
			{
				deseadosMostrar.Sort(delegate (JuegoDeseadoMostrar p1, JuegoDeseadoMostrar p2)
				{
					if (p1.Juego.PrecioActualesTiendas[0].Descuento == p2.Juego.PrecioActualesTiendas[0].Descuento)
					{
						return p2.Juego.PrecioActualesTiendas[0].FechaDetectado.CompareTo(p1.Juego.PrecioActualesTiendas[0].FechaDetectado);
					}
					else
					{
						return p2.Juego.PrecioActualesTiendas[0].Descuento.CompareTo(p1.Juego.PrecioActualesTiendas[0].Descuento);
					}
				});
			}
		}
	}

	#endregion

	private void TextoCambiaBuscador(ChangeEventArgs texto)
	{
		if (texto.Value.ToString().Trim().Length > 1)
		{
		}
	}
}
