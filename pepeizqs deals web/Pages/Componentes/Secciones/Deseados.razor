@using APIs.Steam;
@using Juegos;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity;
@using Newtonsoft.Json;
@using Tiendas2
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor

@if (SignInManager.IsSignedIn(HttpContextAccessor.HttpContext!.User) == true)
{
    @if (deseadosMostrar.Count > 0)
    {
        <div style="background-color: var(--fondoCuerpo); position: sticky; position: -webkit-sticky; top: 70px; z-index: 1; margin: -10px; padding: 10px;">
            <div style="display: flex; align-items: center; width: 100%;">
                <div style="width: 70%; font-size: 23px; text-align: left;">
                    @Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String1")
                </div>

                <div style="display: flex; align-items: center; width: 30%; justify-content: right;">
                    <div class="menu-dropdown">
                        <button class="boton-pequeño" style="padding: 9px 12px; margin: 0; border: 0px; color: var(--colorTextoVisitado);"><i class="fa-solid fa-sort" style="margin-right: 10px; font-size: 19px;"></i>@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String2")</button>
                        <div class="menu-dropdown-contenido" style="right: 0;">
                            <button class="texto-cabecera menu-dropdown-item" style="text-align: right; width: 100%; border: 0px;" @onclick="OrdenarReseñas">@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String3")</button>
                            <button class="texto-cabecera menu-dropdown-item" style="text-align: right; width: 100%; border: 0px;" @onclick="OrdenarPrecio">@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String4")</button>
                            <button class="texto-cabecera menu-dropdown-item" style="text-align: right; width: 100%; border: 0px;" @onclick="OrdenarDescuento">@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String5")</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

		<hr />

		@foreach (var juego in deseadosMostrar)
		{
			<div style="margin-top: 20px; margin-bottom: 20px;">
				<a class="boton-pequeño" style="padding: 2px;" href="@Herramientas.EnlaceAcortador.Generar(juego.Precio.Enlace, juego.Precio.Tienda)" target="_blank">
					<div style="display: flex; align-items: center;">
						<div style="min-width: 17%;">
							<img src="@juego.Juego.Imagenes.Capsule_231x87" style="height: 100%; width: 100%;" />
						</div>

						<div style="width: 100%; padding: 5px 20px;">
							<div>@juego.Juego.Nombre</div>

							<div style="display: flex; align-items: center; margin-top: 5px;">
								<div style="width: 20px; height: 20px;">
									<img src="@Juegos.JuegoDRM2.SacarImagen(juego.DRM)" style="width: 100%; height: 100%;" />
								</div>

								@{
									if (juego.Precio.Precio > 0)
									{
										List<Tiendas2.Tienda> tiendas = TiendasCargar.GenerarListado();

										foreach (var tienda in tiendas)
										{
											if (tienda.Id == juego.Precio.Tienda)
											{
												<div style="width: 20px; height: 20px; margin-left: 10px;">
													<img src="@tienda.ImagenIcono" style="width: 100%; height: 100%;" />
												</div>

												break;
											}
										}
									}
								}
							</div>
						</div>

						@if (DetectarMinimo(juego.Juego, juego.Precio.Precio, juego.DRM) == true)
						{
							<div style="text-align: center; font-size: 14px; padding: 5px 15px; background-color: var(--fondoAlerta); margin-right: 30px;">
								@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String6")
							</div>
						}

						<div style="text-align: center; padding: 10px 15px;" class="juego-descuento">
							@juego.Precio.Descuento.ToString()%
						</div>

						<div style="padding: 5px 15px; min-width: 100px; text-align: center; font-size: 18px; margin-right: 10px;">
							@{
								if (juego.Precio.Precio >= 0)
								{
									string precioTexto = string.Empty;

									precioTexto = juego.Precio.Precio.ToString();
									precioTexto = precioTexto.Replace(".", ",");

									int int1 = precioTexto.IndexOf(",");

									if (int1 == precioTexto.Length - 2)
									{
										precioTexto = precioTexto + "0";
									}

									precioTexto = precioTexto + "€";

									@precioTexto
								}
							}
						</div>
					</div>
				</a>
			</div>
		}
    }  
}

@code {

    #nullable disable

    [Parameter]
    public string idioma { get; set; }

    [Parameter]
    public string dominio { get; set; }

    private List<JuegoDeseadoMostrar> deseadosMostrar = new List<JuegoDeseadoMostrar>();
    private Usuario usuario = new Usuario();

    private int cantidad = 0;

    protected override async Task OnInitializedAsync()
    {
        usuario = UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User).Result;

        if (usuario != null)
        {
            deseadosMostrar = new List<JuegoDeseadoMostrar>();

            #region Leer Cuenta Steam

            bool tiempo = true;

            if (string.IsNullOrEmpty(usuario.SteamAccount) == false && string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
            {
                if (Convert.ToDateTime(usuario.SteamAccountLastCheck) + TimeSpan.FromDays(2) > DateTime.Now)
                {
                    tiempo = false;
                }
            }

            if (tiempo == true)
            {
                if (string.IsNullOrEmpty(usuario.SteamAccount) == false)
                {
                    SteamUsuario datos = await APIs.Steam.Cuenta.CargarDatos(usuario.SteamAccount);

                    usuario.SteamGames = datos.Juegos;
                    usuario.SteamWishlist = datos.Deseados;
                    usuario.Avatar = datos.Avatar;
                    usuario.Nickname = datos.Nombre;
                    usuario.SteamAccountLastCheck = DateTime.Now.ToString();
                    usuario.OfficialGroup = datos.GrupoPremium;
                    usuario.OfficialGroup2 = datos.GrupoNormal;

                    await UserManager.UpdateAsync(usuario);
                }				
            }

            #endregion

            List<JuegoDeseado> deseados = new List<JuegoDeseado>();
            List<string> deseadosSteam = new List<string>();

            if (string.IsNullOrEmpty(usuario.SteamWishlist) == false)
            {
                deseadosSteam = LeerSteamDeseados(usuario.SteamWishlist);
            }

            if (string.IsNullOrEmpty(usuario.Wishlist) == false)
            {
                try
                {
                    deseados = JsonConvert.DeserializeObject<List<JuegoDeseado>>(usuario.Wishlist);
                }
                catch { }          
            }

            if (deseadosSteam.Count > 0)
            {
                foreach (var deseadoSteam in deseadosSteam)
                {
                    bool añadir = true;

                    foreach (var deseado in deseados)
                    {
                        if (deseado.IdSteam == deseadoSteam)
                        {
                            añadir = false;
                        }
                    }

                    if (añadir == true)
                    {
                        Juegos.Juego juego = BaseDatos.Juegos.Buscar.UnJuego(null, deseadoSteam);

                        if (juego != null)
                        {
                            JuegoDeseado nuevoDeseado = new JuegoDeseado();
                            nuevoDeseado.IdBaseDatos = juego.Id.ToString();
                            nuevoDeseado.IdSteam = deseadoSteam;
                            nuevoDeseado.DRM = Juegos.JuegoDRM.Steam;

                            deseados.Add(nuevoDeseado);
                        }
                    }
                }
            }

            cantidad = deseados.Count;

            usuario.Wishlist = JsonConvert.SerializeObject(deseados);		

            if (deseados.Count > 0)
            {
                List<string> listaJuegosPoseeSteam = new List<string>();

                if (usuario.SteamGames != null)
                {
                    listaJuegosPoseeSteam = Herramientas.Listados.Generar(usuario.SteamGames);
                }

                foreach (var deseado in deseados)
                {
                    Juegos.Juego juego = BaseDatos.Juegos.Buscar.UnJuego(deseado.IdBaseDatos);

                    bool añadir = true;

					List<Juegos.JuegoPrecio> ordenados = new List<JuegoPrecio>();

                    if (juego.PrecioActualesTiendas != null)
                    {
                        if (juego.PrecioActualesTiendas.Count > 0)
                        {
                            foreach (JuegoPrecio precio in juego.PrecioActualesTiendas)
                            {
                                if (precio.DRM == deseado.DRM)
                                {
									bool fechaEncaja = Herramientas.Calculadora.CalcularAntiguedad(precio);

                                    if (fechaEncaja == true)
                                    {
                                        JuegoPrecio nuevoPrecio = precio;

                                        if (nuevoPrecio != null)
                                        {
                                            if (nuevoPrecio.Moneda != Herramientas.JuegoMoneda.Euro)
                                            {
												nuevoPrecio.Precio = Herramientas.Divisas.Cambio(nuevoPrecio.Precio, nuevoPrecio.Moneda);
											}
										}

										if (nuevoPrecio.Descuento > 0)
										{
											bool verificacionFinal = true;

											if (ordenados.Count > 0)
											{
												foreach (var ordenado in ordenados)
												{
													if (ordenado.Enlace == nuevoPrecio.Enlace && ordenado.Tienda == nuevoPrecio.Tienda && ordenado.DRM == nuevoPrecio.DRM)
													{
														verificacionFinal = false;
														break;
													}
												}
											}

											if (deseado.DRM == JuegoDRM.NoEspecificado)
											{
												verificacionFinal = false;
											}

											if (verificacionFinal == true)
											{
												ordenados.Add(nuevoPrecio);
											}
										}
									}
								}
							}
						}
					}

					if (ordenados.Count > 0)
					{
						ordenados.Sort(delegate (JuegoPrecio p1, JuegoPrecio p2)
						{
							if (p1.Precio == p2.Precio)
							{
								return p2.FechaDetectado.CompareTo(p1.FechaDetectado);
							}
							else
							{
								return p1.Precio.CompareTo(p2.Precio);
							}
						});
					}

					if (ordenados.Count > 0)
					{
						añadir = true;
					}

					if (listaJuegosPoseeSteam.Count > 0)
					{
						foreach (var juegoPosee in listaJuegosPoseeSteam)
						{
							if (juego.IdSteam.ToString() == juegoPosee)
							{
								añadir = false;
							}
						}
					}

					if (añadir == true && ordenados.Count > 0)
					{
						Juegos.Juego nuevoJuego = juego;
						nuevoJuego.PrecioActualesTiendas = ordenados;
						nuevoJuego.Imagenes.Capsule_231x87 = await Herramientas.Imagenes.DescargarYGuardar(juego.Imagenes.Capsule_231x87, "juegos", juego.Id.ToString(), "capsule_231x87", dominio);

						JuegoDeseadoMostrar nuevoDeseado = new JuegoDeseadoMostrar();
						nuevoDeseado.Juego = nuevoJuego;
						nuevoDeseado.DRM = deseado.DRM;
						nuevoDeseado.Precio = ordenados[0];

						Herramientas.Deseados.ActualizarJuegoConUsuarios(nuevoDeseado.Juego, nuevoDeseado.DRM, usuario, true);

						deseadosMostrar.Add(nuevoDeseado);
					}
				}

				if (deseadosMostrar.Count > 0)
				{
					deseadosMostrar.Sort(delegate (JuegoDeseadoMostrar p1, JuegoDeseadoMostrar p2)
					{
						if (p1.Juego.PrecioActualesTiendas[0].Precio == p2.Juego.PrecioActualesTiendas[0].Precio)
						{
							return p2.Juego.PrecioActualesTiendas[0].FechaDetectado.CompareTo(p1.Juego.PrecioActualesTiendas[0].FechaDetectado);
						}
						else
						{
							return p1.Juego.PrecioActualesTiendas[0].Precio.CompareTo(p2.Juego.PrecioActualesTiendas[0].Precio);
						}
					});
				}
			}

			GuardarUsuario();
		}      
	}

	private async void GuardarUsuario()
	{
		await UserManager.UpdateAsync(usuario);
	}

	private List<string> LeerSteamDeseados(string datos)
	{
		if (datos != null)
		{
			List<string> deseados = new List<string>();
			string juegos = datos;

			int i = 0;
			int j = 100000;

			while (i < j)
			{
				if (juegos.Contains(",") == true)
				{
					int int1 = juegos.IndexOf(",");

					string añadir = juegos.Remove(int1, juegos.Length - int1);
					deseados.Add(añadir);

					juegos = juegos.Remove(0, int1 + 1);
				}
				else
				{
					break;
				}

				i += 1;
			}

			if (deseados.Count > 0)
			{
				return deseados;
			}
		}

		return null;
	}

	private bool DetectarMinimo(Juegos.Juego juego, decimal precio, Juegos.JuegoDRM drm)
	{
		if (juego.Bundles != null)
		{
			foreach (var bundle in juego.Bundles)
			{
				if (bundle.DRM == drm)
				{
					return false;
				}
			}
		}

		if (juego.Gratis != null)
		{
			foreach (var gratis in juego.Gratis)
			{
				if (gratis.DRM == drm)
				{
					return false;
				}
			}
		}

		if (juego.Suscripciones != null)
		{
			foreach (var suscripcion in juego.Suscripciones)
			{
				if (suscripcion.DRM == drm)
				{
					return false;
				}
			}
		}

		foreach (var minimo in juego.PrecioMinimosHistoricos)
		{
			if (drm == minimo.DRM)
			{
				if (precio == minimo.Precio)
				{
					return true;
				}
			}
		}

		return false;
	}

	#region Ordenar

	private void OrdenarReseñas()
	{
		if (deseadosMostrar != null)
		{
			if (deseadosMostrar.Count > 0)
			{
				deseadosMostrar.Sort(delegate (JuegoDeseadoMostrar j1, JuegoDeseadoMostrar j2)
				{					
					int j1Analisis = int.Parse(j1.Juego.Analisis.Cantidad.Replace(",", null));
					int j2Analisis = int.Parse(j2.Juego.Analisis.Cantidad.Replace(",", null));

					return j2Analisis.CompareTo(j1Analisis);
				});
			}
		}
	}

	private void OrdenarPrecio()
	{
		if (deseadosMostrar != null)
		{
			if (deseadosMostrar.Count > 0)
			{
				deseadosMostrar.Sort(delegate (JuegoDeseadoMostrar p1, JuegoDeseadoMostrar p2)
				{
					if (p1.Juego.PrecioActualesTiendas[0].Precio == p2.Juego.PrecioActualesTiendas[0].Precio)
					{
						return p2.Juego.PrecioActualesTiendas[0].FechaDetectado.CompareTo(p1.Juego.PrecioActualesTiendas[0].FechaDetectado);
					}
					else
					{
						return p1.Juego.PrecioActualesTiendas[0].Precio.CompareTo(p2.Juego.PrecioActualesTiendas[0].Precio);
					}
				});
			}
		}
	}

	private void OrdenarDescuento()
	{
		if (deseadosMostrar != null)
		{
			if (deseadosMostrar.Count > 0)
			{
				deseadosMostrar.Sort(delegate (JuegoDeseadoMostrar p1, JuegoDeseadoMostrar p2)
				{
					if (p1.Juego.PrecioActualesTiendas[0].Descuento == p2.Juego.PrecioActualesTiendas[0].Descuento)
					{
						return p2.Juego.PrecioActualesTiendas[0].FechaDetectado.CompareTo(p1.Juego.PrecioActualesTiendas[0].FechaDetectado);
					}
					else
					{
						return p2.Juego.PrecioActualesTiendas[0].Descuento.CompareTo(p1.Juego.PrecioActualesTiendas[0].Descuento);
					}
				});
			}
		}
	}

	#endregion
}
