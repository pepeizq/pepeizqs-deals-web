@using APIs.Steam;
@using Juegos;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity;
@using Microsoft.JSInterop
@using Newtonsoft.Json;
@using Tiendas2
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JavaScript

@if (usuario != null)
{
    if (deseadosMostrar.Count > 0)
    {
		<div style="max-width: 1000px; margin: auto;">
			<div style="background-color: var(--fondoCuerpo);">
				<div style="display: flex; align-items: center; width: 100%;">
					<div style="width: 100%; font-size: 23px; text-align: left;">
						@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String1")
					</div>

					<div style="display: flex; align-items: center; justify-content: right; width: 100%;">
						<div style="font-size: 14px;">
							@deseadosMostrar.Count.ToString() @Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String8")
						</div>
					</div>
				</div>

				<div style="display: flex; align-items: center; width: 100%; margin: 15px 0px;">
					<input type="text" @bind-value="@textoBuscador" class="entrada-texto" style="flex: 1; margin-right: 30px; min-width: 150px;" placeholder="@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String7")" />

					<div class="menu-dropdown" style="width: auto;">
						<button class="boton-pequeño" style="display: flex; align-items: center; width: 100%; padding: 10px 15px; margin: 0; border: 0px; color: var(--colorTextoVisitado);">
							<div style="padding-right: 5px;">
								@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String2"):
							</div>

							<div style="color: var(--colorEnlace); padding-right: 15px;">
								@ordenamientoElegido
							</div>

							<div>
								<i class="fa-solid fa-caret-down"></i>
							</div>
						</button>

						<div class="menu-dropdown-contenido" style="right: 0; width: 100%; background-color: var(--fondoBotonPequeño);">
							<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarReseñasPorcentaje">
								@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String3")
							</button>
							<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarReseñasCantidad">
								@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String9")
							</button>
							<hr/>
							<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarNombre">
								@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String10")
							</button>
							<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarPrecio">
								@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String4")
							</button>
							<button class="texto-cabecera menu-dropdown-item" style="text-align: left; width: 100%; border: 0px;" @onclick="OrdenarDescuento">
								@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String5")
							</button>
						</div>
					</div>
				</div>
			</div>

			<hr />

			<Virtualize Context="juego" Items="deseadosMostrar">
				<ItemContent>
					@{
						bool mostrar = false;

						if (string.IsNullOrEmpty(textoBuscador) == false)
						{
							if (Herramientas.Buscador.LimpiarNombre(juego.Nombre).Contains(Herramientas.Buscador.LimpiarNombre(textoBuscador)))
							{
								mostrar = true;
							}
							else
							{
								mostrar = false;
							}
						}
						else
						{
							mostrar = true;
						}

						if (mostrar == true)
						{
							<div style="margin: 20px 0px;">
								<a class="boton-pequeño" style="padding: 2px;" href="@Herramientas.EnlaceAcortador.Generar(juego.Precio.Enlace, juego.Precio.Tienda)" target="_blank">
									<div style="display: flex; align-items: center;">
										<div style="min-width: 223px;">
											<img src="@juego.Imagen" style="height: 100%; width: 100%;" />
										</div>

										<div style="width: 100%; padding: 5px 20px;">
											<div>@juego.Nombre</div>

											<div style="display: flex; align-items: center; margin-top: 5px;">
												<div style="width: 20px; height: 20px;">
													<img src="@Juegos.JuegoDRM2.SacarImagen(juego.DRM)" style="width: 100%; height: 100%;" />
												</div>

												@{
													if (juego.Precio.Precio > 0)
													{
														List<Tiendas2.Tienda> tiendas = TiendasCargar.GenerarListado();

														foreach (var tienda in tiendas)
														{
															if (tienda.Id == juego.Precio.Tienda)
															{
																<div style="width: 20px; height: 20px; margin-left: 10px;">
																	<img src="@tienda.ImagenIcono" style="width: 100%; height: 100%;" />
																</div>

																break;
															}
														}
													}
												}
											</div>
										</div>

										<div>
											<div style="display: flex; align-items: center;">
												<div style="text-align: center; padding: 10px 15px; margin: 0px; min-width: 65px;" class="juego-descuento">
													@juego.Precio.Descuento.ToString()%
												</div>

												<div style="padding: 5px 15px; min-width: 110px; text-align: center; font-size: 18px;">
													@MensajeMinimo(juego.Precio, true)
												</div>
											</div>

											@if (juego.Historico == true)
											{
												<div style="text-align: center; font-size: 14px; padding: 5px 15px; background-color: var(--fondoAlerta); margin-right: 3px;">
													@Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String6")
												</div>
											}
											else
											{
												<div style="text-align: center; font-size: 14px; padding: 5px; background-color: var(--fondoOscuro); margin-right: 3px;">
													@juego.HistoricoPrecio
												</div>
											}
										</div>
									</div>
								</a>
							</div>
						}
					}
				</ItemContent>
			</Virtualize>		
		</div>
    }  
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string cargando { get; set; }

	private List<JuegoDeseadoMostrar> deseadosMostrar = new List<JuegoDeseadoMostrar>();
	private List<string> deseadosSteam = new List<string>();
	private List<JuegoDeseado> deseadosWeb = new List<JuegoDeseado>();

	private string ordenamientoElegido = string.Empty;

	private string textoBuscador { get; set; }

	private Usuario usuario = new Usuario();

	protected override async Task OnInitializedAsync()
	{
		usuario = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);

		if (usuario != null)
		{
			deseadosMostrar = new List<JuegoDeseadoMostrar>();

			#region Leer Cuenta Steam

			bool tiempo = true;

			if (string.IsNullOrEmpty(usuario.SteamAccount) == false && string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
			{
				if (Convert.ToDateTime(usuario.SteamAccountLastCheck) + TimeSpan.FromDays(2) > DateTime.Now)
				{
					tiempo = false;
				}
			}

			if (tiempo == true)
			{
				if (string.IsNullOrEmpty(usuario.SteamAccount) == false)
				{
					SteamUsuario datos = await APIs.Steam.Cuenta.CargarDatos(usuario.SteamAccount);

					usuario.SteamGames = datos.Juegos;
					usuario.SteamWishlist = datos.Deseados;
					usuario.Avatar = datos.Avatar;
					usuario.Nickname = datos.Nombre;
					usuario.SteamAccountLastCheck = DateTime.Now.ToString();
					usuario.OfficialGroup = datos.GrupoPremium;
					usuario.OfficialGroup2 = datos.GrupoNormal;

					await UserManager.UpdateAsync(usuario);
				}				
			}

			#endregion

			#region Deseados Steam

			if (string.IsNullOrEmpty(usuario.SteamWishlist) == false)
			{
				deseadosSteam = Herramientas.Listados.Generar(usuario.SteamWishlist);
			}

			if (deseadosSteam.Count > 0)
			{
				List<Juegos.Juego> juegos = BaseDatos.Juegos.Buscar.MultiplesJuegosSteam(deseadosSteam);

				if (juegos != null)
				{
					int i = 0;

					foreach (var juego in juegos)
					{
						i += 1;

						if (juego != null)
						{
							await JavaScript.InvokeVoidAsync("cargandoMensaje", i.ToString() + "/" + juegos.Count.ToString() + " (Steam)");
							AñadirJuegoMostrar(juego, JuegoDRM.Steam);
						}
					}
				}
			}

			#endregion

			#region Deseados Web

			if (string.IsNullOrEmpty(usuario.Wishlist) == false)
			{
				deseadosWeb = JsonConvert.DeserializeObject<List<JuegoDeseado>>(usuario.Wishlist);
			}

			if (deseadosWeb != null)
			{
				if (deseadosWeb.Count > 0)
				{
					int i = 0;

					foreach (var deseadoWeb in deseadosWeb)
					{
						i += 1;

						Juegos.Juego juego = BaseDatos.Juegos.Buscar.UnJuego(deseadoWeb.IdBaseDatos);

						if (juego != null)
						{
							await JavaScript.InvokeVoidAsync("cargandoMensaje", i.ToString() + "/" + deseadosWeb.Count.ToString() + " (Web)");
							AñadirJuegoMostrar(juego, deseadoWeb.DRM);
						}
					}
				}
			}

			#endregion

			if (deseadosMostrar != null)
			{
				if (deseadosMostrar.Count > 0)
				{
					OrdenarPrecio();
				}
			}
		}   

		await JavaScript.InvokeVoidAsync("ocultar", cargando);

		deseadosSteam.Clear();
		deseadosWeb.Clear();
	}

	private void AñadirJuegoMostrar(Juegos.Juego juego, JuegoDRM drm)
	{
		bool añadido = false;

		if (juego.PrecioMinimosHistoricos != null)
		{
			if (juego.PrecioMinimosHistoricos.Count > 0)
			{
				foreach (var historico in juego.PrecioMinimosHistoricos)
				{
					if (historico.DRM == drm)
					{
						TimeSpan actualizado = DateTime.Now.Subtract(historico.FechaActualizacion);

						if (actualizado.Days == 0)
						{
							JuegoDeseadoMostrar nuevoDeseado = new JuegoDeseadoMostrar();
							nuevoDeseado.Nombre = juego.Nombre;
							nuevoDeseado.Imagen = juego.Imagenes.Capsule_231x87;
							nuevoDeseado.DRM = drm;
							nuevoDeseado.Precio = historico;
							nuevoDeseado.Historico = true;

							if (juego.Analisis != null)
							{
								nuevoDeseado.ReseñasPorcentaje = juego.Analisis.Porcentaje.Replace("%", null);
								nuevoDeseado.ReseñasCantidad = juego.Analisis.Cantidad.Replace(",", null);
							}
							else
							{
								nuevoDeseado.ReseñasPorcentaje = "0";
								nuevoDeseado.ReseñasCantidad = "0";
							}

							deseadosMostrar.Add(nuevoDeseado);							
							añadido = true;
						}

						break;
					}
				}
			}
		}

		if (añadido == false)
		{
			if (juego.PrecioActualesTiendas != null)
			{
				if (juego.PrecioActualesTiendas.Count > 0)
				{
					JuegoPrecio precioFinal = null;
					decimal precioReferencia = 1000000;

					foreach (var actual in juego.PrecioActualesTiendas)
					{
						if (actual.DRM == drm)
						{
							TimeSpan actualizado = DateTime.Now.Subtract(actual.FechaActualizacion);

							if (actualizado.Days == 0)
							{
								decimal tempPrecio = actual.Precio;

								if (actual.Moneda != Herramientas.JuegoMoneda.Euro)
								{
									tempPrecio = Herramientas.Divisas.Cambio(tempPrecio, actual.Moneda);
								}

								if (precioReferencia > tempPrecio)
								{
									precioReferencia = tempPrecio;
									precioFinal = actual;
									break;
								}
							}
						}
					}

					if (precioFinal != null)
					{
						JuegoDeseadoMostrar nuevoDeseado = new JuegoDeseadoMostrar();
						nuevoDeseado.Nombre = juego.Nombre;
						nuevoDeseado.Imagen = juego.Imagenes.Capsule_231x87;
						nuevoDeseado.DRM = drm;
						nuevoDeseado.Precio = precioFinal;
						nuevoDeseado.Historico = false;
						nuevoDeseado.HistoricoPrecio = MensajeMinimo(SacarMinimo(juego, drm), false);

						if (juego.Analisis != null)
						{
							nuevoDeseado.ReseñasPorcentaje = juego.Analisis.Porcentaje.Replace("%", null);
							nuevoDeseado.ReseñasCantidad = juego.Analisis.Cantidad.Replace(",", null);
						}
						else
						{
							nuevoDeseado.ReseñasPorcentaje = "0";
							nuevoDeseado.ReseñasCantidad = "0";
						}

						deseadosMostrar.Add(nuevoDeseado);
					}
				}
			}
		}
	}

	private JuegoPrecio SacarMinimo(Juegos.Juego juego, Juegos.JuegoDRM drm)
	{
		foreach (var minimo in juego.PrecioMinimosHistoricos)
		{
			if (drm == minimo.DRM)
			{
				return minimo;
			}
		}

		return null;
	}

	private string MensajeMinimo(JuegoPrecio precio, bool moneda)
	{
		if (precio.Precio >= 0)
		{
			decimal tempPrecio = precio.Precio;

			if (moneda == true)
			{
				if (precio.Moneda != Herramientas.JuegoMoneda.Euro)
				{
					tempPrecio = Herramientas.Divisas.Cambio(tempPrecio, precio.Moneda);
				}
			}

			string precioTexto = tempPrecio.ToString();
			precioTexto = precioTexto.Replace(".", ",");

			int int1 = precioTexto.IndexOf(",");

			if (int1 == precioTexto.Length - 2)
			{
				precioTexto = precioTexto + "0";
			}

			precioTexto = precioTexto + "€";

			return precioTexto;
		}

		return null;
	}

	#region Ordenar

	private void OrdenarReseñasPorcentaje()
	{
		if (deseadosMostrar != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String3");

			if (deseadosMostrar.Count > 0)
			{
				deseadosMostrar = deseadosMostrar.AsParallel().OrderByDescending(x => int.Parse(x.ReseñasPorcentaje)).ThenBy(x => x.Nombre).ToList();
			}
		}
	}

	private void OrdenarReseñasCantidad()
	{
		if (deseadosMostrar != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String9");

			if (deseadosMostrar.Count > 0)
			{
				deseadosMostrar = deseadosMostrar.AsParallel().OrderByDescending(x => int.Parse(x.ReseñasCantidad)).ThenBy(x => x.Nombre).ToList();
			}
		}
	}

	private void OrdenarNombre()
	{
		if (deseadosMostrar != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String10");

			if (deseadosMostrar.Count > 0)
			{
				deseadosMostrar = deseadosMostrar.AsParallel().OrderBy(x => x.Nombre).ToList();
			}
		}
	}

	private void OrdenarPrecio()
	{
		if (deseadosMostrar != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String4");

			if (deseadosMostrar.Count > 0)
			{
				deseadosMostrar = deseadosMostrar.AsParallel().OrderBy(x => x.Precio.Precio).ThenBy(x => x.Nombre).ToList();
			}
		}
	}

	private void OrdenarDescuento()
	{
		if (deseadosMostrar != null)
		{
			ordenamientoElegido = Herramientas.Idiomas.CogerCadena(idioma, "Wishlist.String5");

			if (deseadosMostrar.Count > 0)
			{
				deseadosMostrar = deseadosMostrar.AsParallel().OrderByDescending(x => x.Precio.Descuento).ThenBy(x => x.Nombre).ToList();
			}
		}
	}

	#endregion
}
