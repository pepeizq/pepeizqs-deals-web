@using APIs.Steam;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity;
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

@if (usuario != null)
{
	if (usuario.EmailConfirmed == true)
	{
		<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
			<input class="entrada-texto" placeholder="@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String45")" value="@usuario.SteamAccount" @oninput="TextoCambiaSteamCuenta" disabled="@desactivar" />

			<div style="display: flex; align-items: start; margin: 20px 0px;">
				<div style="padding-top: 10px; padding-right: 20px;">
					<i class="fa-solid fa-circle-info" style="font-size: 30px;"></i>
				</div>

				<div style="width: 100%;">
					<label>@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String46")</label>

					<button @onclick="ClickearEnseñarImagen" style="outline: none; border: 0; background-color: transparent; color: var(--colorTextoOscuro); margin-top: 20px; padding: 0px; text-align: left;">
						@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String47")
					</button>
				</div>
			</div>

			@if (errorCuentaUsada == true)
			{
				<div class="alert alert-danger alert-dismissible" style="margin-bottom: 0px; margin-top: 20px;" role="alert">
					@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String61")
				</div>
			}

			@if (string.IsNullOrEmpty(enlaceCuenta) == false)
			{
				<button class="boton" style="font-size: 18px; max-width: 250px; margin-top: 20px;" @onclick="@(e => ActualizarDatos(e))" disabled="@desactivar">
					@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String63")
				</button>
			}
		</div>

		@if (usuario.SteamId != null || usuario.Nickname != null || usuario.SteamGames != null || usuario.SteamWishlist != null || usuario.OfficialGroup != null)
		{
			<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px; margin-top: 20px; display: flex; align-items: start;">
				@if (string.IsNullOrEmpty(usuario.Avatar) == false)
				{
					<div style="padding-right: 40px">
						<img src="@usuario.Avatar" style="max-width: 70px; max-height: 70px;" />
					</div>
				}

				<div style="width: 100%;">
					@if (string.IsNullOrEmpty(usuario.SteamId) == false)
					{
						<div>
							<label>@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String62") @usuario.SteamId</label>
						</div>
					}

					@if (string.IsNullOrEmpty(usuario.Nickname) == false)
					{
						<div style="margin-top: 5px;">
							<label>@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String48") @usuario.Nickname</label>
						</div>
					}

					@if (string.IsNullOrEmpty(usuario.SteamGames) == false)
					{
						<div style="margin-top: 5px;">
							<label>@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String49") @MensajeCantidad(usuario.SteamGames)</label>
						</div>
					}

					@if (string.IsNullOrEmpty(usuario.SteamWishlist) == false)
					{
						<div style="margin-top: 5px;">
							<label>@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String50") @MensajeCantidad(usuario.SteamWishlist)</label>
						</div>
					}

					@if (usuario.SteamAccountLastCheck != null)
					{
						<div style="margin-top: 15px;">
							<label>@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String60"): @Herramientas.Calculadora.DiferenciaTiempo(Convert.ToDateTime(usuario.SteamAccountLastCheck), idioma)</label>
						</div>
					}
				</div>
			</div>
		}
	}
	else
	{
		<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
			<div class="alert alert-danger alert-dismissible" style="margin: 0px;" role="alert">
				@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String44")
			</div>
		</div>
	}
}

@if (enseñarImagen == true)
{
	<div class="opciones-panel">
		<div style="display: flex; align-items: start; margin: auto; justify-content: center;">
			<button style="color: var(--colorTextoVisitado); background-color: var(--fondoBotonPequeño); border: 0px; padding: 8px 15px;" @onclick="ClickearEnseñarImagen">
				<i class="fa-solid fa-xmark" style="font-size: 30px;"></i>
			</button>

			<img src="/imagenes/otros/permisos.jpg" style="margin-left: 20px; max-width: 100%; max-height: 100%;" />
		</div>
	</div>	
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	private Usuario usuario = new Usuario();

	private bool desactivar = false;

	private string enlaceCuenta = string.Empty;

	private bool enseñarImagen = false;

	private bool errorCuentaUsada = false;

	protected override async Task OnInitializedAsync()
	{
		usuario = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);

		if (usuario != null)
		{
			if (string.IsNullOrEmpty(usuario.SteamAccount) == false)
			{
				enlaceCuenta = usuario.SteamAccount;
			}			
		}
	}

	private async void TextoCambiaSteamCuenta(ChangeEventArgs texto)
	{
		errorCuentaUsada = false;

		bool tiempo = true;

		if (string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
		{
			if (Convert.ToDateTime(usuario.SteamAccountLastCheck) + TimeSpan.FromDays(7) > DateTime.Now)
			{
				tiempo = false;
			}
		}

		if (tiempo == true)
		{
			if (texto.Value.ToString().Trim().Length > 1)
			{
				enlaceCuenta = texto.Value.ToString().Trim();

				await ActualizarDatosCuenta();
			}
		}
	}

	private string MensajeCantidad(string datos)
	{
		if (datos != null)
		{
			string juegos = datos;

			int i = 0;
			int j = 100000;

			while (i < j)
			{
				if (juegos.Contains(",") == true)
				{
					int int1 = juegos.IndexOf(",");
					juegos = juegos.Remove(0, int1 + 1);
				}
				else
				{
					break;
				}

				i += 1;
			}

			if (i > 0)
			{
				return i.ToString();
			}
		}

		return null;
	}

	private void ClickearEnseñarImagen()
	{
		if (enseñarImagen == true)
		{
			enseñarImagen = false;
		}
		else
		{
			enseñarImagen = true;
		}
	}

	private async Task ActualizarDatos(MouseEventArgs e)
	{
		await ActualizarDatosCuenta();
	}

	private async Task ActualizarDatosCuenta()
	{
		desactivar = true;

		if (enlaceCuenta.Contains("https://steamcommunity.com/id/") == true || enlaceCuenta.Contains("https://steamcommunity.com/profiles/") == true)
		{
			SteamUsuario datos = await APIs.Steam.Cuenta.CargarDatos(enlaceCuenta);

			if (datos != null)
			{
				bool cuentaUsada = BaseDatos.Usuarios.Buscar.CuentaSteamUsada(enlaceCuenta, datos.SteamId, usuario.Id);

				if (cuentaUsada == false)
				{
					usuario.SteamAccount = enlaceCuenta;
					usuario.SteamGames = datos.Juegos;
					usuario.SteamWishlist = datos.Deseados;
					usuario.Avatar = datos.Avatar;
					usuario.Nickname = datos.Nombre;
					usuario.SteamAccountLastCheck = DateTime.Now.ToString();
					usuario.OfficialGroup = datos.GrupoPremium;
					usuario.OfficialGroup2 = datos.GrupoNormal;
					usuario.SteamId = datos.SteamId;

					await UserManager.UpdateAsync(usuario);
				}
				else
				{
					errorCuentaUsada = true;
				}
			}
		}

		desactivar = false;
	}
}
