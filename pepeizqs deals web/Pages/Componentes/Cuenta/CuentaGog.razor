@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using pepeizqs_deals_web.Areas.Identity.Data

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

<style>
	.cargando {
	width: 48px;
	height: 48px;
	border: 5px solid var(--colorTexto);
	border-bottom-color: transparent;
	border-radius: 50%;
	display: inline-block;
	box-sizing: border-box;
	animation: rotation 1s linear infinite;
	}

	@@keyframes rotation {
	0% {
	transform: rotate(0deg);
	}

	100% {
	transform: rotate(360deg);
	}
	}
</style>

@if (usuario != null)
{
	if (usuario.EmailConfirmed == true)
	{
		<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
			@if (ocupado == false)
			{
				<input class="entrada-texto" placeholder="@Herramientas.Idiomas.BuscarTexto(idioma, "Gog1", "Account")" value="@usuario.GogAccount" @oninput="TextoCambiaGogCuenta" />
			}
			else
			{
				<div>@usuario.SteamAccount</div>
			}

			<div style="display: flex; align-items: start; margin: 20px 0px;">
				<div style="padding-top: 10px; padding-right: 20px;">
					<i class="fa-solid fa-circle-info" style="font-size: 30px;"></i>
				</div>

				<div style="width: 100%;">
					<label>@Herramientas.Idiomas.BuscarTexto(idioma, "Gog2", "Account")</label>

					<button @onclick="ClickearEnseñarImagen" style="outline: none; border: 0; background-color: transparent; color: var(--colorTextoOscuro); margin-top: 20px; padding: 0px; text-align: left;">
						@Herramientas.Idiomas.BuscarTexto(idioma, "Gog3", "Account")
					</button>
				</div>
			</div>

			@if (errorCuentaUsada == true)
			{
				<div class="alert alert-danger alert-dismissible" style="margin-bottom: 0px; margin-top: 30px; border-radius: 0px;" role="alert">
					@Herramientas.Idiomas.BuscarTexto(idioma, "Gog4", "Account")
				</div>
			}

			@if (Convert.ToDateTime(usuario.SteamAccountLastCheck) + TimeSpan.FromMinutes(10) > DateTime.Now)
			{
				<div class="alert alert-danger alert-dismissible" style="margin-bottom: 0px; margin-top: 30px; border-radius: 0px;" role="alert">
					<div>
						@Herramientas.Idiomas.BuscarTexto(idioma, "Gog12", "Account")
					</div>

					<div style="margin-top: 10px;">
						<label>@Herramientas.Idiomas.BuscarTexto(idioma, "Gog10", "Account"): @Herramientas.Calculadora.DiferenciaTiempo(Convert.ToDateTime(usuario.SteamAccountLastCheck), idioma)</label>
					</div>
				</div>
			}
			else
			{
				if (ocupado == false)
				{
					<button class="boton" style="font-size: 18px; max-width: 250px; margin-top: 20px; cursor: pointer;" @onclick="@(e => ActualizarCuenta(e))">
						@Herramientas.Idiomas.BuscarTexto(idioma, "Gog5", "Account")
					</button>
				}
				else
				{
					<div style="display: flex; align-items: center; gap: 20px; margin-top: 20px;">
						<div class="cargando" />
						<div>
							@mensajeCargando
						</div>
					</div>
				}
			}
		</div>

		@if (string.IsNullOrEmpty(usuario.SteamId) == false && string.IsNullOrEmpty(usuario.Nickname) == false)
		{
			<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px; margin-top: 20px; display: flex; align-items: start;">
				@if (string.IsNullOrEmpty(usuario.Avatar) == false)
				{
					<div style="padding-right: 40px">
						<img src="@usuario.Avatar" style="max-width: 70px; max-height: 70px;" />
					</div>
				}

				<div style="width: 100%;">
					@if (string.IsNullOrEmpty(usuario.SteamId) == false)
					{
						<div>
							<label>@Herramientas.Idiomas.BuscarTexto(idioma, "Gog6", "Account") @usuario.SteamId</label>
						</div>
					}

					@if (string.IsNullOrEmpty(usuario.Nickname) == false)
					{
						<div style="margin-top: 5px;">
							<label>@Herramientas.Idiomas.BuscarTexto(idioma, "Gog7", "Account") @usuario.Nickname</label>
						</div>
					}

					@if (string.IsNullOrEmpty(usuario.SteamGames) == false)
					{
						<div style="margin-top: 5px;">
							<label>@Herramientas.Idiomas.BuscarTexto(idioma, "Gog8", "Account") @MensajeCantidad(usuario.SteamGames)</label>
						</div>
					}

					@if (string.IsNullOrEmpty(usuario.SteamWishlist) == false)
					{
						<div style="margin-top: 5px;">
							<label>@Herramientas.Idiomas.BuscarTexto(idioma, "Gog9", "Account") @MensajeCantidad(usuario.SteamWishlist)</label>
						</div>
					}
				</div>
			</div>
		}
	}
	else
	{
		<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
			<div class="alert alert-danger alert-dismissible" style="margin: 0px;" role="alert">
				@Herramientas.Idiomas.BuscarTexto(idioma, "Gog11", "Account")
			</div>
		</div>
	}
}

@if (enseñarImagen == true)
{
	<div class="opciones-panel">
		<div style="display: flex; align-items: start; margin: auto; justify-content: center;">
			<button style="color: var(--colorTextoVisitado); background-color: var(--fondoBotonPequeño); border: 0px; padding: 8px 15px;" @onclick="ClickearEnseñarImagen">
				<i class="fa-solid fa-xmark" style="font-size: 30px;"></i>
			</button>

			<img src="/imagenes/otros/permisosgog.jpg" style="margin-left: 20px; max-width: 100%; max-height: 100%;" />
		</div>
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	private Usuario usuario = new Usuario();

	private string enlaceCuenta = string.Empty;

	private bool enseñarImagen = false;

	private bool ocupado = false;
	private string mensajeCargando = string.Empty;
	private bool errorCuentaUsada = false;

	protected override async Task OnInitializedAsync()
	{
		usuario = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);

		if (usuario != null)
		{
			if (usuario.GogAccountLastCheck + TimeSpan.FromMinutes(10) < DateTime.Now)
			{
				ocupado = false;

				if (string.IsNullOrEmpty(usuario.GogAccount) == false)
				{
					enlaceCuenta = usuario.GogAccount;
				}
			}
			else
			{
				ocupado = true;
			}
		}
	}

	private void TextoCambiaGogCuenta(ChangeEventArgs texto)
	{
		errorCuentaUsada = false;

		if (texto.Value.ToString().Trim().Length > 1)
		{
			enlaceCuenta = texto.Value.ToString().Trim();
		}
	}

	private string MensajeCantidad(string datos)
	{
		if (datos != null)
		{
			string juegos = datos;

			int i = 0;
			int j = 100000;

			while (i < j)
			{
				if (juegos.Contains(",") == true)
				{
					int int1 = juegos.IndexOf(",");
					juegos = juegos.Remove(0, int1 + 1);
				}
				else
				{
					break;
				}

				i += 1;
			}

			if (i > 0)
			{
				return i.ToString();
			}
		}

		return null;
	}

	private void ClickearEnseñarImagen()
	{
		if (enseñarImagen == true)
		{
			enseñarImagen = false;
		}
		else
		{
			enseñarImagen = true;
		}
	}

	private async Task ActualizarCuenta(MouseEventArgs args)
	{
		ocupado = true;

		if (string.IsNullOrEmpty(enlaceCuenta) == false)
		{
			if (enlaceCuenta.Contains("https://www.gog.com/u/") == true || enlaceCuenta.Contains("http://www.gog.com/u/") == true)
			{
				mensajeCargando = Herramientas.Idiomas.BuscarTexto(idioma, "Gog13", "Account");

				string idCuenta = await APIs.GOG.Cuenta.UsuarioId(enlaceCuenta);

				if (string.IsNullOrEmpty(idCuenta) == false)
				{
					bool cuentaUsada = BaseDatos.Usuarios.Buscar.CuentaGogUsada(idCuenta, usuario.Id);

					if (cuentaUsada == false)
					{
						mensajeCargando = Herramientas.Idiomas.BuscarTexto(idioma, "Gog14", "Account");

						datos = await APIs.Steam.Cuenta.CargarDatos(enlaceCuenta);

						if (datos != null)
						{
							usuario.GogAccount = enlaceCuenta;
							usuario.SteamGames = datos.Juegos;
							usuario.SteamWishlist = datos.Deseados;
							usuario.GogAccountLastCheck = DateTime.Now;
							usuario.GogId = idCuenta;

							try
							{
								await UserManager.UpdateAsync(usuario);
							}
							catch
							{
								BaseDatos.Errores.Insertar.Mensaje("Cuenta Usuario Gog", usuario.Id + Environment.NewLine + enlaceCuenta);
							}
						}
					}
					else
					{
						errorCuentaUsada = true;

						usuario.GogAccount = null;

						try
						{
							await UserManager.UpdateAsync(usuario);
						}
						catch
						{
						}
					}
				}
			}
		}

		if (usuario.GogAccountLastCheck + TimeSpan.FromMinutes(10) > DateTime.Now)
		{
			ocupado = true;
		}
		else
		{
			ocupado = false;
		}
	}
}
