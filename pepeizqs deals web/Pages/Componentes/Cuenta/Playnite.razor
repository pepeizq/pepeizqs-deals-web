@using LiteDB
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient
@using Microsoft.Data.Sqlite
@using System.Text
@using System.Net.Http.Headers
@using Microsoft.VisualBasic
@using global::Juegos
@using pepeizqs_deals_web.Areas.Identity.Data

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

<style>
    .cargando {
    width: 48px;
    height: 48px;
    border: 5px solid var(--colorTexto);
    border-bottom-color: transparent;
    border-radius: 50%;
    display: inline-block;
    box-sizing: border-box;
    animation: rotation 1s linear infinite;
    }

    @@keyframes rotation {
    0% {
    transform: rotate(0deg);
    }

    100% {
    transform: rotate(360deg);
    }
    }
</style>

<div style="display: flex; flex-direction: column; gap: 40px;">
    <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
        <label style="font-size: 18px; margin-bottom: 20px;">@Herramientas.Idiomas.BuscarTexto(idioma, "String1", "AccountGoggalaxy")</label>

        <div>
            <ul style="display: flex; flex-direction: column; gap: 20px; margin: 0px;">
                <li>
                    @Herramientas.Idiomas.BuscarTexto(idioma, "String2", "AccountGoggalaxy")
                </li>

                <li>
                    @string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String3", "AccountGoggalaxy"), "galaxy-2.0.db", "C:\\ProgramData\\GOG.com\\Galaxy\\storage")
                </li>

                <li>
                    <a href="https://support.microsoft.com/en-us/windows/file-explorer-in-windows-ef370130-1cca-9dc5-e0df-2f7416fe1cb1#ID0EDBBBBBFD-button" target="_blank">@Herramientas.Idiomas.BuscarTexto(idioma, "String4", "AccountAmazon")</a>
                </li>

                <li>
                    @Herramientas.Idiomas.BuscarTexto(idioma, "String8", "AccountGoggalaxy")
                </li>
            </ul>
        </div>
    </div>

    <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px; display: flex; flex-direction: column;">
        <div style="font-size: 18px;">@Herramientas.Idiomas.BuscarTexto(idioma, "String5", "AccountGoggalaxy")</div>
        <hr />

        @if (trabajando == false)
        {
            <label class="boton" style="cursor: pointer; font-size: 16px; width: fit-content; padding: 10px 15px;">
                <InputFile OnChange="CargarFichero" accept=".db" hidden />
                @string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String6", "AccountGoggalaxy"), "galaxy-2.0.db")
            </label>

            @if (importadosEpic > 0 || importadosUbisoft > 0)
            {
                <div style="margin-top: 20px; display: flex; flex-direction: column; gap: 10px;">
                    <div>
                        @Herramientas.Idiomas.BuscarTexto(idioma, "String7", "AccountGoggalaxy")
                    </div>

                    <div>
                        Epic Games: @importadosEpic
                    </div>

                    <div>
                        Ubisoft Connect: @importadosUbisoft
                    </div>
                </div>
            }
        }
        else
        {
            <div style="display: flex; align-items: center; gap: 20px;">
                <div class="cargando" />
            </div>
        }
    </div>
</div>

@code {

    #nullable disable

    [Parameter]
    public string idioma { get; set; }

    private Usuario usuario = new Usuario();

    private bool trabajando = false;
    private int importadosEpic = 0;
    private int importadosUbisoft = 0;

    protected override async Task OnInitializedAsync()
    {
        usuario = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
    }

    private async void CargarFichero(InputFileChangeEventArgs e)
    {
        trabajando = true;

        if (e.File.Name.ToLower().Contains("games") == true)
        {
            importadosEpic = 0;
            importadosUbisoft = 0;

            IBrowserFile fichero = e.File;
            int maximoTamaño = 268435456; //256 mb
            byte[] buffer = new byte[fichero.Size];

            Herramientas.FicheroLecturaPerezosa stream = new Herramientas.FicheroLecturaPerezosa(fichero, maximoTamaño);
            StreamContent contenido = new StreamContent(stream);

            string ubicacion = Path.GetFullPath("./wwwroot/otros/playnite.db");
            await File.WriteAllBytesAsync(ubicacion, await contenido.ReadAsByteArrayAsync());

            List<PlayniteJuego> listadoJuegos = new List<PlayniteJuego>();

            using (LiteDatabase bd = new LiteDatabase(ubicacion))
            {
                ILiteCollection<PlayniteBDJuego> consulta = bd.GetCollection<PlayniteBDJuego>("game");

                List<PlayniteBDJuego> resultados = consulta.Query().Limit(10).ToList();

                foreach (var resultado in resultados)
                {
                    BaseDatos.Errores.Insertar.Mensaje("test", resultado.Name + " " + resultado.PluginId.ToString());
                }  
            }

            // using (SqliteConnection conexion = new SqliteConnection("Data Source=" + ubicacion))
            // {
            //     conexion.Open();

            //     SqliteCommand comando = conexion.CreateCommand();
            //     comando.CommandText = "SELECT releaseKey, value FROM GamePieces WHERE gamePieceTypeId = 16";

            //     using (SqliteDataReader lector = comando.ExecuteReader())
            //     {
            //         while (lector.Read())
            //         {
            //             if (lector.IsDBNull(0) == false)
            //             {
            //                 if (string.IsNullOrEmpty(lector.GetString(0)) == false)
            //                 {
            //                     if (lector.GetString(0).Contains("epic_") == true)
            //                     {
            //                         string id = lector.GetString(0);
            //                         id = id.Replace("epic_", null);

            //                         string nombre = lector.GetString(1);
            //                         nombre = nombre.Replace("{" + Strings.ChrW(34) + "title" + Strings.ChrW(34) + ":" + Strings.ChrW(34), null);
            //                         nombre = nombre.Replace("}", null);
            //                         nombre = nombre.Replace("\"", null);

            //                         GogGalaxyJuego nuevo = new GogGalaxyJuego();
            //                         nuevo.Id = id;
            //                         nuevo.Nombre = nombre;
            //                         nuevo.DRM = Juegos.JuegoDRM.Epic;

            //                         listadoJuegos.Add(nuevo);
            //                     }

            //                     if (lector.GetString(0).Contains("uplay_") == true)
            //                     {
            //                         string id = lector.GetString(0);
            //                         id = id.Replace("uplay_", null);

            //                         string nombre = lector.GetString(1);
            //                         nombre = nombre.Replace("{" + Strings.ChrW(34) + "title" + Strings.ChrW(34) + ":" + Strings.ChrW(34), null);
            //                         nombre = nombre.Replace("}", null);
            //                         nombre = nombre.Replace("\"", null);

            //                         GogGalaxyJuego nuevo = new GogGalaxyJuego();
            //                         nuevo.Id = id;
            //                         nuevo.Nombre = nombre;
            //                         nuevo.DRM = Juegos.JuegoDRM.Ubisoft;

            //                         listadoJuegos.Add(nuevo);
            //                     }
            //                 }
            //             }
            //         }
            //     }
            // }

            // if (listadoJuegos.Count > 0)
            // {
            //     SqlConnection conexion = new SqlConnection();

            //     if (conexion == null)
            //     {
            //         conexion = Herramientas.BaseDatos.Conectar();
            //     }
            //     else
            //     {
            //         if (conexion.State != System.Data.ConnectionState.Open)
            //         {
            //             conexion = Herramientas.BaseDatos.Conectar();
            //         }
            //     }

            //     string textoEpicIds = string.Empty;
            //     string textoUbisoftIds = string.Empty;

            //     foreach (GogGalaxyJuego juego in listadoJuegos)
            //     {
            //         if (juego.DRM == Juegos.JuegoDRM.Epic)
            //         {
            //             BaseDatos.Plataformas.Buscar.Epic(juego.Id, juego.Nombre, conexion);

            //             if (string.IsNullOrEmpty(textoEpicIds) == true)
            //             {
            //                 textoEpicIds = juego.Id;
            //             }
            //             else
            //             {
            //                 textoEpicIds = textoEpicIds + "," + juego.Id;
            //             }

            //             importadosEpic += 1;
            //         }

            //         if (juego.DRM == Juegos.JuegoDRM.Ubisoft)
            //         {
            //             BaseDatos.Plataformas.Buscar.Ubisoft(juego.Id, juego.Nombre, conexion);

            //             if (string.IsNullOrEmpty(textoUbisoftIds) == true)
            //             {
            //                 textoUbisoftIds = juego.Id;
            //             }
            //             else
            //             {
            //                 textoUbisoftIds = textoUbisoftIds + "," + juego.Id;
            //             }

            //             importadosUbisoft += 1;
            //         }
            //     }

            //     if (usuario != null)
            //     {
            //         usuario.EpicGames = textoEpicIds;
            //         usuario.UbisoftGames = textoUbisoftIds;

            //         try
            //         {
            //             await UserManager.UpdateAsync(usuario);
            //         }
            //         catch
            //         {
            //             BaseDatos.Errores.Insertar.Mensaje("Cuenta Gog Galaxy Juegos", usuario.Id);
            //         }
            //     }
            // }
        }

        trabajando = false;

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private class PlayniteJuego
    {
        public string Id { get; set; }
        public string Nombre { get; set; }
        public JuegoDRM DRM { get; set; }
    }

    private class PlayniteBDJuego
    {
        public string GameId { get; set; }
        public string Name { get; set; }
        public object PluginId { get; set; }
    }
}
