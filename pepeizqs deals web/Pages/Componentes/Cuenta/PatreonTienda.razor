@using BaseDatos.Recompensas
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using System.Text.Json
@using pepeizqs_deals_web.Areas.Identity.Data

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

<style>
	.boton-pestañas {
		color: var(--colorTexto);
		background: transparent;
		text-align: center;
		border: 0;
		width: 100%;
		transition: transform .2s;
		font-size: 17px;
		padding: 10px;
	}

		.boton-pestañas:hover {
			color: var(--colorTextoHover);
			transform: scale(1.01);
		}

	.recompensa-expandir {
		transition: transform .2s;
	}

		.recompensa-expandir:hover {
			transform: scale(1.01);
		}
</style>

@if ((usuario.PatreonCoins != null && Herramientas.Patreon.VerificarComprobacion(usuario.PatreonLastCheck) == true) || BaseDatos.Usuarios.Buscar.RolDios(usuarioId) == true)
{
	<div style="max-width: 1000px; margin: auto;">
		<div style="display: flex; align-items: center; gap: 20px;">
			<label style="width: 100%; font-size: 20px;">@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String1", "PatreonStore"), usuario.PatreonCoins.ToString())</label>

			<button @onclick="@(e => MostrarHistorial(e))" class="boton-pequeño" style="width: fit-content; padding: 8px 12px;">
				@Herramientas.Idiomas.BuscarTexto(idioma, "String3", "PatreonStore")
			</button>
		</div>

		<hr />

		@if (usuario.PatreonCoins >= 30)
		{
			<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); padding: 20px, 40px; display: flex; align-items: center; gap: 20px;">
				<i style="font-size: 25px;" class="fa-solid fa-circle-exclamation"></i>
				@Herramientas.Idiomas.BuscarTexto(idioma, "Limit", "PatreonStore")
			</div>
		}

		<div style="width: 100%; display: flex; flex-direction: column; gap: 20px;">
			<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 30px;">
				@Herramientas.Idiomas.BuscarTexto(idioma, "Problem", "PatreonStore")
			</div>

			<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 30px;">
				<div style="margin-bottom: 30px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "String2", "PatreonStore")
				</div>

				<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 30px; justify-items: center;">
					@if (juegos != null)
					{
						if (juegos.Count > 0)
						{
							foreach (var recompensaJuego in juegos)
							{
								if (string.IsNullOrEmpty(recompensaJuego.UsuarioId) == true)
								{
									global::Juegos.Juego juego = BaseDatos.Juegos.Buscar.UnJuego(recompensaJuego.JuegoId);

									if (juego != null)
									{
										bool usuarioTieneJuego = Herramientas.Tooltip.ComprobarUsuarioTieneJuego(juegosUsuario, juego, recompensaJuego.DRM);
										bool usuarioTieneDeseado = false;

										string fondoColor = "background-color: var(--fondoBotonPequeño)";

										if (usuarioTieneJuego == true)
										{
											fondoColor = "background-color: var(--fondoBien);";
										}
										else
										{
											usuarioTieneDeseado = Herramientas.Deseados.ComprobarSiEsta(usuario?.SteamWishlist, usuario?.Wishlist, juego, recompensaJuego.DRM);

											if (usuarioTieneDeseado == true)
											{
												fondoColor = "background-color: var(--fondoAlerta);";
											}
										}

										<button @onclick="@(e => ComprarJuego(e, recompensaJuego, juego.Nombre))" class="recompensa-expandir" style="text-align: left; border: 0; width: 100%; font-size: 15px; padding: 0px;" title="@juego.Nombre">
											<div style="@fondoColor; display: flex; flex-direction: column;">
												<img src="@juego.Imagenes.Library_600x900" style="width: 100%; height: 100%;" />

												<div style="display: flex; align-items: center; padding: 10px; color: var(--colorTexto);">
													@{
														string imagen = global::Juegos.JuegoDRM2.SacarImagen(recompensaJuego.DRM);
													}

													<img src="@imagen" style="width: 20px; height: 20px;" alt="@juego.Nombre" />

													<div style="width: 100%; text-align: right;">@recompensaJuego.Coins.ToString() Coins</div>
												</div>
											</div>
										</button>
									}
								}
							}
						}
					}
				</div>
			</div>
		</div>
	</div>
}
else
{
	<div style="max-width: 800px; margin: auto;">
		<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
			@Herramientas.Idiomas.BuscarTexto(idioma, "Denied", "PatreonStore")
		</div>
	</div>
}

@if (mostrarAvisoCompra == true)
{
	<div class="opciones-panel" style="display: flex; justify-content: center; align-items: center;">
		<div style="max-width: 600px; background-color: var(--fondoOscuro); padding: 40px; text-align: center; margin: 80px auto; position: relative; -moz-box-shadow: 0 0 3px var(--fondoBotonPequeño); -webkit-box-shadow: 0 0 3px var(--fondoBotonPequeño); box-shadow: 0 0 3px var(--fondoBotonPequeño);">
			@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "Buy", "PatreonStore"), nombreJuegoSeleccionado)

			<div style="display: flex; align-items: center; gap: 30px; margin-top: 20px;">
				<button @onclick="@(e => ComprarJuegoSi(e, juegoSeleccionado))" class="boton-pequeño" style="text-align: center; border: 0; width: 100%; font-size: 15px; padding: 6px 12px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "Yes", "PatreonStore")
				</button>

				<button @onclick="@(e => ComprarJuegoNo(e))" class="boton-pequeño" style="text-align: center; border: 0; width: 100%; font-size: 15px; padding: 6px 12px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "No", "PatreonStore")
				</button>
			</div>
		</div>
	</div>
}

@if (mostrarAvisoClave == true)
{
	<div class="opciones-panel" style="display: flex; justify-content: center; align-items: center;">
		<div style="max-width: 600px; background-color: var(--fondoOscuro); padding: 40px; text-align: center; margin: 80px auto; position: relative; -moz-box-shadow: 0 0 3px var(--fondoBotonPequeño); -webkit-box-shadow: 0 0 3px var(--fondoBotonPequeño); box-shadow: 0 0 3px var(--fondoBotonPequeño);">
			@nombreJuegoSeleccionado
			<div style="margin-top: 10px;">@claveJuegoSeleccionado</div>
			<div style="margin-top: 10px;"><a href="https://store.steampowered.com/account/registerkey?key=@claveJuegoSeleccionado" target="_blank">@Herramientas.Idiomas.BuscarTexto(idioma, "Redeem", "PatreonStore")</a></div>

			<div style="display: flex; align-items: center; gap: 30px; margin-top: 30px;">
				<button @onclick="@(e => CerrarAvisoClave(e))" class="boton-pequeño" style="text-align: center; border: 0; width: fit-content; font-size: 15px; padding: 6px 12px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "Close", "PatreonStore")
				</button>
			</div>
		</div>
	</div>
}

@if (mostrarAvisoPobre == true)
{
	<div class="opciones-panel" style="display: flex; justify-content: center; align-items: center;">
		<div style="max-width: 600px; background-color: var(--fondoOscuro); padding: 40px; text-align: center; margin: 80px auto; position: relative; -moz-box-shadow: 0 0 3px var(--fondoBotonPequeño); -webkit-box-shadow: 0 0 3px var(--fondoBotonPequeño); box-shadow: 0 0 3px var(--fondoBotonPequeño);">
			@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "Poor", "PatreonStore"), nombreJuegoSeleccionado)

			<div style="display: flex; align-items: center; gap: 30px; margin-top: 30px;">
				<button @onclick="@(e => CerrarAvisoPobre(e))" class="boton-pequeño" style="text-align: center; border: 0; width: fit-content; font-size: 15px; padding: 6px 12px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "Close", "PatreonStore")
				</button>
			</div>
		</div>
	</div>
}

@if (mostrarHistorial == true)
{
	@if (entradas != null)
	{
		if (entradas.Count > 0)
		{
			<div class="opciones-panel">
				<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); max-width: 800px; width: 100%; padding: 30px; overflow-y: scroll; scrollbar-color: var(--fondoCodigo) var(--fondoOscuro); display: flex; flex-direction: row; align-items: start; gap: 40px;">
					<button @onclick="@(e => CerrarHistorial(e))" class="boton-pequeño" style="text-align: center; border: 0; width: fit-content; font-size: 15px; padding: 10px 15px;">
						@Herramientas.Idiomas.BuscarTexto(idioma, "Close", "PatreonStore")
					</button>

					<div style="display: flex; flex-direction: column; gap: 5px; width: 100%;">
						<hr/>
						@foreach (var entrada in entradas)
						{
							<div style="display: flex; align-items: center; gap: 20px;">
								<div>
									@if (entrada.Coins >= 0)
									{
										<label>+@entrada.Coins</label>
									}
									else
									{
										<label>@entrada.Coins</label>
									}

								</div>

								<div style="flex-grow: 1;">
									@if (string.IsNullOrEmpty(entrada.Razon) == false)
									{
										string cadena = entrada.Razon;
										string juego = string.Empty;

										if (cadena.Contains("Buy") == true)
										{
											juego = cadena.Remove(0, 4);
											cadena = "Buy2";
										}

										<label>@Herramientas.Idiomas.BuscarTexto(idioma, cadena, "PatreonStore") @juego</label>
									}
								</div>

								<div style="text-align: right;">
									@entrada.Fecha.Day/@entrada.Fecha.Month/@entrada.Fecha.Year
								</div>
							</div>

							<hr />
						}
					</div>			
				</div>
			</div>
		}
	}
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string usuarioId { get; set; }

	private Usuario usuario = new Usuario();

	private List<string> juegosUsuario = new List<string>();

	private List<RecompensaJuego> juegos = new List<RecompensaJuego>();

	private bool mostrarHistorial = false;
	private bool mostrarAvisoCompra = false;
	private bool mostrarAvisoClave = false;
	private bool mostrarAvisoPobre = false;

	private RecompensaJuego juegoSeleccionado = new RecompensaJuego();
	private string nombreJuegoSeleccionado = null;
	private string claveJuegoSeleccionado = null;

	private List<RecompensaHistorial> entradas = new List<RecompensaHistorial>();

	protected override async Task OnInitializedAsync()
	{
		usuario = await UserManager.FindByIdAsync(usuarioId);

		if (usuario != null)
		{
			juegos = BaseDatos.Recompensas.Juegos.Todo();
			entradas = BaseDatos.Recompensas.Historial.Leer(usuario.Id);

			if (string.IsNullOrEmpty(usuario.SteamGames) == false)
			{
				juegosUsuario = Herramientas.Listados.Generar(usuario.SteamGames);
			}
		}
	}
	
	private void MostrarHistorial(MouseEventArgs e)
	{
		mostrarHistorial = true;
	}

	private void CerrarHistorial(MouseEventArgs e)
	{
		mostrarHistorial = false;
	}

	private void ComprarJuego(MouseEventArgs e, RecompensaJuego juego, string nombre)
	{
		nombreJuegoSeleccionado = nombre;

		if (juego.Coins <= usuario.PatreonCoins)
		{
			mostrarAvisoCompra = true;
			juegoSeleccionado = juego;			
		}
		else
		{
			mostrarAvisoPobre = true;
		}
	}

	private void ComprarJuegoSi(MouseEventArgs e, RecompensaJuego juego)
	{
		mostrarAvisoCompra = false;

		BaseDatos.Recompensas.Juegos.Actualizar(juegoSeleccionado.Id, usuario.Id);
		BaseDatos.Recompensas.Historial.Insertar(usuario.Id, -juegoSeleccionado.Coins, "Buy " + juegoSeleccionado.JuegoNombre, DateTime.Now);

		usuario.PatreonCoins = usuario.PatreonCoins - juegoSeleccionado.Coins;

		List<BaseDatos.Usuarios.Clave> claves = new List<BaseDatos.Usuarios.Clave>();

		if (string.IsNullOrEmpty(usuario.Keys) == false)
		{
			claves = JsonSerializer.Deserialize<List<BaseDatos.Usuarios.Clave>>(usuario.Keys);
		}

		BaseDatos.Usuarios.Clave nuevaClave = new BaseDatos.Usuarios.Clave();
		nuevaClave.Nombre = juegoSeleccionado.JuegoNombre;
		nuevaClave.Codigo = juegoSeleccionado.Clave;
		nuevaClave.JuegoId = juegoSeleccionado.JuegoId.ToString();

		if (claves == null)
		{
			claves = new List<BaseDatos.Usuarios.Clave>();
		}

		claves.Add(nuevaClave);

		usuario.Keys = JsonSerializer.Serialize(claves);

		claveJuegoSeleccionado = juegoSeleccionado.Clave;

		try
		{
			UserManager.UpdateAsync(usuario);
		}
		catch { }

		juegos.Clear();
		juegos = BaseDatos.Recompensas.Juegos.Todo();

		mostrarAvisoClave = true;
	}

	private void ComprarJuegoNo(MouseEventArgs e)
	{
		mostrarAvisoCompra = false;
	}

	private void CerrarAvisoClave(MouseEventArgs e)
	{
		mostrarAvisoClave = false;
	}

	private void CerrarAvisoPobre(MouseEventArgs e)
	{
		mostrarAvisoPobre = false;
	}
}
