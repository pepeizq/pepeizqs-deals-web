@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient
@using Microsoft.Data.Sqlite
@using System.Text
@using System.Net.Http.Headers
@using Microsoft.VisualBasic
@using pepeizqs_deals_web.Areas.Identity.Data

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

<style>
    .cargando {
    width: 48px;
    height: 48px;
    border: 5px solid var(--colorTexto);
    border-bottom-color: transparent;
    border-radius: 50%;
    display: inline-block;
    box-sizing: border-box;
    animation: rotation 1s linear infinite;
    }

    @@keyframes rotation {
    0% {
    transform: rotate(0deg);
    }

    100% {
    transform: rotate(360deg);
    }
    }
</style>

<div style="display: flex; flex-direction: column; gap: 40px;">
    <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
        <label style="font-size: 18px; margin-bottom: 20px;">@Herramientas.Idiomas.BuscarTexto(idioma, "String1", "AccountAmazon")</label>

        <div>
            <ul style="display: flex; flex-direction: column; gap: 20px; margin: 0px;">
                <li>
                    @Herramientas.Idiomas.BuscarTexto(idioma, "String2", "AccountAmazon")
                </li>

                <li>
                    @string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String3", "AccountAmazon"), "GameUserInteractionsInfo.sqlite", "C:\\Users\\[" + Herramientas.Idiomas.BuscarTexto(idioma, "String9", "AccountAmazon") + "]\\AppData\\Local\\Amazon Games\\Data\\Games\\Sql\\")
                </li>

                <li>
                    <a href="https://support.microsoft.com/en-us/windows/file-explorer-in-windows-ef370130-1cca-9dc5-e0df-2f7416fe1cb1#ID0EDBBBBBFD-button" target="_blank">@Herramientas.Idiomas.BuscarTexto(idioma, "String4", "AccountAmazon")</a>
                </li>

                <li>
                    @Herramientas.Idiomas.BuscarTexto(idioma, "String8", "AccountAmazon")
                </li>
            </ul>
        </div>
    </div>

    <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px; display: flex; flex-direction: column;">
        <div style="font-size: 18px;">@Herramientas.Idiomas.BuscarTexto(idioma, "String5", "AccountAmazon")</div>
        <hr />

        @if (trabajando == false)
        {
            <label class="boton" style="cursor: pointer; font-size: 16px; width: fit-content; padding: 10px 15px;">
                <InputFile OnChange="CargarFichero" accept=".db" hidden />
                @string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String6", "AccountAmazon"), "GameUserInteractionsInfo.sqlite")
            </label>

            @if (importados > 0)
            {
                <label style="margin-top: 20px;">@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String7", "AccountAmazon"), importados)</label>
            }
        }
        else
        {
            <div style="display: flex; align-items: center; gap: 20px;">
                <div class="cargando" />
            </div>
        }
    </div>
</div>

@code {

    #nullable disable

    [Parameter]
    public string idioma { get; set; }

    private Usuario usuario = new Usuario();

    private bool trabajando = false;
    private int importados = 0;

    protected override async Task OnInitializedAsync()
    {
        usuario = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
    }

    private async void CargarFichero(InputFileChangeEventArgs e)
    {
        trabajando = true;

        if (e.File.Name.ToLower().Contains("galaxy-2.0") == true)
        {
            importados = 0;

            IBrowserFile fichero = e.File;
            int maximoTamaño = 268435456; //256 mb
            byte[] buffer = new byte[fichero.Size];

            Herramientas.FicheroLecturaPerezosa stream = new Herramientas.FicheroLecturaPerezosa(fichero, maximoTamaño);
            StreamContent contenido = new StreamContent(stream);

            string ubicacion = Path.GetFullPath("./wwwroot/otros/goggalaxy.db");
            await File.WriteAllBytesAsync(ubicacion, await contenido.ReadAsByteArrayAsync());

            List<GogGalaxyJuego> listadoJuegos = new List<GogGalaxyJuego>();

            using (SqliteConnection conexion = new SqliteConnection("Data Source=" + ubicacion))
            {
                conexion.Open();

                SqliteCommand comando = conexion.CreateCommand();
                comando.CommandText = "SELECT releaseKey, value FROM GamePieces WHERE gamePieceTypeId = 16";

                using (SqliteDataReader lector = comando.ExecuteReader())
                {
                    while (lector.Read())
                    {
                        if (lector.IsDBNull(0) == false)
                        {
                            if (string.IsNullOrEmpty(lector.GetString(0)) == false)
                            {
                                if (lector.GetString(0).Contains("epic_") == true)
                                {
                                    string id = lector.GetString(0);
                                    id = id.Replace("epic_", null);

                                    string nombre = lector.GetString(1);
                                    nombre = nombre.Replace("{" + Strings.ChrW(34) + "title" + Strings.ChrW(34) + ":" + Strings.ChrW(34), null);
                                    nombre = nombre.Replace("}", null);
                                    nombre = nombre.Replace("\"", null);

                                    GogGalaxyJuego nuevo = new GogGalaxyJuego();
                                    nuevo.Id = id;
                                    nuevo.Nombre = nombre;
                                    nuevo.DRM = Juegos.JuegoDRM.Epic;

                                    listadoJuegos.Add(nuevo);
                                }

                                if (lector.GetString(0).Contains("uplay_") == true)
                                {
                                    string id = lector.GetString(0);
                                    id = id.Replace("uplay_", null);

                                    string nombre = lector.GetString(1);
                                    nombre = nombre.Replace("{" + Strings.ChrW(34) + "title" + Strings.ChrW(34) + ":" + Strings.ChrW(34), null);
                                    nombre = nombre.Replace("}", null);
                                    nombre = nombre.Replace("\"", null);

                                    GogGalaxyJuego nuevo = new GogGalaxyJuego();
                                    nuevo.Id = id;
                                    nuevo.Nombre = nombre;
                                    nuevo.DRM = Juegos.JuegoDRM.Ubisoft;

                                    listadoJuegos.Add(nuevo);
                                }
                            }
                        }
                    }
                }
            }

            if (listadoJuegos.Count > 0)
            {
                SqlConnection conexion = new SqlConnection();

                if (conexion == null)
                {
                    conexion = Herramientas.BaseDatos.Conectar();
                }
                else
                {
                    if (conexion.State != System.Data.ConnectionState.Open)
                    {
                        conexion = Herramientas.BaseDatos.Conectar();
                    }
                }

                string textoEpicIds = string.Empty;
                string textoUbisoftIds = string.Empty;

                foreach (GogGalaxyJuego juego in listadoJuegos)
                {
                    if (juego.DRM == Juegos.JuegoDRM.Epic)
                    {
                        BaseDatos.Plataformas.Buscar.Epic(juego.Id, juego.Nombre, conexion);

                        if (string.IsNullOrEmpty(textoEpicIds) == true)
                        {
                            textoEpicIds = juego.Id;
                        }
                        else
                        {
                            textoEpicIds = textoEpicIds + "," + juego.Id;
                        }

                        importados += 1;
                    }

                    if (juego.DRM == Juegos.JuegoDRM.Ubisoft)
                    {
                        BaseDatos.Plataformas.Buscar.Ubisoft(juego.Id, juego.Nombre, conexion);

                        if (string.IsNullOrEmpty(textoUbisoftIds) == true)
                        {
                            textoUbisoftIds = juego.Id;
                        }
                        else
                        {
                            textoUbisoftIds = textoUbisoftIds + "," + juego.Id;
                        }

                        importados += 1;
                    }
                }

                if (usuario != null)
                {
                    usuario.EpicGames = textoEpicIds;
                    usuario.UbisoftGames = textoUbisoftIds;

                    try
                    {
                        await UserManager.UpdateAsync(usuario);
                    }
                    catch
                    {
                        BaseDatos.Errores.Insertar.Mensaje("Cuenta Gog Galaxy Juegos", usuario.Id);
                    }
                }
            }
        }

        trabajando = false;
    }

    private class GogGalaxyJuego
    {
        public string Id { get; set; }
        public string Nombre { get; set; }
        public Juegos.JuegoDRM DRM { get; set; }
    }
}