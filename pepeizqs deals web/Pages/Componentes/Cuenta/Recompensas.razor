@using BaseDatos.Recompensas
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using Newtonsoft.Json
@using pepeizqs_deals_web.Areas.Identity.Data

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

<style>
	.boton-pestañas {
		color: var(--colorTexto);
		background: transparent;
		text-align: center;
		border: 0;
		width: 100%;
		transition: transform .2s;
		font-size: 17px;
		padding: 10px;
	}

		.boton-pestañas:hover {
			color: var(--colorTextoHover);
			transform: scale(1.01);
		}

	.recompensa-expandir {
		transition: transform .2s;
	}

		.recompensa-expandir:hover {
			transform: scale(1.01);
		}
</style>

@if (usuario.RewardsCoins != null)
{
	<div style="margin: auto;">
		<label style="font-size: 20px;">@string.Format(Herramientas.Idiomas.CogerCadena(idioma, "String1", "Rewards"), usuario.RewardsCoins.ToString())</label>
		<hr />

		@if (usuario.RewardsCoins >= 30)
		{
			<div class="alert alert-danger alert-dismissible" style="padding: 40px; margin-bottom: 20px; border-radius: 0px;">
				@Herramientas.Idiomas.CogerCadena(idioma, "Limit", "Rewards")
			</div>
		}

		<div style="display: flex; align-items: start; gap: 50px; margin-top: 20px;">
			<div style="width: 25%;">
				<div style="display: flex; align-items: center; flex-direction: column; gap: 10px;">
					<button @onclick="@(e => MostrarJuegos(e))" class="boton-pestañas" style="@estiloJuegos;">
						@Herramientas.Idiomas.CogerCadena(idioma, "String2", "Rewards")
					</button>

					<button @onclick="@(e => MostrarHistorial(e))" class="boton-pestañas" style="@estiloHistorial;">
						@Herramientas.Idiomas.CogerCadena(idioma, "String3", "Rewards")
					</button>
				</div>
			</div>

			<div style="width: 100%;">
				@if (mostrarJuegos == true)
				{
					<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
						@Herramientas.Idiomas.CogerCadena(idioma, "Problem", "Rewards")
					</div>

					<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px; margin-top: 20px;">
						<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; justify-items: center;">
							@if (juegos != null)
							{
								if (juegos.Count > 0)
								{
									foreach (var recompensaJuego in juegos)
									{
										if (string.IsNullOrEmpty(recompensaJuego.UsuarioId) == true)
										{
											global::Juegos.Juego juego = BaseDatos.Juegos.Buscar.UnJuego(recompensaJuego.JuegoId);

											if (juego != null)
											{
												bool usuarioTieneJuego = Herramientas.Tooltip.ComprobarUsuarioTieneJuego(usuario, juegosUsuario, juego, recompensaJuego.DRM);
												bool usuarioTieneDeseado = false;

												string fondoColor = "background-color: var(--fondoBotonPequeño)";

												if (usuarioTieneJuego == true)
												{
													fondoColor = "background-color: var(--fondoBien);";
												}
												else
												{
													usuarioTieneDeseado = Herramientas.Deseados.ComprobarSiEsta(usuario, juego, recompensaJuego.DRM);

													if (usuarioTieneDeseado == true)
													{
														fondoColor = "background-color: var(--fondoAlerta);";
													}
												}

												<button @onclick="@(e => ComprarJuego(e, recompensaJuego, juego.Nombre))" class="recompensa-expandir" style="text-align: left; border: 0; width: 100%; font-size: 15px; padding: 0px;" title="@juego.Nombre">													
													<div style="@fondoColor; display: flex; flex-direction: column;">
														<img src="@juego.Imagenes.Header_460x215" style="width: 100%; height: 100%;" />

														<div style="display: flex; align-items: center; padding: 10px; color: var(--colorTexto);">
															@{
																string imagen = global::Juegos.JuegoDRM2.SacarImagen(recompensaJuego.DRM);
															}

															<img src="@imagen" style="width: 20px; height: 20px;" alt="@juego.Nombre"/>

															<div style="width: 100%; text-align: right;">@recompensaJuego.Coins.ToString() pepecoins</div>
														</div>
													</div>
												</button>
											}
										}
									}
								}
							}
						</div>
					</div>
				}

				@if (mostrarHistorial == true)
				{
					@if (entradas != null)
					{
						if (entradas.Count > 0)
						{
							<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
								<hr />
								@foreach (var entrada in entradas)
								{
									<div style="display: flex; align-items: center; gap: 20px;">
										<div style="width: 5%;">
											@if (entrada.Coins >= 0)
											{
												<label>+@entrada.Coins</label>
											}
											else
											{
												<label>@entrada.Coins</label>
											}

										</div>

										<div style="width: 100%;">
											@if (string.IsNullOrEmpty(entrada.Razon) == false)
											{
												string cadena = entrada.Razon;
												string juego = string.Empty;

												if (cadena.Contains("Buy") == true)
												{
													juego = cadena.Remove(0, 4);
													cadena = "Buy2";
												}

												<label>@Herramientas.Idiomas.CogerCadena(idioma, cadena, "Rewards") @juego</label>
											}											
										</div>

										<div style="width: 20%; text-align: right;">
											@entrada.Fecha.Day/@entrada.Fecha.Month/@entrada.Fecha.Year
										</div>
									</div>

									<hr />
								}
							</div>

						}
					}
				}
			</div>
		</div>
	</div>
}
else
{
	<div style="max-width: 800px; margin: auto;">
		<div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px;">
			@Herramientas.Idiomas.CogerCadena(idioma, "Denied", "Rewards")
		</div>
	</div>
}

<style>
	.aviso-panel {
		height: calc(100% - var(--alturaCabecera));
		width: 100%;
		left: 0;
		top: 0;
		overflow-x: auto;
		position: fixed;
		z-index: 1001;
		margin-top: var(--alturaCabecera);
		padding: 10px;
		backdrop-filter: blur(10px);
	}
</style>

@if (mostrarAvisoCompra == true)
{
	<div class="aviso-panel" style="display: flex; justify-content: center; align-items: center;">
		<div style="max-width: 600px; background-color: var(--fondoOscuro); padding: 40px; text-align: center; margin: 80px auto; position: relative; -moz-box-shadow: 0 0 3px var(--fondoBotonPequeño); -webkit-box-shadow: 0 0 3px var(--fondoBotonPequeño); box-shadow: 0 0 3px var(--fondoBotonPequeño);">
			@string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Buy", "Rewards"), nombreJuegoSeleccionado)

			<div style="display: flex; align-items: center; gap: 30px; margin-top: 20px;">
				<button @onclick="@(e => ComprarJuegoSi(e, juegoSeleccionado))" class="boton-pequeño" style="text-align: center; border: 0; width: 100%; font-size: 15px; padding: 6px 12px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "Yes", "Rewards")
				</button>

				<button @onclick="@(e => ComprarJuegoNo(e))" class="boton-pequeño" style="text-align: center; border: 0; width: 100%; font-size: 15px; padding: 6px 12px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "No", "Rewards")
				</button>
			</div>
		</div>
	</div>
}

@if (mostrarAvisoClave == true)
{
	<div class="aviso-panel" style="display: flex; justify-content: center; align-items: center;">
		<div style="max-width: 600px; background-color: var(--fondoOscuro); padding: 40px; text-align: center; margin: 80px auto; position: relative; -moz-box-shadow: 0 0 3px var(--fondoBotonPequeño); -webkit-box-shadow: 0 0 3px var(--fondoBotonPequeño); box-shadow: 0 0 3px var(--fondoBotonPequeño);">
			@nombreJuegoSeleccionado
			<div style="margin-top: 10px;">@claveJuegoSeleccionado</div>
			<div style="margin-top: 10px;"><a href="https://store.steampowered.com/account/registerkey?key=@claveJuegoSeleccionado" target="_blank">@Herramientas.Idiomas.CogerCadena(idioma, "Redeem", "Rewards")</a></div>

			<div style="display: flex; align-items: center; gap: 30px; margin-top: 20px;">
				<button @onclick="@(e => CerrarAvisoClave(e))" class="boton-pequeño" style="text-align: center; border: 0; width: 100%; font-size: 15px; padding: 6px 12px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "Close", "Rewards")
				</button>
			</div>
		</div>
	</div>
}

@if (mostrarAvisoPobre == true)
{
	<div class="aviso-panel" style="display: flex; justify-content: center; align-items: center;">
		<div style="max-width: 600px; background-color: var(--fondoOscuro); padding: 40px; text-align: center; margin: 80px auto; position: relative; -moz-box-shadow: 0 0 3px var(--fondoBotonPequeño); -webkit-box-shadow: 0 0 3px var(--fondoBotonPequeño); box-shadow: 0 0 3px var(--fondoBotonPequeño);">
			@string.Format(Herramientas.Idiomas.CogerCadena(idioma, "Poor", "Rewards"), nombreJuegoSeleccionado)

			<div style="display: flex; align-items: center; gap: 30px; margin-top: 20px;">
				<button @onclick="@(e => CerrarAvisoPobre(e))" class="boton-pequeño" style="text-align: center; border: 0; width: 100%; font-size: 15px; padding: 6px 12px;">
					@Herramientas.Idiomas.CogerCadena(idioma, "Close", "Rewards")
				</button>
			</div>
		</div>
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	private Usuario usuario = new Usuario();
	private List<string> juegosUsuario = new List<string>();

	private List<RecompensaJuego> juegos = new List<RecompensaJuego>();

	private bool mostrarAvisoCompra = false;
	private bool mostrarAvisoClave = false;
	private bool mostrarAvisoPobre = false;

	private RecompensaJuego juegoSeleccionado = new RecompensaJuego();
	private string nombreJuegoSeleccionado = null;
	private string claveJuegoSeleccionado = null;

	private List<RecompensaHistorial> entradas = new List<RecompensaHistorial>();

	private string fondo = "background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño)";

	#nullable enable
	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }
	#nullable disable

	protected override async Task OnInitializedAsync()
	{
		if (HttpContext == null)
		{
			mostrarJuegos = true;
			estiloJuegos = fondo;

			usuario = await Herramientas.UsuarioDatos.Actualizar(HttpContextAccessor.HttpContext.User, usuario, UserManager, idioma);

			if (usuario != null)
			{
				juegos = BaseDatos.Recompensas.Juegos.Todo();
				entradas = BaseDatos.Recompensas.Historial.Leer(usuario.Id);

				if (string.IsNullOrEmpty(usuario.SteamGames) == false)
				{
					juegosUsuario = Herramientas.Listados.Generar(usuario.SteamGames);
				}
			}
		}
	}

	private void CerrarPestañas()
	{
		mostrarJuegos = false;
		mostrarHistorial = false;

		estiloJuegos = null;
		estiloHistorial = null;
	}

	private bool mostrarJuegos = false;
	private string estiloJuegos = null;

	private void MostrarJuegos(MouseEventArgs e)
	{
		CerrarPestañas();
		mostrarJuegos = true;
		estiloJuegos = fondo;
	}

	private bool mostrarHistorial = false;
	private string estiloHistorial = null;

	private void MostrarHistorial(MouseEventArgs e)
	{
		CerrarPestañas();
		mostrarHistorial = true;
		estiloHistorial = fondo;
	}

	private void ComprarJuego(MouseEventArgs e, RecompensaJuego juego, string nombre)
	{
		nombreJuegoSeleccionado = nombre;

		if (juego.Coins <= usuario.RewardsCoins)
		{
			mostrarAvisoCompra = true;
			juegoSeleccionado = juego;			
		}
		else
		{
			mostrarAvisoPobre = true;
		}
	}

	private void ComprarJuegoSi(MouseEventArgs e, RecompensaJuego juego)
	{
		mostrarAvisoCompra = false;

		BaseDatos.Recompensas.Juegos.Actualizar(juegoSeleccionado.Id, usuario.Id);
		BaseDatos.Recompensas.Historial.Insertar(usuario.Id, -juegoSeleccionado.Coins, "Buy " + juegoSeleccionado.JuegoNombre, DateTime.Now);

		usuario.RewardsCoins = usuario.RewardsCoins - juegoSeleccionado.Coins;

		List<BaseDatos.Usuarios.Clave> claves = new List<BaseDatos.Usuarios.Clave>();

		if (string.IsNullOrEmpty(usuario.Keys) == false)
		{
			claves = JsonConvert.DeserializeObject<List<BaseDatos.Usuarios.Clave>>(usuario.Keys);
		}

		BaseDatos.Usuarios.Clave nuevaClave = new BaseDatos.Usuarios.Clave();
		nuevaClave.Nombre = juegoSeleccionado.JuegoNombre;
		nuevaClave.Codigo = juegoSeleccionado.Clave;
		nuevaClave.JuegoId = juegoSeleccionado.JuegoId.ToString();

		if (claves == null)
		{
			claves = new List<BaseDatos.Usuarios.Clave>();
		}

		claves.Add(nuevaClave);

		usuario.Keys = JsonConvert.SerializeObject(claves);

		claveJuegoSeleccionado = juegoSeleccionado.Clave;

		try
		{
			UserManager.UpdateAsync(usuario);
		}
		catch { }

		juegos.Clear();
		juegos = BaseDatos.Recompensas.Juegos.Todo();

		mostrarAvisoClave = true;
	}

	private void ComprarJuegoNo(MouseEventArgs e)
	{
		mostrarAvisoCompra = false;
	}

	private void CerrarAvisoClave(MouseEventArgs e)
	{
		mostrarAvisoClave = false;
	}

	private void CerrarAvisoPobre(MouseEventArgs e)
	{
		mostrarAvisoPobre = false;
	}
}
