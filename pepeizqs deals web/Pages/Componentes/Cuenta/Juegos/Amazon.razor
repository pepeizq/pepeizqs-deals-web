@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient
@using Microsoft.Data.Sqlite
@using System.Text
@using System.Net.Http.Headers
@using global::Juegos
@using pepeizqs_deals_web.Areas.Identity.Data

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

<style>
    .cargando {
    width: 48px;
    height: 48px;
    border: 5px solid var(--colorTexto);
    border-bottom-color: transparent;
    border-radius: 50%;
    display: inline-block;
    box-sizing: border-box;
    animation: rotation 1s linear infinite;
    }

    @@keyframes rotation {
    0% {
    transform: rotate(0deg);
    }

    100% {
    transform: rotate(360deg);
    }
    }
</style>

@if (usuario != null)
{
    <div style="display: flex; flex-direction: column; gap: 20px;">
        <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 30px;">
            <div style="display: flex; align-items: center; gap: 20px; text-align: left;">
                <img src="@JuegoDRM2.SacarImagen(JuegoDRM.Amazon)" style="max-width: 40px; max-height: 40px;" />

                <div>
                    <div style="font-size: 18px;">
                        @JuegoDRM2.DevolverDRM(JuegoDRM.Amazon)
                    </div>

                    <div style="font-size: 14px;">
                        @Herramientas.Idiomas.BuscarTexto(idioma, "String11", "AccountGames")
                    </div>
                </div>
            </div>

            <hr />

            <div style="display: flex; align-items: center; gap: 20px;">
                @{
                    int cantidadJuegos = 0;

                    if (string.IsNullOrEmpty(usuario.AmazonGames) == false)
                    {
                        cantidadJuegos = Herramientas.Listados.Generar(usuario.AmazonGames).Count;
                    }

                    <div style="background-color: var(--fondoBien); padding: 10px 20px;">
                        @string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String8", "AccountGames"), cantidadJuegos.ToString())
                    </div>
                }

                @if (usuario.AmazonLastImport != null)
                {
                    <div>
                        @Herramientas.Idiomas.BuscarTexto(idioma, "String7", "AccountGames") @Herramientas.Calculadora.DiferenciaTiempo(usuario.AmazonLastImport, idioma)
                    </div>
                }

                @if (cantidadJuegos > 0)
                {
                    <div style="margin-left: auto;">
                        <button class="boton" style="font-size: 16px; padding: 10px 20px; width: fit-content;" @onclick="@(e => BorrarJuegos(e))">
                            <i class="fa-solid fa-trash-can"></i>
                        </button>
                    </div>
                }
            </div>
        </div>

        <div style="background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 30px;">
            <div style="font-size: 18px;">
                @Herramientas.Idiomas.BuscarTexto(idioma, "String15", "AccountGames")
            </div>

            <div style="display: flex; flex-direction: column; gap: 20px; margin-top: 20px; padding: 20px; background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño);">
                <label>@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String17", "AccountGames"), "Amazon Games")</label>

                @if (trabajando == false)
                {
                    <div class="grid-estructura">
                        <button @onclick="@(e => MostrarAmazon(e))" class="boton-pestañas" style="font-size: 16px; padding: 0px;">
                            <div>
                                <div style="display: flex; align-items: center; gap: 20px; text-align: left; padding: 15px 20px;">
                                    <img src="@JuegoDRM2.SacarImagen(JuegoDRM.Amazon)" style="max-width: 30px; max-height: 30px;" />

                                    <div style="display: flex; flex-direction: column; gap: 5px;">
                                        <div>
                                            Amazon Launcher
                                        </div>                        
                                    </div>
                                </div>

                                @if (mostrarAmazon == true)
                                {
                                    <div style="border: 1px solid var(--colorTexto);"/>
                                }
                            </div>
                            
                        </button>

                        <button @onclick="@(e => MostrarPlaynite(e))" class="boton-pestañas" style="font-size: 16px; padding: 0px;">
                            <div>
                                <div style="display: flex; align-items: center; gap: 20px; text-align: left; padding: 15px 20px;">
                                    <img src="/imagenes/otros/playnite.webp" style="max-width: 30px; max-height: 30px;" />

                                    <div style="display: flex; flex-direction: column; gap: 5px;">
                                        <div>
                                            Playnite
                                        </div>                        
                                    </div>
                                </div>

                                @if (mostrarPlaynite == true)
                                {
                                    <div style="border: 1px solid var(--colorTexto);"/>
                                }
                            </div>
                            
                        </button>
                    </div/>
                }

                @if (mostrarAmazon == true)
                {
                    <div>
                        <ul style="display: grid; gap: 15px; margin-bottom: 30px;">
                            <li>
                                @string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String19", "AccountGames"), "GameUserInteractionsInfo.sqlite", "C:\\Users\\[" + Herramientas.Idiomas.BuscarTexto(idioma, "String21", "AccountGames") + "]\\AppData\\Local\\Amazon Games\\Data\\Games\\Sql\\")
                            </li>

                            <li>
                                <a href="https://support.microsoft.com/en-us/windows/file-explorer-in-windows-ef370130-1cca-9dc5-e0df-2f7416fe1cb1#ID0EDBBBBBFD-button" target="_blank" style="text-decoration: none;">@Herramientas.Idiomas.BuscarTexto(idioma, "String20", "AccountGames")</a>
                            </li>

                            <li>
                                @Herramientas.Idiomas.BuscarTexto(idioma, "String22", "AccountGames")
                            </li>
                        </ul>

                        @if (trabajando == false)
                        {
                            <label class="boton" style="cursor: pointer; font-size: 16px; width: fit-content; padding: 10px 15px;">
                                <InputFile OnChange="AmazonCargarFichero" accept=".sqlite" hidden />
                                @string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String23", "AccountGames"), "GameUserInteractionsInfo.sqlite")
                            </label>

                            @if (importados > 0)
                            {
                                <div style="margin-top: 20px;">@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String24", "AccountGames"), importados)</div>
                            }
                        }
                        else
                        {
                            <div style="display: flex; align-items: center; gap: 20px;">
                                <div class="cargando" />
                            </div>
                        }
                    </div>
                }

                @if (mostrarAmazon == true)
                {
                    
                }
            </div>
        </div>
    </div>
}

@code {

    #nullable disable

    [Parameter]
    public string idioma { get; set; }

    private Usuario usuario = new Usuario();

    private bool trabajando = false;
    private int importados = 0;

    protected override async Task OnInitializedAsync()
    {
        usuario = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
    }

    private void CerrarPestañas()
    {
        mostrarAmazon = false;
        mostrarPlaynite = false;
    }

    private bool mostrarAmazon = false;

    private void MostrarAmazon(MouseEventArgs e)
    {
        CerrarPestañas();
        mostrarAmazon = true;
    }

    private bool mostrarPlaynite = false;

    private void MostrarPlaynite(MouseEventArgs e)
    {
        CerrarPestañas();
        mostrarPlaynite = true;
    }

    private async void AmazonCargarFichero(InputFileChangeEventArgs e)
    {
        trabajando = true;

        if (e.File.Name.ToLower().Contains("gameuserinteractionsinfo") == true)
        {
            importados = 0;

            IBrowserFile fichero = e.File;
            int maximoTamaño = 268435456; //256 mb;
            byte[] buffer = new byte[fichero.Size];

            Herramientas.FicheroLecturaPerezosa stream = new Herramientas.FicheroLecturaPerezosa(fichero, maximoTamaño);
            StreamContent contenido = new StreamContent(stream);

            string ubicacion = Path.GetFullPath("./wwwroot/otros/amazon-" + usuario.Id + ".sqlite");
            await File.WriteAllBytesAsync(ubicacion, await contenido.ReadAsByteArrayAsync());

            List<string> listadoIds = new List<string>();

            using (SqliteConnection conexion = new SqliteConnection("Data Source=" + ubicacion))
            {
                conexion.Open();

                SqliteCommand comando = conexion.CreateCommand();
                comando.CommandText = "SELECT * FROM dbset";

                using (SqliteDataReader lector = comando.ExecuteReader())
                {
                    while (lector.Read())
                    {
                        if (lector.IsDBNull(0) == false)
                        {
                            if (string.IsNullOrEmpty(lector.GetString(0)) == false)
                            {
                                listadoIds.Add(lector.GetString(0));
                            }
                        }
                    }
                }
            }

            if (listadoIds.Count > 0)
            {
                SqlConnection conexion = new SqlConnection();

                if (conexion == null)
                {
                    conexion = Herramientas.BaseDatos.Conectar();
                }
                else
                {
                    if (conexion.State != System.Data.ConnectionState.Open)
                    {
                        conexion = Herramientas.BaseDatos.Conectar();
                    }
                }

                string textoIds = string.Empty;

                foreach (string id in listadoIds)
                {
                    BaseDatos.Plataformas.Buscar.Amazon(id, conexion);

                    if (string.IsNullOrEmpty(textoIds) == true)
                    {
                        textoIds = id;
                    }
                    else
                    {
                        textoIds = textoIds + "," + id;
                    }

                    importados += 1;
                }

                if (usuario != null)
                {
                    usuario.AmazonGames = textoIds;
                    usuario.AmazonLastImport = DateTime.Now;

                    try
                    {
                        await UserManager.UpdateAsync(usuario);
                    }
                    catch
                    {
                        BaseDatos.Errores.Insertar.Mensaje("Cuenta Amazon Juegos", usuario.Id);
                    }
                }
            }
        }

        trabajando = false;

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async Task BorrarJuegos(MouseEventArgs args)
    {
        usuario.AmazonGames = null;

        try
        {
            await UserManager.UpdateAsync(usuario);
        }
        catch
        {
            BaseDatos.Errores.Insertar.Mensaje("Borrar Amazon Juegos", usuario.Id);
        }
    }
}
