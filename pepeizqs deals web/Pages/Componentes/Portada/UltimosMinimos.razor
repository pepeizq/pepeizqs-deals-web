@using BaseDatos.Juegos;
@using Juegos;
@using Microsoft.Data.SqlClient;

@if (juegosMostrar.Count > 0)
{
	<div style="font-size: 20px; margin-bottom: 10px; margin-left: 20px;">
		Last Historical Lows
	</div>

	<div class="perfil" style="padding: 15px 20px;">
		@foreach (var juego in juegosMostrar)
		{
			<div class="perfil-flexible-centrado" style="margin-top: 10px;">
				<a class="boton-pequeño" style="padding: 0px;" href="/game/@juego.Id" target="_blank">
					<div class="perfil-flexible-centrado">
						<div style="width: 20%;">
							<img src="@juego.Imagenes.Capsule_231x87" style="max-height:100%; max-width:100%;" />
						</div>

						<div style="width: 70%; padding: 4px 15px; font-size: 13px;">
							@juego.Nombre
						</div>

						<div style="width: 5%; height: 16px; position: relative;">
							<img src="@Herramientas.JuegoFicha.IconoTiendaMinimoActual(juego)" class="juego-icono-tienda"/>
						</div>

						<div style="width: 15%; padding: 4px 15px 4px 0px; font-size: 13px; text-align: right;">
							@Herramientas.JuegoFicha.PrecioMinimoActual(juego, false)
						</div>
					</div>
				</a>
			</div>
		}

		<a class="boton-pequeño" style="padding: 10px 15px; margin-top: 20px; margin-bottom: 5px;" href="/HistoricalLow">
			Load more historical lows
		</a>
	</div>
}

@code {

	List<Juego> juegosMostrar = new List<Juego>();

	protected override void OnInitialized()
	{
		SqlConnection conexion = Herramientas.BaseDatos.Conectar();

		using (conexion)
		{
			conexion.Open();

			List<Juego> juegos = Buscar.Todos(conexion);

			if (juegos.Count > 0)
			{
				List<Juego> juegosConMinimos = new List<Juego>();

				foreach (var juego in juegos)
				{
					if (juego.PrecioMinimosHistoricos.Count > 0)
					{
						foreach (var minimo in juego.PrecioMinimosHistoricos)
						{
							bool fechaEncaja = Herramientas.JuegoFicha.CalcularAntiguedad(minimo);

							if (fechaEncaja == true && minimo.Descuento > 0)
							{
								juegosConMinimos.Add(juego);
								break;
							}
						}
					}
				}

				juegosConMinimos.Sort(delegate (Juego j1, Juego j2)
				{
					List<JuegoPrecio> j1Ofertas = new List<JuegoPrecio>();

					if (j1.PrecioMinimosHistoricos.Count > 0)
					{
						foreach (var j in j1.PrecioMinimosHistoricos)
						{
							j1Ofertas.Add(j);
						}

						j1Ofertas.OrderBy(x => x.FechaDetectado);
					}

					List<JuegoPrecio> j2Ofertas = new List<JuegoPrecio>();

					if (j2.PrecioMinimosHistoricos.Count > 0)
					{
						foreach (var j in j2.PrecioMinimosHistoricos)
						{
							j2Ofertas.Add(j);
						}

						j2Ofertas.OrderBy(x => x.FechaDetectado);
					}

					if (j1Ofertas.Count > 0 && j2Ofertas.Count > 0)
					{
						return j2Ofertas[0].FechaDetectado.CompareTo(j1Ofertas[0].FechaDetectado);
					}
					else
					{
						if (j1Ofertas.Count == 0 && j2Ofertas.Count > 0)
						{
							return 1;
						}
						else if (j1Ofertas.Count > 0 && j2Ofertas.Count == 0)
						{
							return -1;
						}
					}

					return 0;
				});

				int i = 0;
				foreach (var juego in juegosConMinimos)
				{
					if (i < 10)
					{
						juegosMostrar.Add(juego);
					}

					i += 1;
				}
			}
		}
	}

}
