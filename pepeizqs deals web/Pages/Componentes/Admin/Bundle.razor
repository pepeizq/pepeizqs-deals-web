@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Data.SqlClient

@if (bundle != null)
{
	<div style="padding: 20px; background: var(--fondoCuerpo); border: 1px solid var(--fondoBotonPequeño); display: flex; flex-direction: column; gap: 20px;">
		<div style="display: flex; align-items: center;">
			<div style="width: 100%;">
				Admin Editar • @bundle.NombreBundle
			</div>
		</div>

		<div style="display: flex; align-items: center;">
			<div style="width: 15%; padding-right: 20px; text-align: right;">
				Nombre
			</div>

			<div style="width: 85%;">
				<textarea @onchange="(e => TextoCambiaNombre(e))" class="entrada-texto" rows="1">@textoNombre</textarea>
			</div>
		</div>

		<div style="display: flex; align-items: start;">
			<div style="width: 15%; padding-right: 20px; text-align: right; margin-top: 5px;">
				Imagen Bundle
			</div>

			<div style="width: 85%;">
				<textarea @onchange="(e => TextoCambiaImagenBundle(e))" class="entrada-texto" rows="1">@textoImagenBundle</textarea>
				<img src="@textoImagenBundle" style="max-width: 250px; max-height: 250px; margin-top: 5px;"/>
			</div>
		</div>

		<div style="display: flex; align-items: start;">
			<div style="width: 15%; padding-right: 20px; text-align: right; margin-top: 5px;">
				Imagen Noticia
			</div>

			<div style="width: 85%;">
				<textarea @onchange="(e => TextoCambiaImagenNoticia(e))" class="entrada-texto" rows="1">@textoImagenNoticia</textarea>
				<img src="@textoImagenNoticia" style="max-width: 250px; max-height: 250px; margin-top: 5px;" />
			</div>
		</div>

		<div style="display: flex; align-items: center;">
			<div style="width: 15%; padding-right: 20px; text-align: right;">
				Fecha Empieza
			</div>

			<div style="width: 85%;">
				<textarea @onchange="(e => TextoCambiaFechaEmpieza(e))" class="entrada-texto" rows="1">@textoFechaEmpieza</textarea>
			</div>
		</div>

		<div style="display: flex; align-items: center;">
			<div style="width: 15%; padding-right: 20px; text-align: right;">
				Fecha Termina
			</div>

			<div style="width: 85%;">
				<textarea @onchange="(e => TextoCambiaFechaTermina(e))" class="entrada-texto" rows="1">@textoFechaTermina</textarea>
			</div>
		</div>

		<div style="display: flex; align-items: start;">
			<div style="width: 15%; padding-right: 20px; text-align: right; margin-top: 5px;">
				Juegos
			</div>

			<div style="width: 85%;">
				<textarea @onchange="(e => TextoCambiaJuegos(e))" class="entrada-texto" rows="5">@textoJuegos</textarea>
			</div>
		</div>

		<div style="display: flex; align-items: start;">
			<div style="width: 15%; padding-right: 20px; text-align: right; margin-top: 5px;">
				Añadir Juego
			</div>

			<div style="width: 85%; display: flex; align-items: start; gap: 15px;">
				<input type="text" @onchange="(e => TextoCambiaAñadirJuegoID(e))" class="entrada-texto" placeholder="ID Juego" style="width: fit-content; min-width: 50px;"/>

				<input type="text" @onchange="(e => TextoCambiaAñadirJuegoTier(e))" class="entrada-texto" placeholder="Tier" style="width: fit-content; min-width: 50px;"/>

				<button class="boton-pequeño" @onclick="(e => ClickAñadirJuego(e))" style="width: fit-content; padding: 10px 15px;">
					Añadir para Steam
				</button>
			</div>
		</div>

		<div style="display: flex; align-items: start;">
			<div style="width: 15%; padding-right: 20px; text-align: right; margin-top: 5px;">
				Tiers
			</div>

			<div style="width: 85%;">
				<textarea @onchange="(e => TextoCambiaTiers(e))" class="entrada-texto" rows="2">@textoTiers</textarea>
			</div>
		</div>
	</div>

	<hr/>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public int bundleId { get; set; }

	public Bundles2.Bundle bundle = new Bundles2.Bundle();

	protected override void OnInitialized()
	{
		bundle = BaseDatos.Bundles.Buscar.UnBundle(bundleId);

		if (bundle != null)
		{
			textoNombre = bundle.NombreBundle;
			textoImagenBundle = bundle.ImagenBundle;
			textoImagenNoticia = bundle.ImagenNoticia;
			textoFechaEmpieza = bundle.FechaEmpieza.ToString();
			textoFechaTermina = bundle.FechaTermina.ToString();
			textoJuegos = Newtonsoft.Json.JsonConvert.SerializeObject(bundle.Juegos);
			textoTiers = Newtonsoft.Json.JsonConvert.SerializeObject(bundle.Tiers);
		}
	}

	private string textoNombre = string.Empty;

	private void TextoCambiaNombre(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				BaseDatos.Bundles.Actualizar.Nombre(bundleId.ToString(), nuevoTexto, conexion);
			}
		}
	}

	private string textoImagenBundle = string.Empty;

	private void TextoCambiaImagenBundle(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				BaseDatos.Bundles.Actualizar.ImagenBundle(bundleId.ToString(), nuevoTexto, conexion);
			}
		}
	}

	private string textoImagenNoticia = string.Empty;

	private void TextoCambiaImagenNoticia(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				BaseDatos.Bundles.Actualizar.ImagenNoticia(bundleId.ToString(), nuevoTexto, conexion);
			}
		}
	}

	private string textoFechaEmpieza = string.Empty;

	private void TextoCambiaFechaEmpieza(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				BaseDatos.Bundles.Actualizar.FechaEmpieza(bundleId.ToString(), nuevoTexto, conexion);
			}
		}
	}

	private string textoFechaTermina = string.Empty;

	private void TextoCambiaFechaTermina(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				BaseDatos.Bundles.Actualizar.FechaTermina(bundleId.ToString(), nuevoTexto, conexion);
			}
		}
	}

	private string textoJuegos = string.Empty;

	private void TextoCambiaJuegos(ChangeEventArgs texto)
	{
		string nuevoTexto = texto.Value.ToString().Trim();

		SqlConnection conexion = Herramientas.BaseDatos.Conectar();

		using (conexion)
		{
			BaseDatos.Bundles.Actualizar.Juegos(bundleId.ToString(), nuevoTexto, conexion);
		}
	}

	private string textoAñadirJuegoID = string.Empty;
	private string textoAñadirJuegoTier = string.Empty;

	private void TextoCambiaAñadirJuegoID(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			textoAñadirJuegoID = texto.Value.ToString().Trim();
		}
	}

	private void TextoCambiaAñadirJuegoTier(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			textoAñadirJuegoTier = texto.Value.ToString().Trim();
		}
	}

	private void ClickAñadirJuego(MouseEventArgs e)
	{
		if (string.IsNullOrEmpty(textoAñadirJuegoID) == false && string.IsNullOrEmpty(textoAñadirJuegoTier) == false)
		{
			global::Juegos.Juego juego = BaseDatos.Juegos.Buscar.UnJuego(textoAñadirJuegoID);

			if (juego != null)
			{
				Bundles2.BundleTier tier = new Bundles2.BundleTier()
				{
                    Posicion = int.Parse(textoAñadirJuegoTier)
                };

				Bundles2.BundleJuego bundleJuego = new Bundles2.BundleJuego()
				{
					DRM = global::Juegos.JuegoDRM.Steam,
                    JuegoId = juego.Id.ToString(),
					Imagen = juego.Imagenes.Header_460x215,
					Tier = tier
                };

				if (bundle.Juegos == null)
				{
					bundle.Juegos = new List<Bundles2.BundleJuego>();
				}

				bundle.Juegos.Add(bundleJuego);

				SqlConnection conexion = Herramientas.BaseDatos.Conectar();

				using (conexion)
				{
					BaseDatos.Bundles.Actualizar.Juegos(bundleId.ToString(), Newtonsoft.Json.JsonConvert.SerializeObject(bundle.Juegos), conexion);

					// global::Juegos.JuegoBundle bundleJuego2 = new global::Juegos.JuegoBundle()
					// {
					// 	BundleId = bundleId,
					// 	JuegoId = juego.Id,
					// 	Tier = tier,
					// 	DRM = global::Juegos.JuegoDRM.Steam,
					// 	Enlace = bundle.Enlace,
					// 	Nombre = bundle.NombreBundle,
					// 	Imagen = bundle.ImagenBundle,
					// 	FechaEmpieza = bundle.FechaEmpieza,
					// 	FechaTermina = bundle.FechaTermina,
					// 	Tipo = bundle.Tipo
					// };

     //                juego.Bundles.Add(bundleJuego2);

					// BaseDatos.Juegos.Actualizar.Bundles(juego, conexion);
				}
			}
		}
	}

	private string textoTiers = string.Empty;

	private void TextoCambiaTiers(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				BaseDatos.Bundles.Actualizar.Tiers(bundleId.ToString(), nuevoTexto, conexion);
			}
		}
	}
}
