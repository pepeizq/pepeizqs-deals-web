@using BaseDatos.Avisos
@using BaseDatos.Errores
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.Data.SqlClient
@using MimeKit

@attribute [StreamRendering(true)]

<style>
    .admin-boton-hover {
        margin: 0px;
        border: 0px;
        color: var(--colorTextoVisitado);
        background-color: transparent;
        line-height: 20px;
        text-decoration: none;
        vertical-align: middle;
        transition-duration: 0.4s;
    }

        .admin-boton-hover:hover {
            background-color: var(--fondoBotonPequeño);
            color: var(--colorTextoVisitado);
        }

    .admin-panel {
        height: 100%;
        width: 100%;
        left: 0;
        top: 0;
        overflow-x: auto;
        position: fixed;
        z-index: 1000;
        padding: 10px;
        background-color: var(--fondoOscuroTransparente);
    }

    .admin-lateral {
        color: var(--colorTexto);
        background-color: transparent;
        border: 0px;
        padding: 8px 20px;
        text-align: left;
    }

         .admin-lateral:hover {
                background-color: var(--fondoBotonPequeño);
                color: var(--colorTextoVisitado);
         }
</style>

<li class="nav-item" style="margin-right: 30px;">
    <button class="admin-boton-hover" @onmouseenter="(e => MostrarAdmin(e))" @onclick="(e => MostrarAdmin(e))">Admin @nuevosCorreosMensaje</button>
</li>

@if (mostrarAdmin == true)
{
    <div class="admin-panel">
        <button style="color: var(--colorTextoVisitado); background-color: transparent; border: 0px;" @onclick="(e => CerrarAdmin(e))">
            <i class="fa-solid fa-xmark" style="font-size: 40px;"></i>
        </button>

        <div style="display: flex; align-items: start; margin-top: 40px; width: 100%; font-size: 17px;">
            <div style="width: 15%;">
                <div class="perfil" style="padding: 10px 0px; border: 1px solid var(--fondoBoton);">
                    <a class="admin-lateral" href="https://win6052.site4now.net/stats/awstats.pl?config=1112749300&h=8d43503475c9993340908170c2f4b9da" style="text-decoration: none;">Visitas</a>
                    <button class="admin-lateral" @onclick="(e => MostrarCerrarCorreos(e))">Correos @nuevosCorreosMensaje2</button>
                    <button class="admin-lateral" @onclick="(e => MostrarCerrarAvisos(e))">Avisos</button>
                    <a class="admin-lateral" href="https://beta.pepeizqdeals.com/Admin/Tiendas" style="text-decoration: none;">Tiendas</a>
                    <a class="admin-lateral" href="https://beta.pepeizqdeals.com/Admin/Pendientes" style="text-decoration: none;">Pendientes @nuevosPendientesMensaje</a>
                    <button class="admin-lateral" @onclick="(e => MostrarCerrarErrores(e))">Errores @nuevosErroresMensaje</button>
                </div>

                <label style="margin-top: 40px; padding-left: 20px; padding-bottom: 15px;">Añadir</label>
                <div class="perfil" style="padding: 10px 0px; border: 1px solid var(--fondoBoton);">
                    <a class="admin-lateral" href="https://beta.pepeizqdeals.com/Admin/Anadir" style="text-decoration: none;">Juego</a>
                    <a class="admin-lateral" href="https://beta.pepeizqdeals.com/Admin/Noticias" style="text-decoration: none;">Noticias</a>
                    <a class="admin-lateral" href="https://beta.pepeizqdeals.com/Admin/Bundles" style="text-decoration: none;">Bundles</a>
                    <a class="admin-lateral" href="https://beta.pepeizqdeals.com/Admin/Gratis" style="text-decoration: none;">Gratis</a>
                    <a class="admin-lateral" href="https://beta.pepeizqdeals.com/Admin/Suscripciones" style="text-decoration: none;">Suscripciones</a>
                    <a class="admin-lateral" href="https://beta.pepeizqdeals.com/Admin/Sorteos" style="text-decoration: none;">Sorteos</a>
                </div>
            </div>

            <div style="width: 85%; padding-left: 40px; padding-right: 20px;">
                @if (mostrarErrores == true)
                {
                    <label style="padding-left: 20px; padding-bottom: 15px;">Errores @nuevosErroresMensaje</label>
                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton);">
                        <button @onclick="@(e => LimpiarErrores(e))" class="boton-pequeño" style="text-align: center; width: 200px;">Limpiar</button>
                        
                        <hr />

                        @foreach (var error in listaErrores)
                        {
                            <div style="display: flex; align-items: start; margin-top: 10px; margin-bottom: 10px;">
                                <div style="padding-left: 10px; padding-right: 10px;">
                                    <div>
                                        @error.Seccion
                                    </div>
                                    <div style="margin-top: 15px;">
                                        @error.Fecha
                                    </div>
                                </div>
                                <div style="padding-left: 10px; padding-right: 10px; width: 20%;">
                                    @error.Mensaje
                                </div>
                                <div style="padding-left: 10px; padding-right: 10px; width: 80%;">
                                    @error.Stacktrace
                                </div>
                            </div>

                            <hr />
                        }
                    </div>
                }

                @if (mostrarAvisos == true)
                {
                    <label style="padding-left: 20px; padding-bottom: 15px;">Avisos</label>
                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton);">
                        <div style="display: flex; align-items: center;">
                            <textarea @oninput="@(e => ActualizarAviso(e, "en"))" class="entrada-texto" style="height: 35px;" placeholder="EN">@avisoEn</textarea>
                        </div>

                        <div style="display: flex; align-items: center; margin-top: 20px;">
                            <textarea @oninput="@(e => ActualizarAviso(e, "es"))" class="entrada-texto" style="height: 35px;" placeholder="ES">@avisoEs</textarea>
                        </div>

                        <button class="boton-pequeño" style="padding: 10px 15px; max-width: 250px; margin-top: 30px;" @onclick="@(e => BorrarAviso(e))">
                            Borrar Aviso
                        </button>
                    </div>
                }

                @if (mostrarCorreos == true)
                {
                    <label style="padding-left: 2px; padding-bottom: 15px;">Correos</label>
                    <div class="perfil" style="padding: 10px; border: 1px solid var(--fondoBoton);">
                        @foreach (var correo in correos)
                        {
                            <div style="padding: 10px;">
                                <div>@correo.Subject</div>

                                @{
                                    string correoString = correo.HtmlBody;
                                    correoString = correoString.Replace("rgb(0,0,0)", "var(--colorTexto)");
                                    correoString = correoString.Replace("rgb(0, 0, 0)", "var(--colorTexto)");
                                    correoString = correoString.Replace("#000000", "var(--colorTexto)");
                                    correoString = correoString.Replace("#26282a", "var(--colorTexto)");

                                    MarkupString correoHtml = new MarkupString(correoString);
                                }

                                <div style="margin-top: 10px;">@correoHtml</div>

                                <textarea @oninput="@(e => ActualizarAviso(e, "en"))" class="entrada-texto" style="height: 35px; margin-top: 20px;" />

                                <button class="boton-pequeño" style="padding: 10px 15px; max-width: 250px; margin-top: 20px; margin-bottom: 20px;" @onclick="@(e => ResponderCorreo(e, correo))">
                                    Responder
                                </button>
                                <hr />
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {

    #nullable disable

    SqlConnection conexion = new SqlConnection();

    private List<MimeMessage> correos = new List<MimeMessage>();
    private int nuevosCorreosCantidad = 0;
    private string nuevosCorreosMensaje = string.Empty;
    private string nuevosCorreosMensaje2 = string.Empty;
    private int nuevosPendientesCantidad = 0;
    private string nuevosPendientesMensaje = string.Empty;
    private int nuevosErroresCantidad = 0;
    private string nuevosErroresMensaje = string.Empty;

    private bool mostrarAdmin = false;

    protected override void OnInitialized()
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            nuevosCorreosCantidad = int.Parse(BaseDatos.Tiendas.Admin.LeerDato(conexion, "correos"));

            if (nuevosCorreosCantidad > 0)
            {
                nuevosCorreosMensaje2 = "(" + nuevosCorreosCantidad.ToString() + ")";

                if (nuevosCorreosCantidad == 1)
                {
                    nuevosCorreosMensaje = "• 1 Nuevo Correo";
                }
                else if (nuevosCorreosCantidad > 1)
                {
                    nuevosCorreosMensaje = "• " + nuevosCorreosCantidad.ToString() + " Nuevos Correos";
                }
            }

            //----------------------------------

            nuevosPendientesCantidad = int.Parse(BaseDatos.Tiendas.Admin.LeerDato(conexion, "pendientes"));

            if (nuevosPendientesCantidad > 0)
            {
                nuevosPendientesMensaje = "(" + nuevosPendientesCantidad.ToString() + ")";
            }

            //----------------------------------

            nuevosErroresCantidad = int.Parse(BaseDatos.Tiendas.Admin.LeerDato(conexion, "errores"));

            if (nuevosErroresCantidad > 0)
            {
                nuevosErroresMensaje = "(" + nuevosErroresCantidad.ToString() + ")";
            }

            //----------------------------------

            Aviso aviso1 = BaseDatos.Avisos.Buscar.Ejecutar("en", conexion);

            if (aviso1 != null)
            {
                avisoEn = aviso1.Mensaje;
            }

            Aviso aviso2 = BaseDatos.Avisos.Buscar.Ejecutar("es", conexion);

            if (aviso2 != null)
            {
                avisoEs = aviso2.Mensaje;
            }
        }

    }

    private void MostrarAdmin(MouseEventArgs e)
    {
        mostrarAdmin = true;
    }

    private void CerrarAdmin(MouseEventArgs e)
    {
        mostrarAdmin = false;
    }

    private void CerrarPestañas()
    {
        mostrarAvisos = false;
        mostrarCorreos = false;
        mostrarErrores = false;
    }

    #region Errores

    private bool mostrarErrores = false;
    List<Error> listaErrores = new List<Error>();

    private void MostrarCerrarErrores(MouseEventArgs e)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        CerrarPestañas();

        if (mostrarErrores == true)
        {
            mostrarErrores = false;
        }
        else
        {
            mostrarErrores = true;

            listaErrores = BaseDatos.Errores.Buscar.Todos(conexion);

            nuevosErroresCantidad = listaErrores.Count;

            if (nuevosErroresCantidad > 0)
            {
                nuevosErroresMensaje = "(" + nuevosErroresCantidad.ToString() + ")";
            }
        }
    }

    private void LimpiarErrores(MouseEventArgs e)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            BaseDatos.Errores.Limpiar.Ejecutar(conexion);

            listaErrores = null;
            nuevosErroresCantidad = 0;
            nuevosErroresMensaje = null;
        }
    }

    #endregion

    #region Avisos

    private bool mostrarAvisos = false;
    private string avisoEn = string.Empty;
    private string avisoEs = string.Empty;

    private void MostrarCerrarAvisos(MouseEventArgs e)
    {
        CerrarPestañas();

        if (mostrarAvisos == true)
        {
            mostrarAvisos = false;
        }
        else
        {
            mostrarAvisos = true;
        }
    }

    private void ActualizarAviso(ChangeEventArgs texto, string idioma)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            BaseDatos.Avisos.Actualizar.Ejecutar(texto.Value.ToString().Trim(), idioma, conexion);
        }       
    }

    private void BorrarAviso(MouseEventArgs e)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            BaseDatos.Avisos.Actualizar.Ejecutar("", "en", conexion);
            BaseDatos.Avisos.Actualizar.Ejecutar("", "es", conexion);
        }
    }

    #endregion

    #region Correos

    private bool mostrarCorreos = false;

    private void MostrarCerrarCorreos(MouseEventArgs e)
    {
        CerrarPestañas();

        if (mostrarCorreos == true)
        {
            mostrarCorreos = false;
        }
        else
        {
            mostrarCorreos = true;

            correos = Herramientas.Correos.ComprobarNuevosCorreos();
        }
    }

    private void TextoRespuestaCorreo(ChangeEventArgs texto, string idioma)
    {

    }

    private void ResponderCorreo(MouseEventArgs e, MimeMessage correo)
    {
        MimeMessage respuesta = new MimeMessage();

        if (correo.ReplyTo.Count > 0)
        {
            respuesta.To.AddRange(correo.ReplyTo);
        }
        else if (correo.From.Count > 0)
        {
            respuesta.To.AddRange(correo.From);
        }
        else if (correo.Sender != null)
        {
            respuesta.To.Add(correo.Sender);
        }

        if (correo.Subject.StartsWith("Re:", StringComparison.OrdinalIgnoreCase) == false)
        {
            respuesta.Subject = "Re:" + correo.Subject;
        }        
        else
        {
            respuesta.Subject = correo.Subject;
        }       

        if (string.IsNullOrEmpty(correo.MessageId) == false)
        {
            respuesta.InReplyTo = correo.MessageId;

            foreach (var id in correo.References)
            {
                respuesta.References.Add(id);
            }

            respuesta.References.Add(correo.MessageId);
        }

        using (StringWriter cita = new StringWriter())
        {
            var enviar = correo.Sender ?? correo.From.Mailboxes.FirstOrDefault();

            cita.WriteLine("On {0}, {1} wrote:", correo.Date.ToString("f"), !string.IsNullOrEmpty(enviar.Name) ? enviar.Name : enviar.Address);

            using (var reader = new StringReader(correo.TextBody))
            {
                string linea;

                while ((linea = reader.ReadLine()) != null)
                {
                    cita.Write("> ");
                    cita.WriteLine(linea);
                }
            }

            respuesta.Body = new TextPart("plain")
            {
                Text = cita.ToString()
            };
        }

        Herramientas.Correos.EnviarCorreo(respuesta);
    }

    #endregion
}
