@using BaseDatos.Avisos
@using BaseDatos.Errores
@using BaseDatos.Pendientes
@using Bundles2
@using Gratis2
@using MailKit
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient
@using Microsoft.VisualBasic
@using Microsoft.Web.Administration
@using MimeKit
@using Noticias
@using Suscripciones2
@using pepeizqs_deals_web.Areas.Identity.Data
@using Tiendas2

@inject UserManager<Usuario> UserManager

<style>
    .admin-boton-hover {
        margin: 0px;
        border: 0px;
        color: var(--colorTextoVisitado);
        background-color: transparent;
        line-height: 20px;
        text-decoration: none;
        vertical-align: middle;
        transition-duration: 0.4s;
    }

        .admin-boton-hover:hover {
            background-color: var(--fondoBotonPequeño);
            color: var(--colorTextoVisitado);
        }

    .admin-panel {
        height: 100%;
        width: 100%;
        left: 0;
        top: 0;
        overflow-x: auto;
        position: fixed;
        z-index: 1000;
        padding: 10px;
        backdrop-filter: blur(15px);
    }

    .admin-lateral {
        color: var(--colorTexto);
        background-color: transparent;
        border: 0px;
        padding: 8px 20px;
        text-align: left;
    }

         .admin-lateral:hover {
                background-color: var(--fondoBotonPequeño);
                color: var(--colorTextoVisitado);
         }
</style>

<li class="nav-item" style="margin-right: 30px;">
    @{
        string nuevosCorreosMensaje = string.Empty;

        if (nuevosCorreosDeals > 0)
        {
            if (nuevosCorreosDeals == 1)
            {
                nuevosCorreosMensaje = "1 Nuevo Correo";
            }
            else if (nuevosCorreosDeals > 1)
            {
                nuevosCorreosMensaje = nuevosCorreosDeals.ToString() + " Nuevos Correos";
            }
        }
        else
        {
            if (nuevosCorreosApps > 0)
            {
                nuevosCorreosMensaje = "1 Nuevos Correo (Apps)";
            }
            else if (nuevosCorreosApps > 1)
            {
                nuevosCorreosMensaje = nuevosCorreosApps.ToString() + " Nuevos Correos (Apps)";
            }
        }
    }

    <button class="admin-boton-hover" @onmouseenter="(e => MostrarAdmin(e))" @onclick="(e => MostrarAdmin(e))">Admin @nuevosCorreosMensaje</button>
</li>

@if (mostrarAdmin == true)
{
    <div class="admin-panel">
        <div style="display: flex; align-items: end;">
            <div style="width: 15%;">
                <button style="color: var(--colorTextoVisitado); background-color: transparent; border: 0px;" @onclick="(e => CerrarAdmin(e))">
                    <i class="fa-solid fa-xmark" style="font-size: 40px;"></i>
                </button>
            </div>

            <div style="width: 85%; padding-left: 60px; padding-right: 20px;">
                <label style="font-size: 20px;">@titulo</label>
            </div>
        </div>

        <div style="display: flex; align-items: start; margin-top: 15px; width: 100%; font-size: 17px;">
            <div style="width: 15%;">
                <div class="perfil" style="padding: 10px 0px; border: 1px solid var(--fondoBoton);">
                    @if (nuevosErroresCantidad > 0)
                    {
                        <button class="admin-lateral" @onclick="(e => MostrarCerrarErrores(e))">Errores @nuevosErroresMensaje</button>
                    }

                    @if (nuevosCorreosDeals > 0)
                    {
                        string mensajeCorreosDeals = "(" + nuevosCorreosDeals.ToString() + ")";

                        <button class="admin-lateral" @onclick="(e => MostrarCerrarEnlaces(e))">Correos Deals @mensajeCorreosDeals</button>
                    }

                    @if (nuevosCorreosApps > 0)
                    {
                        string mensajeCorreosApps = "(" + nuevosCorreosApps.ToString() + ")";

                        <button class="admin-lateral" @onclick="(e => MostrarCerrarEnlaces(e))">Correos Apps @mensajeCorreosApps</button>
                    }

                    @if (nuevosPendientesCantidad > 0)
                    {
                        <button class="admin-lateral" @onclick="(e => MostrarCerrarPendientes(e))">Pendientes @nuevosPendientesMensaje</button>
                    }

                    @if (nuevasSolicitudesCantidad > 0)
                    {
                        <button class="admin-lateral" @onclick="(e => MostrarCerrarSolicitudes(e))">Solicitudes @nuevasSolicitudesMensaje</button>                        
                    }

                    <button class="admin-lateral" @onclick="(e => MostrarCerrarEnlaces(e))">Enlaces</button>
                    <button class="admin-lateral" @onclick="(e => MostrarCerrarAvisos(e))">Avisos</button>
                    <button class="admin-lateral" @onclick="(e => MostrarCerrarTiendas(e))">Tiendas</button>
                    <button class="admin-lateral" @onclick="(e => MostrarCerrarDivisas(e))">Divisas</button>                
                    <button class="admin-lateral" @onclick="(e => MostrarCerrarDLCs(e))">DLCs @nuevosDLCsMensaje</button>                   
                </div>

                <label style="margin-top: 40px; padding-left: 20px; padding-bottom: 15px;">Añadir</label>
                <div class="perfil" style="padding: 10px 0px; border: 1px solid var(--fondoBoton);">
                    <button class="admin-lateral" @onclick="(e => MostrarCerrarAñadir(e))">Juego</button>
                    <button class="admin-lateral" @onclick="(e => MostrarCerrarNoticias(e))">Noticias</button>
                    <button class="admin-lateral" @onclick="(e => MostrarCerrarBundles(e))">Bundles</button>
                    <button class="admin-lateral" @onclick="(e => MostrarCerrarGratis(e))">Gratis</button>
                    <button class="admin-lateral" @onclick="(e => MostrarCerrarSuscripciones(e))">Suscripciones</button>
                    <button class="admin-lateral" @onclick="(e => MostrarCerrarSorteos(e))">Sorteos</button>
                </div>
            </div>

            <div style="width: 85%; padding-left: 40px; padding-right: 20px;">
                @if (mostrarEnlaces == true)
                {
                    <Enlaces correosDeals="nuevosCorreosDeals" correosApps="nuevosCorreosApps"/>
                }

                @if (mostrarErrores == true)
                {
                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton);">
                        <button @onclick="@(e => LimpiarErrores(e))" class="boton-pequeño" style="text-align: center; width: 200px;">Limpiar</button>
                        
                        @if (listaErrores != null)
                        {
                            if (listaErrores.Count > 0)
                            {
                                <hr />

                                foreach (var error in listaErrores)
                                {
                                    <div style="display: flex; align-items: start; margin-top: 10px; margin-bottom: 10px;">
                                        <div style="padding-left: 10px; padding-right: 10px;">
                                            <div>
                                                @error.Seccion
                                            </div>
                                            <div style="margin-top: 15px;">
                                                @error.Fecha
                                            </div>
                                        </div>
                                        <div style="padding-left: 10px; padding-right: 10px; width: 20%;">
                                            @error.Mensaje
                                        </div>
                                        <div style="padding-left: 10px; padding-right: 10px; width: 80%;">
                                            @error.Stacktrace
                                        </div>
                                    </div>

                                    <hr />
                                }
                            }
                        }                       
                    </div>
                }

                @if (mostrarAvisos == true)
                {
                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton);">
                        <div style="display: flex; align-items: center;">
                            <textarea @oninput="@(e => CambiarAvisoEn(e))" class="entrada-texto" style="height: 35px;" placeholder="EN">@avisoEn</textarea>
                        </div>

                        <div style="display: flex; align-items: center; margin-top: 20px;">
                            <textarea @oninput="@(e => CambiarAvisoEs(e))" class="entrada-texto" style="height: 35px;" placeholder="ES">@avisoEs</textarea>
                        </div>

                        <div style="display: flex; align-items: center; margin-top: 20px;">
                            <textarea @oninput="@(e => CambiarAvisoEnlace(e))" class="entrada-texto" style="height: 35px;" placeholder="Enlace">@avisoEnlace</textarea>
                        </div>

                        <div style="display: flex; align-items: center; margin-top: 30px;">
                            <button class="boton-pequeño" style="padding: 10px 15px; max-width: 250px; margin-right: 30px;" @onclick="@(e => ActualizarAviso(e))">
                                Actualizar
                            </button>

                            <button class="boton-pequeño" style="padding: 10px 15px; max-width: 250px;" @onclick="@(e => BorrarAviso(e))">
                                Borrar
                            </button>
                        </div>
                    </div>
                }

                @if (mostrarSolicitudes == true)
                {
                    if (listaSolicitudes.Count > 0)
                    {
                        <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton);">
                            @foreach (var solicitud in listaSolicitudes)
                            {
                                <div style="display: flex; align-items: center;">
                                    <a href="https://steamcommunity.com/groups/pepeizqdeals2/joinRequestsManage" target="_blank" style="margin-right: 20px;">Grupo Steam</a>
                                    <a href="https://www.humblebundle.com/accounting/partner/sales_reports" target="_blank">Informe Humble</a>                                  
                                </div>
                                <hr/>
                                <div style="display: flex; align-items: center;">
                                    <div style="display: flex; align-items: center; width: 100%;">
                                        <img src="@solicitud.AvatarSteam" style="width: 40px; height: 40px; margin-right: 20px;" />

                                        <div style="width: 50%; padding-right: 20px;">
                                            <label>@solicitud.NicknameSteam</label><br />
                                            <label style="margin-top: 10px; font-size: 13px;">@solicitud.UsuarioSteam</label>
                                        </div>

                                        <div style="width: 33%; padding-right: 20px;">
                                            <label>@solicitud.Correo</label><br />
                                            <label style="margin-top: 10px; font-size: 13px;">@solicitud.IdUsuario</label>
                                        </div>
                                    </div>

                                    <button class="boton-pequeño" style="padding: 10px 15px; max-width: 120px; width: auto; margin-right: 20px;" @onclick="@(e => AprobarSolicitud(e, solicitud))">
                                        <i class="fa-solid fa-check"></i>
                                    </button>

                                    <button class="boton-pequeño" style="padding: 10px 15px; max-width: 120px; width: auto;" @onclick="@(e => BorrarSolicitud(e, solicitud))">
                                        <i class="fa-solid fa-xmark"></i>
                                    </button>
                                </div>
                            }
                        </div>
                    }
                }

                @if (mostrarTiendas == true)
                {
                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton);">
                        <label>@TiendasInfo()</label>
                        <hr/>
                        <div>
                            @foreach (Tienda tienda in TiendasCargar.GenerarListado())
                            {
                                @if (tienda.AdminEnseñar == true)
                                {
                                    <div style="margin-top: 15px; margin-bottom: 15px;">
                                        @if (tienda.AdminInteractuar == true)
                                        {
                                            <button @onclick="(e => ClickearTienda(e, tienda.Id))" class="boton-pequeño" style="height: fit-content; padding: 20px 40px;">
                                                <div style="display: flex; align-items: center;">
                                                    <div style="width: 40%;">
                                                        <img src="@tienda.Imagen300x80" style="height: 40px;" />
                                                    </div>

                                                    <div class="admin-tiempohace" style="width: 60%; padding-left: 30px; text-align: right;">@BaseDatos.Tiendas.Admin.ComprobacionMensaje(tienda.Id)</div>
                                                </div>
                                            </button>
                                        }
                                        else
                                        {
                                            <div style="display: flex; align-items: center; height: fit-content; padding: 20px 40px;">
                                                <div style="width: 40%;">
                                                    <img src="@tienda.Imagen300x80" style="height: 40px;" />
                                                </div>

                                                <div class="admin-tiempohace" style="width: 60%; padding-left: 30px; text-align: right;">@BaseDatos.Tiendas.Admin.ComprobacionMensaje(tienda.Id)</div>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                        </div>
                        
                    </div>
                }

                @if (mostrarDivisas == true)
                {
                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton);">
                        <div>
                            <button @onclick="@(e => ActualizarDivisas(e))" class="boton-pequeño" style="text-align: center; width: 200px;">Actualizar</button>
                        </div>
                        <div style="padding-top: 20px;">
                            <div class="admin-tiempohace">@Herramientas.Divisas.MensajeDolar()</div>
                            <div class="admin-tiempohace">@Herramientas.Divisas.MensajeLibra()</div>
                        </div>
                    </div>
                }

                @if (mostrarDLCs == true)
                {
                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton);">
                        <button @onclick="(async () => await BuscarDlcMaestro())" class="boton-pequeño" style="padding: 10px 15px; width: 250px;">
                            Buscar Maestro
                        </button>

                        @if (DLCs.Count > 0)
                        {
                            <div style="margin-top: 30px;">
                                <a href="/game/@DLCs[posicionDLC].Id.ToString()" target="_blank">
                                    <img src="@DLCs[posicionDLC].Imagenes.Header_460x215" style="width: 230px; height: 107px;" />
                                </a>

                                <label style="margin-left: 20px;">@DLCs[posicionDLC].Nombre</label>
                            </div>
                        }
                    </div>
                }

                @if (mostrarPendientes == true)
                {
                    <div class="perfil" style="display: flex; justify-content: space-between; padding: 20px; border: 1px solid var(--fondoBoton); flex-direction: row;">
                        <div style="min-width: 300px; margin: -10px 0px;">
                            @foreach (var pendiente in pendientes)
                            {
                                if (pendiente.Pendientes.Count > 0)
                                {
                                    <button @onclick="@(e => ClickearTiendaPendientes(e, pendiente.Tienda.Id, pendiente.Tienda.Nombre))" class="boton-pequeño" style="margin: 10px 0px; display: block;">
                                        <img src="@pendiente.Tienda.ImagenIcono" style="margin: 0px 8px; height: 16px; width: 16px;" /> @pendiente.Tienda.Nombre (@pendiente.Pendientes.Count)
                                    </button>
                                }
                            }
                        </div>

                        <div style="width: 100%; padding-left: 50px;">
                            <div style="margin-bottom: 20px;">
                                Tienda: @tiendaElegidaPendiente
                            </div>

                            <div style="display: flex; justify-content: space-between;">
                                <div style="width: 30%;">
                                    <a href="@enlacePendiente" target="_blank" style="text-decoration: none;"><img src="@imagenPendiente" style="width: 100%;" /></a>
                                </div>

                                <div style="width: 70%; margin-left: 20px;">
                                    <div style="margin-bottom: 20px;">
                                        <a href="@enlacePendiente" target="_blank" style="text-decoration: none;">@nombrePendiente</a>
                                    </div>

                                    <div>
                                        <textarea @oninput="TextoCambiaPendientes" class="entrada-texto" style="margin: 10px 0px; width: 100%;" value="@idsPendiente" rows="1" />
                                    </div>

                                    <div style="display: flex; align-items: center; margin: 20px 0px;">
                                        <div>
                                            <button @onclick="@(e => ClickearDescartarPendientes(e, @enlacePendiente))" class="boton-pequeño" style="width: 130px; text-align: center;">Descartar</button>
                                        </div>

                                        <div>
                                            <button @onclick="@(e => ClickearBuscarPendientes(e, @nombrePendiente))" class="boton-pequeño" style="margin-left: 20px; width: 130px; text-align: center;">Buscar</button>
                                        </div>

                                        <div>
                                            <button @onclick="@(e => ClickearActualizarPendientes(e, @enlacePendiente))" class="boton-pequeño" style="margin-left: 20px; width: 130px; text-align: center;">Actualizar</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div style="margin-top: 40px;">
                                <input type="text" @oninput="TextoCambiarBuscadorPendientes" class="entrada-texto" />

                                @if (juegosBuscadorPendientes != null)
                                {
                                    @if (juegosBuscadorPendientes.Count > 0)
                                    {
                                        <div>
                                            @foreach (var juego in juegosBuscadorPendientes)
                                            {
                                                <hr />

                                                <div class="perfil-flexible-centrado" style="flex-wrap: wrap;">
                                                    <div style="width: 150px; min-width: 150px;">
                                                        <button @onclick="@(e => ClickearIdPendientes(e, @juego.Id.ToString()))" class="boton-pequeño" style="text-align: center; height: 65px;">
                                                            Añadir ID

                                                            <div style="font-size: 13px; margin-top: 5px;">
                                                                @juego.Id
                                                            </div>
                                                        </button>
                                                    </div>

                                                    <div style="padding-left: 15px;">
                                                        <a href="/game/@juego.Id.ToString()" target="_blank">
                                                            <img src="@juego.Imagenes.Header_460x215" style="width: 230px; height: 112px;" />
                                                        </a>
                                                    </div>

                                                    <div style="width: 100%; padding: 5px 10px; flex: 1;">
                                                        @juego.Nombre
                                                    </div>

                                                    <div class="admin-busqueda-juego-derecha">
                                                        <button @onclick="@(e => ClickearBorrarPendientes(e, @juego.Id.ToString()))" class="boton-pequeño-peligro">Borrar</button>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <label style="margin-top: 20px; margin-left: 10px;">No hay resultados</label>
                                    }
                                }
                                else
                                {
                                    <label style="margin-top: 20px; margin-left: 10px;">No hay resultados</label>
                                }
                            </div>
                        </div>
                    </div>
                }

                @if (mostrarAñadir == true)
                {
                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton);">
                        <div class="perfil-flexible-centrado">
                            <label>Precarga</label>

                            <div class="admin-busqueda">
                                <input class="entrada-texto" value="@enlacePrecargaAñadir" @onchange="@(e => CambiarEnlacePrecarga(e))" />
                            </div>
                        </div>
                    </div>

                    @if (juegoAñadir == null)
                    {
                        <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                            <label class="texto-info-entrada">Datos</label>
                            <hr />

                            <div style="display: flex; align-items: center; margin-top: 20px;">
                                <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                    <label>Nombre</label>
                                </div>
                                <div style="width: 80%;">
                                    <input class="entrada-texto" @onchange="@(e => CambiarVacioNombre(e))" />
                                </div>
                            </div>
                        </div>

                        <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                            <label class="texto-info-entrada">Imágenes</label>
                            <hr />

                            <div style="display: flex; align-items: start; margin-top: 20px;">
                                <div style="width: 20%; padding: 5px 30px; text-align: right;">
                                    <label>Header (460x215)</label>
                                </div>
                                <div style="width: 80%;">
                                    <input class="entrada-texto" value="@vacioHeader_460x215" @onchange="@(e => CambiarVacioHeader_460x215(e))" />
                                    <img src="@vacioHeader_460x215" style="max-width: 300px; max-height: 300px; margin-top: 10px;" />
                                </div>
                            </div>

                            <div style="display: flex; align-items: start; margin-top: 20px;">
                                <div style="width: 20%; padding: 5px 30px; text-align: right;">
                                    <label>Capsule (231x87)</label>
                                </div>
                                <div style="width: 80%;">
                                    <input class="entrada-texto" value="@vacioCapsule_231x87" @onchange="@(e => CambiarVacioCapsule_231x87(e))" />
                                    <img src="@vacioCapsule_231x87" style="max-width: 300px; max-height: 300px; margin-top: 10px;" />
                                </div>
                            </div>

                            <div style="display: flex; align-items: start; margin-top: 20px;">
                                <div style="width: 20%; padding: 5px 30px; text-align: right;">
                                    <label>Logo</label>
                                </div>
                                <div style="width: 80%;">
                                    <input class="entrada-texto" value="@vacioLogo" @onchange="@(e => CambiarVacioLogo(e))" />
                                    <img src="@vacioLogo" style="max-width: 300px; max-height: 300px; margin-top: 10px;" />
                                </div>
                            </div>

                            <div style="display: flex; align-items: start; margin-top: 20px;">
                                <div style="width: 20%; padding: 5px 30px; text-align: right;">
                                    <label>Library (600x900)</label>
                                </div>
                                <div style="width: 80%;">
                                    <input class="entrada-texto" value="@vacioLibrary_600x900" @onchange="@(e => CambiarVacioLibrary_600x900(e))" />
                                    <img src="@vacioLibrary_600x900" style="max-width: 300px; max-height: 300px; margin-top: 10px;" />
                                </div>
                            </div>

                            <div style="display: flex; align-items: start; margin-top: 20px;">
                                <div style="width: 20%; padding: 5px 30px; text-align: right;">
                                    <label>Library (1920x620)</label>
                                </div>
                                <div style="width: 80%;">
                                    <input class="entrada-texto" value="@vacioLibrary_1920x620" @onchange="@(e => CambiarVacioLibrary_1920x620(e))" />
                                    <img src="@vacioLibrary_1920x620" style="max-width: 300px; max-height: 300px; margin-top: 10px;" />
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                            <label class="texto-info-entrada">Datos</label>
                            <hr />

                            @if (string.IsNullOrEmpty(juegoAñadir.Nombre) == false)
                            {
                                <div style="display: flex; align-items: center; margin-top: 20px;">
                                    <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                        <label>Nombre</label>
                                    </div>
                                    <div style="width: 80%;">
                                        <input class="entrada-texto" value="@juegoAñadir.Nombre" @onchange="@(e => CambiarNombre(e))" />
                                    </div>
                                </div>
                            }

                            @if (juegoAñadir.IdSteam > 0)
                            {
                                <div style="display: flex; align-items: center; margin-top: 20px;">
                                    <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                        <label>ID Steam</label>
                                    </div>
                                    <div style="width: 80%;">
                                        <input class="entrada-texto" value="@juegoAñadir.IdSteam" @onchange="@(e => CambiarIdSteam(e))" />
                                    </div>
                                </div>
                            }

                            @if (juegoAñadir.IdGog > 0)
                            {
                                <div style="display: flex; align-items: center; margin-top: 20px;">
                                    <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                        <label>ID GOG</label>
                                    </div>
                                    <div style="width: 80%;">
                                        <input class="entrada-texto" value="@juegoAñadir.IdGog" @onchange="@(e => CambiarIdGog(e))" />
                                    </div>
                                </div>
                            }

                            <div style="display: flex; align-items: center; margin-top: 20px;">
                                <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                    <label>Tipo</label>
                                </div>
                                <div style="width: 80%;">
                                    <div class="opciones-combobox">
                                        <select @onchange="@(e => CambiarTipo(e))" value="@juegoAñadir.Tipo">
                                            @foreach (var tipo in Juegos.JuegoTipos.CargarListado())
                                            {
                                                <option value="@tipo">@tipo</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>

                            @if (string.IsNullOrEmpty(juegoAñadir.FechaSteamAPIComprobacion.ToString()) == false)
                            {
                                if (juegoAñadir.FechaSteamAPIComprobacion.Year > 2022)
                                {
                                    <div style="display: flex; align-items: center; margin-top: 20px;">
                                        <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                            <label style="font-size: 12px;">Fecha Comprobación API Steam</label>
                                        </div>
                                        <div style="width: 80%;">
                                            <input class="entrada-texto" value="@juegoAñadir.FechaSteamAPIComprobacion" @onchange="@(e => CambiarFechaSteamAPIComprobacion(e))" />
                                        </div>
                                    </div>
                                }
                            }

                            @if (juegoAñadir.IdSteam > 0 && juegoAñadir.Tipo == Juegos.JuegoTipo.DLC)
                            {
                                <div style="display: flex; align-items: center; margin-top: 20px;">
                                    <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                        <label>Maestro</label>
                                    </div>
                                    <div style="width: 80%;">
                                        <input class="entrada-texto" value="@juegoAñadir.Maestro" @onchange="@(e => CambiarMaestro(e))" />
                                    </div>
                                </div>
                            }

                            @if (juegoAñadir.IdSteam > 0 && juegoAñadir.Tipo == Juegos.JuegoTipo.Game)
                            {
                                <div style="display: flex; align-items: center; margin-top: 20px;">
                                    <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                        <label>FreeToPlay</label>
                                    </div>
                                    <div style="width: 80%;">
                                        <input class="entrada-texto" value="@juegoAñadir.FreeToPlay" @onchange="@(e => CambiarFreeToPlay(e))" />
                                    </div>
                                </div>
                            }

                            @if (string.IsNullOrEmpty(juegoAñadir.Nombre) == false)
                            {
                                <div style="display: flex; align-items: center; margin-top: 20px;">
                                    <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                        <label>Mayor Edad</label>
                                    </div>
                                    <div style="width: 80%;">
                                        <input class="entrada-texto" value="@juegoAñadir.MayorEdad" @onchange="@(e => CambiarMayorEdad(e))" />
                                    </div>
                                </div>
                            }
                        </div>

                        @if (juegoAñadir.PrecioActualesTiendas != null)
                        {
                            if (juegoAñadir.PrecioActualesTiendas.Count > 0)
                            {
                                int i = 0;

                                foreach (Juegos.JuegoPrecio precio in juegoAñadir.PrecioActualesTiendas)
                                {
                                    i += 1;

                                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                                        <label class="texto-info-entrada">Precio @i.ToString()</label>
                                        <hr />

                                        <div style="display: flex; align-items: center; margin-top: 20px;">
                                            <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                                <label>Descuento</label>
                                            </div>
                                            <div style="width: 80%;">
                                                <input class="entrada-texto" value="@precio.Descuento" @onchange="@(e => CambiarDescuento(e, precio))" />
                                            </div>
                                        </div>

                                        <div style="display: flex; align-items: center; margin-top: 20px;">
                                            <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                                <label>DRM</label>
                                            </div>
                                            <div style="width: 80%;">
                                                <input class="entrada-texto" value="@precio.DRM" @onchange="@(e => CambiarDRM(e, precio))" />
                                            </div>
                                        </div>

                                        <div style="display: flex; align-items: center; margin-top: 20px;">
                                            <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                                <label>Precio</label>
                                            </div>
                                            <div style="width: 80%;">
                                                <input class="entrada-texto" value="@precio.Precio" @onchange="@(e => CambiarPrecio(e, precio))" />
                                            </div>
                                        </div>

                                        <div style="display: flex; align-items: center; margin-top: 20px;">
                                            <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                                <label>Moneda</label>
                                            </div>
                                            <div style="width: 80%;">
                                                <input class="entrada-texto" value="@precio.Moneda" @onchange="@(e => CambiarMoneda(e, precio))" />
                                            </div>
                                        </div>

                                        <div style="display: flex; align-items: center; margin-top: 20px;">
                                            <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                                <label>Fecha Detectado</label>
                                            </div>
                                            <div style="width: 80%;">
                                                <input class="entrada-texto" value="@precio.FechaDetectado" @onchange="@(e => CambiarFechaDetectado(e, precio))" />
                                            </div>
                                        </div>

                                        <div style="display: flex; align-items: center; margin-top: 20px;">
                                            <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                                <label>Enlace</label>
                                            </div>
                                            <div style="width: 80%;">
                                                <input class="entrada-texto" value="@precio.Enlace" @onchange="@(e => CambiarEnlace(e, precio))" />
                                            </div>
                                        </div>

                                        <div style="display: flex; align-items: center; margin-top: 20px;">
                                            <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                                <label>Tienda</label>
                                            </div>
                                            <div style="width: 80%;">
                                                <input class="entrada-texto" value="@precio.Tienda" @onchange="@(e => CambiarTienda(e, precio))" />
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        }

                        @if (juegoAñadir.Imagenes != null)
                        {
                            <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                                <label class="texto-info-entrada">Imágenes</label>
                                <hr />

                                @if (juegoAñadir.Imagenes.Header_460x215 != null)
                                {
                                    <div style="display: flex; align-items: start; margin-top: 20px;">
                                        <div style="width: 20%; padding: 5px 30px; text-align: right;">
                                            <label>Header (460x215)</label>
                                        </div>
                                        <div style="width: 80%;">
                                            <input class="entrada-texto" value="@juegoAñadir.Imagenes.Header_460x215" @onchange="@(e => CambiarHeader_460x215(e))" />
                                            <img src="@juegoAñadir.Imagenes.Header_460x215" style="max-width: 300px; max-height: 300px; margin-top: 10px;" />
                                        </div>
                                    </div>
                                }

                                @if (juegoAñadir.Imagenes.Capsule_231x87 != null)
                                {
                                    <div style="display: flex; align-items: start; margin-top: 20px;">
                                        <div style="width: 20%; padding: 5px 30px; text-align: right;">
                                            <label>Capsule (231x87)</label>
                                        </div>
                                        <div style="width: 80%;">
                                            <input class="entrada-texto" value="@juegoAñadir.Imagenes.Capsule_231x87" @onchange="@(e => CambiarCapsule_231x87(e))" />
                                            <img src="@juegoAñadir.Imagenes.Capsule_231x87" style="max-width: 300px; max-height: 300px; margin-top: 10px;" />
                                        </div>
                                    </div>
                                }

                                @if (juegoAñadir.Imagenes.Logo != null)
                                {
                                    <div style="display: flex; align-items: start; margin-top: 20px;">
                                        <div style="width: 20%; padding: 5px 30px; text-align: right;">
                                            <label>Logo</label>
                                        </div>
                                        <div style="width: 80%;">
                                            <input class="entrada-texto" value="@juegoAñadir.Imagenes.Logo" @onchange="@(e => CambiarLogo(e))" />
                                            <img src="@juegoAñadir.Imagenes.Logo" style="max-width: 300px; max-height: 300px; margin-top: 10px;" />
                                        </div>
                                    </div>
                                }

                                @if (juegoAñadir.Imagenes.Library_600x900 != null)
                                {
                                    <div style="display: flex; align-items: start; margin-top: 20px;">
                                        <div style="width: 20%; padding: 5px 30px; text-align: right;">
                                            <label>Library (600x900)</label>
                                        </div>
                                        <div style="width: 80%;">
                                            <input class="entrada-texto" value="@juegoAñadir.Imagenes.Library_600x900" @onchange="@(e => CambiarLibrary_600x900(e))" />
                                            <img src="@juegoAñadir.Imagenes.Library_600x900" style="max-width: 300px; max-height: 300px; margin-top: 10px;" />
                                        </div>
                                    </div>
                                }

                                @if (juegoAñadir.Imagenes.Library_1920x620 != null)
                                {
                                    <div style="display: flex; align-items: start; margin-top: 20px;">
                                        <div style="width: 20%; padding: 5px 30px; text-align: right;">
                                            <label>Library (1920x620)</label>
                                        </div>
                                        <div style="width: 80%;">
                                            <input class="entrada-texto" value="@juegoAñadir.Imagenes.Library_1920x620" @onchange="@(e => CambiarLibrary_1920x620(e))" />
                                            <img src="@juegoAñadir.Imagenes.Library_1920x620" style="max-width: 300px; max-height: 300px; margin-top: 10px;" />
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                        @if (juegoAñadir.Caracteristicas != null)
                        {
                            <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                                <label class="texto-info-entrada">Características</label>
                                <hr />

                                @if (string.IsNullOrEmpty(juegoAñadir.Caracteristicas.Windows.ToString()) == false)
                                {
                                    <div style="display: flex; align-items: center; margin-top: 20px;">
                                        <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                            <label>Windows</label>
                                        </div>
                                        <div style="width: 80%;">
                                            <input class="entrada-texto" value="@juegoAñadir.Caracteristicas.Windows.ToString()" @onchange="@(e => CambiarWindows(e))" />
                                        </div>
                                    </div>
                                }

                                @if (string.IsNullOrEmpty(juegoAñadir.Caracteristicas.Mac.ToString()) == false)
                                {
                                    <div style="display: flex; align-items: center; margin-top: 20px;">
                                        <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                            <label>Mac</label>
                                        </div>
                                        <div style="width: 80%;">
                                            <input class="entrada-texto" value="@juegoAñadir.Caracteristicas.Mac.ToString()" @onchange="@(e => CambiarMac(e))" />
                                        </div>
                                    </div>
                                }

                                @if (string.IsNullOrEmpty(juegoAñadir.Caracteristicas.Linux.ToString()) == false)
                                {
                                    <div style="display: flex; align-items: center; margin-top: 20px;">
                                        <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                            <label>Linux</label>
                                        </div>
                                        <div style="width: 80%;">
                                            <input class="entrada-texto" value="@juegoAñadir.Caracteristicas.Linux.ToString()" @onchange="@(e => CambiarLinux(e))" />
                                        </div>
                                    </div>
                                }

                                @if (juegoAñadir.Caracteristicas.Desarrolladores != null)
                                {
                                    if (juegoAñadir.Caracteristicas.Desarrolladores.Count > 0)
                                    {
                                        <div style="display: flex; align-items: start; margin-top: 20px;">
                                            <div style="width: 20%; padding: 5px 30px; text-align: right;">
                                                <label>Desarrolladores</label>
                                            </div>
                                            <div style="width: 80%;">
                                                @{
                                                    int i = 0;

                                                    foreach (var desarrollador in juegoAñadir.Caracteristicas.Desarrolladores)
                                                    {
                                                        <input class="entrada-texto" value="@desarrollador" @onchange="@(e => CambiarDesarrollador(e, i))" />
                                                        i += 1;
                                                    }
                                                }
                                            </div>
                                        </div>
                                    }
                                }

                                @if (juegoAñadir.Caracteristicas.Publishers != null)
                                {
                                    if (juegoAñadir.Caracteristicas.Publishers.Count > 0)
                                    {
                                        <div style="display: flex; align-items: start; margin-top: 20px;">
                                            <div style="width: 20%; padding: 5px 30px; text-align: right;">
                                                <label>Publishers</label>
                                            </div>
                                            <div style="width: 80%;">
                                                @{
                                                    int i = 0;

                                                    foreach (var publisher in juegoAñadir.Caracteristicas.Publishers)
                                                    {
                                                        <input class="entrada-texto" value="@publisher" @onchange="@(e => CambiarPublisher(e, i))" />
                                                        i += 1;
                                                    }
                                                }
                                            </div>
                                        </div>
                                    }
                                }

                                @if (string.IsNullOrEmpty(juegoAñadir.Caracteristicas.Descripcion) == false)
                                {
                                    <div style="display: flex; align-items: start; margin-top: 20px;">
                                        <div style="width: 20%; padding: 5px 30px; text-align: right;">
                                            <label>Descripción</label>
                                        </div>
                                        <div style="width: 80%;">
                                            <textarea class="entrada-texto" style="height: 4em;" value="@juegoAñadir.Caracteristicas.Descripcion" @onchange="@(e => CambiarDescripcion(e))" />
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                        @if (juegoAñadir.Media != null)
                        {
                            <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                                <label class="texto-info-entrada">Media</label>
                                <hr />

                                @if (string.IsNullOrEmpty(juegoAñadir.Media.Video) == false)
                                {
                                    <div style="display: flex; align-items: center; margin-top: 20px;">
                                        <div style="width: 20%; padding: 0px 30px; text-align: right;">
                                            <label>Video</label>
                                        </div>
                                        <div style="width: 80%;">
                                            <input class="entrada-texto" value="@juegoAñadir.Media.Video" @onchange="@(e => CambiarVideo(e))" />
                                        </div>
                                    </div>
                                }

                                @if (juegoAñadir.Media.Capturas != null)
                                {
                                    if (juegoAñadir.Media.Capturas.Count > 0)
                                    {
                                        int i = 0;
                                        foreach (var captura in juegoAñadir.Media.Capturas)
                                        {
                                            i += 1;

                                            <div style="display: flex; align-items: start; margin-top: 20px;">
                                                <div style="width: 20%; padding: 5px 30px; text-align: right;">
                                                    <label>Captura @i.ToString()</label>
                                                </div>
                                                <div style="width: 80%;">
                                                    <input class="entrada-texto" value="@captura" @onchange="@(e => CambiarCaptura(e, i))" />
                                                    <img src="@captura" style="max-width: 300px; max-height: 300px; margin-top: 10px;" />
                                                </div>
                                            </div>
                                        }
                                    }
                                }

                                @if (juegoAñadir.Media.Miniaturas != null)
                                {
                                    if (juegoAñadir.Media.Miniaturas.Count > 0)
                                    {
                                        int i = 0;
                                        foreach (var miniatura in juegoAñadir.Media.Miniaturas)
                                        {
                                            i += 1;

                                            <div style="display: flex; align-items: start; margin-top: 20px;">
                                                <div style="width: 20%; padding: 5px 30px; text-align: right;">
                                                    <label>Miniatura @i.ToString()</label>
                                                </div>
                                                <div style="width: 80%;">
                                                    <input class="entrada-texto" value="@miniatura" @onchange="@(e => CambiarMiniatura(e, i))" />
                                                    <img src="@miniatura" style="max-width: 200px; max-height: 200px; margin-top: 10px;" />
                                                </div>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                        }
                    }

                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                        <div style="width: 25%;">
                            <button class="boton" @onclick="@(e => ClickearAñadir(e))">Añadir</button>
                        </div>
                    </div>
                }

                @if (mostrarNoticias == true)
                {
                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton);">
                        <div class="opciones-combobox" style="width: 33%;">
                            <select @onchange="@(e => CambiarNoticiaTipo(e))">
                                @foreach (global::Noticias.NoticiaTipo tipo in global::Noticias.NoticiasCargar.CargarNoticiasTipo())
                                {
                                    <option value="@tipo">@tipo</option>
                                }
                            </select>
                        </div>
                    </div>

                    @if (noticiaTipoSeleccionada == global::Noticias.NoticiaTipo.Bundles.ToString())
                    {
                        <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                            <div class="opciones-combobox" style="width: 33%;">
                                <select @onchange="@(e => CambiarBundleNoticias(e))">
                                    @foreach (Bundles2.Bundle bundle in BundlesCargar.GenerarListado())
                                    {
                                        <option value="@bundle.Tipo">@bundle.NombreTienda</option>
                                    }
                                </select>
                            </div>

                            @if (bundleSeleccionadoNoticias != null)
                            {
                                <div style="margin-top: 20px;">
                                    @foreach (var bundle in BaseDatos.Bundles.Buscar.UnTipo(bundleSeleccionadoNoticias, Herramientas.Tiempo.Actual))
                                    {
                                        <button @onclick="@(e => ClickearBundleNoticias(e, bundle.Id))" class="boton-pequeño" style="margin: 10px 0px;">
                                            <div style="display: flex; align-items: center;">
                                                <img src="@BundlesCargar.DevolverBundle(bundle.Tipo).ImagenTienda" style="width: 12%; margin: 10px;" />
                                                <div style="margin-left: 20px;">@bundle.NombreBundle</div>
                                            </div>
                                        </button>
                                    }
                                </div>
                            }
                        </div>

                        @if (bundleSeleccionadoNoticias != null)
                        {
                            <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                                <label style="margin-left: 10px; margin-bottom: 10px;">Juegos:</label>
                                <input type="text" class="entrada-texto" value="@plantillaNoticias.Juegos" />
                            </div>
                        }
                    }
                    else if (noticiaTipoSeleccionada == global::Noticias.NoticiaTipo.Gratis.ToString())
                    {
                        <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                            <div class="opciones-combobox" style="margin-top: 10px; width: 33%;">
                                <select @onchange="@(e => CambiarGratisNoticias(e))">
                                    @foreach (Gratis gratis in GratisCargar.GenerarListado())
                                    {
                                        <option value="@gratis.Tipo">@gratis.Nombre</option>
                                    }
                                </select>
                            </div>

                            @if (gratisSeleccionadoNoticias != null)
                            {
                                <div style="margin-top: 20px;">
                                    @foreach (var gratis in BaseDatos.Gratis.Buscar.UnTipo(gratisSeleccionadoNoticias, Herramientas.Tiempo.Actual).OrderBy(x => x.FechaEmpieza).Reverse().ToList())
                                    {
                                        <button @onclick="@(e => ClickearGratisJuegoNoticias(e, gratis.JuegoId))" class="boton-pequeño" style="margin: 10px 0px;">
                                            <div style="display: flex; align-items: center;">
                                                @if (plantillaNoticias.Juegos != null)
                                                {
                                                    @if (plantillaNoticias.Juegos.Contains(gratis.JuegoId.ToString()) == true)
                                                    {
                                                        <div style="margin-left: 10px; margin-right: 20px;"><i class="fa-solid fa-check"></i></div>
                                                    }
                                                }

                                                <img src="@GratisCargar.DevolverGratis(gratis.Tipo).ImagenLogo" style="width: 12%; margin: 10px;" />
                                                <div>@gratis.Nombre</div>
                                            </div>
                                        </button>
                                    }
                                </div>
                            }
                        </div>  
                        
                        @if (gratisSeleccionadoNoticias != null)
                        {
                            <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                                <label style="margin-left: 10px; margin-bottom: 10px;">Juegos:</label>
                                <input type="text" class="entrada-texto" value="@plantillaNoticias.Juegos" />
                            </div>
                        }
                    }
                    else if (noticiaTipoSeleccionada == global::Noticias.NoticiaTipo.Suscripciones.ToString())
                    {
                        <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                            <div class="opciones-combobox" style="margin-top: 10px; width: 33%;">
                                <select @onchange="@(e => CambiarSuscripcion(e))">
                                    @foreach (Suscripcion suscripcion in SuscripcionesCargar.GenerarListado())
                                    {
                                        if (suscripcion.AdminInteracturar == true)
                                        {
                                            <option value="@suscripcion.Id">@suscripcion.Nombre</option>
                                        }                                      
                                    }
                                </select>
                            </div>

                            @if (suscripcionSeleccionadaNoticias != null)
                            {
                                <div style="margin-top: 20px;">
                                    @foreach (var suscripcion in BaseDatos.Suscripciones.Buscar.UnTipo(suscripcionSeleccionadaNoticias, Herramientas.Tiempo.Actual).OrderBy(x => x.FechaEmpieza).Reverse().ToList())
                                    {
                                        <button @onclick="@(e => ClickearSuscripcionJuego(e, suscripcion.JuegoId))" class="boton-pequeño" style="margin: 10px 0px;">
                                            <div style="display: flex; align-items: center;">
                                                @if (plantillaNoticias.Juegos != null)
                                                {
                                                    @if (plantillaNoticias.Juegos.Contains(suscripcion.JuegoId.ToString()) == true)
                                                    {
                                                        <div style="margin-left: 10px; margin-right: 20px;"><i class="fa-solid fa-check"></i></div>
                                                    }
                                                }

                                                <img src="@SuscripcionesCargar.DevolverSuscripcion(suscripcion.Tipo).ImagenLogo" style="width: 12%; margin: 10px;" />
                                                <div style="margin-left: 20px;">@suscripcion.Nombre</div>
                                            </div>
                                        </button>
                                    }
                                </div>
                            }
                        </div>

                        @if (suscripcionSeleccionadaNoticias != null)
                        {
                            <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                                <label style="margin-left: 10px; margin-bottom: 10px;">Juegos:</label>
                                <input type="text" class="entrada-texto" value="@plantillaNoticias.Juegos" />
                            </div>
                        }
                    }
                    else if (noticiaTipoSeleccionada == global::Noticias.NoticiaTipo.Rumores.ToString())
                    {
                        <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                            <div style="margin-bottom: 10px;">
                                <label style="margin: 10px;">Juegos IDs:</label>
                                <input type="text" class="entrada-texto" value="@plantillaNoticias.Juegos" />
                            </div>

                            <div style="margin-bottom: 10px;">
                                <label style="margin: 10px;">Juegos Buscador:</label>
                                <input type="text" @oninput="TextoCambiaBuscadorNoticias" class="entrada-texto" style="margin-bottom: 20px;" />

                                @if (juegosBuscadorNoticias != null)
                                {
                                    @if (juegosBuscadorNoticias.Count > 0)
                                    {
                                        <div>
                                            @foreach (var juego in juegosBuscadorNoticias)
                                            {
                                                <div class="perfil-flexible-centrado perfil-espacio-top">
                                                    <button @onclick="@(e => SeleccionarJuegoNoticias(e, juego.Id.ToString()))" class="boton-pequeño">
                                                        <div class="perfil-flexible-centrado">
                                                            <div style="width: 12%;">
                                                                <img src="@juego.Imagenes.Capsule_231x87" style="max-height:100%; max-width:100%;" />
                                                            </div>

                                                            <div style="width: 88%; padding-left: 15px; padding-right: 15px;">
                                                                @juego.Id - @juego.Nombre
                                                            </div>
                                                        </div>
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    }

                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                        <div>
                            <label style="margin-left: 10px; margin-bottom: 10px;">Título EN:</label>
                            <input type="text" @onchange="@(e => CambiarTituloEnNoticias(e))" class="entrada-texto" value="@plantillaNoticias.TituloEn" />
                        </div>

                        <div style="margin-top: 20px;">
                            <label style="margin-left: 10px; margin-bottom: 10px;">Título ES:</label>
                            <input type="text" @onchange="@(e => CambiarTituloEsNoticias(e))" class="entrada-texto" value="@plantillaNoticias.TituloEs" />
                        </div>
                    </div>

                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                        <div>
                            <label style="margin-left: 10px; margin-bottom: 10px;">Imagen Noticia:</label>
                            <input @onchange="@(e => CambiarImagenNoticia(e))" class="entrada-texto" value="@plantillaNoticias.Imagen">

                            @if (string.IsNullOrEmpty(plantillaNoticias.Imagen) == false)
                            {
                                <img src="@plantillaNoticias.Imagen" style="max-width: 300px; max-height: 300px; margin-top: 10px;" />
                            }                         
                        </div>
                    </div>

                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                        <div>
                            <label style="margin-left: 10px; margin-bottom: 10px;">Fecha Termina:</label>
                            <input type="datetime-local" @onchange="@(e => CambiarFechaNoticias(e))" class="entrada-texto" style="width: 33%; min-width: 100px;" value="@plantillaNoticias.Fecha">
                        </div>

                        <div style="margin-top: 20px;">
                            <label style="margin-left: 10px; margin-bottom: 10px;">Enlace:</label>
                            <input type="text" class="entrada-texto" value="@plantillaNoticias.Enlace" />
                        </div>
                    </div>

                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                        <div>
                            <label style="margin-left: 10px; margin-bottom: 10px;">Contenido EN:</label>
                            <textarea @onchange="@(e => CambiarContenidoEnNoticias(e))" class="entrada-texto" rows="8">@plantillaNoticias.ContenidoEn</textarea>
                        </div>

                        @if (string.IsNullOrEmpty(plantillaNoticias.ContenidoEn) == false)
                        {
                            <div style="margin-top: 20px; margin-left: 20px; margin-bottom: 10px;">
                                @((MarkupString)plantillaNoticias.ContenidoEn)
                            </div>
                        }
                    </div>

                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                        <div>
                            <label style="margin-left: 10px; margin-bottom: 10px;">Contenido ES:</label>
                            <textarea @onchange="@(e => CambiarContenidoEsNoticias(e))" class="entrada-texto" rows="8">@plantillaNoticias.ContenidoEs</textarea>
                        </div>

                        @if (string.IsNullOrEmpty(plantillaNoticias.ContenidoEs) == false)
                        {
                            <div style="margin-top: 20px; margin-left: 20px; margin-bottom: 10px;">
                                @((MarkupString)plantillaNoticias.ContenidoEs)
                            </div>  
                        }
                    </div>

                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                        <div style="display: flex; width: 33%;">
                            <button @onclick="@(e => AñadirNoticia(e))" class="boton" style="text-align: center;">Añadir Noticia</button>
                        </div>
                    </div>
                }

                @if (mostrarBundles == true)
                {
                    <Bundles/>
                }

                @if (mostrarGratis == true)
                {
                    @if (idSeleccionadaGratis == null)
                    {
                        <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton);">
                            <label style="margin-bottom: 10px;">Juego:</label>
                            <input type="text" @oninput="TextoCambiaBuscadorGratis" class="entrada-texto" />

                            @if (juegosBuscadorGratis != null)
                            {
                                @if (juegosBuscadorGratis.Count > 0)
                                {
                                    <div>
                                        @foreach (var juego in juegosBuscadorGratis)
                                        {
                                            <div class="perfil-flexible-centrado perfil-espacio-top">
                                                <button @onclick="@(e => ClickearJuegoGratis(e, juego.Id.ToString(), juego.Nombre, juego.Imagenes.Library_600x900, juego.Imagenes.Header_460x215))" class="boton-pequeño" style="text-align:center;">
                                                    <div class="perfil-flexible-centrado">
                                                        <div style="width: 12%;">
                                                            <img src="@juego.Imagenes.Capsule_231x87" style="max-height:100%; max-width:100%;" />
                                                        </div>

                                                        <div style="width: 88%; padding-left: 15px; padding-right: 15px; text-align: left;">
                                                            @juego.Nombre<br />
                                                            <span style="font-size: 13px;">@juego.Id.ToString()</span>
                                                        </div>
                                                    </div>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                        </div>
                    }
                    else
                    {
                        <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton);">
                            <div style="display: flex;">
                                <div style="width: 15%;">
                                    <img src="@imagenSeleccionadaGratis" style="max-height: 100%; max-width: 100%;" />
                                </div>

                                <div style="width: 85%; padding-left: 20px; padding-right: 20px;">
                                    <div>
                                        @nombreSeleccionadoGratis
                                    </div>

                                    <div class="opciones-combobox" style="width: 33%; margin-top: 20px;">
                                        <select @onchange="@(e => CambiarTipoGratis(e))">
                                            @foreach (Gratis gratis in GratisCargar.GenerarListado())
                                            {
                                                <option value="@gratis.Tipo">@gratis.Nombre</option>
                                            }
                                        </select>
                                    </div>

                                    <div style="width: 33%; margin-top: 20px;">
                                        <label style="margin-bottom: 10px;">DRM:</label>
                                        <div class="opciones-combobox">
                                            <select @onchange="@(e => CambiarDRMGratis(e))" value="@drmSeleccionadoGratis">
                                                @foreach (Juegos.DRM drm in Juegos.JuegoDRM2.GenerarListado())
                                                {
                                                    <option value="@drm.Id">@drm.Nombre</option>
                                                }
                                            </select>
                                        </div>
                                    </div>

                                    <div style="margin-top: 20px;">
                                        <label style="margin-bottom: 10px;">Enlace:</label>
                                        <input @onchange="@(e => CambiarEnlaceGratis(e))" class="entrada-texto" value="@enlaceSeleccionadoGratis">
                                    </div>

                                    <div style="margin-top: 20px;">
                                        <label style="margin-bottom: 10px;">Fecha Empieza:</label>
                                        <input type="datetime-local" @onchange="@(e => CambiarFechaEmpiezaGratis(e))" class="entrada-texto" style="width: 33%; min-width: 100px;" value="@fechaEmpiezaSeleccionadaGratis">
                                    </div>

                                    <div style="margin-top: 20px;">
                                        <label style="margin-bottom: 10px;">Fecha Termina:</label>
                                        <input type="datetime-local" @onchange="@(e => CambiarFechaTerminaGratis(e))" class="entrada-texto" style="width: 33%; min-width: 100px;" value="@fechaTerminaSeleccionadaGratis">
                                    </div>                                   
                                </div>
                            </div>
                        </div>

                        <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                            <label style="margin-bottom: 10px;">Imagen Noticia:</label>
                            <input @onchange="@(e => CambiarImagenNoticia(e))" class="entrada-texto" value="@imagenNoticiaGratis">
                            <img src="@imagenNoticiaGratis" style="max-width: 300px; max-height: 300px; margin-top: 10px;" />
                        </div>

                        <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                            <div style="display: flex; width: 33%;">
                                <button @onclick="@(e => AñadirJuegoGratis(e))" class="boton" style="text-align: center;">Añadir Gratis</button>
                            </div>
                        </div>
                    }
                }

                @if (mostrarSuscripciones == true)
                {
                    @if (idSeleccionadaSuscripciones == null)
                    {
                        <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton);">
                            <label style="margin-bottom: 10px;">Juego:</label>
                            <input type="text" @oninput="TextoCambiaBuscadorSuscripciones" class="entrada-texto" />

                            @if (juegosBuscadorSuscripciones != null)
                            {
                                @if (juegosBuscadorSuscripciones.Count > 0)
                                {
                                    <div>
                                        @foreach (var juego in juegosBuscadorSuscripciones)
                                        {
                                            <div class="perfil-flexible-centrado perfil-espacio-top">
                                                <button @onclick="@(e => SeleccionarJuegoSuscripciones(e, juego.Id.ToString(), juego.Imagenes.Library_600x900, juego.Nombre, juego.Imagenes.Header_460x215))" class="boton-pequeño">
                                                    <div class="perfil-flexible-centrado">
                                                        <div style="width: 12%;">
                                                            <img src="@juego.Imagenes.Capsule_231x87" style="max-height:100%; max-width:100%;" />
                                                        </div>

                                                        <div style="width: 88%; padding-left: 15px; padding-right: 15px; text-align: left;">
                                                            @juego.Nombre<br />
                                                            <span style="font-size: 13px;">@juego.Id.ToString()</span>
                                                        </div>
                                                    </div>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                         </div>
                    }
                    else
                    {
                        <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton);">
                            <div style="display: flex;">
                                <div style="width: 15%;">
                                    <img src="@imagenSeleccionadaSuscripciones" style="max-height: 100%; max-width: 100%;" />
                                </div>

                                <div style="width: 85%; padding-left: 20px; padding-right: 20px;">
                                    @nombreSeleccionadoSuscripciones

                                    <div style="width: 33%; margin-top: 20px;">
                                        <label style="margin-bottom: 10px;">Suscripcion:</label>
                                        <div class="opciones-combobox">
                                            <select @onchange="@(e => CambiarTipoSuscripcion(e))">
                                                @foreach (Suscripcion suscripcion in SuscripcionesCargar.GenerarListado())
                                                {
                                                    @if (suscripcion.AdminInteracturar == true)
                                                    {
                                                        <option value="@suscripcion.Id">@suscripcion.Nombre</option>
                                                    }                                                   
                                                }
                                            </select>
                                        </div>
                                    </div>

                                    <div style="width: 33%; margin-top: 20px;">
                                        <label style="margin-bottom: 10px;">DRM:</label>
                                        <div class="opciones-combobox">
                                            <select @onchange="@(e => CambiarDRMSuscripciones(e))" value="@drmSeleccionadoSuscripciones">
                                                @foreach (Juegos.DRM drm in Juegos.JuegoDRM2.GenerarListado())
                                                {
                                                    <option value="@drm.Id">@drm.Nombre</option>
                                                }
                                            </select>
                                        </div>
                                    </div>

                                    <div style="margin-top: 20px;">
                                        <label style="margin-bottom: 10px;">Enlace:</label>
                                        <input @onchange="@(e => CambiarEnlaceSuscripciones(e))" class="entrada-texto" value="@enlaceSeleccionadoSuscripciones">
                                    </div>

                                    <div style="margin-top: 20px;">
                                        <label style="margin-bottom: 10px;">Fecha Empieza:</label>
                                        <input type="datetime-local" @onchange="@(e => CambiarFechaEmpiezaSuscripciones(e))" class="entrada-texto" style="width: 33%; min-width: 100px;" value="@fechaEmpiezaSeleccionadaSuscripciones">
                                    </div>

                                    <div style="margin-top: 20px;">
                                        <label style="margin-bottom: 10px;">Fecha Termina:</label>
                                        <input type="datetime-local" @onchange="@(e => CambiarFechaTerminaSuscripciones(e))" class="entrada-texto" style="width: 33%; min-width: 100px;" value="@fechaTerminaSeleccionadaSuscripciones">
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                            <label style="margin-bottom: 10px;">Imagen Noticia:</label>
                            <input @onchange="@(e => CambiarImagenNoticia(e))" class="entrada-texto" value="@imagenNoticiaSuscripciones">
                            <img src="@imagenNoticiaSuscripciones" style="max-width: 300px; max-height: 300px; margin-top: 10px;" />
                        </div>

                        <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton); margin-top: 40px;">
                            <div style="display: flex; width: 33%;">
                                <button @onclick="@(e => AñadirJuegoSuscripciones(e))" class="boton" style="text-align: center;">Añadir Suscripción</button>
                            </div>
                        </div>
                    }
                }

                @if (mostrarSorteos == true)
                {
                    <div class="perfil" style="padding: 20px; border: 1px solid var(--fondoBoton);">
                        @if (idSeleccionadaSorteos == null)
                        {
                            <div>
                                <label style="margin-bottom: 10px;">Juego:</label>
                                <input type="text" @oninput="TextoCambiaBuscadorSorteos" class="entrada-texto" />

                                @if (juegosBuscadorSorteos != null)
                                {
                                    @if (juegosBuscadorSorteos.Count > 0)
                                    {
                                        <div>
                                            @foreach (var juego in juegosBuscadorSorteos)
                                            {
                                                <div class="perfil-flexible-centrado perfil-espacio-top">
                                                    <button @onclick="@(e => ClickearJuegoSorteos(e, juego.Id.ToString(), juego.Nombre, juego.Imagenes.Library_600x900, juego.Imagenes.Header_460x215))" class="boton-pequeño" style="text-align:center;">
                                                        <div class="perfil-flexible-centrado">
                                                            <div style="width: 12%;">
                                                                <img src="@juego.Imagenes.Capsule_231x87" style="max-height:100%; max-width:100%;" />
                                                            </div>

                                                            <div style="width: 88%; padding-left: 15px; padding-right: 15px; text-align: left;">
                                                                @juego.Nombre<br />
                                                                <span style="font-size: 13px;">@juego.Id.ToString()</span>
                                                            </div>
                                                        </div>
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    }
                                }
                            </div>
                        }
                        else
                        {
                            <div style="display: flex;">
                                <div style="width: 15%;">
                                    <img src="@imagenSeleccionadaSorteos" style="max-height: 100%; max-width: 100%;" />
                                </div>

                                <div style="width: 85%; padding-left: 20px; padding-right: 20px;">
                                    <div style="margin-left: 5px;">
                                        @nombreSeleccionadoSorteos
                                    </div>

                                    <div class="opciones-combobox" style="width: 33%; margin-top: 20px;">
                                        <select @onchange="@(e => CambiarGrupoSorteos(e))">
                                            @foreach (var grupo in gruposSorteos)
                                            {
                                                <option value="@grupo.Id">@grupo.Nombre</option>
                                            }
                                        </select>
                                    </div>

                                    <div style="width: 33%; margin-top: 20px;">
                                        <div style="margin-bottom: 10px; margin-left: 5px;">Clave:</div>
                                        <input type="text" @oninput="TextoCambiaClaveSorteos" class="entrada-texto" />
                                    </div>

                                    <div style="width: 33%; margin-top: 20px;">
                                        <div style="margin-bottom: 10px; margin-left: 5px;">Fecha Termina:</div>
                                        <input type="datetime-local" @onchange="@(e => CambiarFechaSorteos(e))" class="entrada-texto" value="@fechaSeleccionadaSorteos">
                                    </div>

                                    <hr />

                                    <div style="display: flex; margin-top: 40px; width: 33%;">
                                        <button @onclick="@(e => AñadirSorteo(e))" class="boton" style="text-align: center;">Añadir Sorteo</button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {

    #nullable disable

    [Inject]
    protected Herramientas.IDecompiladores decompilador { get; set; }

    SqlConnection conexion = new SqlConnection();

    private string titulo = string.Empty;

    private bool mostrarAdmin = false;

    protected override void OnInitialized()
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            ActualizarMensajeCorreos(int.Parse(BaseDatos.Tiendas.Admin.LeerDato(conexion, "correos")), int.Parse(BaseDatos.Tiendas.Admin.LeerDato(conexion, "correos2")));
            ActualizarMensajeDLCs(int.Parse(BaseDatos.Tiendas.Admin.LeerDato(conexion, "dlcs")));
            ActualizarMensajePendientes(int.Parse(BaseDatos.Tiendas.Admin.LeerDato(conexion, "pendientes")));
            ActualizarMensajeErrores(int.Parse(BaseDatos.Tiendas.Admin.LeerDato(conexion, "errores")));
            ActualizarMensajeSolicitudes(int.Parse(BaseDatos.Tiendas.Admin.LeerDato(conexion, "solicitudes")));
        }
    }

    private void MostrarAdmin(MouseEventArgs e)
    {
        mostrarAdmin = true;
    }

    private void CerrarAdmin(MouseEventArgs e)
    {
        mostrarAdmin = false;
    }

    private void CerrarPestañas()
    {
        titulo = null;

        mostrarEnlaces = false;
        mostrarAvisos = false;
        mostrarSolicitudes = false;
        mostrarErrores = false;
        mostrarTiendas = false;
        mostrarDivisas = false;
        mostrarDLCs = false;
        mostrarPendientes = false;
        mostrarAñadir = false;
        mostrarNoticias = false;
        mostrarBundles = false;
        mostrarGratis = false;
        mostrarSuscripciones = false;
        mostrarSorteos = false;
    }

    #region Enlaces

    private bool mostrarEnlaces = false;

    private void MostrarCerrarEnlaces(MouseEventArgs e)
    {
        CerrarPestañas();

        if (mostrarEnlaces == true)
        {
            mostrarEnlaces = false;
        }
        else if (mostrarEnlaces == false)
        {
            mostrarEnlaces = true;

            titulo = "Enlaces";
        }
    }

    #endregion

    #region Errores

    private bool mostrarErrores = false;

    List<Error> listaErrores = new List<Error>();
    private int nuevosErroresCantidad = 0;
    private string nuevosErroresMensaje = string.Empty;

    private void ActualizarMensajeErrores(int i)
    {
        nuevosErroresCantidad = i;

        if (nuevosErroresCantidad > 0)
        {
            nuevosErroresMensaje = "(" + nuevosErroresCantidad.ToString() + ")";
        }
    }

    private void MostrarCerrarErrores(MouseEventArgs e)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        CerrarPestañas();

        if (mostrarErrores == true)
        {
            mostrarErrores = false;
        }
        else if (mostrarErrores == false)
        {
            mostrarErrores = true;

            titulo = "Errores";

            listaErrores = BaseDatos.Errores.Buscar.Todos(conexion);

            ActualizarMensajeErrores(listaErrores.Count);
        }
    }

    private void LimpiarErrores(MouseEventArgs e)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            BaseDatos.Errores.Limpiar.Ejecutar(conexion);

            listaErrores = new List<Error>();

            ActualizarMensajeErrores(0);
        }
    }

    #endregion

    #region Avisos

    private bool mostrarAvisos = false;
    private string avisoEn = string.Empty;
    private string avisoEs = string.Empty;
    private string avisoEnlace = string.Empty;

    private void MostrarCerrarAvisos(MouseEventArgs e)
    {
        CerrarPestañas();

        if (mostrarAvisos == true)
        {
            mostrarAvisos = false;
        }
        else if (mostrarAvisos == false)
        {
            mostrarAvisos = true;

            titulo = "Avisos";

            if (conexion.State != System.Data.ConnectionState.Open)
            {
                conexion = Herramientas.BaseDatos.Conectar();
            }

            Aviso aviso1 = BaseDatos.Avisos.Buscar.Ejecutar("en", conexion);

            if (aviso1 != null)
            {
                avisoEn = aviso1.Mensaje.Trim();
                avisoEnlace = aviso1.Enlace.Trim();
            }

            Aviso aviso2 = BaseDatos.Avisos.Buscar.Ejecutar("es", conexion);

            if (aviso2 != null)
            {
                avisoEs = aviso2.Mensaje.Trim();
            }
        }
    }

    private void CambiarAvisoEn(ChangeEventArgs texto)
    {
        avisoEn = texto.Value.ToString();
    }

    private void CambiarAvisoEs(ChangeEventArgs texto)
    {
        avisoEs = texto.Value.ToString();
    }

    private void CambiarAvisoEnlace(ChangeEventArgs texto)
    {
        avisoEnlace = texto.Value.ToString();
    }

    private void ActualizarAviso(MouseEventArgs e)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            BaseDatos.Avisos.Actualizar.Ejecutar(avisoEn, "en", avisoEnlace, conexion);
            BaseDatos.Avisos.Actualizar.Ejecutar(avisoEs, "es", avisoEnlace, conexion);

            avisoEn = null;
            avisoEs = null;
            avisoEnlace = null;
        }       
    }

    private void BorrarAviso(MouseEventArgs e)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            BaseDatos.Avisos.Actualizar.Ejecutar("", "en", "", conexion);
            BaseDatos.Avisos.Actualizar.Ejecutar("", "es", "", conexion);

            avisoEn = null;
            avisoEs = null;
            avisoEnlace = null;
        }
    }

    #endregion

    #region Solicitudes

    private bool mostrarSolicitudes = false;

    List<BaseDatos.Usuarios.SolicitudGrupo> listaSolicitudes = new List<BaseDatos.Usuarios.SolicitudGrupo>();
    private int nuevasSolicitudesCantidad = 0;
    private string nuevasSolicitudesMensaje = string.Empty;

    private void ActualizarMensajeSolicitudes(int i)
    {
        nuevasSolicitudesCantidad = i;

        if (nuevasSolicitudesCantidad > 0)
        {
            nuevasSolicitudesMensaje = "(" + nuevasSolicitudesCantidad.ToString() + ")";
        }
    }

    private void MostrarCerrarSolicitudes(MouseEventArgs e)
    {
        CerrarPestañas();

        if (mostrarSolicitudes == true)
        {
            mostrarSolicitudes = false;
        }
        else if (mostrarSolicitudes == false)
        {
            mostrarSolicitudes = true;

            titulo = "Solicitudes Grupo Premium";

            if (conexion.State != System.Data.ConnectionState.Open)
            {
                conexion = Herramientas.BaseDatos.Conectar();
            }

            using (conexion)
            {
                listaSolicitudes = BaseDatos.Usuarios.Solicitud.DevolverTodo(conexion);
            }         
        }
    }

    private void AprobarSolicitud(MouseEventArgs e, BaseDatos.Usuarios.SolicitudGrupo solicitud)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            BaseDatos.Usuarios.Solicitud.AprobarUsuario(solicitud.IdUsuario, conexion);

            listaSolicitudes = BaseDatos.Usuarios.Solicitud.DevolverTodo(conexion);
        }
    }

    private void BorrarSolicitud(MouseEventArgs e, BaseDatos.Usuarios.SolicitudGrupo solicitud)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            BaseDatos.Usuarios.Solicitud.BorrarUsuario(solicitud.IdUsuario, conexion);

            listaSolicitudes = BaseDatos.Usuarios.Solicitud.DevolverTodo(conexion);
        }
    }

    #endregion

    #region Correos

    private List<Herramientas.CorreoConId> correos = new List<Herramientas.CorreoConId>();
    private int nuevosCorreosDeals = 0;
    private int nuevosCorreosApps = 0;

    private void ActualizarMensajeCorreos(int correosDeals, int correosApps)
    {
        nuevosCorreosDeals = correosDeals;
        nuevosCorreosApps = correosApps;
    }

    #endregion

    #region Tiendas

    private bool mostrarTiendas = false;

    private string tiendaElegida = null;

    private void MostrarCerrarTiendas(MouseEventArgs e)
    {
        CerrarPestañas();

        if (mostrarTiendas == true)
        {
            mostrarTiendas = false;
        }
        else if (mostrarTiendas == false)
        {
            mostrarTiendas = true;

            titulo = "Tiendas";
        }
    }

    private async Task ClickearTienda(MouseEventArgs e, string id)
    {
        tiendaElegida = id;

        if (id != null)
        {
            await TiendasCargar.AdminTiendas(id, decompilador);
        }
    }

    private string TiendasInfo()
    {
        string info = String.Empty;

        BaseDatos.Tiendas.AdminTarea siguiente = new BaseDatos.Tiendas.AdminTarea();
        BaseDatos.Tiendas.AdminTarea enUso = new BaseDatos.Tiendas.AdminTarea();

        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            siguiente = BaseDatos.Tiendas.Admin.TiendaSiguiente(conexion);
            enUso = BaseDatos.Tiendas.Admin.ComprobarTiendasUso(conexion, TimeSpan.FromSeconds(60));
        }

        if (siguiente != null)
        {
            info = info + "Siguiente: " + siguiente.Id;
        }

        if (enUso != null)
        {
            info = info + " - Comprobando: " + enUso.Id;
        }

        return info;
    }

    #endregion

    #region Divisas

    private bool mostrarDivisas = false;

    private void MostrarCerrarDivisas(MouseEventArgs e)
    {
        CerrarPestañas();

        if (mostrarDivisas == true)
        {
            mostrarDivisas = false;
        }
        else if (mostrarDivisas == false)
        {
            mostrarDivisas = true;

            titulo = "Divisas";
        }
    }

    private async Task ActualizarDivisas(MouseEventArgs e)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            await Herramientas.Divisas.ActualizarDatos(conexion);
        }
    }

    #endregion

    #region DLCs

    private bool mostrarDLCs = false;

    private List<Juegos.Juego> DLCs = new List<Juegos.Juego>();
    private int nuevosDLCsCantidad = 0;
    private string nuevosDLCsMensaje = string.Empty;
    private int posicionDLC = 0;
    private string textoDlcMaestro = string.Empty;

    private void ActualizarMensajeDLCs(int i)
    {
        nuevosDLCsCantidad = i;

        if (nuevosDLCsCantidad > 0)
        {
            nuevosDLCsMensaje = "(" + nuevosDLCsCantidad.ToString() + ")";
        }
    }

    private void MostrarCerrarDLCs(MouseEventArgs e)
    {
        CerrarPestañas();

        if (mostrarDLCs == true)
        {
            mostrarDLCs = false;
        }
        else if (mostrarDLCs == false)
        {
            mostrarDLCs = true;

            titulo = "DLCs";

            DLCs = global::BaseDatos.Juegos.Buscar.DLCs(null, conexion, false);

            ActualizarMensajeDLCs(DLCs.Count);
        }
    }

    private async Task BuscarDlcMaestro()
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        Juegos.Juego nuevoJuego = await APIs.Steam.Juego.CargarDatos(DLCs[posicionDLC].IdSteam.ToString());

        if (nuevoJuego != null)
        {
            textoDlcMaestro = nuevoJuego.Maestro;

            if (string.IsNullOrEmpty(textoDlcMaestro) == false)
            {
                using (conexion)
                {
                    DLCs[posicionDLC].Maestro = textoDlcMaestro;
                    BaseDatos.Juegos.Actualizar.DlcMaestro(DLCs[posicionDLC], conexion);
                }

                posicionDLC += 1;
            }
        }
    }

    #endregion

    #region Pendientes

    private bool mostrarPendientes = false;

    List<PendientesTienda> pendientes = new List<PendientesTienda>();
    private int nuevosPendientesCantidad = 0;
    private string nuevosPendientesMensaje = string.Empty;

    private void ActualizarMensajePendientes(int i)
    {
        nuevosPendientesCantidad = i;

        if (nuevosPendientesCantidad > 0)
        {
            nuevosPendientesMensaje = "(" + nuevosPendientesCantidad.ToString() + ")";
        }
    }

    private void MostrarCerrarPendientes(MouseEventArgs e)
    {
        CerrarPestañas();

        if (mostrarPendientes == true)
        {
            mostrarPendientes = false;
        }
        else if (mostrarPendientes == false)
        {
            mostrarPendientes = true;

            titulo = "Pendientes";

            if (conexion.State != System.Data.ConnectionState.Open)
            {
                conexion = Herramientas.BaseDatos.Conectar();
            }

            pendientes.Clear();

            foreach (var tienda in Tiendas2.TiendasCargar.GenerarListado())
            {
                if (tienda.Id != "steam")
                {
                    PendientesTienda pendienteTienda = new PendientesTienda();
                    pendienteTienda.Tienda = tienda;
                    pendienteTienda.Pendientes = BaseDatos.Pendientes.Buscar.Tienda(tienda.Id, conexion);

                    if (pendienteTienda.Pendientes.Count > 0)
                    {
                        pendientes.Add(pendienteTienda);
                    }
                }
            }

            ActualizarMensajePendientes(BaseDatos.Pendientes.Buscar.Todos(conexion).Count);
        }
    }

    private string idTiendaPendiente = null;
    private string imagenPendiente = null;
    private string nombrePendiente = null;
    private string enlacePendiente = null;
    private string idsPendiente = "0";
    private string cadenaBusquedaPendiente = null;
    private string tiendaElegidaPendiente = null;

    private void ClickearTiendaPendientes(MouseEventArgs e, string id, string nombre)
    {
        idTiendaPendiente = id;
        tiendaElegidaPendiente = nombre;

        ClickearTiendaPendientes(idTiendaPendiente);
    }

    private void ClickearTiendaPendientes(string id)
    {
        if (string.IsNullOrEmpty(id) == false)
        {
            if (conexion.State != System.Data.ConnectionState.Open)
            {
                conexion = Herramientas.BaseDatos.Conectar();
            }

            using (conexion)
            {
                BaseDatos.Pendientes.Pendiente juego = BaseDatos.Pendientes.Buscar.PrimerJuego(id, conexion);

                if (juego != null)
                {
                    nombrePendiente = juego.nombre;

                    string imagen = juego.imagen;

                    if (imagen != null)
                    {
                        imagen = imagen.Replace("&amp;", "&");
                    }

                    imagenPendiente = imagen;

                    enlacePendiente = juego.enlace;

                    idsPendiente = BaseDatos.Pendientes.Buscar.Nombre(nombrePendiente, conexion);
                }
            }
        }
    }

    private void ClickearDescartarPendientes(MouseEventArgs e, string enlace)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            BaseDatos.Pendientes.Actualizar.Descartar(idTiendaPendiente, enlace, conexion);

            foreach (var pendiente in pendientes)
            {
                if (pendiente.Tienda.Id == idTiendaPendiente)
                {
                    pendiente.Pendientes = BaseDatos.Pendientes.Buscar.Tienda(idTiendaPendiente, conexion);
                }
            }

            ClickearTiendaPendientes(idTiendaPendiente);
        }
    }

    private void ClickearBuscarPendientes(MouseEventArgs e, string nombre)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            idsPendiente = BaseDatos.Pendientes.Buscar.Nombre(nombre, conexion);
        }
    }

    private void ClickearActualizarPendientes(MouseEventArgs e, string enlace)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            BaseDatos.Pendientes.Actualizar.Juego(idTiendaPendiente, enlace, idsPendiente, conexion);

            foreach (var pendiente in pendientes)
            {
                if (pendiente.Tienda.Id == idTiendaPendiente)
                {
                    pendiente.Pendientes = BaseDatos.Pendientes.Buscar.Tienda(idTiendaPendiente, conexion);
                }
            }

            ClickearTiendaPendientes(idTiendaPendiente);
        }
    }

    private void TextoCambiaPendientes(ChangeEventArgs texto)
    {
        idsPendiente = texto.Value.ToString();
    }

    //--------------------------------------------------------------------------------------------

    List<Juegos.Juego> juegosBuscadorPendientes = new List<Juegos.Juego>();

    private void TextoCambiarBuscadorPendientes(ChangeEventArgs texto)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            if (texto.Value.ToString().Trim().Length > 2)
            {
                cadenaBusquedaPendiente = texto.Value.ToString().Trim();
                juegosBuscadorPendientes = BaseDatos.Juegos.Buscar.Nombre(cadenaBusquedaPendiente, conexion, 250);
            }
            else
            {
                juegosBuscadorPendientes = new List<Juegos.Juego>();
            }
        }
    }

    private void ClickearIdPendientes(MouseEventArgs e, string id)
    {
        if (string.IsNullOrEmpty(idsPendiente) == true)
        {
            idsPendiente = id;
        }
        else
        {
            if (idsPendiente != "0")
            {
                if (idsPendiente.Contains(",") == false)
                {
                    if (idsPendiente.Contains(id) == false)
                    {
                        idsPendiente = idsPendiente + "," + id;
                    }
                }
                else
                {
                    if (idsPendiente.Contains(id + ",") == false)
                    {
                        idsPendiente = idsPendiente + "," + id;
                    }
                }
            }
            else
            {
                idsPendiente = id;
            }
        }
    }

    private void ClickearBorrarPendientes(MouseEventArgs e, string id)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            BaseDatos.Juegos.Borrar.Ejecutar(id, conexion);

            juegosBuscadorPendientes = BaseDatos.Juegos.Buscar.Nombre(cadenaBusquedaPendiente, conexion, 250);
        }
    }

    #endregion

    #region Añadir

    private bool mostrarAñadir = false;

    private void MostrarCerrarAñadir(MouseEventArgs e)
    {
        CerrarPestañas();

        if (mostrarAñadir == true)
        {
            mostrarAñadir = false;
        }
        else if (mostrarAñadir == false)
        {
            mostrarAñadir = true;

            titulo = "Añadir";
        }
    }

    #region Añadir Precarga

    private string enlacePrecargaAñadir = null;

    private Juegos.Juego juegoAñadir = null;

    private async Task CambiarEnlacePrecarga(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            enlacePrecargaAñadir = texto.Value.ToString();

            if (APIs.Steam.Juego.Detectar(enlacePrecargaAñadir) == true)
            {
                juegoAñadir = await APIs.Steam.Juego.CargarDatos(APIs.Steam.Juego.LimpiarID(enlacePrecargaAñadir));
            }
            else if (APIs.GOG.Juego.Detectar(enlacePrecargaAñadir) == true)
            {
                juegoAñadir = await APIs.GOG.Juego.CargarDatos(APIs.GOG.Juego.LimpiarSlug(enlacePrecargaAñadir));
            }
            else if (APIs.EpicGames.Juego.Detectar(enlacePrecargaAñadir) == true)
            {
                juegoAñadir = await APIs.EpicGames.Juego.CargarDatos(APIs.EpicGames.Juego.LimpiarSlug(enlacePrecargaAñadir));
            }

            if (juegoAñadir != null)
            {
                enlacePrecargaAñadir = null;
            }
        }
    }

    #endregion

    #region Añadir Vacio

    private string vacioNombre = null;
    private string vacioHeader_460x215 = null;
    private string vacioCapsule_231x87 = null;
    private string vacioLogo = null;
    private string vacioLibrary_600x900 = null;
    private string vacioLibrary_1920x620 = null;

    private void CambiarVacioNombre(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            vacioNombre = texto.Value.ToString();
        }
    }

    private void CambiarVacioHeader_460x215(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            vacioHeader_460x215 = texto.Value.ToString();
        }
    }

    private void CambiarVacioCapsule_231x87(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            vacioCapsule_231x87 = texto.Value.ToString();
        }
    }

    private void CambiarVacioLogo(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            vacioLogo = texto.Value.ToString();
        }
    }

    private void CambiarVacioLibrary_600x900(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            vacioLibrary_600x900 = texto.Value.ToString();
        }
    }

    private void CambiarVacioLibrary_1920x620(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            vacioLibrary_1920x620 = texto.Value.ToString();
        }
    }

    #endregion

    #region Añadir Propiedades

    private void CambiarNombre(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Nombre = texto.Value.ToString();
        }
    }

    private void CambiarIdSteam(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.IdSteam = int.Parse(texto.Value.ToString());
        }
    }

    private void CambiarIdGog(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.IdGog = int.Parse(texto.Value.ToString());
        }
    }

    private void CambiarTipo(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Tipo = Enum.Parse<Juegos.JuegoTipo>(texto.Value.ToString());
        }
    }

    private void CambiarFechaSteamAPIComprobacion(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.FechaSteamAPIComprobacion = DateTime.Parse(texto.Value.ToString());
        }
    }

    private void CambiarMaestro(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Maestro = texto.Value.ToString();
        }
    }

    private void CambiarFreeToPlay(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.FreeToPlay = texto.Value.ToString();
        }
    }

    private void CambiarMayorEdad(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.MayorEdad = texto.Value.ToString();
        }
    }

    private void CambiarDescuento(ChangeEventArgs texto, Juegos.JuegoPrecio precio)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            precio.Descuento = int.Parse(texto.Value.ToString());
        }
    }

    private void CambiarDRM(ChangeEventArgs texto, Juegos.JuegoPrecio precio)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            precio.DRM = Enum.Parse<Juegos.JuegoDRM>(texto.Value.ToString());
        }
    }

    private void CambiarPrecio(ChangeEventArgs texto, Juegos.JuegoPrecio precio)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            precio.Precio = Decimal.Parse(texto.Value.ToString());
        }
    }

    private void CambiarMoneda(ChangeEventArgs texto, Juegos.JuegoPrecio precio)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            precio.Moneda = Enum.Parse<Herramientas.JuegoMoneda>(texto.Value.ToString());
        }
    }

    private void CambiarFechaDetectado(ChangeEventArgs texto, Juegos.JuegoPrecio precio)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            precio.FechaDetectado = DateTime.Parse(texto.Value.ToString());
        }
    }

    private void CambiarEnlace(ChangeEventArgs texto, Juegos.JuegoPrecio precio)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            precio.Enlace = texto.Value.ToString();
        }
    }

    private void CambiarTienda(ChangeEventArgs texto, Juegos.JuegoPrecio precio)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            precio.Tienda = texto.Value.ToString();
        }
    }

    private void CambiarHeader_460x215(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Imagenes.Header_460x215 = texto.Value.ToString();
        }
    }

    private void CambiarCapsule_231x87(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Imagenes.Capsule_231x87 = texto.Value.ToString();
        }
    }

    private void CambiarLogo(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Imagenes.Logo = texto.Value.ToString();
        }
    }

    private void CambiarLibrary_600x900(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Imagenes.Library_600x900 = texto.Value.ToString();
        }
    }

    private void CambiarLibrary_1920x620(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Imagenes.Library_1920x620 = texto.Value.ToString();
        }
    }

    private void CambiarWindows(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Caracteristicas.Windows = bool.Parse(texto.Value.ToString());
        }
    }

    private void CambiarMac(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Caracteristicas.Mac = bool.Parse(texto.Value.ToString());
        }
    }

    private void CambiarLinux(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Caracteristicas.Linux = bool.Parse(texto.Value.ToString());
        }
    }

    private void CambiarDesarrollador(ChangeEventArgs texto, int posicion)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Caracteristicas.Desarrolladores[posicion] = texto.Value.ToString();
        }
    }

    private void CambiarPublisher(ChangeEventArgs texto, int posicion)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Caracteristicas.Publishers[posicion] = texto.Value.ToString();
        }
    }

    private void CambiarDescripcion(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Caracteristicas.Descripcion = texto.Value.ToString();
        }
    }

    private void CambiarVideo(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Media.Video = texto.Value.ToString();
        }
    }

    private void CambiarCaptura(ChangeEventArgs texto, int posicion)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Media.Capturas[posicion] = texto.Value.ToString();
        }
    }

    private void CambiarMiniatura(ChangeEventArgs texto, int posicion)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegoAñadir.Media.Miniaturas[posicion] = texto.Value.ToString();
        }
    }

    #endregion

    private void ClickearAñadir(MouseEventArgs e)
    {
        if (juegoAñadir == null)
        {
            juegoAñadir = Juegos.JuegoCrear.Generar();

            juegoAñadir.Nombre = vacioNombre;

            juegoAñadir.Imagenes.Header_460x215 = vacioHeader_460x215;
            juegoAñadir.Imagenes.Capsule_231x87 = vacioCapsule_231x87;
            juegoAñadir.Imagenes.Logo = vacioLogo;
            juegoAñadir.Imagenes.Library_600x900 = vacioLibrary_600x900;
            juegoAñadir.Imagenes.Library_1920x620 = vacioLibrary_1920x620;
        }

        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            BaseDatos.Juegos.Insertar.Ejecutar(juegoAñadir, conexion);
        }

        juegoAñadir = null;
    }

    #endregion

    #region Noticias

    private bool mostrarNoticias = false;

    private void MostrarCerrarNoticias(MouseEventArgs e)
    {
        CerrarPestañas();

        if (mostrarNoticias == true)
        {
            mostrarNoticias = false;
        }
        else if (mostrarNoticias == false)
        {
            mostrarNoticias = true;

            titulo = "Noticias";
        }
    }

    private string noticiaTipoSeleccionada = null;

    private List<Juegos.Juego> juegosBuscadorNoticias = new List<Juegos.Juego>();

    private string bundleSeleccionadoNoticias = null;
    private string gratisSeleccionadoNoticias = null;
    private string suscripcionSeleccionadaNoticias = null;

    private Plantilla plantillaNoticias = new Plantilla();

    private void CambiarNoticiaTipo(ChangeEventArgs texto)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            plantillaNoticias = new Plantilla();

            noticiaTipoSeleccionada = texto.Value.ToString();

            //-------------------------------------------------------

            if (noticiaTipoSeleccionada == NoticiaTipo.Bundles.ToString())
            {
                bundleSeleccionadoNoticias = BundlesCargar.GenerarListado()[1].Id.ToString();
            }
            else if (noticiaTipoSeleccionada == NoticiaTipo.Gratis.ToString())
            {
                gratisSeleccionadoNoticias = GratisCargar.GenerarListado()[0].Tipo.ToString();
            }
            else if (noticiaTipoSeleccionada == NoticiaTipo.Suscripciones.ToString())
            {
                suscripcionSeleccionadaNoticias = SuscripcionesCargar.GenerarListado()[0].Id.ToString();
            }
            else if (noticiaTipoSeleccionada == NoticiaTipo.Sorteos.ToString())
            {
                GenerarSorteos(conexion);
            }
        }
    }

    private void CambiarTituloEnNoticias(ChangeEventArgs texto)
    {
        plantillaNoticias.TituloEn = texto.Value.ToString();
    }

    private void CambiarTituloEsNoticias(ChangeEventArgs texto)
    {
        plantillaNoticias.TituloEs = texto.Value.ToString();
    }

    private void CambiarImagenNoticia(ChangeEventArgs texto)
    {
        plantillaNoticias.Imagen = texto.Value.ToString();
    }

    private void CambiarContenidoEnNoticias(ChangeEventArgs texto)
    {
        plantillaNoticias.ContenidoEn = texto.Value.ToString();
    }

    private void CambiarContenidoEsNoticias(ChangeEventArgs texto)
    {
        plantillaNoticias.ContenidoEs = texto.Value.ToString();
    }

    private void CambiarFechaNoticias(ChangeEventArgs texto)
    {
        plantillaNoticias.Fecha = texto.Value.ToString();
    }

    private void AñadirNoticia(MouseEventArgs e)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        if (conexion.State == System.Data.ConnectionState.Open)
        {
            using (conexion)
            {
                Noticias.Noticia noticia = new Noticias.Noticia();

                noticia.TituloEn = plantillaNoticias.TituloEn;
                noticia.TituloEs = plantillaNoticias.TituloEs;
                noticia.Imagen = plantillaNoticias.Imagen;
                noticia.ContenidoEn = plantillaNoticias.ContenidoEn;
                noticia.ContenidoEs = plantillaNoticias.ContenidoEs;
                noticia.Juegos = plantillaNoticias.Juegos;
                noticia.FechaEmpieza = DateTime.Now;
                noticia.FechaTermina = Convert.ToDateTime(plantillaNoticias.Fecha);
                noticia.Enlace = plantillaNoticias.Enlace;

                if (noticiaTipoSeleccionada == NoticiaTipo.Bundles.ToString())
                {
                    noticia.Tipo = NoticiaTipo.Bundles;
                    noticia.BundleTipo = BundlesCargar.DevolverBundle(bundleSeleccionadoNoticias).Tipo;
                    noticia.BundleId = int.Parse(plantillaNoticias.BundleId);
                }
                else if (noticiaTipoSeleccionada == NoticiaTipo.Gratis.ToString())
                {
                    noticia.Tipo = NoticiaTipo.Gratis;
                    noticia.GratisTipo = GratisCargar.DevolverGratis(gratisSeleccionadoNoticias).Tipo;
                }
                else if (noticiaTipoSeleccionada == NoticiaTipo.Suscripciones.ToString())
                {
                    noticia.Tipo = NoticiaTipo.Suscripciones;
                    noticia.SuscripcionTipo = SuscripcionesCargar.DevolverSuscripcion(suscripcionSeleccionadaNoticias).Id;
                }

                BaseDatos.Noticias.Insertar.Ejecutar(noticia);

                foreach (var usuario in UserManager.Users)
                {
                    if (usuario.NotificationNews == true)
                    {
                        Herramientas.Correos.EnviarNuevaNoticia(noticia, usuario.Email, conexion);
                    }
                }

                plantillaNoticias = new Plantilla();

                bundleSeleccionadoNoticias = null;
                gratisSeleccionadoNoticias = null;
                suscripcionSeleccionadaNoticias = null;
            }
        }
    }

    private void TextoCambiaBuscadorNoticias(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegosBuscadorNoticias = BaseDatos.Juegos.Buscar.Nombre(texto.Value.ToString().Trim());
        }
        else
        {
            juegosBuscadorNoticias = new List<Juegos.Juego>();
        }
    }

    private void SeleccionarJuegoNoticias(MouseEventArgs e, string id)
    {
        plantillaNoticias = Plantillas.Rumores(plantillaNoticias, id);

        juegosBuscadorNoticias = new List<Juegos.Juego>();
    }

    private void CambiarBundleNoticias(ChangeEventArgs texto)
    {
        bundleSeleccionadoNoticias = texto.Value.ToString();
    }

    private void ClickearBundleNoticias(MouseEventArgs e, int bundleId)
    {
        plantillaNoticias = Plantillas.Bundles(bundleId);
    }

    private void CambiarGratisNoticias(ChangeEventArgs texto)
    {
        gratisSeleccionadoNoticias = texto.Value.ToString();
    }

    private void ClickearGratisJuegoNoticias(MouseEventArgs e, int juegoId)
    {
        plantillaNoticias = global::Noticias.Plantillas.Gratis(plantillaNoticias, juegoId, gratisSeleccionadoNoticias);
    }

    private void CambiarSuscripcion(ChangeEventArgs texto)
    {
        suscripcionSeleccionadaNoticias = texto.Value.ToString();
    }

    private void ClickearSuscripcionJuego(MouseEventArgs e, int juegoId)
    {
        plantillaNoticias = global::Noticias.Plantillas.Suscripciones(plantillaNoticias, juegoId, suscripcionSeleccionadaNoticias);
    }

    private void GenerarSorteos(SqlConnection conexion)
    {
        List<Sorteos2.Sorteo> sorteosActivos = BaseDatos.Sorteos.Buscar.Activos(conexion);

        if (sorteosActivos.Count > 0)
        {
            plantillaNoticias = global::Noticias.Plantillas.Sorteos(sorteosActivos);
        }
    }

    #endregion

    #region Bundles

    private bool mostrarBundles = false;

    private void MostrarCerrarBundles(MouseEventArgs e)
    {
        CerrarPestañas();

        if (mostrarBundles == true)
        {
            mostrarBundles = false;
        }
        else if (mostrarBundles == false)
        {
            mostrarBundles = true;

            titulo = "Bundles";
        }
    }

    #endregion

    #region Gratis

    private bool mostrarGratis = false;

    private void MostrarCerrarGratis(MouseEventArgs e)
    {
        CerrarPestañas();

        if (mostrarGratis == true)
        {
            mostrarGratis = false;
        }
        else if (mostrarGratis == false)
        {
            mostrarGratis = true;

            titulo = "Gratis";
        }
    }

    List<Juegos.Juego> juegosBuscadorGratis = new List<Juegos.Juego>();

    private string idSeleccionadaGratis = null;
    private string nombreSeleccionadoGratis = null;
    private string imagenSeleccionadaGratis = null;
    private string tipoGratis = null;
    private string drmSeleccionadoGratis = null;
    private string enlaceSeleccionadoGratis = null;
    private string fechaEmpiezaSeleccionadaGratis = null;
    private string fechaTerminaSeleccionadaGratis = null;
    private string imagenNoticiaGratis = null;

    private void TextoCambiaBuscadorGratis(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegosBuscadorGratis = BaseDatos.Juegos.Buscar.Nombre(texto.Value.ToString().Trim(), 250);
        }
        else
        {
            juegosBuscadorGratis = new List<Juegos.Juego>();
        }
    }

    private void ClickearJuegoGratis(MouseEventArgs e, string id, string nombre, string imagenVertical, string imagenNoticia2)
    {
        juegosBuscadorGratis = new List<Juegos.Juego>();

        idSeleccionadaGratis = id;
        nombreSeleccionadoGratis = nombre;
        imagenSeleccionadaGratis = imagenVertical;
        imagenNoticiaGratis = imagenNoticia2;
    }

    private void CambiarTipoGratis(ChangeEventArgs texto)
    {
        tipoGratis = texto.Value.ToString();
        enlaceSeleccionadoGratis = null;
        fechaEmpiezaSeleccionadaGratis = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");
        fechaTerminaSeleccionadaGratis = GratisCargar.DevolverGratis(tipoGratis).FechaSugerencia.ToString("yyyy-MM-ddTHH:mm:ss");
        drmSeleccionadoGratis = GratisCargar.DevolverGratis(tipoGratis).DRMDefecto.ToString();
    }

    private void CambiarDRMGratis(ChangeEventArgs texto)
    {
        drmSeleccionadoGratis = texto.Value.ToString();
    }

    private void CambiarEnlaceGratis(ChangeEventArgs texto)
    {
        enlaceSeleccionadoGratis = texto.Value.ToString();

        enlaceSeleccionadoGratis = GratisCargar.LimpiarEnlace(enlaceSeleccionadoGratis);
    }

    private void CambiarFechaEmpiezaGratis(ChangeEventArgs texto)
    {
        fechaEmpiezaSeleccionadaGratis = texto.Value.ToString();
    }

    private void CambiarFechaTerminaGratis(ChangeEventArgs texto)
    {
        fechaTerminaSeleccionadaGratis = texto.Value.ToString();
    }

    private void CambiarImagenNoticiaGratis(ChangeEventArgs texto)
    {
        imagenNoticiaGratis = texto.Value.ToString();
    }

    private void AñadirJuegoGratis(MouseEventArgs e)
    {
        Juegos.Juego juegoGratis = BaseDatos.Juegos.Buscar.UnJuego(idSeleccionadaGratis);

        if (juegoGratis != null)
        {
            Juegos.JuegoGratis gratis = new Juegos.JuegoGratis();
            gratis.Tipo = GratisCargar.DevolverGratis(tipoGratis).Tipo;
            gratis.JuegoId = int.Parse(idSeleccionadaGratis);
            gratis.Nombre = nombreSeleccionadoGratis;
            gratis.Imagen = imagenSeleccionadaGratis;
            gratis.DRM = Juegos.JuegoDRM2.DevolverDRM(drmSeleccionadoGratis);

            if (string.IsNullOrEmpty(enlaceSeleccionadoGratis) == true)
            {
                enlaceSeleccionadoGratis = "nada";
            }

            gratis.Enlace = enlaceSeleccionadoGratis;
            gratis.FechaEmpieza = Convert.ToDateTime(fechaEmpiezaSeleccionadaGratis);
            gratis.FechaTermina = Convert.ToDateTime(fechaTerminaSeleccionadaGratis);
            gratis.ImagenNoticia = imagenNoticiaGratis;

            if (juegoGratis.Gratis == null)
            {
                juegoGratis.Gratis = new List<Juegos.JuegoGratis>();
            }

            juegoGratis.Gratis.Add(gratis);

            BaseDatos.Gratis.Insertar.Ejecutar(int.Parse(idSeleccionadaGratis), juegoGratis.Gratis, gratis);
        }

        idSeleccionadaGratis = null;
    }

    #endregion

    #region Suscripciones

    private bool mostrarSuscripciones = false;

    private void MostrarCerrarSuscripciones(MouseEventArgs e)
    {
        CerrarPestañas();

        if (mostrarSuscripciones == true)
        {
            mostrarSuscripciones = false;
        }
        else if (mostrarSuscripciones == false)
        {
            mostrarSuscripciones = true;

            titulo = "Suscripciones";
        }
    }

    List<Juegos.Juego> juegosBuscadorSuscripciones = new List<Juegos.Juego>();

    private string cadenaBusquedaSuscripciones = null;

    private string idSeleccionadaSuscripciones = null;
    private string imagenSeleccionadaSuscripciones = null;
    private string nombreSeleccionadoSuscripciones = null;
    private string suscripcionSeleccionadaSuscripciones = null;
    private string drmSeleccionadoSuscripciones = null;
    private string fechaEmpiezaSeleccionadaSuscripciones = null;
    private string fechaTerminaSeleccionadaSuscripciones = null;
    private string enlaceSeleccionadoSuscripciones = null;
    private string imagenNoticiaSuscripciones = null;

    private void TextoCambiaBuscadorSuscripciones(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            try
            {
                cadenaBusquedaSuscripciones = texto.Value.ToString().Trim();
                juegosBuscadorSuscripciones = BaseDatos.Juegos.Buscar.Nombre(cadenaBusquedaSuscripciones, 250);
            }
            catch
            {
                juegosBuscadorSuscripciones = new List<Juegos.Juego>();
            }
        }
        else
        {
            juegosBuscadorSuscripciones = new List<Juegos.Juego>();
        }
    }

    private void SeleccionarJuegoSuscripciones(MouseEventArgs e, string id, string imagenVertical, string nombre, string imagenNoticia2)
    {
        cadenaBusquedaSuscripciones = null;
        juegosBuscadorSuscripciones = new List<Juegos.Juego>();

        idSeleccionadaSuscripciones = id;
        imagenSeleccionadaSuscripciones = imagenVertical;
        nombreSeleccionadoSuscripciones = nombre;
        imagenNoticiaSuscripciones = imagenNoticia2;

        // ----------------------------------

        if (suscripcionSeleccionadaSuscripciones == null)
        {
            suscripcionSeleccionadaSuscripciones = SuscripcionesCargar.GenerarListado()[0].Id.ToString();
        }

        if (suscripcionSeleccionadaSuscripciones == SuscripcionesCargar.GenerarListado()[0].Id.ToString())
        {
            fechaEmpiezaSeleccionadaSuscripciones = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");
            fechaTerminaSeleccionadaSuscripciones = SuscripcionesCargar.GenerarListado()[0].FechaSugerencia.ToString("yyyy-MM-ddTHH:mm:ss");
        }

        if (drmSeleccionadoSuscripciones == null)
        {
            drmSeleccionadoSuscripciones = Juegos.JuegoDRM2.GenerarListado()[0].Id.ToString();
        }

        if (enlaceSeleccionadoSuscripciones == null)
        {
            enlaceSeleccionadoSuscripciones = SuscripcionesCargar.GenerarListado()[0].Enlace;
        }
    }

    private void CambiarTipoSuscripcion(ChangeEventArgs texto)
    {
        suscripcionSeleccionadaSuscripciones = texto.Value.ToString();

        fechaTerminaSeleccionadaSuscripciones = SuscripcionesCargar.DevolverSuscripcion(suscripcionSeleccionadaSuscripciones).FechaSugerencia.ToString("yyyy-MM-ddTHH:mm:ss");
        drmSeleccionadoSuscripciones = SuscripcionesCargar.DevolverSuscripcion(suscripcionSeleccionadaSuscripciones).DRMDefecto.ToString();
        enlaceSeleccionadoSuscripciones = SuscripcionesCargar.DevolverSuscripcion(suscripcionSeleccionadaSuscripciones).Enlace;
    }

    private void CambiarDRMSuscripciones(ChangeEventArgs texto)
    {
        drmSeleccionadoSuscripciones = texto.Value.ToString();
    }

    private void CambiarFechaEmpiezaSuscripciones(ChangeEventArgs texto)
    {
        fechaEmpiezaSeleccionadaSuscripciones = texto.Value.ToString();
    }

    private void CambiarFechaTerminaSuscripciones(ChangeEventArgs texto)
    {
        fechaTerminaSeleccionadaSuscripciones = texto.Value.ToString();
    }

    private void CambiarEnlaceSuscripciones(ChangeEventArgs texto)
    {
        enlaceSeleccionadoSuscripciones = texto.Value.ToString();

        if (enlaceSeleccionadoSuscripciones.Contains("?") == true)
        {
            int int1 = enlaceSeleccionadoSuscripciones.IndexOf("?");
            enlaceSeleccionadoSuscripciones = enlaceSeleccionadoSuscripciones.Remove(int1, enlaceSeleccionadoSuscripciones.Length - int1);
        }
    }

    private void CambiarImagenNoticiaSuscripciones(ChangeEventArgs texto)
    {
        imagenNoticiaSuscripciones = texto.Value.ToString();
    }

    private void AñadirJuegoSuscripciones(MouseEventArgs e)
    {
        Juegos.Juego juegoSuscripciones = BaseDatos.Juegos.Buscar.UnJuego(idSeleccionadaSuscripciones);

        if (juegoSuscripciones != null)
        {
            Juegos.JuegoSuscripcion suscripcion = new Juegos.JuegoSuscripcion();
            suscripcion.Tipo = SuscripcionesCargar.DevolverSuscripcion(suscripcionSeleccionadaSuscripciones).Id;
            suscripcion.JuegoId = int.Parse(idSeleccionadaSuscripciones);
            suscripcion.Nombre = nombreSeleccionadoSuscripciones;
            suscripcion.Imagen = imagenSeleccionadaSuscripciones;
            suscripcion.DRM = Juegos.JuegoDRM2.DevolverDRM(drmSeleccionadoSuscripciones);
            suscripcion.Enlace = enlaceSeleccionadoSuscripciones;
            suscripcion.FechaEmpieza = Convert.ToDateTime(fechaEmpiezaSeleccionadaSuscripciones);
            suscripcion.FechaTermina = Convert.ToDateTime(fechaTerminaSeleccionadaSuscripciones);
            suscripcion.ImagenNoticia = imagenNoticiaSuscripciones;

            if (juegoSuscripciones.Suscripciones == null)
            {
                juegoSuscripciones.Suscripciones = new List<Juegos.JuegoSuscripcion>();
            }

            juegoSuscripciones.Suscripciones.Add(suscripcion);

            if (conexion.State != System.Data.ConnectionState.Open)
            {
                conexion = Herramientas.BaseDatos.Conectar();
            }

            using (conexion)
            {
                BaseDatos.Suscripciones.Insertar.Ejecutar(int.Parse(idSeleccionadaSuscripciones), juegoSuscripciones.Suscripciones, suscripcion, conexion);
            }   
        }

        idSeleccionadaSuscripciones = null;
    }

    #endregion

    #region Sorteos

    private bool mostrarSorteos = false;

    private void MostrarCerrarSorteos(MouseEventArgs e)
    {
        CerrarPestañas();

        if (mostrarSorteos == true)
        {
            mostrarSorteos = false;
        }
        else if (mostrarSorteos == false)
        {
            mostrarSorteos = true;

            titulo = "Sorteos";

            gruposSorteos = new List<Sorteos2.GrupoSorteo>();

            Sorteos2.GrupoSorteo grupoPremium = new Sorteos2.GrupoSorteo();
            grupoPremium.Nombre = "Premium";
            grupoPremium.Id = "40604285";
            gruposSorteos.Add(grupoPremium);

            Sorteos2.GrupoSorteo grupoNormal = new Sorteos2.GrupoSorteo();
            grupoNormal.Nombre = "Normal";
            grupoNormal.Id = "33500256";
            gruposSorteos.Add(grupoNormal);

            grupoSeleccionadoSorteos = gruposSorteos[0].Id;

            //---------------------------------------------

            DateTime fechaSabado = DateTime.Now;
            fechaSabado = fechaSabado.AddDays(1);

            int i = 1;
            while (i <= 7)
            {
                if (fechaSabado.DayOfWeek == DayOfWeek.Saturday)
                {
                    break;
                }
                else
                {
                    fechaSabado = fechaSabado.AddDays(1);
                }

                i += 1;
            }

            fechaSabado = new DateTime(fechaSabado.Year, fechaSabado.Month, fechaSabado.Day, 10, 0, 0);

            fechaSeleccionadaSorteos = fechaSabado.ToString("yyyy-MM-ddTHH:mm:ss");
        }
    }

    List<Juegos.Juego> juegosBuscadorSorteos = new List<Juegos.Juego>();

    List<Sorteos2.GrupoSorteo> gruposSorteos = new List<Sorteos2.GrupoSorteo>();

    private string idSeleccionadaSorteos = null;
    private string nombreSeleccionadoSorteos = null;
    private string imagenSeleccionadaSorteos = null;
    private string grupoSeleccionadoSorteos = null;
    private string claveSorteos = null;
    private string fechaSeleccionadaSorteos = null;

    private void TextoCambiaBuscadorSorteos(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegosBuscadorSorteos = BaseDatos.Juegos.Buscar.Nombre(texto.Value.ToString().Trim());
        }
        else
        {
            juegosBuscadorSorteos = new List<Juegos.Juego>();
        }
    }

    private void ClickearJuegoSorteos(MouseEventArgs e, string id, string nombre, string imagenVertical, string imagenNoticia2)
    {
        juegosBuscadorSorteos = new List<Juegos.Juego>();

        idSeleccionadaSorteos = id;
        nombreSeleccionadoSorteos = nombre;
        imagenSeleccionadaSorteos = imagenVertical;
    }

    private void CambiarGrupoSorteos(ChangeEventArgs texto)
    {
        grupoSeleccionadoSorteos = texto.Value.ToString();
    }

    private void TextoCambiaClaveSorteos(ChangeEventArgs texto)
    {
        claveSorteos = texto.Value.ToString();
    }

    private void CambiarFechaSorteos(ChangeEventArgs texto)
    {
        fechaSeleccionadaSorteos = texto.Value.ToString();
    }

    private void AñadirSorteo(MouseEventArgs e)
    {
        if (string.IsNullOrEmpty(claveSorteos) == false)
        {
            Sorteos2.Sorteo nuevoSorteo = new Sorteos2.Sorteo();
            nuevoSorteo.GrupoId = grupoSeleccionadoSorteos;
            nuevoSorteo.JuegoId = int.Parse(idSeleccionadaSorteos);
            nuevoSorteo.Clave = claveSorteos;
            nuevoSorteo.FechaTermina = Convert.ToDateTime(fechaSeleccionadaSorteos);
            nuevoSorteo.Participantes = new List<string>();

            BaseDatos.Sorteos.Insertar.Ejecutar(nuevoSorteo);
        }

        idSeleccionadaSorteos = null;
    }

    #endregion
}
