@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient
@using pepeizqs_deals_web.Areas.Identity.Data
@using Tiendas2

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

@if (BaseDatos.Usuarios.Buscar.RolDios(UserManager.GetUserName(HttpContextAccessor.HttpContext!.User)) == true)
{
	<div style="display: flex; align-items: start;">
		<div class="perfil" style="padding: 25px 40px; width: 66%;">
			@foreach (Tienda tienda in TiendasCargar.GenerarListado())
			{
				@if (tienda.AdminEnseñar == true)
				{
					<div style="margin-top: 15px; margin-bottom: 15px;">
						@if (tienda.AdminInteractuar == true)
						{
							<button @onclick="(e => ClickearTienda(e, tienda.Id))" class="boton-pequeño" style="height: fit-content; padding: 20px 40px;">
								<div style="display: flex; align-items: center;">
									<div style="width: 40%;">
										<img src="@tienda.Imagen300x80" style="height: 40px;" />
									</div>

									<div class="admin-tiempohace" style="width: 60%; padding-left: 30px; text-align: right;">@BaseDatos.Tiendas.Admin.ComprobacionMensaje(tienda.Id)</div>
								</div>
							</button>
						}
						else
						{
							<div style="display: flex; align-items: center; height: fit-content; padding: 20px 40px;">
								<div style="width: 40%;">
									<img src="@tienda.Imagen300x80" style="height: 40px;" />
								</div>

								<div class="admin-tiempohace" style="width: 60%; padding-left: 30px; text-align: right;">@BaseDatos.Tiendas.Admin.ComprobacionMensaje(tienda.Id)</div>
							</div>
						}
					</div>
				}
			}
		</div>

		<div style="width: 33%; padding-left: 40px;">
			<div class="perfil">
				<label>Siguiente Comprobación</label>
				<hr />

				<div>
					@LeerSiguienteTienda()
				</div>
			</div>

			<div class="perfil" style="margin-top: 30px;">
				<label>Divisas</label>
				<hr/>

				<div>
					<div>
						<button @onclick="@(e => ActualizarDivisas(e))" class="boton-pequeño" style="text-align: center;">Actualizar</button>
					</div>
					<div style="padding-top: 20px;">
						<div class="admin-tiempohace">@Herramientas.Divisas.MensajeDolar()</div>
						<div class="admin-tiempohace">@Herramientas.Divisas.MensajeLibra()</div>
					</div>
				</div>
			</div>

			<div class="perfil" style="margin-top: 30px;">
				<label>Portada</label>
				<hr />

				<div>
					<button @onclick="@(e => ActualizarPortada(e))" class="boton-pequeño" style="text-align: center;">Actualizar</button>
				</div>
			</div>

			<div class="perfil" style="margin-top: 30px;">
				<label>Tareas</label>
				<hr />

				@if (dominio == "beta.pepeizqdeals.com")
				{
					<div>
						<button @onclick="@(e => PararTareas(e))" class="boton-pequeño" style="text-align: center;">Parar</button>
					</div>
				}
				
				<div style="margin-top: 10px;">
					@Tareas.Funcionando
				</div>				
			</div>
		</div>		
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string dominio { get; set; }

	private string tiendaElegida = null;

	protected async override Task OnInitializedAsync()
	{
		@if (dominio != "beta.pepeizqdeals.com")
		{
			await Tareas.StopAsync(new CancellationToken());			
		}
		else
		{
			await Tareas.StartAsync(new CancellationToken());
		}
	}

	private async Task ClickearTienda(MouseEventArgs e, string id)
	{
		tiendaElegida = id;

		if (id != null)
		{
			await TiendasCargar.AdminTiendas(id);
		}
	}

	private string LeerSiguienteTienda()
	{
		BaseDatos.Tiendas.AdminTiendas tienda = BaseDatos.Tiendas.Admin.TiendaComprobar();

		return tienda.tienda + " " + Herramientas.Calculadora.HaceTiempo(tienda.fecha, "es-ES");
	}

	private async Task ActualizarPortada(MouseEventArgs e)
	{
		SqlConnection conexion = Herramientas.BaseDatos.Conectar();

		using (conexion)
		{
			await Herramientas.Tareas.Portada(conexion);
		}

		conexion.Dispose();
	}

	private async Task ActualizarDivisas(MouseEventArgs e)
	{
		SqlConnection conexion = Herramientas.BaseDatos.Conectar();

		using (conexion)
		{
			await Herramientas.Divisas.ActualizarDatos(conexion);
		}

		conexion.Dispose();		
	}

	[Inject]
	Herramientas.TareasGestionador Tareas { set; get; }

	private async void PararTareas(MouseEventArgs e)
	{
		if (Tareas.Funcionando == true)
		{
			await Tareas.StopAsync(new CancellationToken());
		}
		else
		{
			await Tareas.StartAsync(new CancellationToken());
		}
	}
}
