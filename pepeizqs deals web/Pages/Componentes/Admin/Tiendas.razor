@using Hangfire;
@using Hangfire.Storage;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity
@using pepeizqs_deals_web.Areas.Identity.Data
@using Tiendas2

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

@if (BaseDatos.Usuarios.Buscar.RolDios(UserManager.GetUserName(HttpContextAccessor.HttpContext!.User)) == true)
{
	<div class="perfil perfil-espacio-bottom">
		@foreach (var tarea in tareasActivas)
		{
			<div>@tarea</div>
		}
	</div>

	<div class="perfil perfil-espacio-bottom" style="padding: 25px 40px;">
		@foreach (Tienda tienda in TiendasCargar.GenerarListado())
		{
			@if (tienda.AdminEnseñar == true)
			{
				<div class="perfil-flexible-centrado" style="margin-top: 15px; margin-bottom: 15px;">
					<div style="width: 50%;">
						@if (tienda.AdminInteractuar == true)
						{
							<button @onclick="(e => ClickearTienda(e, tienda.Id))" class="boton-pequeño admin-boton-imagen-300x80" style="background-image: url(@tienda.Imagen300x80);"></button>
						}
						else
						{
							<div class="boton-pequeño admin-boton-imagen-300x80" style="background-image: url(@tienda.Imagen300x80); background-color: transparent;"></div>
						}
					</div>
					<div style="width: 50%; padding-left: 30px;">
						<div class="admin-tiempohace">@BaseDatos.Tiendas.Admin.ComprobacionMensaje(tienda.Id)</div>
					</div>
				</div>
			}
		}
	</div>

	<div class="perfil">
		<div class="perfil-flexible-centrado">
			<div style="width: 25%;">
				<button @onclick="@(e => ClickearTienda(e, "divisas"))" class="boton-pequeño" style="text-align: center;">Actualizar</button>
			</div>
			<div style="width: 75%; padding-left: 20px;">
				<div class="admin-tiempohace">@Herramientas.Divisas.Mensaje()</div>
			</div>
		</div>
	</div>
}

@code {

	#nullable disable

	private string tiendaElegida = null;

	private List<string> tareasActivas = new List<string>();

	protected override void OnInitialized()
	{
		int orden = BaseDatos.Tiendas.Admin.TareaLeerOrden();

		// RecurringJobManager manager = new RecurringJobManager();
		// manager.AddOrUpdate<Herramientas.ITareasGestionador>("tiendas", job => job.HacerTarea(), Cron.MinuteInterval(30));

		using (var conexion = JobStorage.Current.GetConnection())
		{
			foreach (RecurringJobDto tareaActiva in StorageConnectionExtensions.GetRecurringJobs(conexion))
			{
				if (tareaActiva.NextExecution != null)
				{
					DateTime proximo = tareaActiva.NextExecution.Value;
					TimeSpan diferenciaTiempo = DateTime.Now.Subtract(proximo);

					tareasActivas.Add(tareaActiva.Id + " " + diferenciaTiempo.Minutes.ToString() + " orden " + orden.ToString());
				}

				// RecurringJob.RemoveIfExists(tareaActiva.Id);
			}
		}
	}

	private void ClickearTienda(MouseEventArgs e, string id)
	{
		tiendaElegida = id;

		if (id != null)
		{
			TiendasCargar.AdminTiendas(id);

			if (id == "divisas")
			{
				Herramientas.Divisas.CogerDatos();
			}

			///Admin/Tiendas?id=limpiar&tienda=

			if (id == "limpiar")
			{
				//BaseDatos.Juegos.Precios.Limpiar(tienda);
			}

			if (id == "codigo")
			{
				BaseDatos.Juegos.Precios.Codigos();
			}
		}
	}

}
