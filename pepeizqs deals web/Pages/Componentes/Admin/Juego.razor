@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.Data.SqlClient
@using Newtonsoft.Json
@using global::Juegos
@using pepeizqs_deals_web.Areas.Identity.Data;

<div style="padding: 20px; background: var(--fondoCuerpo); border: 1px solid var(--fondoBotonPequeño); margin-bottom: 50px;">
	<div style="display: flex; align-items: center; margin-bottom: 20px;">
		<div style="width: 100%;">
			Admin Editar • @juego.Nombre
		</div>
		
		<a href="/api/game/@juego.Id" target="_blank" style="padding: 10px 15px; text-decoration: none;">
			Api
		</a>
	</div>

	<div style="display: flex; align-items: center;">
		<div style="width: auto;">
			<button @onclick="(e => MostrarPestaña(e, 1))" class="boton-pequeño" style="padding: 10px 15px;">
				Imagenes
			</button>
		</div>

		<div style="width: auto; margin-left: 20px;">
			<button @onclick="(e => MostrarPestaña(e, 2))" class="boton-pequeño" style="padding: 10px 15px;">
				Precios
			</button>
		</div>

		<div style="width: auto; margin-left: 20px;">
			<button @onclick="(e => MostrarPestaña(e, 3))" class="boton-pequeño" style="padding: 10px 15px;">
				Bundles
			</button>
		</div>

		<div style="width: auto; margin-left: 20px;">
			<button @onclick="(e => MostrarPestaña(e, 4))" class="boton-pequeño" style="padding: 10px 15px;">
				Gratis
			</button>
		</div>

		<div style="width: auto; margin-left: 20px;">
			<button @onclick="(e => MostrarPestaña(e, 5))" class="boton-pequeño" style="padding: 10px 15px;">
				Suscripciones
			</button>
		</div>

		<div style="width: auto; margin-left: 20px;">
			<button @onclick="(e => MostrarPestaña(e, 6))" class="boton-pequeño" style="padding: 10px 15px;">
				Datos
			</button>
		</div>

		<div style="width: auto; margin-left: 20px;">
			<button @onclick="(e => MostrarPestaña(e, 7))" class="boton-pequeño" style="padding: 10px 15px;">
				Deseados
			</button>
		</div>

		<div style="width: auto; margin-left: 20px;">
			<button @onclick="(e => MostrarPestaña(e, 8))" class="boton-pequeño" style="padding: 10px 15px;">
				Históricos
			</button>
		</div>
	</div>

	@if (pestañaMostrar > 0)
	{
		<hr />

		if (pestañaMostrar == 1)
		{
			<div style="display: flex; align-items: start;">
				<div style="width: 20%;">
					<button @onclick="(e => MostrarPestañaImagenes(e, 1))" class="boton-pequeño" style="padding: 10px 15px;">
						Capsule_231x87
					</button>

					<button @onclick="(e => MostrarPestañaImagenes(e, 2))" class="boton-pequeño" style="padding: 10px 15px; margin-top: 10px;">
						Header_460x215
					</button>

					<button @onclick="(e => MostrarPestañaImagenes(e, 3))" class="boton-pequeño" style="padding: 10px 15px; margin-top: 10px;">
						Library_600x900
					</button>

					<button @onclick="(e => MostrarPestañaImagenes(e, 4))" class="boton-pequeño" style="padding: 10px 15px; margin-top: 10px;">
						Library_1920x620
					</button>

					<button @onclick="(e => MostrarPestañaImagenes(e, 5))" class="boton-pequeño" style="padding: 10px 15px; margin-top: 10px;">
						Logo
					</button>

					<div style="margin-top: 20px; margin-left: 10px;">
						<a target="_blank" href="https://www.steamgriddb.com/search/grids?term=@juego.Nombre">
							Abrir SteamGridDB
						</a>
					</div>

				</div>

				<div style="width: 80%; padding: 5px 0px 5px 40px;">
					<label style="margin-bottom: 10px;">Imagen Origen:</label>

					<input type="text" @oninput="TextoCambiaImagenOrigen" class="entrada-texto" style="margin-bottom: 20px;" value="@imagenOrigen" />
					<img src="@imagenOrigen" style="max-width: 300px; max-height: 300px;" />
				</div>
			</div>
		}
		else if (pestañaMostrar == 2)
		{
			<div style="display: flex; align-items: start;">
				<div style="width: 20%;">
					<button @onclick="(e => MostrarPestañaPrecios(e, 1))" class="boton-pequeño" style="padding: 10px 15px;">
						Actuales
					</button>

					<button @onclick="(e => MostrarPestañaPrecios(e, 2))" class="boton-pequeño" style="padding: 10px 15px; margin-top: 10px;">
						Historicos
					</button>
				</div>

				<div style="width: 80%; padding: 5px 0px 5px 40px;">
					<textarea @onchange="(e => TextoCambiaPrecios(e))" class="entrada-texto" rows="16">@textoPrecios</textarea>
				</div>
			</div>
		}
		else if (pestañaMostrar == 3)
		{
			<textarea @onchange="(e => TextoCambiaBundles(e))" class="entrada-texto" rows="16">@textoBundles</textarea>
		}
		else if (pestañaMostrar == 4)
		{
			<textarea @onchange="(e => TextoCambiaGratis(e))" class="entrada-texto" rows="16">@textoGratis</textarea>
		}
		else if (pestañaMostrar == 5)
		{
			<textarea @onchange="(e => TextoCambiaSuscripciones(e))" class="entrada-texto" rows="16">@textoSuscripciones</textarea>
		}
		else if (pestañaMostrar == 6)
		{
			<div style="display: flex; flex-direction: column; gap: 20px;">
				@if (juego.Tipo == global::Juegos.JuegoTipo.DLC)
				{
					<div style="display: flex; align-items: center;">
						<div style="width: 15%; padding: 0px 30px; text-align: right;">
							<label>Maestro</label>
						</div>
						<div style="width: 20%;">
							<input type="text" @oninput="TextoCambiaDlcMaestro" class="entrada-texto" value="@textoDlcMaestro" />
						</div>
						<div style="width: 65%; padding: 0px 30px;">
							<button @onclick="(async () => await ActualizarMediaSteamApi())" class="boton-pequeño" style="padding: 10px 15px; width: auto;">
								Buscar
							</button>
						</div>
					</div>
				}

				<div style="display: flex; align-items: center;">
					<div style="width: 15%; padding: 0px 30px; text-align: right;">
						<label>FreeToPlay</label>
					</div>
					<div class="checkbox-caja">
						<input type="checkbox" class="checkbox-interior" checked="@textoF2P" @onchange="@(e => TextoCambiaF2P(e))">
					</div>
				</div>

				<div style="display: flex; align-items: center;">
					<div style="width: 15%; padding: 0px 30px; text-align: right;">
						<label>Mayor Edad</label>
					</div>
					<div class="checkbox-caja">
						<input type="checkbox" class="checkbox-interior" checked="@textoEdad" @onchange="@(e => TextoCambiaEdad(e))">
					</div>
				</div>

				<div style="display: flex; align-items: center;">
					<div style="width: 15%; padding: 0px 30px; text-align: right;">
						<label>Id Steam</label>
					</div>
					<div style="width: 20%;">
						<input type="text" @oninput="TextoCambiaIdSteam" class="entrada-texto" value="@idSteam" />
					</div>
				</div>

				<div style="display: flex; align-items: center;">
					<div style="width: 15%; padding: 0px 30px; text-align: right;">

					</div>

					<div style="display: flex; align-items: center; gap: 20px;">
						<button @onclick="(async () => await ActualizarMediaSteamApi())" class="boton-pequeño" style="padding: 10px 15px; width: auto;">
							Actualizar Media
						</button>

						<label>@juego.FechaSteamAPIComprobacion.ToString()</label>

						<button @onclick="(async () => await ActualizarDeckSteamApi())" class="boton-pequeño" style="padding: 10px 15px; width: auto;">
							Actualizar Deck
						</button>

						<label>@juego.DeckComprobacion.ToString()</label>
					</div>
				</div>

				<div style="display: flex; align-items: center;">
					<div style="width: 15%; padding: 0px 30px; text-align: right;">
						<label>Slug GOG</label>
					</div>
					<div style="width: 20%;">
						<input type="text" @oninput="TextoCambiaSlugGOG" class="entrada-texto" value="@slugGOG" />
					</div>
				</div>

				<div style="display: flex; align-items: center;">
					<div style="width: 15%; padding: 0px 30px; text-align: right;">
						<label>Tipo</label>
					</div>
					<div style="width: 20%;">
						<input type="text" @oninput="TextoCambiaTipo" class="entrada-texto" value="@tipo" />
					</div>
					<div style="width: 65%; padding: 0px 30px;">
						<label>(0 juego, 1 dlc, 2 bundle, 3 musica, 4 software)</label>
					</div>
				</div>
			</div>
		}
		else if (pestañaMostrar == 7)
		{
			<textarea @onchange="(e => TextoCambiaDeseados(e))" class="entrada-texto" rows="16">@textoDeseados</textarea>
		}
		else if (pestañaMostrar == 8)
		{
			<textarea @onchange="(e => TextoCambiaHistoricos(e))" class="entrada-texto" rows="16">@textoHistoricos</textarea>
		}
	}
</div>

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public global::Juegos.Juego juego { get; set; }

	private string idSteam = string.Empty;
	private string slugGOG = string.Empty;

	protected override void OnInitialized()
	{
		if (juego.Bundles != null)
		{
			textoBundles = JsonConvert.SerializeObject(juego.Bundles);
		}

		if (juego.Gratis != null)
		{
			textoGratis = JsonConvert.SerializeObject(juego.Gratis);
		}

		if (juego.Suscripciones != null)
		{
			textoSuscripciones = JsonConvert.SerializeObject(juego.Suscripciones);
		}

		if (juego.Tipo == global::Juegos.JuegoTipo.DLC)
		{
			textoDlcMaestro = juego.Maestro;
		}

		if (juego.IdSteam > 0)
		{
			idSteam = juego.IdSteam.ToString();
		}	

		if (string.IsNullOrEmpty(juego.SlugGOG) == false)
		{
			slugGOG = juego.SlugGOG;
		}

		if (string.IsNullOrEmpty(juego.FreeToPlay) == false)
		{
			textoF2P = Convert.ToBoolean(juego.FreeToPlay);
		}

		if (string.IsNullOrEmpty(juego.MayorEdad) == false)
		{
			textoEdad = Convert.ToBoolean(juego.MayorEdad);
		}

		tipo = juego.Tipo.ToString();

		var tipos = global::Juegos.JuegoTipos.CargarListado();

		int i = 0;
		foreach (var tipo2 in tipos)
		{
			if (tipo2.ToString() == tipo)
			{
				tipo = i.ToString();
				break;
			}
			i += 1;
		}

		if (juego.UsuariosInteresados != null)
		{
			textoDeseados = JsonConvert.SerializeObject(juego.UsuariosInteresados);
		}

		if (juego.Historicos != null)
		{
			textoHistoricos = JsonConvert.SerializeObject(juego.Historicos);
		}
	}

	private int pestañaMostrar = 0;

	private void MostrarPestaña(MouseEventArgs e, int pestaña)
	{
		pestañaMostrar = pestaña;
	}

	#region Imagenes

	private int pestañaMostrarImagenes = 0;
	private string imagenOrigen = string.Empty;

	private void MostrarPestañaImagenes(MouseEventArgs e, int pestañaImagenes)
	{
		pestañaMostrarImagenes = pestañaImagenes;

		if (pestañaMostrarImagenes == 1)
		{
			imagenOrigen = juego.Imagenes.Capsule_231x87;
		}
		else if (pestañaMostrarImagenes == 2)
		{
			imagenOrigen = juego.Imagenes.Header_460x215;
		}
		else if (pestañaMostrarImagenes == 3)
		{
			imagenOrigen = juego.Imagenes.Library_600x900;
		}
		else if (pestañaMostrarImagenes == 4)
		{
			imagenOrigen = juego.Imagenes.Library_1920x620;
		}
		else if (pestañaMostrarImagenes == 5)
		{
			imagenOrigen = juego.Imagenes.Logo;
		}
	}

	private void TextoCambiaImagenOrigen(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			imagenOrigen = nuevoTexto;

			if (pestañaMostrarImagenes == 1)
			{			
				juego.Imagenes.Capsule_231x87 = nuevoTexto;
			}
			else if (pestañaMostrarImagenes == 2)
			{
				juego.Imagenes.Header_460x215 = nuevoTexto;
			}
			else if (pestañaMostrarImagenes == 3)
			{
				juego.Imagenes.Library_600x900 = nuevoTexto;
			}
			else if (pestañaMostrarImagenes == 4)
			{
				juego.Imagenes.Library_1920x620 = nuevoTexto;
			}
			else if (pestañaMostrarImagenes == 5)
			{
				juego.Imagenes.Logo = nuevoTexto;
			}

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				BaseDatos.Juegos.Actualizar.Imagenes(juego, conexion);
			}
		}		
	}

	#endregion

	#region Precios

	private int pestañaMostrarPrecios = 0;
	private string textoPrecios = string.Empty;

	private void MostrarPestañaPrecios(MouseEventArgs e, int pestañaImagenes)
	{
		pestañaMostrarPrecios = pestañaImagenes;

		if (pestañaMostrarPrecios == 1)
		{
			if (juego.PrecioActualesTiendas != null)
			{
				textoPrecios = JsonConvert.SerializeObject(juego.PrecioActualesTiendas);
			}			
		}
		else if (pestañaMostrarPrecios == 2)
		{
			if (juego.PrecioMinimosHistoricos != null)
			{
				textoPrecios = JsonConvert.SerializeObject(juego.PrecioMinimosHistoricos);
			}			
		}
	}

	private void TextoCambiaPrecios(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			textoPrecios = nuevoTexto;

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				if (pestañaMostrarPrecios == 1)
				{
					juego.PrecioActualesTiendas = JsonConvert.DeserializeObject<List<global::Juegos.JuegoPrecio>>(textoPrecios);
					BaseDatos.Juegos.Actualizar.PreciosActuales(juego, conexion);
				}
				else if (pestañaMostrarPrecios == 2)
				{
					juego.PrecioMinimosHistoricos = JsonConvert.DeserializeObject<List<global::Juegos.JuegoPrecio>>(textoPrecios);
					BaseDatos.Juegos.Actualizar.PreciosHistoricos(juego, conexion);
				}				
			}
		}
	}

	#endregion

	#region Bundles

	private string textoBundles = string.Empty;

	private void TextoCambiaBundles(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			textoBundles = nuevoTexto;

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				juego.Bundles = JsonConvert.DeserializeObject<List<global::Juegos.JuegoBundle>>(textoBundles);
				BaseDatos.Juegos.Actualizar.Bundles(juego, conexion);
			}
		}
		else
		{
			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				juego.Bundles = null;
				BaseDatos.Juegos.Actualizar.Bundles(juego, conexion);
			}
		}
	}

	#endregion

	#region Gratis

	private string textoGratis = string.Empty;

	private void TextoCambiaGratis(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			textoGratis = nuevoTexto;

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				juego.Gratis = JsonConvert.DeserializeObject<List<global::Juegos.JuegoGratis>>(textoGratis);
				BaseDatos.Juegos.Actualizar.Gratis(juego, conexion);
			}
		}
		else
		{
			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				juego.Gratis = null;
				BaseDatos.Juegos.Actualizar.Gratis(juego, conexion);
			}
		}
	}

	#endregion

	#region Suscripciones

	private string textoSuscripciones = string.Empty;

	private void TextoCambiaSuscripciones(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			textoSuscripciones = nuevoTexto;

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				juego.Suscripciones = JsonConvert.DeserializeObject<List<global::Juegos.JuegoSuscripcion>>(textoSuscripciones);
				BaseDatos.Juegos.Actualizar.Suscripciones(juego, conexion);
			}
		}
		else
		{
			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				juego.Suscripciones = null;
				BaseDatos.Juegos.Actualizar.Suscripciones(juego, conexion);
			}
		}
	}

	#endregion

	#region Datos

	private string textoDlcMaestro = string.Empty;

	private async Task BuscarDlcMaestro()
	{
		global::Juegos.Juego nuevoJuego = await APIs.Steam.Juego.CargarDatosJuego(juego.IdSteam.ToString());

		if (nuevoJuego != null)
		{
			textoDlcMaestro = nuevoJuego.Maestro;

			if (string.IsNullOrEmpty(textoDlcMaestro) == false)
			{
				SqlConnection conexion = Herramientas.BaseDatos.Conectar();

				using (conexion)
				{
					juego.Maestro = textoDlcMaestro;
					BaseDatos.Juegos.Actualizar.DlcMaestro(juego, conexion);
				}
			}
		}
	}

	private void TextoCambiaDlcMaestro(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			textoDlcMaestro = nuevoTexto;

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				juego.Maestro = textoDlcMaestro;
				BaseDatos.Juegos.Actualizar.DlcMaestro(juego, conexion);
			}
		}
	}

	private bool textoF2P = false;

	private void TextoCambiaF2P(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			textoF2P = Convert.ToBoolean(nuevoTexto);

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				juego.FreeToPlay = textoF2P.ToString();
				BaseDatos.Juegos.Actualizar.FreeToPlay(juego, conexion);
			}
		}
	}

	private bool textoEdad = false;

	private void TextoCambiaEdad(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			textoEdad = Convert.ToBoolean(nuevoTexto);

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				juego.MayorEdad = textoEdad.ToString();
				BaseDatos.Juegos.Actualizar.MayorEdad(juego, conexion);
			}
		}
	}

	private async void TextoCambiaIdSteam(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString()) == false)
		{
			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				idSteam = APIs.Steam.Juego.LimpiarID(texto.Value.ToString());

				juego.IdSteam = int.Parse(idSteam);

				BaseDatos.Juegos.Actualizar.IdSteam(juego, conexion);

				await ActualizarMediaSteamApi();
			}
		}
	}

	private void TextoCambiaSlugGOG(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			slugGOG = nuevoTexto;

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				juego.SlugGOG = slugGOG;
				BaseDatos.Juegos.Actualizar.SlugGOG(juego, conexion);
			}
		}
	}

	private async Task ActualizarMediaSteamApi()
	{
		global::Juegos.Juego nuevoJuego = await APIs.Steam.Juego.CargarDatosJuego(juego.IdSteam.ToString());

		if (nuevoJuego != null)
		{
			BaseDatos.Juegos.Actualizar.Media(nuevoJuego, juego);
		}
	}

	private async Task ActualizarDeckSteamApi()
	{
		APIs.Steam.SteamDeckAPI deckAPI = await APIs.Steam.Juego.CargarDatosDeck(juego.IdSteam);
		bool vacio = true;

		if (deckAPI != null)
		{
			if (deckAPI.Datos != null)
			{
				if (deckAPI.Datos.Resultado != null)
				{
					juego.Deck = (JuegoDeck)int.Parse(deckAPI.Datos.Resultado.ToString());
					juego.DeckComprobacion = DateTime.Now;

					if (deckAPI.Datos.Tokens != null)
					{
						if (deckAPI.Datos.Tokens.Count > 0)
						{
							List<JuegoDeckToken> tokens = new List<JuegoDeckToken>();

							foreach (var token in deckAPI.Datos.Tokens)
							{
								if (string.IsNullOrEmpty(token.Token) == false)
								{
									JuegoDeckToken nuevoToken = new JuegoDeckToken();
									nuevoToken.Tipo = int.Parse(token.Tipo.ToString());
									nuevoToken.Mensaje = token.Token;

									tokens.Add(nuevoToken);
								}
							}

							juego.DeckTokens = tokens;
						}
					}

					vacio = false;
					global::BaseDatos.Juegos.Actualizar.Deck(juego);
				}
			}
		}

		if (vacio == true)
		{
			juego.DeckComprobacion = DateTime.Now;
			global::BaseDatos.Juegos.Actualizar.DeckVacio(juego);
		}
	}

	private string tipo = string.Empty;

	private void TextoCambiaTipo(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			tipo = nuevoTexto;

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				if (nuevoTexto == "0")
				{
					juego.Tipo = global::Juegos.JuegoTipo.Game;
				}
				else if (nuevoTexto == "1")
				{
					juego.Tipo = global::Juegos.JuegoTipo.DLC;
				}
				else if (nuevoTexto == "2")
				{
					juego.Tipo = global::Juegos.JuegoTipo.Bundle;
				}
				else if (nuevoTexto == "3")
				{
					juego.Tipo = global::Juegos.JuegoTipo.Music;
				}
				else if (nuevoTexto == "4")
				{
					juego.Tipo = global::Juegos.JuegoTipo.Software;
				}

				BaseDatos.Juegos.Actualizar.Tipo(juego, conexion);
			}
		}
	}

	#endregion

	#region Deseados

	private string textoDeseados = string.Empty;

	private void TextoCambiaDeseados(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			textoDeseados = nuevoTexto;

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				BaseDatos.Juegos.Actualizar.Deseados(juego, conexion);
			}
		}
	}

	#endregion

	#region Historicos

	private string textoHistoricos = string.Empty;

	private void TextoCambiaHistoricos(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			textoHistoricos = nuevoTexto;
			juego.Historicos = JsonConvert.DeserializeObject<List<global::Juegos.JuegoHistorico>>(textoHistoricos);

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				BaseDatos.Juegos.Actualizar.Historicos(juego, conexion);
			}
		}
	}

	#endregion
}
