@using Juegos
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.Data.SqlClient
@using Newtonsoft.Json
@using pepeizqs_deals_web.Areas.Identity.Data;

<div style="padding: 20px; background: var(--fondoCuerpo); margin-bottom: 50px;">
	<div style="margin-bottom: 20px;">
		Admin Editar • @juego.Nombre
	</div>

	<div style="display: flex; align-items: center;">
		<div style="width: auto;">
			<button @onclick="(e => MostrarPestaña(e, 1))" class="boton-pequeño" style="padding: 10px 15px;">
				Imagenes
			</button>
		</div>

		<div style="width: auto; margin-left: 20px;">
			<button @onclick="(e => MostrarPestaña(e, 2))" class="boton-pequeño" style="padding: 10px 15px;">
				Precios
			</button>
		</div>

		<div style="width: auto; margin-left: 20px;">
			<button @onclick="(e => MostrarPestaña(e, 3))" class="boton-pequeño" style="padding: 10px 15px;">
				Suscripciones
			</button>
		</div>

		<div style="width: auto; margin-left: 20px;">
			<a href="/api/@juego.Id" target="_blank" class="boton-pequeño" style="padding: 10px 15px;">
				Api
			</a>
		</div>

		@if (juego.Tipo == JuegoTipo.DLC)
		{
			<div style="width: auto; margin-left: 20px;">
				<button @onclick="(e => MostrarPestaña(e, 4))" class="boton-pequeño" style="padding: 10px 15px;">
					Dlc
				</button>
			</div>
		}

		<div style="width: auto; margin-left: 20px;">
			<button @onclick="(e => MostrarPestaña(e, 5))" class="boton-pequeño" style="padding: 10px 15px;">
				Datos
			</button>
		</div>
	</div>

	@if (pestañaMostrar > 0)
	{
		<hr />

		if (pestañaMostrar == 1)
		{
			<div style="display: flex; align-items: start;">
				<div style="width: 20%;">
					<button @onclick="(e => MostrarPestañaImagenes(e, 1))" class="boton-pequeño" style="padding: 10px 15px;">
						Capsule_231x87
					</button>

					<button @onclick="(e => MostrarPestañaImagenes(e, 2))" class="boton-pequeño" style="padding: 10px 15px; margin-top: 10px;">
						Header_460x215
					</button>

					<button @onclick="(e => MostrarPestañaImagenes(e, 3))" class="boton-pequeño" style="padding: 10px 15px; margin-top: 10px;">
						Library_600x900
					</button>

					<button @onclick="(e => MostrarPestañaImagenes(e, 4))" class="boton-pequeño" style="padding: 10px 15px; margin-top: 10px;">
						Library_1920x620
					</button>

					<button @onclick="(e => MostrarPestañaImagenes(e, 5))" class="boton-pequeño" style="padding: 10px 15px; margin-top: 10px;">
						Logo
					</button>

					<div style="margin-top: 20px; margin-left: 10px;">
						<a target="_blank" href="https://www.steamgriddb.com/search/grids?term=@juego.Nombre">
							Abrir SteamGridDB
						</a>
					</div>

				</div>

				<div style="width: 80%; padding: 5px 0px 5px 40px;">
					<label style="margin-bottom: 10px;">Imagen Origen:</label>

					<input type="text" @oninput="TextoCambiaImagenOrigen" class="entrada-texto" style="margin-bottom: 20px;" value="@imagenOrigen" />
					<img src="@imagenOrigen" style="max-width: 300px; max-height: 300px;" />
				</div>
			</div>
		}
		else if (pestañaMostrar == 2)
		{
			<div style="display: flex; align-items: start;">
				<div style="width: 20%;">
					<button @onclick="(e => MostrarPestañaPrecios(e, 1))" class="boton-pequeño" style="padding: 10px 15px;">
						Actuales
					</button>

					<button @onclick="(e => MostrarPestañaPrecios(e, 2))" class="boton-pequeño" style="padding: 10px 15px; margin-top: 10px;">
						Historicos
					</button>
				</div>

				<div style="width: 80%; padding: 5px 0px 5px 40px;">
					<textarea @onchange="(e => TextoCambiaPrecios(e))" class="entrada-texto" rows="16">@textoOrigenPrecios</textarea>
				</div>
			</div>
		}
		else if (pestañaMostrar == 3)
		{
			<textarea @onchange="(e => TextoCambiaSuscripciones(e))" class="entrada-texto" rows="16">@textoOrigenSuscripciones</textarea>
		}
		else if (pestañaMostrar == 4)
		{

		}
		else if (pestañaMostrar == 5)
		{
			@if (juego.Tipo == JuegoTipo.DLC)
			{
				<div style="display: flex; align-items: center; margin-top: 20px;">
					<div style="width: 20%; padding: 0px 30px; text-align: right;">
						<label>Maestro</label>
					</div>
					<div style="width: 10%;">
						<input type="text" @oninput="TextoCambiaDlcMaestro" class="entrada-texto" value="@textoDlcMaestro" />
					</div>
					<div style="width: 70%; padding: 0px 30px;">
						<button @onclick="(async () => await ActualizarDatosSteamApi())" class="boton-pequeño" style="padding: 10px 15px; width: auto;">
							Buscar
						</button>
					</div>
				</div>
			}

			<div style="display: flex; align-items: center; margin-top: 20px;">
				<div style="width: 20%; padding: 0px 30px; text-align: right;">
					<label>FreeToPlay</label>
				</div>
				<div style="width: 10%;">
					<input type="text" @oninput="TextoCambiaF2P" class="entrada-texto" value="@textoF2P" />
				</div>
				<div style="width: 70%; padding: 0px 30px;">
					<label>(true si es F2P)</label>
				</div>
			</div>

			<div style="display: flex; align-items: center; margin-top: 20px;">
				<div style="width: 20%; padding: 0px 30px; text-align: right;">
					<label>Datos Steam API</label>
				</div>
				<div style="width: 10%;">
					<input type="text" @oninput="TextoCambiaIdSteam" class="entrada-texto" value="@idSteam" />
				</div>
				<div style="width: 70%; padding: 0px 30px;">
					<button @onclick="(async () => await ActualizarDatosSteamApi())" class="boton-pequeño" style="padding: 10px 15px; width: auto;">
						Actualizar
					</button>
				</div>
			</div>

			<div style="display: flex; align-items: center; margin-top: 20px;">
				<div style="width: 20%; padding: 0px 30px; text-align: right;">
					<label>Tipo</label>
				</div>
				<div style="width: 10%;">
					<input type="text" @oninput="TextoCambiaTipo" class="entrada-texto" value="@tipo" />
				</div>
				<div style="width: 70%; padding: 0px 30px;">
					<label>(0 juego, 1 dlc, 2 bundle, 3 musica, 4 software)</label>
				</div>
			</div>
		}
	}
</div>

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string dominio { get; set; }

	[Parameter]
	public Juegos.Juego juego { get; set; }

	private string idSteam = string.Empty;

	protected override void OnInitialized()
	{
		if (juego.Suscripciones != null)
		{
			textoOrigenSuscripciones = JsonConvert.SerializeObject(juego.Suscripciones);
		}

		if (juego.Tipo == JuegoTipo.DLC)
		{
			textoDlcMaestro = juego.Maestro;
		}

		if (juego.IdSteam > 0)
		{
			idSteam = juego.IdSteam.ToString();
		}	

		if (string.IsNullOrEmpty(juego.FreeToPlay) == false)
		{
			textoF2P = juego.FreeToPlay;
		}

		tipo = juego.Tipo.ToString();

		var tipos = JuegoTipos.CargarListado();

		int i = 0;
		foreach (var tipo2 in tipos)
		{
			if (tipo2.ToString() == tipo)
			{
				tipo = i.ToString();
				break;
			}
			i += 1;
		}
	}

	private int pestañaMostrar = 0;

	private void MostrarPestaña(MouseEventArgs e, int pestaña)
	{
		pestañaMostrar = pestaña;
	}

	#region Imagenes

	private int pestañaMostrarImagenes = 0;
	private string imagenOrigen = string.Empty;

	private void MostrarPestañaImagenes(MouseEventArgs e, int pestañaImagenes)
	{
		pestañaMostrarImagenes = pestañaImagenes;

		if (pestañaMostrarImagenes == 1)
		{
			imagenOrigen = juego.Imagenes.Capsule_231x87;
		}
		else if (pestañaMostrarImagenes == 2)
		{
			imagenOrigen = juego.Imagenes.Header_460x215;
		}
		else if (pestañaMostrarImagenes == 3)
		{
			imagenOrigen = juego.Imagenes.Library_600x900;
		}
		else if (pestañaMostrarImagenes == 4)
		{
			imagenOrigen = juego.Imagenes.Library_1920x620;
		}
		else if (pestañaMostrarImagenes == 5)
		{
			imagenOrigen = juego.Imagenes.Logo;
		}
	}

	private async void TextoCambiaImagenOrigen(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			imagenOrigen = nuevoTexto;

			if (pestañaMostrarImagenes == 1)
			{			
				juego.Imagenes.Capsule_231x87 = nuevoTexto;
				await Herramientas.Imagenes.DescargarYGuardar(juego.Imagenes.Capsule_231x87, "juegos", juego.Id.ToString(), "capsule_231x87", dominio);
			}
			else if (pestañaMostrarImagenes == 2)
			{
				juego.Imagenes.Header_460x215 = nuevoTexto;
				await Herramientas.Imagenes.DescargarYGuardar(juego.Imagenes.Header_460x215, "juegos", juego.Id.ToString(), "header_460x215", dominio);
			}
			else if (pestañaMostrarImagenes == 3)
			{
				juego.Imagenes.Library_600x900 = nuevoTexto;
				await Herramientas.Imagenes.DescargarYGuardar(juego.Imagenes.Library_600x900, "juegos", juego.Id.ToString(), "library_600x900", dominio);
			}
			else if (pestañaMostrarImagenes == 4)
			{
				juego.Imagenes.Library_1920x620 = nuevoTexto;
				await Herramientas.Imagenes.DescargarYGuardar(juego.Imagenes.Library_1920x620, "juegos", juego.Id.ToString(), "library_1920x620", dominio);
			}
			else if (pestañaMostrarImagenes == 5)
			{
				juego.Imagenes.Logo = nuevoTexto;
				await Herramientas.Imagenes.DescargarYGuardar(juego.Imagenes.Logo, "juegos", juego.Id.ToString(), "logo", dominio);
			}

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				BaseDatos.Juegos.Actualizar.Imagenes(juego, conexion);
			}
		}		
	}

	#endregion

	#region Precios

	private int pestañaMostrarPrecios = 0;
	private string textoOrigenPrecios = string.Empty;

	private void MostrarPestañaPrecios(MouseEventArgs e, int pestañaImagenes)
	{
		pestañaMostrarPrecios = pestañaImagenes;

		if (pestañaMostrarPrecios == 1)
		{
			textoOrigenPrecios = JsonConvert.SerializeObject(juego.PrecioActualesTiendas);
		}
		else if (pestañaMostrarPrecios == 2)
		{
			textoOrigenPrecios = JsonConvert.SerializeObject(juego.PrecioMinimosHistoricos);
		}
	}

	private void TextoCambiaPrecios(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			textoOrigenPrecios = nuevoTexto;

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				if (pestañaMostrarPrecios == 1)
				{
					juego.PrecioActualesTiendas = JsonConvert.DeserializeObject<List<JuegoPrecio>>(textoOrigenPrecios);
					BaseDatos.Juegos.Actualizar.PreciosActuales(juego, conexion);
				}
				else if (pestañaMostrarPrecios == 2)
				{
					juego.PrecioMinimosHistoricos = JsonConvert.DeserializeObject<List<JuegoPrecio>>(textoOrigenPrecios);
					BaseDatos.Juegos.Actualizar.PreciosHistoricos(juego, conexion);
				}				
			}
		}
	}

	#endregion

	#region Suscripciones

	private string textoOrigenSuscripciones = string.Empty;

	private void TextoCambiaSuscripciones(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			textoOrigenSuscripciones = nuevoTexto;

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				juego.Suscripciones = JsonConvert.DeserializeObject<List<JuegoSuscripcion>>(textoOrigenSuscripciones);
				BaseDatos.Juegos.Actualizar.Suscripciones(juego, conexion);
			}
		}
	}

	#endregion

	#region Dlc

	private string textoDlcMaestro = string.Empty;

	private async Task BuscarDlcMaestro()
	{
		Juegos.Juego nuevoJuego = await APIs.Steam.Juego.CargarDatos(juego.IdSteam.ToString());

		if (nuevoJuego != null)
		{
			textoDlcMaestro = nuevoJuego.Maestro;

			if (string.IsNullOrEmpty(textoDlcMaestro) == false)
			{
				SqlConnection conexion = Herramientas.BaseDatos.Conectar();

				using (conexion)
				{
					juego.Maestro = textoDlcMaestro;
					BaseDatos.Juegos.Actualizar.DlcMaestro(juego, conexion);
				}
			}
		}
	}

	private void TextoCambiaDlcMaestro(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			textoDlcMaestro = nuevoTexto;

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				juego.Maestro = textoDlcMaestro;
				BaseDatos.Juegos.Actualizar.DlcMaestro(juego, conexion);
			}
		}
	}

	#endregion

	#region Datos

	private string textoF2P = string.Empty;

	private void TextoCambiaF2P(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			textoF2P = nuevoTexto;

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				juego.FreeToPlay = textoF2P;
				BaseDatos.Juegos.Actualizar.FreeToPlay(juego, conexion);
			}
		}
	}

	private async void TextoCambiaIdSteam(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString()) == false)
		{
			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				idSteam = APIs.Steam.Juego.LimpiarID(texto.Value.ToString());

				juego.IdSteam = int.Parse(idSteam);

				BaseDatos.Juegos.Actualizar.IdSteam(juego, conexion);

				await ActualizarDatosSteamApi();
			}
		}
	}

	private async Task ActualizarDatosSteamApi()
	{
		Juegos.Juego nuevoJuego = await APIs.Steam.Juego.CargarDatos(juego.IdSteam.ToString());

		if (nuevoJuego != null)
		{
			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				juego.Nombre = nuevoJuego.Nombre;
				juego.Imagenes = nuevoJuego.Imagenes;
				juego.Caracteristicas = nuevoJuego.Caracteristicas;
				juego.Media = nuevoJuego.Media;

				BaseDatos.Juegos.Actualizar.Media(juego, conexion);
			}
		}
	}

	private string tipo = string.Empty;

	private void TextoCambiaTipo(ChangeEventArgs texto)
	{
		if (string.IsNullOrEmpty(texto.Value.ToString().Trim()) == false)
		{
			string nuevoTexto = texto.Value.ToString().Trim();

			tipo = nuevoTexto;

			SqlConnection conexion = Herramientas.BaseDatos.Conectar();

			using (conexion)
			{
				if (nuevoTexto == "0")
				{
					juego.Tipo = JuegoTipo.Game;
				}
				else if (nuevoTexto == "1")
				{
					juego.Tipo = JuegoTipo.DLC;
				}
				else if (nuevoTexto == "2")
				{
					juego.Tipo = JuegoTipo.Bundle;
				}
				else if (nuevoTexto == "3")
				{
					juego.Tipo = JuegoTipo.Music;
				}
				else if (nuevoTexto == "4")
				{
					juego.Tipo = JuegoTipo.Software;
				}

				BaseDatos.Juegos.Actualizar.Tipo(juego, conexion);
			}
		}
	}

	#endregion
}
