@page "/bundle/{id:int}/{nombre?}"

@model pepeizqs_deals_web.Pages.BundleModel

@using Herramientas
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using pepeizqs_deals_web.Areas.Identity.Data

@inject SignInManager<Usuario> SignInManager
@inject UserManager<Usuario> UserManager

@{
	#nullable disable

	string titulo = Model.bundle.NombreBundle + " • " + Model.bundle.NombreTienda;

	ViewData["Title"] = titulo;
	Layout = "/Pages/Shared/_Layout.cshtml";

	bool usuarioLogeado = SignInManager.IsSignedIn(User);
	Usuario usuario = new Usuario();

	bool adminLogeado = false;

	if (usuarioLogeado == true)
	{
		usuario = await UserManager.GetUserAsync(User);

		if (global::BaseDatos.Usuarios.Buscar.RolDios(usuario.UserName) == true)
		{
			adminLogeado = true;
		}
	}

	string enlace = "https://pepeizqdeals.com/bundle/" + Model.bundle.Id.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(Model.bundle.NombreBundle) + "/";

	string descripcion = string.Empty;

	if (Model.bundle.Tiers != null)
	{
		string precio = Model.bundle.Tiers[0].Precio.ToString();
		precio = precio.Replace(".", ",");
		precio = precio.Trim() + "€";

		if (Model.bundle.Pick == false)
		{
			descripcion = Herramientas.Idiomas.CogerCadena(Model.idioma, "Bundles.String22") + " " + precio;
		}
		else
		{
			descripcion = Herramientas.Idiomas.CogerCadena(Model.idioma, "Bundles.String23") + " " + precio;
		}		
	}

	string imagen = string.Empty;

	if (string.IsNullOrEmpty(Model.bundle.ImagenNoticia) == false)
	{
		if (Model.bundle.ImagenNoticia.Contains("https://") == true)
		{
			imagen = Model.bundle.ImagenNoticia;
		}
	}
}

@(await Html.RenderComponentAsync<Componentes.Secciones.Seo>(RenderMode.ServerPrerendered, new
{
	idioma = Model.idioma,
	titulo = titulo,
	enlace = enlace,
	canonical = enlace,
	descripcion = descripcion,
	imagen = imagen
}))

@if (usuarioLogeado == true)
{
	if (adminLogeado == true)
	{
		@(await Html.RenderComponentAsync<Componentes.Admin.Bundle>(RenderMode.Server, new { 
			idioma = Model.idioma, 
			bundleId = Model.bundle.Id 
		}))
	}
}

@(await Html.RenderComponentAsync<Componentes.Secciones.Bundle>(RenderMode.ServerPrerendered, new { 
	idioma = Model.idioma, 
	bundleId = Model.bundle.Id, 
	modulo = false 
}))