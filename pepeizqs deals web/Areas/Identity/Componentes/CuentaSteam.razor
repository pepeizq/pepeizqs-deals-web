@using APIs.Steam;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity;
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

@if (usuario.EmailConfirmed == true)
{
	<div style="margin-top: 10px;">
		<input class="entrada-texto" placeholder="@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String45")" value="@usuario.SteamAccount" @oninput="TextoCambiaSteamCuenta" />

		<div style="display: flex; margin-top: 15px; margin-left: 10px;">
			<div style="width: 6%; padding: 10px;">
				<i class="fa-solid fa-circle-info" style="font-size: 30px;"></i>
			</div>

			<div style="width: 94%;">
				<label class="texto-info-entrada">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String46")</label>

				<button @onclick="ClickearEnseñarImagen" class="btn btn-link" style="outline: none; border: 0; padding-left: 10px; color: var(--colorTextoOscuro);">
					@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String47")
				</button>

				@if (enseñarImagen == true)
				{
					<img src="/imagenes/otros/permisos.jpg" style="margin: 10px;"/>
				}
			</div>
		</div>
	</div>

	@if (usuario.Nickname != null || usuario.SteamGames != null || usuario.SteamWishlist != null || usuario.OfficialGroup != null)
	{
		<hr style="margin-top: 20px; margin-bottom: 20px;" />

		<div class="perfil-flexible-centrado">
			@if (usuario.Avatar != null)
			{
				<div style="width: 10%; padding: 10px;">
					<img src="@usuario.Avatar" style="max-width: 70px; max-height: 70px;" />
				</div>
			}

			<div style="width: 90%;">
				@if (usuario.Nickname != null)
				{
					<div>
						<label class="texto-info-entrada">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String48") @usuario.Nickname</label>
					</div>
				}

				@if (usuario.SteamGames != null)
				{
					<div>
						<label class="texto-info-entrada">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String49") @MensajeCantidad(usuario.SteamGames)</label>
					</div>
				}

				@if (usuario.SteamWishlist != null)
				{
					<div>
						<label class="texto-info-entrada">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String50") @MensajeCantidad(usuario.SteamWishlist)</label>
					</div>
				}

				@if (usuario.OfficialGroup != null)
				{
					@if (usuario.OfficialGroup == "True")
					{
						<div>
							<i class="fa-solid fa-check texto-info-entrada"></i> <label class="texto-info-entrada">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String51")</label>
						</div>
					}
					else
					{
						<div>
							<i class="fa-solid fa-xmark texto-info-entrada"></i> <label class="texto-info-entrada">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String52")</label>
						</div>
					}
				}
			</div>
		</div>
	}
}
else
{
	<div style="margin-top: 10px;">
		<div class="alert alert-danger alert-dismissible" style="margin-bottom: 0px; margin-top: 20px;" role="alert">
			@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String44")
		</div>
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	private Usuario usuario = new Usuario();

	private bool enseñarImagen = false;

	protected override void OnInitialized()
	{
		usuario = UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User).Result;
	}

	private async void TextoCambiaSteamCuenta(ChangeEventArgs texto)
	{
		bool tiempo = true;

		if (usuario.SteamAccountLastCheck != null)
		{
			if (Convert.ToDateTime(usuario.SteamAccountLastCheck) + TimeSpan.FromDays(7) > DateTime.Now)
			{
				tiempo = false;
			}
		}

		if (tiempo == true)
		{
			if (texto.Value.ToString().Trim().Length > 1)
			{
				string enlace = texto.Value.ToString().Trim();

				if (enlace.Contains("https://steamcommunity.com/id/") == true || enlace.Contains("https://steamcommunity.com/profiles/") == true)
				{
					SteamUsuario datos = await Cuenta.CargarDatos(usuario.SteamAccount);

					usuario.SteamGames = datos.Juegos;
					usuario.SteamWishlist = datos.Deseados;
					usuario.Avatar = datos.Avatar;
					usuario.Nickname = datos.Nombre;
					usuario.SteamAccountLastCheck = DateTime.Now.ToString();
					usuario.OfficialGroup = datos.GrupoOficial;

					await UserManager.UpdateAsync(usuario);
				}
			}
		}
	}

	private string MensajeCantidad(string datos)
	{
		if (datos != null)
		{
			string juegos = datos;

			int i = 0;
			int j = 100000;

			while (i < j)
			{
				if (juegos.Contains(",") == true)
				{
					int int1 = juegos.IndexOf(",");
					juegos = juegos.Remove(0, int1 + 1);
				}
				else
				{
					break;
				}

				i += 1;
			}

			if (i > 0)
			{
				return i.ToString();
			}
		}

		return null;
	}

	private void ClickearEnseñarImagen()
	{
		if (enseñarImagen == true)
		{
			enseñarImagen = false;
		}
		else
		{
			enseñarImagen = true;
		}
	}
}
