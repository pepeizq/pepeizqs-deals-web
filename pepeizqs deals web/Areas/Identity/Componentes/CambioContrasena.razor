@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity;
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

@if (usuario != null)
{
    <div class="row" style="margin-top: 10px;">
        <div style="margin-bottom: 20px;">
            <label class="texto-info-entrada">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String18")</label>
            <input value="@contraseñaActual" @onchange="@(e => CambiarActualContraseña(e))" type="password" class="entrada-texto" autocomplete="current-password" aria-required="true" placeholder="@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String21")" />         
        </div>

        <div style="margin-bottom: 20px;">
            <label class="texto-info-entrada">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String19")</label>
            <input value="@contraseñaNueva1" @onchange="@(e => CambiarNuevaContraseña1(e))" type="password" class="entrada-texto" autocomplete="new-password" aria-required="true" placeholder="@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String22")" />

            @if (string.IsNullOrEmpty(@mensajeAviso1) == false)
            {
                <div class="alert alert-danger alert-dismissible" style="margin-bottom: 0px; margin-top: 20px;" role="alert">
                    @mensajeAviso1
                </div>
            }
        </div>

        <div style="margin-bottom: 20px;">
            <label class="texto-info-entrada">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String20")</label>
            <input value="@contraseñaNueva2" @onchange="@(e => CambiarNuevaContraseña2(e))" type="password" class="entrada-texto" autocomplete="new-password" aria-required="true" placeholder="@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String23")" />

            @if (string.IsNullOrEmpty(@mensajeAviso2) == false)
            {
                <div class="alert alert-danger alert-dismissible" style="margin-bottom: 0px; margin-top: 20px;" role="alert">
                    @mensajeAviso2
                </div>
            }
        </div>

        <div style="display: flex; flex-direction: column;">
            <div class="perfil-flexible-izquierda">
                <button @onclick="ClickearCambiarContraseña" class="boton" style="font-size: 18px;">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String24")</button>
            </div>

            @if (string.IsNullOrEmpty(@mensajeExito) == false)
            {
                <div class="alert alert-success alert-dismissible" style="margin-bottom: 0px; margin-top: 20px;" role="alert">
                    @mensajeExito
                </div>
            }

            @if (string.IsNullOrEmpty(@mensajeError) == false)
            {
                <div class="alert alert-danger alert-dismissible" style="margin-bottom: 0px; margin-top: 20px;" role="alert">
                    @mensajeError
                </div>
            }
        </div>
    </div>
}

@code {

    #nullable disable

    [Parameter]
    public string idioma { get; set; }

    private Usuario usuario = new Usuario();

    private string contraseñaActual = string.Empty;
    private string contraseñaNueva1 = string.Empty;
    private string contraseñaNueva2 = string.Empty;

    private string mensajeAviso1 = string.Empty;
    private string mensajeAviso2 = string.Empty;

    private string mensajeExito = string.Empty;
    private string mensajeError = string.Empty;

    protected override void OnInitialized()
    {
        usuario = UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User).Result;
    }

    private void CambiarActualContraseña(ChangeEventArgs texto)
    {
        contraseñaActual = texto.Value.ToString();
    }

    private void CambiarNuevaContraseña1(ChangeEventArgs texto)
    {
        contraseñaNueva1 = texto.Value.ToString();

        if (contraseñaNueva1.Length > 0 && contraseñaNueva1.Length < 6)
        {
            mensajeAviso1 = Herramientas.Idiomas.CogerCadena(idioma, "Settings.String25");
        }
        else if (contraseñaNueva1.Length > 5)
        {
            if (contraseñaNueva1.Any(char.IsDigit) == false)
            {
                mensajeAviso1 = Herramientas.Idiomas.CogerCadena(idioma, "Settings.String26");
            }
            else if (contraseñaNueva1.Any(char.IsUpper) == false)
            {
                mensajeAviso1 = Herramientas.Idiomas.CogerCadena(idioma, "Settings.String30");
            }
            else if (contraseñaNueva1.Any(char.IsLetterOrDigit) == false)
            {
                mensajeAviso1 = Herramientas.Idiomas.CogerCadena(idioma, "Settings.String31");
            }
            else
            {
                mensajeAviso1 = null;
            }
        }
        else
        {
            mensajeAviso1 = null;
        }

        if (contraseñaNueva2.Length > 0)
        {
            if (contraseñaNueva1 == contraseñaNueva2)
            {
                mensajeAviso2 = null;
            }
        }
    }

    private void CambiarNuevaContraseña2(ChangeEventArgs texto)
    {
        contraseñaNueva2 = texto.Value.ToString();

        if (contraseñaNueva1.Length > 5)
        {
            if (contraseñaNueva1 == contraseñaNueva2)
            {
                mensajeAviso2 = null;
            }
            else
            {
                mensajeAviso2 = Herramientas.Idiomas.CogerCadena(idioma, "Settings.String27");
            }
        }
        else
        {
            mensajeAviso2 = null;
        }
    }

    private async void ClickearCambiarContraseña()
    {
        mensajeExito = null;
        mensajeError = null;

        if (contraseñaNueva1.Length > 5 && contraseñaNueva2.Length > 5 && string.IsNullOrEmpty(mensajeAviso1) == true && string.IsNullOrEmpty(mensajeAviso2) == true)
        {
            bool resultado1 = await UserManager.CheckPasswordAsync(usuario, contraseñaActual);

            if (resultado1 == false)
            {
                mensajeError = Herramientas.Idiomas.CogerCadena(idioma, "Settings.String32");
            }
            else
            {
                IdentityResult resultado2 = UserManager.ChangePasswordAsync(usuario, contraseñaActual, contraseñaNueva1).Result;

                if (resultado2.Succeeded == true)
                {
                    mensajeExito = Herramientas.Idiomas.CogerCadena(idioma, "Settings.String28");
                    Herramientas.Correos.EnviarCambioContraseña(usuario.Email);
                }
                else
                {
                    mensajeError = Herramientas.Idiomas.CogerCadena(idioma, "Settings.String29");

                    foreach (var error in resultado2.Errors)
                    {
                        mensajeError = error.Description;
                    }
                }
            }           
        }
    }
}
