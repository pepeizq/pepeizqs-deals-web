@using APIs.Steam
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.Data.SqlClient
@using pepeizqs_deals_web.Areas.Identity.Data;

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

@if (usuario != null)
{
	<div style="margin-top: 10px;">
		@if (string.IsNullOrEmpty(usuario.SteamAccount) == false)
		{
			@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String88")

			<hr style="margin-top: 20px; margin-bottom: 20px;" />

			<button class="boton-pequeño" style="padding: 10px 15px; max-width: 250px;" @onclick="@(e => ActualizarDatos(e))" disabled="@desactivar">
				@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String63")
			</button>

			<div>
				<hr style="margin-top: 20px; margin-bottom: 20px;" />

				<div style="font-size: 20px; margin-bottom: 10px;">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String65")</div>

				@if (Condicion1() == true)
				{
					<div style="display: flex; align-items: center; margin-top: 15px;">
						<i class="fa-solid fa-check" style="width: 20px;"></i> <label style="margin-left: 10px;">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String67")</label>
					</div>
				}
				else
				{
					<div style="display: flex; align-items: center; margin-top: 15px;">
						<i class="fa-solid fa-xmark" style="width: 20px;"></i> <label style="margin-left: 10px;">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String68")</label>
					</div>
				}

				@if (Condicion2() == true)
				{
					<div style="display: flex; align-items: center; margin-top: 15px;">
						<i class="fa-solid fa-check" style="width: 20px;"></i> <label style="margin-left: 10px;">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String69")</label>
					</div>
				}
				else
				{
					<div style="display: flex; align-items: center; margin-top: 15px;">
						<i class="fa-solid fa-xmark" style="width: 20px; margin-right: 10px;"></i> <a href="/Identity/Account/Manage/SteamAccount">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String70")</a>
					</div>
				}

				@if (Condicion3() == true)
				{
					<div style="display: flex; align-items: center; margin-top: 15px;">
						<i class="fa-solid fa-check" style="width: 20px;"></i> <label style="margin-left: 10px;">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String71")</label>
					</div>
				}
				else
				{
					<div style="display: flex; align-items: center; margin-top: 15px;">
						<i class="fa-solid fa-xmark" style="width: 20px; margin-right: 10px;"></i> <a href="https://steamcommunity.com/groups/pepeizqdeals" target="_blank">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String72")</a>
					</div>
				}

				@if (Condicion1() == true && Condicion2() == true && Condicion3() == true)
				{
					<div style="display: flex; align-items: center; margin-top: 15px;">
						@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String89")
					</div>
				}
			</div>

			<div>
				<hr style="margin-top: 20px; margin-bottom: 20px;" />

				<div style="font-size: 20px; margin-bottom: 10px;">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String66")</div>

				@if (Condicion1() == true)
				{
					<div style="display: flex; align-items: center; margin-top: 15px;">
						<i class="fa-solid fa-check" style="width: 20px;"></i> <label style="margin-left: 10px;">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String67")</label>
					</div>
				}
				else
				{
					<div style="display: flex; align-items: center; margin-top: 15px;">
						<i class="fa-solid fa-xmark" style="width: 20px;"></i> <label style="margin-left: 10px;">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String68")</label>
					</div>
				}

				@if (Condicion2() == true)
				{
					<div style="display: flex; align-items: center; margin-top: 15px;">
						<i class="fa-solid fa-check" style="width: 20px;"></i> <label style="margin-left: 10px;">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String69")</label>
					</div>
				}
				else
				{
					<div style="display: flex; align-items: center; margin-top: 15px;">
						<i class="fa-solid fa-xmark" style="width: 20px; margin-right: 10px;"></i> <a href="/Identity/Account/Manage/SteamAccount">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String70")</a>
					</div>
				}

				@if (Condicion4() == true)
				{
					<div style="display: flex; align-items: center; margin-top: 15px;">
						<i class="fa-solid fa-check" style="width: 20px;"></i> <label style="margin-left: 10px;">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String73")</label>
					</div>
				}
				else
				{
					<div style="display: flex; align-items: center; margin-top: 15px;">
						<i class="fa-solid fa-xmark" style="width: 20px;"></i> <label style="margin-left: 10px;">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String74")</label>
					</div>

					<div style="display: flex; align-items: center; margin-top: 15px;">
						<i class="fa-solid fa-xmark" style="width: 20px;"></i> <label style="margin-left: 10px;">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String74")</label>
					</div>

					<div style="margin-left: 30px; margin-top: 15px; display: inline-block;">
						<a href="https://steamcommunity.com/groups/pepeizqdeals2" target="_blank">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String75")</a>@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String76")
					</div>

					<div style="margin-left: 30px; margin-top: 15px;">
						@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String77")
						<ul>
							<li><a @onclick="@(e => AbrirCerrarSolicitud(e))" style="color: #95c0fe; text-decoration: underline; cursor: pointer;">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String78")</a>. @Herramientas.Idiomas.CogerCadena(idioma, "Settings.String79")</li>

							@if (solicitudMostrar == false)
							{
								<li style="margin-top: 10px;">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String80")</li>
							}
						</ul>
					</div>

					@if (solicitudMostrar == true && solicitudPendiente == false)
					{
						<div style="margin-left: 60px; margin-top: 15px;">
							@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String81")
							<input class="entrada-texto" style="margin-top: 10px; margin-bottom: 15px;" placeholder="@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String82")" value="@solicitudBundle" @oninput="TextoCambiaSolicitudBundle" />

							@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String83")
							<input class="entrada-texto" style="margin-top: 10px; margin-bottom: 15px;" placeholder="@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String84")" value="@solicitudCantidad" @oninput="TextoCambiaSolicitudCantidad" />

							@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String85")
							<input type="datetime-local" @onchange="@(e => CambiarFechaSolicitud(e))" class="entrada-texto" style="width: 33%; min-width: 100px; margin-top: 10px; margin-bottom: 15px" value="@solicitudFecha">

							<button class="boton-pequeño" style="padding: 10px 15px; max-width: 250px;" @onclick="@(e => EnviarSolicitud(e))">
								@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String86")
							</button>

							<a href="/imagenes/otros/donacionhumble.png" target="_blank" style="text-decoration: none; margin-top: 15px;">@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String92")</a>
						</div>
					}

					@if (solicitudPendiente == true)
					{
						<div style="margin-left: 60px; margin-top: 15px;">
							@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String87")
						</div>
					}
				}

				@if (Condicion1() == true && Condicion2() == true && Condicion4() == true)
				{
					<div style="display: flex; align-items: center; margin-top: 15px;">
						@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String90")
					</div>
				}
			</div>
		}
		else
		{
			@Herramientas.Idiomas.CogerCadena(idioma, "Settings.String91")
		}
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	private Usuario usuario = new Usuario();

	private bool desactivar = false;

	SqlConnection conexion = new SqlConnection();

	protected override void OnInitialized()
	{
		usuario = UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User).Result;

		if (usuario != null)
		{
			if (conexion.State != System.Data.ConnectionState.Open)
			{
				conexion = Herramientas.BaseDatos.Conectar();
			}

			using (conexion)
			{
				solicitudPendiente = BaseDatos.Usuarios.Solicitud.ComprobarEstadoUsuario(usuario.Id, conexion);
			}			
		}		
	}

	private async Task ActualizarDatos(MouseEventArgs e)
	{
		await ActualizarDatosCuenta();
	}

	private async Task ActualizarDatosCuenta()
	{
		desactivar = true;

		if (usuario.SteamAccount.Contains("https://steamcommunity.com/id/") == true || usuario.SteamAccount.Contains("https://steamcommunity.com/profiles/") == true)
		{
			SteamUsuario datos = await Cuenta.CargarDatos(usuario.SteamAccount);

			if (datos != null)
			{
				usuario.SteamGames = datos.Juegos;
				usuario.SteamWishlist = datos.Deseados;
				usuario.Avatar = datos.Avatar;
				usuario.Nickname = datos.Nombre;
				usuario.SteamAccountLastCheck = DateTime.Now.ToString();
				usuario.OfficialGroup = datos.GrupoPremium;
				usuario.OfficialGroup2 = datos.GrupoNormal;
				usuario.SteamId = datos.SteamId;

				await UserManager.UpdateAsync(usuario);
			}
		}

		desactivar = false;
	}

	//Cantidad Juegos
	private bool Condicion1()
	{
		bool cumple = false;

		if (string.IsNullOrEmpty(usuario.SteamGames) == false)
		{
			string juegos = usuario.SteamGames;

			int i = 0;
			int j = 100000;

			while (i < j)
			{
				if (juegos.Contains(",") == true)
				{
					int int1 = juegos.IndexOf(",");
					juegos = juegos.Remove(0, int1 + 1);
				}
				else
				{
					break;
				}

				i += 1;
			}

			if (i >= 50)
			{
				cumple = true;
			}
		}

		return cumple;
	}

	//Ultima Comprobación
	private bool Condicion2()
	{
		bool cumple = false;

		if (string.IsNullOrEmpty(usuario.SteamAccountLastCheck) == false)
		{
			if (Convert.ToDateTime(usuario.SteamAccountLastCheck) + TimeSpan.FromDays(7) > DateTime.Now)
			{
				cumple = true;
			}
		}

		return cumple;
	}

	//Grupo Básico
	private bool Condicion3()
	{
		bool cumple = false;

		if (string.IsNullOrEmpty(usuario.OfficialGroup2) == false)
		{
			if (usuario.OfficialGroup2 == "True")
			{
				cumple = true;
			}
		}

		return cumple;
	}

	//Grupo Premium
	private bool Condicion4()
	{
		bool cumple = false;

		if (string.IsNullOrEmpty(usuario.OfficialGroup) == false)
		{
			if (usuario.OfficialGroup == "True")
			{
				cumple = true;
			}
		}

		return cumple;
	}

	#region Solicitud Humble

	private bool solicitudMostrar = false;
	private bool solicitudPendiente = false;
	private string solicitudBundle = string.Empty;
	private string solicitudCantidad = string.Empty;
	private string solicitudFecha = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");

	private void AbrirCerrarSolicitud(MouseEventArgs e)
	{
		if (solicitudMostrar == false)
		{
			solicitudMostrar = true;
		}
		else
		{
			solicitudMostrar = false;
		}
	}

	private void TextoCambiaSolicitudBundle(ChangeEventArgs texto)
	{
		solicitudBundle = texto.Value.ToString();
	}

	private void TextoCambiaSolicitudCantidad(ChangeEventArgs texto)
	{
		solicitudCantidad = texto.Value.ToString();
	}

	private void CambiarFechaSolicitud(ChangeEventArgs texto)
	{
		solicitudFecha = texto.Value.ToString();
	}

	private void EnviarSolicitud(MouseEventArgs e)
	{
		solicitudMostrar = false;

		if (conexion.State != System.Data.ConnectionState.Open)
		{
			conexion = Herramientas.BaseDatos.Conectar();
		}

		using (conexion)
		{
			BaseDatos.Usuarios.Solicitud.Insertar(usuario.Id, usuario.Email, usuario.SteamAccount, usuario.Avatar, usuario.Nickname, solicitudBundle, solicitudCantidad, solicitudFecha, conexion);
		}

		solicitudPendiente = true;
	}

	#endregion
}
